interface EndpointTypes {
    req?: unknown;
    res?: unknown;
    queries?: unknown;
}
type Method<T extends Record<string, EndpointTypes> = {}> = T;
interface BaseFetcherOptions {
    params?: undefined | {};
    body?: undefined | {};
    queries?: undefined | {};
    method?: string;
}
type Fetcher<Options extends Object> = (url: string, options?: Options) => Promise<unknown>;
interface Routes {
    GET: Method;
    POST: Method;
    DELETE: Record<string, EndpointTypes>;
    PUT: Record<string, EndpointTypes>;
    PATCH: Record<string, EndpointTypes>;
}

type RequiredLiteralKeys<T> = keyof {
    [K in keyof T as string extends K ? never : number extends K ? never : {} extends Pick<T, K> ? never : K]: 0;
};
type HasRequiredKeys<T> = RequiredLiteralKeys<T> extends never ? false : true;
type PathParams<U> = U extends `${infer _V}{${infer W}}${infer X}` ? W extends `?${infer Y}` ? Partial<Record<Y, string>> | PathParams<X> : Record<W, string> | PathParams<X> : never;
type Extract<T extends EndpointTypes, K extends keyof T> = T[K];
type ReservedKeys = "params" | "body" | "queries";
type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
type ConditionallyOptional<K extends string, V> = K extends undefined | never ? Partial<Record<K, V>> : HasRequiredKeys<V> extends true ? Record<K, V> : Partial<Record<K, V>>;
type tsAPIOptions<T extends Record<string, EndpointTypes>, U extends keyof T, FetcherOptions extends Object> = ConditionallyOptional<"queries", Extract<T[U], "queries">> & ConditionallyOptional<"body", Extract<T[U], "req">> & ConditionallyOptional<"params", UnionToIntersection<PathParams<U>>> & FetcherOptions & {
    method?: string;
};

declare function getAPI<T extends Partial<Routes>, Options extends Object = {}>(base: string, fetcher: Fetcher<Omit<Options, ReservedKeys>>): {
    get: <U extends keyof (T["GET"] extends Record<string, EndpointTypes> ? T["GET"] : Record<string, EndpointTypes>) & string>(url: U, options: tsAPIOptions<T["GET"] extends Record<string, EndpointTypes> ? T["GET"] : Record<string, EndpointTypes>, U, Omit<Options, ReservedKeys>>) => Promise<(T["GET"] extends Record<string, EndpointTypes> ? T["GET"] : Record<string, EndpointTypes>)[U] extends EndpointTypes ? Extract<(T["GET"] extends Record<string, EndpointTypes> ? T["GET"] : Record<string, EndpointTypes>)[U], "res"> : unknown>;
    post: <U_1 extends keyof (T["POST"] extends Record<string, EndpointTypes> ? T["POST"] : Record<string, EndpointTypes>) & string>(url: U_1, options: tsAPIOptions<T["POST"] extends Record<string, EndpointTypes> ? T["POST"] : Record<string, EndpointTypes>, U_1, Omit<Options, ReservedKeys>>) => Promise<(T["POST"] extends Record<string, EndpointTypes> ? T["POST"] : Record<string, EndpointTypes>)[U_1] extends EndpointTypes ? Extract<(T["POST"] extends Record<string, EndpointTypes> ? T["POST"] : Record<string, EndpointTypes>)[U_1], "res"> : unknown>;
    delete: <U_2 extends keyof (T["DELETE"] extends Record<string, EndpointTypes> ? T["DELETE"] : Record<string, EndpointTypes>) & string>(url: U_2, options: tsAPIOptions<T["DELETE"] extends Record<string, EndpointTypes> ? T["DELETE"] : Record<string, EndpointTypes>, U_2, Omit<Options, ReservedKeys>>) => Promise<(T["DELETE"] extends Record<string, EndpointTypes> ? T["DELETE"] : Record<string, EndpointTypes>)[U_2] extends EndpointTypes ? Extract<(T["DELETE"] extends Record<string, EndpointTypes> ? T["DELETE"] : Record<string, EndpointTypes>)[U_2], "res"> : unknown>;
    put: <U_3 extends keyof (T["PUT"] extends Record<string, EndpointTypes> ? T["PUT"] : Record<string, EndpointTypes>) & string>(url: U_3, options: tsAPIOptions<T["PUT"] extends Record<string, EndpointTypes> ? T["PUT"] : Record<string, EndpointTypes>, U_3, Omit<Options, ReservedKeys>>) => Promise<(T["PUT"] extends Record<string, EndpointTypes> ? T["PUT"] : Record<string, EndpointTypes>)[U_3] extends EndpointTypes ? Extract<(T["PUT"] extends Record<string, EndpointTypes> ? T["PUT"] : Record<string, EndpointTypes>)[U_3], "res"> : unknown>;
    patch: <U_4 extends keyof (T["PATCH"] extends Record<string, EndpointTypes> ? T["PATCH"] : Record<string, EndpointTypes>) & string>(url: U_4, options: tsAPIOptions<T["PATCH"] extends Record<string, EndpointTypes> ? T["PATCH"] : Record<string, EndpointTypes>, U_4, Omit<Options, ReservedKeys>>) => Promise<(T["PATCH"] extends Record<string, EndpointTypes> ? T["PATCH"] : Record<string, EndpointTypes>)[U_4] extends EndpointTypes ? Extract<(T["PATCH"] extends Record<string, EndpointTypes> ? T["PATCH"] : Record<string, EndpointTypes>)[U_4], "res"> : unknown>;
};

export { BaseFetcherOptions, EndpointTypes, Fetcher, Method, Routes, getAPI, tsAPIOptions };

// src/git.ts
import { $ } from "execa";
var getBranch = async () => {
  return (await $`git branch --show-current`).stdout || "HEAD";
};
var getParentShas = async (n) => {
  return (await $`git log --pretty=format:%H -n ${n}`).stdout.split("\n");
};
var getCommit = async () => {
  return (await $`git rev-parse HEAD`).stdout;
};
var getMergeBase = async (prBranch) => {
  return (await $`git merge-base HEAD ${prBranch}`).stdout;
};
var isAncestor = async (sha1, sha2) => {
  return (await $`git merge-base --is-ancestor ${sha1} ${sha2}`.catch((err) => ({
    exitCode: 1
  })))?.exitCode === 0 ? (await $`git rev-list --no-walk ${sha1} ${sha2}`).stdout.startsWith(sha1) : false;
};

// src/getEnv.ts
import { logger } from "@pixeleye/cli-logger";

// src/services/index.ts
import envCi from "env-ci";

// src/services/github.ts
import { existsSync, readFileSync } from "fs";
async function getGithubEnv(env) {
  let payload = {};
  if (process.env.GITHUB_EVENT_PATH && existsSync(process.env.GITHUB_EVENT_PATH)) {
    payload = JSON.parse(readFileSync(process.env.GITHUB_EVENT_PATH, "utf8"));
  }
  return {
    ...env,
    tag: payload.pull_request?.head.sha || env.tag,
    prBranch: process.env.GITHUB_HEAD_REF,
    commit: payload.pull_request?.head.sha || env.commit
  };
}

// src/services/index.ts
async function getEnv() {
  const env = envCi();
  switch (env.service) {
    case "github":
      return await getGithubEnv(env);
    default:
      return env;
  }
}

// src/getEnv.ts
async function getEnvironment() {
  const env = await getEnv();
  logger.debug(`Detected CI: ${JSON.stringify(env)}`);
  const { name, isCi, pr, branch: ciBranch, commit, tag, prBranch, isPr } = env;
  const gitBranch = await getBranch().catch(() => void 0);
  const gitCommit = await getCommit().catch(() => void 0);
  const branch = process.env.PIXELEYE_BRANCH || ciBranch || gitBranch;
  const title = (process.env.PIXELEYE_TITLE || (tag || gitCommit ? `#${(tag || gitCommit)?.slice(0, 8)}` : "No title")).trim();
  return {
    name,
    commit: (process.env.PIXELEYE_COMMIT || commit || gitCommit)?.trim(),
    branch: process.env.PIXELEYE_BASE_BRANCH || isPr ? prBranch : branch,
    targetBranch: isPr ? process.env.PIXELEYE_PR_BRANCH || branch : void 0,
    isCI: isCi,
    isPR: isPr,
    prID: pr,
    title,
    shardID: process.env.PIXELEYE_SHARD_ID || env.build
  };
}

// src/setEnv.ts
function setEnv(name, value) {
  process.env[name] = value;
  process.env[`CYPRESS_${name}`] = value;
}
export {
  getBranch,
  getCommit,
  getEnvironment,
  getMergeBase,
  getParentShas,
  isAncestor,
  setEnv
};

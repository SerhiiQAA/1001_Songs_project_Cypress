"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  getLogLevel: () => getLogLevel,
  levels: () => levels,
  logger: () => logger,
  setLogLevel: () => setLogLevel
});
module.exports = __toCommonJS(src_exports);
function getLogLevel() {
  return process.env.PIXELEYE_LOG_LEVEL || "info";
}
var levels = {
  error: 0,
  warn: 1,
  info: 2,
  http: 3,
  verbose: 4,
  debug: 5,
  silly: 6
};
function setLogLevel(level) {
  process.env.PIXELEYE_LOG_LEVEL = level;
}
function shouldLog(level) {
  return levels[level] <= levels[getLogLevel()];
}
function error(message, ...optionalParams) {
  if (shouldLog("error"))
    console.error(message, ...optionalParams);
}
function warn(message, ...optionalParams) {
  if (shouldLog("warn"))
    console.warn(message, ...optionalParams);
}
function info(message, ...optionalParams) {
  if (shouldLog("info"))
    console.info(message, ...optionalParams);
}
function http(message, ...optionalParams) {
  if (shouldLog("http"))
    console.log(message, ...optionalParams);
}
function verbose(message, ...optionalParams) {
  if (shouldLog("verbose"))
    console.log(message, ...optionalParams);
}
function debug(message, ...optionalParams) {
  if (shouldLog("debug"))
    console.log(message, ...optionalParams);
}
function silly(message, ...optionalParams) {
  if (shouldLog("silly"))
    console.log(message, ...optionalParams);
}
var logger = {
  error,
  warn,
  info,
  http,
  verbose,
  debug,
  silly
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getLogLevel,
  levels,
  logger,
  setLogLevel
});

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js
var require_windows = __commonJS({
  "../../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js"(exports2, module2) {
    module2.exports = isexe;
    isexe.sync = sync;
    var fs = require("fs");
    function checkPathExt(path3, options) {
      var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
      if (!pathext) {
        return true;
      }
      pathext = pathext.split(";");
      if (pathext.indexOf("") !== -1) {
        return true;
      }
      for (var i = 0; i < pathext.length; i++) {
        var p = pathext[i].toLowerCase();
        if (p && path3.substr(-p.length).toLowerCase() === p) {
          return true;
        }
      }
      return false;
    }
    function checkStat(stat, path3, options) {
      if (!stat.isSymbolicLink() && !stat.isFile()) {
        return false;
      }
      return checkPathExt(path3, options);
    }
    function isexe(path3, options, cb) {
      fs.stat(path3, function(er, stat) {
        cb(er, er ? false : checkStat(stat, path3, options));
      });
    }
    function sync(path3, options) {
      return checkStat(fs.statSync(path3), path3, options);
    }
  }
});

// ../../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js
var require_mode = __commonJS({
  "../../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js"(exports2, module2) {
    module2.exports = isexe;
    isexe.sync = sync;
    var fs = require("fs");
    function isexe(path3, options, cb) {
      fs.stat(path3, function(er, stat) {
        cb(er, er ? false : checkStat(stat, options));
      });
    }
    function sync(path3, options) {
      return checkStat(fs.statSync(path3), options);
    }
    function checkStat(stat, options) {
      return stat.isFile() && checkMode(stat, options);
    }
    function checkMode(stat, options) {
      var mod = stat.mode;
      var uid = stat.uid;
      var gid = stat.gid;
      var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
      var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
      var u = parseInt("100", 8);
      var g = parseInt("010", 8);
      var o = parseInt("001", 8);
      var ug = u | g;
      var ret = mod & o || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && myUid === 0;
      return ret;
    }
  }
});

// ../../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js
var require_isexe = __commonJS({
  "../../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js"(exports2, module2) {
    var fs = require("fs");
    var core;
    if (process.platform === "win32" || global.TESTING_WINDOWS) {
      core = require_windows();
    } else {
      core = require_mode();
    }
    module2.exports = isexe;
    isexe.sync = sync;
    function isexe(path3, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = {};
      }
      if (!cb) {
        if (typeof Promise !== "function") {
          throw new TypeError("callback not provided");
        }
        return new Promise(function(resolve, reject) {
          isexe(path3, options || {}, function(er, is) {
            if (er) {
              reject(er);
            } else {
              resolve(is);
            }
          });
        });
      }
      core(path3, options || {}, function(er, is) {
        if (er) {
          if (er.code === "EACCES" || options && options.ignoreErrors) {
            er = null;
            is = false;
          }
        }
        cb(er, is);
      });
    }
    function sync(path3, options) {
      try {
        return core.sync(path3, options || {});
      } catch (er) {
        if (options && options.ignoreErrors || er.code === "EACCES") {
          return false;
        } else {
          throw er;
        }
      }
    }
  }
});

// ../../../node_modules/.pnpm/which@2.0.2/node_modules/which/which.js
var require_which = __commonJS({
  "../../../node_modules/.pnpm/which@2.0.2/node_modules/which/which.js"(exports2, module2) {
    var isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
    var path3 = require("path");
    var COLON = isWindows ? ";" : ":";
    var isexe = require_isexe();
    var getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), { code: "ENOENT" });
    var getPathInfo = (cmd, opt) => {
      const colon = opt.colon || COLON;
      const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [
        // windows always checks the cwd first
        ...isWindows ? [process.cwd()] : [],
        ...(opt.path || process.env.PATH || /* istanbul ignore next: very unusual */
        "").split(colon)
      ];
      const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
      const pathExt = isWindows ? pathExtExe.split(colon) : [""];
      if (isWindows) {
        if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
          pathExt.unshift("");
      }
      return {
        pathEnv,
        pathExt,
        pathExtExe
      };
    };
    var which = (cmd, opt, cb) => {
      if (typeof opt === "function") {
        cb = opt;
        opt = {};
      }
      if (!opt)
        opt = {};
      const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
      const found = [];
      const step = (i) => new Promise((resolve, reject) => {
        if (i === pathEnv.length)
          return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
        const ppRaw = pathEnv[i];
        const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
        const pCmd = path3.join(pathPart, cmd);
        const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
        resolve(subStep(p, i, 0));
      });
      const subStep = (p, i, ii) => new Promise((resolve, reject) => {
        if (ii === pathExt.length)
          return resolve(step(i + 1));
        const ext = pathExt[ii];
        isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
          if (!er && is) {
            if (opt.all)
              found.push(p + ext);
            else
              return resolve(p + ext);
          }
          return resolve(subStep(p, i, ii + 1));
        });
      });
      return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
    };
    var whichSync = (cmd, opt) => {
      opt = opt || {};
      const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
      const found = [];
      for (let i = 0; i < pathEnv.length; i++) {
        const ppRaw = pathEnv[i];
        const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
        const pCmd = path3.join(pathPart, cmd);
        const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
        for (let j = 0; j < pathExt.length; j++) {
          const cur = p + pathExt[j];
          try {
            const is = isexe.sync(cur, { pathExt: pathExtExe });
            if (is) {
              if (opt.all)
                found.push(cur);
              else
                return cur;
            }
          } catch (ex) {
          }
        }
      }
      if (opt.all && found.length)
        return found;
      if (opt.nothrow)
        return null;
      throw getNotFoundError(cmd);
    };
    module2.exports = which;
    which.sync = whichSync;
  }
});

// ../../../node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js
var require_path_key = __commonJS({
  "../../../node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js"(exports2, module2) {
    "use strict";
    var pathKey2 = (options = {}) => {
      const environment = options.env || process.env;
      const platform = options.platform || process.platform;
      if (platform !== "win32") {
        return "PATH";
      }
      return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
    };
    module2.exports = pathKey2;
    module2.exports.default = pathKey2;
  }
});

// ../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/resolveCommand.js
var require_resolveCommand = __commonJS({
  "../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/resolveCommand.js"(exports2, module2) {
    "use strict";
    var path3 = require("path");
    var which = require_which();
    var getPathKey = require_path_key();
    function resolveCommandAttempt(parsed, withoutPathExt) {
      const env = parsed.options.env || process.env;
      const cwd = process.cwd();
      const hasCustomCwd = parsed.options.cwd != null;
      const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
      if (shouldSwitchCwd) {
        try {
          process.chdir(parsed.options.cwd);
        } catch (err) {
        }
      }
      let resolved;
      try {
        resolved = which.sync(parsed.command, {
          path: env[getPathKey({ env })],
          pathExt: withoutPathExt ? path3.delimiter : void 0
        });
      } catch (e) {
      } finally {
        if (shouldSwitchCwd) {
          process.chdir(cwd);
        }
      }
      if (resolved) {
        resolved = path3.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
      }
      return resolved;
    }
    function resolveCommand(parsed) {
      return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
    }
    module2.exports = resolveCommand;
  }
});

// ../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/escape.js
var require_escape = __commonJS({
  "../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/escape.js"(exports2, module2) {
    "use strict";
    var metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
    function escapeCommand(arg) {
      arg = arg.replace(metaCharsRegExp, "^$1");
      return arg;
    }
    function escapeArgument(arg, doubleEscapeMetaChars) {
      arg = `${arg}`;
      arg = arg.replace(/(\\*)"/g, '$1$1\\"');
      arg = arg.replace(/(\\*)$/, "$1$1");
      arg = `"${arg}"`;
      arg = arg.replace(metaCharsRegExp, "^$1");
      if (doubleEscapeMetaChars) {
        arg = arg.replace(metaCharsRegExp, "^$1");
      }
      return arg;
    }
    module2.exports.command = escapeCommand;
    module2.exports.argument = escapeArgument;
  }
});

// ../../../node_modules/.pnpm/shebang-regex@3.0.0/node_modules/shebang-regex/index.js
var require_shebang_regex = __commonJS({
  "../../../node_modules/.pnpm/shebang-regex@3.0.0/node_modules/shebang-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = /^#!(.*)/;
  }
});

// ../../../node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js
var require_shebang_command = __commonJS({
  "../../../node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js"(exports2, module2) {
    "use strict";
    var shebangRegex = require_shebang_regex();
    module2.exports = (string = "") => {
      const match = string.match(shebangRegex);
      if (!match) {
        return null;
      }
      const [path3, argument] = match[0].replace(/#! ?/, "").split(" ");
      const binary = path3.split("/").pop();
      if (binary === "env") {
        return argument;
      }
      return argument ? `${binary} ${argument}` : binary;
    };
  }
});

// ../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/readShebang.js
var require_readShebang = __commonJS({
  "../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/readShebang.js"(exports2, module2) {
    "use strict";
    var fs = require("fs");
    var shebangCommand = require_shebang_command();
    function readShebang(command) {
      const size = 150;
      const buffer = Buffer.alloc(size);
      let fd;
      try {
        fd = fs.openSync(command, "r");
        fs.readSync(fd, buffer, 0, size, 0);
        fs.closeSync(fd);
      } catch (e) {
      }
      return shebangCommand(buffer.toString());
    }
    module2.exports = readShebang;
  }
});

// ../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/parse.js
var require_parse = __commonJS({
  "../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/parse.js"(exports2, module2) {
    "use strict";
    var path3 = require("path");
    var resolveCommand = require_resolveCommand();
    var escape2 = require_escape();
    var readShebang = require_readShebang();
    var isWin = process.platform === "win32";
    var isExecutableRegExp = /\.(?:com|exe)$/i;
    var isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
    function detectShebang(parsed) {
      parsed.file = resolveCommand(parsed);
      const shebang = parsed.file && readShebang(parsed.file);
      if (shebang) {
        parsed.args.unshift(parsed.file);
        parsed.command = shebang;
        return resolveCommand(parsed);
      }
      return parsed.file;
    }
    function parseNonShell(parsed) {
      if (!isWin) {
        return parsed;
      }
      const commandFile = detectShebang(parsed);
      const needsShell = !isExecutableRegExp.test(commandFile);
      if (parsed.options.forceShell || needsShell) {
        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
        parsed.command = path3.normalize(parsed.command);
        parsed.command = escape2.command(parsed.command);
        parsed.args = parsed.args.map((arg) => escape2.argument(arg, needsDoubleEscapeMetaChars));
        const shellCommand = [parsed.command].concat(parsed.args).join(" ");
        parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
        parsed.command = process.env.comspec || "cmd.exe";
        parsed.options.windowsVerbatimArguments = true;
      }
      return parsed;
    }
    function parse(command, args, options) {
      if (args && !Array.isArray(args)) {
        options = args;
        args = null;
      }
      args = args ? args.slice(0) : [];
      options = Object.assign({}, options);
      const parsed = {
        command,
        args,
        options,
        file: void 0,
        original: {
          command,
          args
        }
      };
      return options.shell ? parsed : parseNonShell(parsed);
    }
    module2.exports = parse;
  }
});

// ../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/enoent.js
var require_enoent = __commonJS({
  "../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/enoent.js"(exports2, module2) {
    "use strict";
    var isWin = process.platform === "win32";
    function notFoundError(original, syscall) {
      return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
        code: "ENOENT",
        errno: "ENOENT",
        syscall: `${syscall} ${original.command}`,
        path: original.command,
        spawnargs: original.args
      });
    }
    function hookChildProcess(cp, parsed) {
      if (!isWin) {
        return;
      }
      const originalEmit = cp.emit;
      cp.emit = function(name, arg1) {
        if (name === "exit") {
          const err = verifyENOENT(arg1, parsed, "spawn");
          if (err) {
            return originalEmit.call(cp, "error", err);
          }
        }
        return originalEmit.apply(cp, arguments);
      };
    }
    function verifyENOENT(status, parsed) {
      if (isWin && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, "spawn");
      }
      return null;
    }
    function verifyENOENTSync(status, parsed) {
      if (isWin && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, "spawnSync");
      }
      return null;
    }
    module2.exports = {
      hookChildProcess,
      verifyENOENT,
      verifyENOENTSync,
      notFoundError
    };
  }
});

// ../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/index.js
var require_cross_spawn = __commonJS({
  "../../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/index.js"(exports2, module2) {
    "use strict";
    var cp = require("child_process");
    var parse = require_parse();
    var enoent = require_enoent();
    function spawn(command, args, options) {
      const parsed = parse(command, args, options);
      const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
      enoent.hookChildProcess(spawned, parsed);
      return spawned;
    }
    function spawnSync(command, args, options) {
      const parsed = parse(command, args, options);
      const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
      result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
      return result;
    }
    module2.exports = spawn;
    module2.exports.spawn = spawn;
    module2.exports.sync = spawnSync;
    module2.exports._parse = parse;
    module2.exports._enoent = enoent;
  }
});

// ../../../node_modules/.pnpm/merge-stream@2.0.0/node_modules/merge-stream/index.js
var require_merge_stream = __commonJS({
  "../../../node_modules/.pnpm/merge-stream@2.0.0/node_modules/merge-stream/index.js"(exports2, module2) {
    "use strict";
    var { PassThrough } = require("stream");
    module2.exports = function() {
      var sources = [];
      var output = new PassThrough({ objectMode: true });
      output.setMaxListeners(0);
      output.add = add;
      output.isEmpty = isEmpty;
      output.on("unpipe", remove);
      Array.prototype.slice.call(arguments).forEach(add);
      return output;
      function add(source) {
        if (Array.isArray(source)) {
          source.forEach(add);
          return this;
        }
        sources.push(source);
        source.once("end", remove.bind(null, source));
        source.once("error", output.emit.bind(output, "error"));
        source.pipe(output, { end: false });
        return this;
      }
      function isEmpty() {
        return sources.length == 0;
      }
      function remove(source) {
        sources = sources.filter(function(it) {
          return it !== source;
        });
        if (!sources.length && output.readable) {
          output.end();
        }
      }
    };
  }
});

// ../../../node_modules/.pnpm/jiti@1.21.0/node_modules/jiti/dist/jiti.js
var require_jiti = __commonJS({
  "../../../node_modules/.pnpm/jiti@1.21.0/node_modules/jiti/dist/jiti.js"(exports2, module2) {
    (() => {
      var __webpack_modules__ = { "./node_modules/.pnpm/create-require@1.1.1/node_modules/create-require/create-require.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const nativeModule = __webpack_require__2("module"), path3 = __webpack_require__2("path"), fs = __webpack_require__2("fs");
        module3.exports = function(filename) {
          return filename || (filename = process.cwd()), function(path4) {
            try {
              return fs.lstatSync(path4).isDirectory();
            } catch (e) {
              return false;
            }
          }(filename) && (filename = path3.join(filename, "index.js")), nativeModule.createRequire ? nativeModule.createRequire(filename) : nativeModule.createRequireFromPath ? nativeModule.createRequireFromPath(filename) : function(filename2) {
            const mod = new nativeModule.Module(filename2, null);
            return mod.filename = filename2, mod.paths = nativeModule.Module._nodeModulePaths(path3.dirname(filename2)), mod._compile("module.exports = require;", filename2), mod.exports;
          }(filename);
        };
      }, "./node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        const Yallist = __webpack_require__2("./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js"), MAX = Symbol("max"), LENGTH = Symbol("length"), LENGTH_CALCULATOR = Symbol("lengthCalculator"), ALLOW_STALE = Symbol("allowStale"), MAX_AGE = Symbol("maxAge"), DISPOSE = Symbol("dispose"), NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet"), LRU_LIST = Symbol("lruList"), CACHE = Symbol("cache"), UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet"), naiveLength = () => 1;
        const get = (self2, key, doUse) => {
          const node = self2[CACHE].get(key);
          if (node) {
            const hit = node.value;
            if (isStale(self2, hit)) {
              if (del(self2, node), !self2[ALLOW_STALE]) return;
            } else doUse && (self2[UPDATE_AGE_ON_GET] && (node.value.now = Date.now()), self2[LRU_LIST].unshiftNode(node));
            return hit.value;
          }
        }, isStale = (self2, hit) => {
          if (!hit || !hit.maxAge && !self2[MAX_AGE]) return false;
          const diff = Date.now() - hit.now;
          return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
        }, trim = (self2) => {
          if (self2[LENGTH] > self2[MAX]) for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && null !== walker; ) {
            const prev = walker.prev;
            del(self2, walker), walker = prev;
          }
        }, del = (self2, node) => {
          if (node) {
            const hit = node.value;
            self2[DISPOSE] && self2[DISPOSE](hit.key, hit.value), self2[LENGTH] -= hit.length, self2[CACHE].delete(hit.key), self2[LRU_LIST].removeNode(node);
          }
        };
        class Entry {
          constructor(key, value2, length, now, maxAge) {
            this.key = key, this.value = value2, this.length = length, this.now = now, this.maxAge = maxAge || 0;
          }
        }
        const forEachStep = (self2, fn, node, thisp) => {
          let hit = node.value;
          isStale(self2, hit) && (del(self2, node), self2[ALLOW_STALE] || (hit = void 0)), hit && fn.call(thisp, hit.value, hit.key, self2);
        };
        module3.exports = class {
          constructor(options) {
            if ("number" == typeof options && (options = { max: options }), options || (options = {}), options.max && ("number" != typeof options.max || options.max < 0)) throw new TypeError("max must be a non-negative number");
            this[MAX] = options.max || 1 / 0;
            const lc = options.length || naiveLength;
            if (this[LENGTH_CALCULATOR] = "function" != typeof lc ? naiveLength : lc, this[ALLOW_STALE] = options.stale || false, options.maxAge && "number" != typeof options.maxAge) throw new TypeError("maxAge must be a number");
            this[MAX_AGE] = options.maxAge || 0, this[DISPOSE] = options.dispose, this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false, this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false, this.reset();
          }
          set max(mL) {
            if ("number" != typeof mL || mL < 0) throw new TypeError("max must be a non-negative number");
            this[MAX] = mL || 1 / 0, trim(this);
          }
          get max() {
            return this[MAX];
          }
          set allowStale(allowStale) {
            this[ALLOW_STALE] = !!allowStale;
          }
          get allowStale() {
            return this[ALLOW_STALE];
          }
          set maxAge(mA) {
            if ("number" != typeof mA) throw new TypeError("maxAge must be a non-negative number");
            this[MAX_AGE] = mA, trim(this);
          }
          get maxAge() {
            return this[MAX_AGE];
          }
          set lengthCalculator(lC) {
            "function" != typeof lC && (lC = naiveLength), lC !== this[LENGTH_CALCULATOR] && (this[LENGTH_CALCULATOR] = lC, this[LENGTH] = 0, this[LRU_LIST].forEach((hit) => {
              hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key), this[LENGTH] += hit.length;
            })), trim(this);
          }
          get lengthCalculator() {
            return this[LENGTH_CALCULATOR];
          }
          get length() {
            return this[LENGTH];
          }
          get itemCount() {
            return this[LRU_LIST].length;
          }
          rforEach(fn, thisp) {
            thisp = thisp || this;
            for (let walker = this[LRU_LIST].tail; null !== walker; ) {
              const prev = walker.prev;
              forEachStep(this, fn, walker, thisp), walker = prev;
            }
          }
          forEach(fn, thisp) {
            thisp = thisp || this;
            for (let walker = this[LRU_LIST].head; null !== walker; ) {
              const next = walker.next;
              forEachStep(this, fn, walker, thisp), walker = next;
            }
          }
          keys() {
            return this[LRU_LIST].toArray().map((k) => k.key);
          }
          values() {
            return this[LRU_LIST].toArray().map((k) => k.value);
          }
          reset() {
            this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length && this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value)), this[CACHE] = /* @__PURE__ */ new Map(), this[LRU_LIST] = new Yallist(), this[LENGTH] = 0;
          }
          dump() {
            return this[LRU_LIST].map((hit) => !isStale(this, hit) && { k: hit.key, v: hit.value, e: hit.now + (hit.maxAge || 0) }).toArray().filter((h) => h);
          }
          dumpLru() {
            return this[LRU_LIST];
          }
          set(key, value2, maxAge) {
            if ((maxAge = maxAge || this[MAX_AGE]) && "number" != typeof maxAge) throw new TypeError("maxAge must be a number");
            const now = maxAge ? Date.now() : 0, len = this[LENGTH_CALCULATOR](value2, key);
            if (this[CACHE].has(key)) {
              if (len > this[MAX]) return del(this, this[CACHE].get(key)), false;
              const item = this[CACHE].get(key).value;
              return this[DISPOSE] && (this[NO_DISPOSE_ON_SET] || this[DISPOSE](key, item.value)), item.now = now, item.maxAge = maxAge, item.value = value2, this[LENGTH] += len - item.length, item.length = len, this.get(key), trim(this), true;
            }
            const hit = new Entry(key, value2, len, now, maxAge);
            return hit.length > this[MAX] ? (this[DISPOSE] && this[DISPOSE](key, value2), false) : (this[LENGTH] += hit.length, this[LRU_LIST].unshift(hit), this[CACHE].set(key, this[LRU_LIST].head), trim(this), true);
          }
          has(key) {
            if (!this[CACHE].has(key)) return false;
            const hit = this[CACHE].get(key).value;
            return !isStale(this, hit);
          }
          get(key) {
            return get(this, key, true);
          }
          peek(key) {
            return get(this, key, false);
          }
          pop() {
            const node = this[LRU_LIST].tail;
            return node ? (del(this, node), node.value) : null;
          }
          del(key) {
            del(this, this[CACHE].get(key));
          }
          load(arr) {
            this.reset();
            const now = Date.now();
            for (let l = arr.length - 1; l >= 0; l--) {
              const hit = arr[l], expiresAt = hit.e || 0;
              if (0 === expiresAt) this.set(hit.k, hit.v);
              else {
                const maxAge = expiresAt - now;
                maxAge > 0 && this.set(hit.k, hit.v, maxAge);
              }
            }
          }
          prune() {
            this[CACHE].forEach((value2, key) => get(this, key, false));
          }
        };
      }, "./node_modules/.pnpm/mlly@1.4.2/node_modules/mlly/dist lazy recursive": (module3) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e = new Error("Cannot find module '" + req + "'");
            throw e.code = "MODULE_NOT_FOUND", e;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/mlly@1.4.2/node_modules/mlly/dist lazy recursive", module3.exports = webpackEmptyAsyncContext;
      }, "./node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/index.js": (module3, exports3, __webpack_require__2) => {
        "use strict";
        var crypto = __webpack_require__2("crypto");
        function objectHash(object, options) {
          return function(object2, options2) {
            var hashingStream;
            hashingStream = "passthrough" !== options2.algorithm ? crypto.createHash(options2.algorithm) : new PassThrough();
            void 0 === hashingStream.write && (hashingStream.write = hashingStream.update, hashingStream.end = hashingStream.update);
            var hasher = typeHasher(options2, hashingStream);
            hasher.dispatch(object2), hashingStream.update || hashingStream.end("");
            if (hashingStream.digest) return hashingStream.digest("buffer" === options2.encoding ? void 0 : options2.encoding);
            var buf = hashingStream.read();
            if ("buffer" === options2.encoding) return buf;
            return buf.toString(options2.encoding);
          }(object, options = applyDefaults(object, options));
        }
        (exports3 = module3.exports = objectHash).sha1 = function(object) {
          return objectHash(object);
        }, exports3.keys = function(object) {
          return objectHash(object, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
        }, exports3.MD5 = function(object) {
          return objectHash(object, { algorithm: "md5", encoding: "hex" });
        }, exports3.keysMD5 = function(object) {
          return objectHash(object, { algorithm: "md5", encoding: "hex", excludeValues: true });
        };
        var hashes = crypto.getHashes ? crypto.getHashes().slice() : ["sha1", "md5"];
        hashes.push("passthrough");
        var encodings = ["buffer", "hex", "binary", "base64"];
        function applyDefaults(object, sourceOptions) {
          sourceOptions = sourceOptions || {};
          var options = {};
          if (options.algorithm = sourceOptions.algorithm || "sha1", options.encoding = sourceOptions.encoding || "hex", options.excludeValues = !!sourceOptions.excludeValues, options.algorithm = options.algorithm.toLowerCase(), options.encoding = options.encoding.toLowerCase(), options.ignoreUnknown = true === sourceOptions.ignoreUnknown, options.respectType = false !== sourceOptions.respectType, options.respectFunctionNames = false !== sourceOptions.respectFunctionNames, options.respectFunctionProperties = false !== sourceOptions.respectFunctionProperties, options.unorderedArrays = true === sourceOptions.unorderedArrays, options.unorderedSets = false !== sourceOptions.unorderedSets, options.unorderedObjects = false !== sourceOptions.unorderedObjects, options.replacer = sourceOptions.replacer || void 0, options.excludeKeys = sourceOptions.excludeKeys || void 0, void 0 === object) throw new Error("Object argument required.");
          for (var i = 0; i < hashes.length; ++i) hashes[i].toLowerCase() === options.algorithm.toLowerCase() && (options.algorithm = hashes[i]);
          if (-1 === hashes.indexOf(options.algorithm)) throw new Error('Algorithm "' + options.algorithm + '"  not supported. supported values: ' + hashes.join(", "));
          if (-1 === encodings.indexOf(options.encoding) && "passthrough" !== options.algorithm) throw new Error('Encoding "' + options.encoding + '"  not supported. supported values: ' + encodings.join(", "));
          return options;
        }
        function isNativeFunction(f) {
          if ("function" != typeof f) return false;
          return null != /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(f));
        }
        function typeHasher(options, writeTo, context) {
          context = context || [];
          var write = function(str) {
            return writeTo.update ? writeTo.update(str, "utf8") : writeTo.write(str, "utf8");
          };
          return { dispatch: function(value2) {
            options.replacer && (value2 = options.replacer(value2));
            var type = typeof value2;
            return null === value2 && (type = "null"), this["_" + type](value2);
          }, _object: function(object) {
            var objString = Object.prototype.toString.call(object), objType = /\[object (.*)\]/i.exec(objString);
            objType = (objType = objType ? objType[1] : "unknown:[" + objString + "]").toLowerCase();
            var objectNumber;
            if ((objectNumber = context.indexOf(object)) >= 0) return this.dispatch("[CIRCULAR:" + objectNumber + "]");
            if (context.push(object), "undefined" != typeof Buffer && Buffer.isBuffer && Buffer.isBuffer(object)) return write("buffer:"), write(object);
            if ("object" === objType || "function" === objType || "asyncfunction" === objType) {
              var keys = Object.keys(object);
              options.unorderedObjects && (keys = keys.sort()), false === options.respectType || isNativeFunction(object) || keys.splice(0, 0, "prototype", "__proto__", "constructor"), options.excludeKeys && (keys = keys.filter(function(key) {
                return !options.excludeKeys(key);
              })), write("object:" + keys.length + ":");
              var self2 = this;
              return keys.forEach(function(key) {
                self2.dispatch(key), write(":"), options.excludeValues || self2.dispatch(object[key]), write(",");
              });
            }
            if (!this["_" + objType]) {
              if (options.ignoreUnknown) return write("[" + objType + "]");
              throw new Error('Unknown object type "' + objType + '"');
            }
            this["_" + objType](object);
          }, _array: function(arr, unordered) {
            unordered = void 0 !== unordered ? unordered : false !== options.unorderedArrays;
            var self2 = this;
            if (write("array:" + arr.length + ":"), !unordered || arr.length <= 1) return arr.forEach(function(entry) {
              return self2.dispatch(entry);
            });
            var contextAdditions = [], entries = arr.map(function(entry) {
              var strm = new PassThrough(), localContext = context.slice();
              return typeHasher(options, strm, localContext).dispatch(entry), contextAdditions = contextAdditions.concat(localContext.slice(context.length)), strm.read().toString();
            });
            return context = context.concat(contextAdditions), entries.sort(), this._array(entries, false);
          }, _date: function(date) {
            return write("date:" + date.toJSON());
          }, _symbol: function(sym) {
            return write("symbol:" + sym.toString());
          }, _error: function(err) {
            return write("error:" + err.toString());
          }, _boolean: function(bool) {
            return write("bool:" + bool.toString());
          }, _string: function(string) {
            write("string:" + string.length + ":"), write(string.toString());
          }, _function: function(fn) {
            write("fn:"), isNativeFunction(fn) ? this.dispatch("[native]") : this.dispatch(fn.toString()), false !== options.respectFunctionNames && this.dispatch("function-name:" + String(fn.name)), options.respectFunctionProperties && this._object(fn);
          }, _number: function(number) {
            return write("number:" + number.toString());
          }, _xml: function(xml) {
            return write("xml:" + xml.toString());
          }, _null: function() {
            return write("Null");
          }, _undefined: function() {
            return write("Undefined");
          }, _regexp: function(regex) {
            return write("regex:" + regex.toString());
          }, _uint8array: function(arr) {
            return write("uint8array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint8clampedarray: function(arr) {
            return write("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int8array: function(arr) {
            return write("int8array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint16array: function(arr) {
            return write("uint16array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int16array: function(arr) {
            return write("int16array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint32array: function(arr) {
            return write("uint32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int32array: function(arr) {
            return write("int32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _float32array: function(arr) {
            return write("float32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _float64array: function(arr) {
            return write("float64array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _arraybuffer: function(arr) {
            return write("arraybuffer:"), this.dispatch(new Uint8Array(arr));
          }, _url: function(url2) {
            return write("url:" + url2.toString());
          }, _map: function(map) {
            write("map:");
            var arr = Array.from(map);
            return this._array(arr, false !== options.unorderedSets);
          }, _set: function(set) {
            write("set:");
            var arr = Array.from(set);
            return this._array(arr, false !== options.unorderedSets);
          }, _file: function(file) {
            return write("file:"), this.dispatch([file.name, file.size, file.type, file.lastModfied]);
          }, _blob: function() {
            if (options.ignoreUnknown) return write("[blob]");
            throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
          }, _domwindow: function() {
            return write("domwindow");
          }, _bigint: function(number) {
            return write("bigint:" + number.toString());
          }, _process: function() {
            return write("process");
          }, _timer: function() {
            return write("timer");
          }, _pipe: function() {
            return write("pipe");
          }, _tcp: function() {
            return write("tcp");
          }, _udp: function() {
            return write("udp");
          }, _tty: function() {
            return write("tty");
          }, _statwatcher: function() {
            return write("statwatcher");
          }, _securecontext: function() {
            return write("securecontext");
          }, _connection: function() {
            return write("connection");
          }, _zlib: function() {
            return write("zlib");
          }, _context: function() {
            return write("context");
          }, _nodescript: function() {
            return write("nodescript");
          }, _httpparser: function() {
            return write("httpparser");
          }, _dataview: function() {
            return write("dataview");
          }, _signal: function() {
            return write("signal");
          }, _fsevent: function() {
            return write("fsevent");
          }, _tlswrap: function() {
            return write("tlswrap");
          } };
        }
        function PassThrough() {
          return { buf: "", write: function(b) {
            this.buf += b;
          }, end: function(b) {
            this.buf += b;
          }, read: function() {
            return this.buf;
          } };
        }
        exports3.writeToStream = function(object, options, stream) {
          return void 0 === stream && (stream = options, options = {}), typeHasher(options = applyDefaults(object, options), stream).dispatch(object);
        };
      }, "./node_modules/.pnpm/pirates@4.0.6/node_modules/pirates/lib/index.js": (module3, exports3, __webpack_require__2) => {
        "use strict";
        module3 = __webpack_require__2.nmd(module3), Object.defineProperty(exports3, "__esModule", { value: true }), exports3.addHook = function(hook, opts = {}) {
          let reverted = false;
          const loaders = [], oldLoaders = [];
          let exts;
          const originalJSLoader = Module._extensions[".js"], matcher = opts.matcher || null, ignoreNodeModules = false !== opts.ignoreNodeModules;
          exts = opts.extensions || opts.exts || opts.extension || opts.ext || [".js"], Array.isArray(exts) || (exts = [exts]);
          return exts.forEach((ext) => {
            if ("string" != typeof ext) throw new TypeError(`Invalid Extension: ${ext}`);
            const oldLoader = Module._extensions[ext] || originalJSLoader;
            oldLoaders[ext] = Module._extensions[ext], loaders[ext] = Module._extensions[ext] = function(mod, filename) {
              let compile;
              reverted || function(filename2, exts2, matcher2, ignoreNodeModules2) {
                if ("string" != typeof filename2) return false;
                if (-1 === exts2.indexOf(_path.default.extname(filename2))) return false;
                const resolvedFilename = _path.default.resolve(filename2);
                if (ignoreNodeModules2 && nodeModulesRegex.test(resolvedFilename)) return false;
                if (matcher2 && "function" == typeof matcher2) return !!matcher2(resolvedFilename);
                return true;
              }(filename, exts, matcher, ignoreNodeModules) && (compile = mod._compile, mod._compile = function(code) {
                mod._compile = compile;
                const newCode = hook(code, filename);
                if ("string" != typeof newCode) throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);
                return mod._compile(newCode, filename);
              }), oldLoader(mod, filename);
            };
          }), function() {
            reverted || (reverted = true, exts.forEach((ext) => {
              Module._extensions[ext] === loaders[ext] && (oldLoaders[ext] ? Module._extensions[ext] = oldLoaders[ext] : delete Module._extensions[ext]);
            }));
          };
        };
        var _module = _interopRequireDefault(__webpack_require__2("module")), _path = _interopRequireDefault(__webpack_require__2("path"));
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        const nodeModulesRegex = /^(?:.*[\\/])?node_modules(?:[\\/].*)?$/, Module = module3.constructor.length > 1 ? module3.constructor : _module.default, HOOK_RETURNED_NOTHING_ERROR_MESSAGE = "[Pirates] A hook returned a non-string, or nothing at all! This is a violation of intergalactic law!\n--------------------\nIf you have no idea what this means or what Pirates is, let me explain: Pirates is a module that makes is easy to implement require hooks. One of the require hooks you're using uses it. One of these require hooks didn't return anything from it's handler, so we don't know what to do. You might want to debug this.";
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/comparator.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const ANY = Symbol("SemVer ANY");
        class Comparator {
          static get ANY() {
            return ANY;
          }
          constructor(comp, options) {
            if (options = parseOptions(options), comp instanceof Comparator) {
              if (comp.loose === !!options.loose) return comp;
              comp = comp.value;
            }
            comp = comp.trim().split(/\s+/).join(" "), debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
          }
          parse(comp) {
            const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], m = comp.match(r);
            if (!m) throw new TypeError(`Invalid comparator: ${comp}`);
            this.operator = void 0 !== m[1] ? m[1] : "", "=" === this.operator && (this.operator = ""), m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
          }
          toString() {
            return this.value;
          }
          test(version) {
            if (debug("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY) return true;
            if ("string" == typeof version) try {
              version = new SemVer(version, this.options);
            } catch (er) {
              return false;
            }
            return cmp(version, this.operator, this.semver, this.options);
          }
          intersects(comp, options) {
            if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
            return "" === this.operator ? "" === this.value || new Range(comp.value, options).test(this.value) : "" === comp.operator ? "" === comp.value || new Range(this.value, options).test(comp.semver) : (!(options = parseOptions(options)).includePrerelease || "<0.0.0-0" !== this.value && "<0.0.0-0" !== comp.value) && (!(!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) && (!(!this.operator.startsWith(">") || !comp.operator.startsWith(">")) || (!(!this.operator.startsWith("<") || !comp.operator.startsWith("<")) || (!(this.semver.version !== comp.semver.version || !this.operator.includes("=") || !comp.operator.includes("=")) || (!!(cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) || !!(cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")))))));
          }
        }
        module3.exports = Comparator;
        const parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/parse-options.js"), { safeRe: re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/re.js"), cmp = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/cmp.js"), debug = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/debug.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js");
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        class Range {
          constructor(range, options) {
            if (options = parseOptions(options), range instanceof Range) return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
            if (range instanceof Comparator) return this.raw = range.value, this.set = [[range]], this.format(), this;
            if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range.trim().split(/\s+/).join(" "), this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length), !this.set.length) throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
            if (this.set.length > 1) {
              const first = this.set[0];
              if (this.set = this.set.filter((c) => !isNullSet(c[0])), 0 === this.set.length) this.set = [first];
              else if (this.set.length > 1) {
                for (const c of this.set) if (1 === c.length && isAny(c[0])) {
                  this.set = [c];
                  break;
                }
              }
            }
            this.format();
          }
          format() {
            return this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim(), this.range;
          }
          toString() {
            return this.range;
          }
          parseRange(range) {
            const memoKey = ((this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE)) + ":" + range, cached = cache.get(memoKey);
            if (cached) return cached;
            const loose = this.options.loose, hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
            range = range.replace(hr, hyphenReplace(this.options.includePrerelease)), debug("hyphen replace", range), range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace), debug("comparator trim", range), range = range.replace(re[t.TILDETRIM], tildeTrimReplace), debug("tilde trim", range), range = range.replace(re[t.CARETTRIM], caretTrimReplace), debug("caret trim", range);
            let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
            loose && (rangeList = rangeList.filter((comp) => (debug("loose invalid filter", comp, this.options), !!comp.match(re[t.COMPARATORLOOSE])))), debug("range list", rangeList);
            const rangeMap = /* @__PURE__ */ new Map(), comparators = rangeList.map((comp) => new Comparator(comp, this.options));
            for (const comp of comparators) {
              if (isNullSet(comp)) return [comp];
              rangeMap.set(comp.value, comp);
            }
            rangeMap.size > 1 && rangeMap.has("") && rangeMap.delete("");
            const result = [...rangeMap.values()];
            return cache.set(memoKey, result), result;
          }
          intersects(range, options) {
            if (!(range instanceof Range)) throw new TypeError("a Range is required");
            return this.set.some((thisComparators) => isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => rangeComparators.every((rangeComparator) => thisComparator.intersects(rangeComparator, options)))));
          }
          test(version) {
            if (!version) return false;
            if ("string" == typeof version) try {
              version = new SemVer(version, this.options);
            } catch (er) {
              return false;
            }
            for (let i = 0; i < this.set.length; i++) if (testSet(this.set[i], version, this.options)) return true;
            return false;
          }
        }
        module3.exports = Range;
        const cache = new (__webpack_require__2("./node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js"))({ max: 1e3 }), parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/parse-options.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/comparator.js"), debug = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/debug.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js"), { safeRe: re, t, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/re.js"), { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/constants.js"), isNullSet = (c) => "<0.0.0-0" === c.value, isAny = (c) => "" === c.value, isSatisfiable = (comparators, options) => {
          let result = true;
          const remainingComparators = comparators.slice();
          let testComparator = remainingComparators.pop();
          for (; result && remainingComparators.length; ) result = remainingComparators.every((otherComparator) => testComparator.intersects(otherComparator, options)), testComparator = remainingComparators.pop();
          return result;
        }, parseComparator = (comp, options) => (debug("comp", comp, options), comp = replaceCarets(comp, options), debug("caret", comp), comp = replaceTildes(comp, options), debug("tildes", comp), comp = replaceXRanges(comp, options), debug("xrange", comp), comp = replaceStars(comp, options), debug("stars", comp), comp), isX = (id) => !id || "x" === id.toLowerCase() || "*" === id, replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" "), replaceTilde = (comp, options) => {
          const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
          return comp.replace(r, (_, M, m, p, pr) => {
            let ret;
            return debug("tilde", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0 <${+M + 1}.0.0-0` : isX(p) ? ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0` : pr ? (debug("replaceTilde pr", pr), ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`) : ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`, debug("tilde return", ret), ret;
          });
        }, replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" "), replaceCaret = (comp, options) => {
          debug("caret", comp, options);
          const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET], z = options.includePrerelease ? "-0" : "";
          return comp.replace(r, (_, M, m, p, pr) => {
            let ret;
            return debug("caret", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0` : isX(p) ? ret = "0" === M ? `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.0${z} <${+M + 1}.0.0-0` : pr ? (debug("replaceCaret pr", pr), ret = "0" === M ? "0" === m ? `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0` : `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`) : (debug("no pr"), ret = "0" === M ? "0" === m ? `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0` : `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.${p} <${+M + 1}.0.0-0`), debug("caret return", ret), ret;
          });
        }, replaceXRanges = (comp, options) => (debug("replaceXRanges", comp, options), comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ")), replaceXRange = (comp, options) => {
          comp = comp.trim();
          const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
          return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
            debug("xRange", comp, ret, gtlt, M, m, p, pr);
            const xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
            return "=" === gtlt && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m = 0), p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), "<" === gtlt && (pr = "-0"), ret = `${gtlt + M}.${m}.${p}${pr}`) : xm ? ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0` : xp && (ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`), debug("xRange return", ret), ret;
          });
        }, replaceStars = (comp, options) => (debug("replaceStars", comp, options), comp.trim().replace(re[t.STAR], "")), replaceGTE0 = (comp, options) => (debug("replaceGTE0", comp, options), comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "")), hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb2, to, tM, tm, tp, tpr, tb) => `${from = isX(fM) ? "" : isX(fm) ? `>=${fM}.0.0${incPr ? "-0" : ""}` : isX(fp) ? `>=${fM}.${fm}.0${incPr ? "-0" : ""}` : fpr ? `>=${from}` : `>=${from}${incPr ? "-0" : ""}`} ${to = isX(tM) ? "" : isX(tm) ? `<${+tM + 1}.0.0-0` : isX(tp) ? `<${tM}.${+tm + 1}.0-0` : tpr ? `<=${tM}.${tm}.${tp}-${tpr}` : incPr ? `<${tM}.${tm}.${+tp + 1}-0` : `<=${to}`}`.trim(), testSet = (set, version, options) => {
          for (let i = 0; i < set.length; i++) if (!set[i].test(version)) return false;
          if (version.prerelease.length && !options.includePrerelease) {
            for (let i = 0; i < set.length; i++) if (debug(set[i].semver), set[i].semver !== Comparator.ANY && set[i].semver.prerelease.length > 0) {
              const allowed = set[i].semver;
              if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
            }
            return false;
          }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const debug = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/debug.js"), { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/constants.js"), { safeRe: re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/re.js"), parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/parse-options.js"), { compareIdentifiers } = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/identifiers.js");
        class SemVer {
          constructor(version, options) {
            if (options = parseOptions(options), version instanceof SemVer) {
              if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) return version;
              version = version.version;
            } else if ("string" != typeof version) throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
            if (version.length > MAX_LENGTH) throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
            debug("SemVer", version, options), this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease;
            const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
            if (!m) throw new TypeError(`Invalid Version: ${version}`);
            if (this.raw = version, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
            if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
            if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
            m[4] ? this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
              }
              return id;
            }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
          }
          format() {
            return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
          }
          toString() {
            return this.version;
          }
          compare(other) {
            if (debug("SemVer.compare", this.version, this.options, other), !(other instanceof SemVer)) {
              if ("string" == typeof other && other === this.version) return 0;
              other = new SemVer(other, this.options);
            }
            return other.version === this.version ? 0 : this.compareMain(other) || this.comparePre(other);
          }
          compareMain(other) {
            return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
          }
          comparePre(other) {
            if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length) return -1;
            if (!this.prerelease.length && other.prerelease.length) return 1;
            if (!this.prerelease.length && !other.prerelease.length) return 0;
            let i = 0;
            do {
              const a = this.prerelease[i], b = other.prerelease[i];
              if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b) return 0;
              if (void 0 === b) return 1;
              if (void 0 === a) return -1;
              if (a !== b) return compareIdentifiers(a, b);
            } while (++i);
          }
          compareBuild(other) {
            other instanceof SemVer || (other = new SemVer(other, this.options));
            let i = 0;
            do {
              const a = this.build[i], b = other.build[i];
              if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b) return 0;
              if (void 0 === b) return 1;
              if (void 0 === a) return -1;
              if (a !== b) return compareIdentifiers(a, b);
            } while (++i);
          }
          inc(release, identifier, identifierBase) {
            switch (release) {
              case "premajor":
                this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier, identifierBase);
                break;
              case "preminor":
                this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier, identifierBase);
                break;
              case "prepatch":
                this.prerelease.length = 0, this.inc("patch", identifier, identifierBase), this.inc("pre", identifier, identifierBase);
                break;
              case "prerelease":
                0 === this.prerelease.length && this.inc("patch", identifier, identifierBase), this.inc("pre", identifier, identifierBase);
                break;
              case "major":
                0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
                break;
              case "minor":
                0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
                break;
              case "patch":
                0 === this.prerelease.length && this.patch++, this.prerelease = [];
                break;
              case "pre": {
                const base = Number(identifierBase) ? 1 : 0;
                if (!identifier && false === identifierBase) throw new Error("invalid increment argument: identifier is empty");
                if (0 === this.prerelease.length) this.prerelease = [base];
                else {
                  let i = this.prerelease.length;
                  for (; --i >= 0; ) "number" == typeof this.prerelease[i] && (this.prerelease[i]++, i = -2);
                  if (-1 === i) {
                    if (identifier === this.prerelease.join(".") && false === identifierBase) throw new Error("invalid increment argument: identifier already exists");
                    this.prerelease.push(base);
                  }
                }
                if (identifier) {
                  let prerelease = [identifier, base];
                  false === identifierBase && (prerelease = [identifier]), 0 === compareIdentifiers(this.prerelease[0], identifier) ? isNaN(this.prerelease[1]) && (this.prerelease = prerelease) : this.prerelease = prerelease;
                }
                break;
              }
              default:
                throw new Error(`invalid increment argument: ${release}`);
            }
            return this.raw = this.format(), this.build.length && (this.raw += `+${this.build.join(".")}`), this;
          }
        }
        module3.exports = SemVer;
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/clean.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const parse = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js");
        module3.exports = (version, options) => {
          const s = parse(version.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/cmp.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const eq = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/eq.js"), neq = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/neq.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gt.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gte.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lt.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lte.js");
        module3.exports = (a, op, b, loose) => {
          switch (op) {
            case "===":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a === b;
            case "!==":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a !== b;
            case "":
            case "=":
            case "==":
              return eq(a, b, loose);
            case "!=":
              return neq(a, b, loose);
            case ">":
              return gt(a, b, loose);
            case ">=":
              return gte(a, b, loose);
            case "<":
              return lt(a, b, loose);
            case "<=":
              return lte(a, b, loose);
            default:
              throw new TypeError(`Invalid operator: ${op}`);
          }
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/coerce.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js"), parse = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js"), { safeRe: re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/re.js");
        module3.exports = (version, options) => {
          if (version instanceof SemVer) return version;
          if ("number" == typeof version && (version = String(version)), "string" != typeof version) return null;
          let match = null;
          if ((options = options || {}).rtl) {
            let next;
            for (; (next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length); ) match && next.index + next[0].length === match.index + match[0].length || (match = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            re[t.COERCERTL].lastIndex = -1;
          } else match = version.match(re[t.COERCE]);
          return null === match ? null : parse(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-build.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js");
        module3.exports = (a, b, loose) => {
          const versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-loose.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js");
        module3.exports = (a, b) => compare(a, b, true);
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js");
        module3.exports = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/diff.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const parse = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js");
        module3.exports = (version1, version2) => {
          const v1 = parse(version1, null, true), v2 = parse(version2, null, true), comparison = v1.compare(v2);
          if (0 === comparison) return null;
          const v1Higher = comparison > 0, highVersion = v1Higher ? v1 : v2, lowVersion = v1Higher ? v2 : v1, highHasPre = !!highVersion.prerelease.length;
          if (!!lowVersion.prerelease.length && !highHasPre) return lowVersion.patch || lowVersion.minor ? highVersion.patch ? "patch" : highVersion.minor ? "minor" : "major" : "major";
          const prefix = highHasPre ? "pre" : "";
          return v1.major !== v2.major ? prefix + "major" : v1.minor !== v2.minor ? prefix + "minor" : v1.patch !== v2.patch ? prefix + "patch" : "prerelease";
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/eq.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => 0 === compare(a, b, loose);
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gt.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => compare(a, b, loose) > 0;
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gte.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => compare(a, b, loose) >= 0;
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/inc.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js");
        module3.exports = (version, release, options, identifier, identifierBase) => {
          "string" == typeof options && (identifierBase = identifier, identifier = options, options = void 0);
          try {
            return new SemVer(version instanceof SemVer ? version.version : version, options).inc(release, identifier, identifierBase).version;
          } catch (er) {
            return null;
          }
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lt.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => compare(a, b, loose) < 0;
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lte.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => compare(a, b, loose) <= 0;
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/major.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js");
        module3.exports = (a, loose) => new SemVer(a, loose).major;
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/minor.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js");
        module3.exports = (a, loose) => new SemVer(a, loose).minor;
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/neq.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => 0 !== compare(a, b, loose);
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js");
        module3.exports = (version, options, throwErrors = false) => {
          if (version instanceof SemVer) return version;
          try {
            return new SemVer(version, options);
          } catch (er) {
            if (!throwErrors) return null;
            throw er;
          }
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/patch.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js");
        module3.exports = (a, loose) => new SemVer(a, loose).patch;
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/prerelease.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const parse = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js");
        module3.exports = (version, options) => {
          const parsed = parse(version, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rcompare.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => compare(b, a, loose);
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rsort.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-build.js");
        module3.exports = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/satisfies.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js");
        module3.exports = (version, range, options) => {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }
          return range.test(version);
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/sort.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-build.js");
        module3.exports = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/valid.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const parse = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js");
        module3.exports = (version, options) => {
          const v = parse(version, options);
          return v ? v.version : null;
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const internalRe = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/re.js"), constants3 = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/constants.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js"), identifiers = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/identifiers.js"), parse = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js"), valid = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/valid.js"), clean = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/clean.js"), inc = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/inc.js"), diff = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/diff.js"), major = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/major.js"), minor = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/minor.js"), patch = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/patch.js"), prerelease = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/prerelease.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js"), rcompare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rcompare.js"), compareLoose = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-loose.js"), compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-build.js"), sort = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/sort.js"), rsort = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rsort.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gt.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lt.js"), eq = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/eq.js"), neq = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/neq.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gte.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lte.js"), cmp = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/cmp.js"), coerce = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/coerce.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/comparator.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js"), satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/satisfies.js"), toComparators = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/to-comparators.js"), maxSatisfying = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/max-satisfying.js"), minSatisfying = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-satisfying.js"), minVersion = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-version.js"), validRange = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/valid.js"), outside = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/outside.js"), gtr = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/gtr.js"), ltr = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/ltr.js"), intersects = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/intersects.js"), simplifyRange = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/simplify.js"), subset = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/subset.js");
        module3.exports = { parse, valid, clean, inc, diff, major, minor, patch, prerelease, compare, rcompare, compareLoose, compareBuild, sort, rsort, gt, lt, eq, neq, gte, lte, cmp, coerce, Comparator, Range, satisfies, toComparators, maxSatisfying, minSatisfying, minVersion, validRange, outside, gtr, ltr, intersects, simplifyRange, subset, SemVer, re: internalRe.re, src: internalRe.src, tokens: internalRe.t, SEMVER_SPEC_VERSION: constants3.SEMVER_SPEC_VERSION, RELEASE_TYPES: constants3.RELEASE_TYPES, compareIdentifiers: identifiers.compareIdentifiers, rcompareIdentifiers: identifiers.rcompareIdentifiers };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/constants.js": (module3) => {
        const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
        module3.exports = { MAX_LENGTH: 256, MAX_SAFE_COMPONENT_LENGTH: 16, MAX_SAFE_BUILD_LENGTH: 250, MAX_SAFE_INTEGER, RELEASE_TYPES: ["major", "premajor", "minor", "preminor", "patch", "prepatch", "prerelease"], SEMVER_SPEC_VERSION: "2.0.0", FLAG_INCLUDE_PRERELEASE: 1, FLAG_LOOSE: 2 };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/debug.js": (module3) => {
        const debug = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
        };
        module3.exports = debug;
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/identifiers.js": (module3) => {
        const numeric = /^[0-9]+$/, compareIdentifiers = (a, b) => {
          const anum = numeric.test(a), bnum = numeric.test(b);
          return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        };
        module3.exports = { compareIdentifiers, rcompareIdentifiers: (a, b) => compareIdentifiers(b, a) };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/parse-options.js": (module3) => {
        const looseOption = Object.freeze({ loose: true }), emptyOpts = Object.freeze({});
        module3.exports = (options) => options ? "object" != typeof options ? looseOption : options : emptyOpts;
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/re.js": (module3, exports3, __webpack_require__2) => {
        const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH } = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/constants.js"), debug = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/debug.js"), re = (exports3 = module3.exports = {}).re = [], safeRe = exports3.safeRe = [], src = exports3.src = [], t = exports3.t = {};
        let R = 0;
        const safeRegexReplacements = [["\\s", 1], ["\\d", MAX_LENGTH], ["[a-zA-Z0-9-]", MAX_SAFE_BUILD_LENGTH]], createToken = (name, value2, isGlobal) => {
          const safe = ((value3) => {
            for (const [token, max] of safeRegexReplacements) value3 = value3.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
            return value3;
          })(value2), index = R++;
          debug(name, index, value2), t[name] = index, src[index] = value2, re[index] = new RegExp(value2, isGlobal ? "g" : void 0), safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
        };
        createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*"), createToken("NUMERICIDENTIFIERLOOSE", "\\d+"), createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*"), createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`), createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`), createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`), createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`), createToken("BUILDIDENTIFIER", "[a-zA-Z0-9-]+"), createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`), createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`), createToken("FULL", `^${src[t.FULLPLAIN]}$`), createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`), createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`), createToken("GTLT", "((?:<|>)?=?)"), createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`), createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`), createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`), createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`), createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`), createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`), createToken("COERCE", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`), createToken("COERCERTL", src[t.COERCE], true), createToken("LONETILDE", "(?:~>?)"), createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true), exports3.tildeTrimReplace = "$1~", createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`), createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`), createToken("LONECARET", "(?:\\^)"), createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true), exports3.caretTrimReplace = "$1^", createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`), createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`), createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`), createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`), createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true), exports3.comparatorTrimReplace = "$1$2$3", createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`), createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`), createToken("STAR", "(<|>)?=?\\s*\\*"), createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$"), createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/gtr.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const outside = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/outside.js");
        module3.exports = (version, range, options) => outside(version, range, ">", options);
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/intersects.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js");
        module3.exports = (r1, r2, options) => (r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2, options));
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/ltr.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const outside = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/outside.js");
        module3.exports = (version, range, options) => outside(version, range, "<", options);
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/max-satisfying.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js");
        module3.exports = (versions, range, options) => {
          let max = null, maxSV = null, rangeObj = null;
          try {
            rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (max = v, maxSV = new SemVer(max, options)));
          }), max;
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-satisfying.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js");
        module3.exports = (versions, range, options) => {
          let min = null, minSV = null, rangeObj = null;
          try {
            rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (min = v, minSV = new SemVer(min, options)));
          }), min;
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-version.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gt.js");
        module3.exports = (range, loose) => {
          range = new Range(range, loose);
          let minver = new SemVer("0.0.0");
          if (range.test(minver)) return minver;
          if (minver = new SemVer("0.0.0-0"), range.test(minver)) return minver;
          minver = null;
          for (let i = 0; i < range.set.length; ++i) {
            const comparators = range.set[i];
            let setMin = null;
            comparators.forEach((comparator) => {
              const compver = new SemVer(comparator.semver.version);
              switch (comparator.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  setMin && !gt(compver, setMin) || (setMin = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error(`Unexpected operation: ${comparator.operator}`);
              }
            }), !setMin || minver && !gt(minver, setMin) || (minver = setMin);
          }
          return minver && range.test(minver) ? minver : null;
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/outside.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/comparator.js"), { ANY } = Comparator, Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js"), satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/satisfies.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gt.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lt.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lte.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gte.js");
        module3.exports = (version, range, hilo, options) => {
          let gtfn, ltefn, ltfn, comp, ecomp;
          switch (version = new SemVer(version, options), range = new Range(range, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies(version, range, options)) return false;
          for (let i = 0; i < range.set.length; ++i) {
            const comparators = range.set[i];
            let high = null, low = null;
            if (comparators.forEach((comparator) => {
              comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
            }), high.operator === comp || high.operator === ecomp) return false;
            if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
            if (low.operator === ecomp && ltfn(version, low.semver)) return false;
          }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/simplify.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/satisfies.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js");
        module3.exports = (versions, range, options) => {
          const set = [];
          let first = null, prev = null;
          const v = versions.sort((a, b) => compare(a, b, options));
          for (const version of v) {
            satisfies(version, range, options) ? (prev = version, first || (first = version)) : (prev && set.push([first, prev]), prev = null, first = null);
          }
          first && set.push([first, null]);
          const ranges = [];
          for (const [min, max] of set) min === max ? ranges.push(min) : max || min !== v[0] ? max ? min === v[0] ? ranges.push(`<=${max}`) : ranges.push(`${min} - ${max}`) : ranges.push(`>=${min}`) : ranges.push("*");
          const simplified = ranges.join(" || "), original = "string" == typeof range.raw ? range.raw : String(range);
          return simplified.length < original.length ? simplified : range;
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/subset.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/comparator.js"), { ANY } = Comparator, satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/satisfies.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js"), minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")], minimumVersion = [new Comparator(">=0.0.0")], simpleSubset = (sub, dom, options) => {
          if (sub === dom) return true;
          if (1 === sub.length && sub[0].semver === ANY) {
            if (1 === dom.length && dom[0].semver === ANY) return true;
            sub = options.includePrerelease ? minimumVersionWithPreRelease : minimumVersion;
          }
          if (1 === dom.length && dom[0].semver === ANY) {
            if (options.includePrerelease) return true;
            dom = minimumVersion;
          }
          const eqSet = /* @__PURE__ */ new Set();
          let gt, lt, gtltComp, higher, lower, hasDomLT, hasDomGT;
          for (const c of sub) ">" === c.operator || ">=" === c.operator ? gt = higherGT(gt, c, options) : "<" === c.operator || "<=" === c.operator ? lt = lowerLT(lt, c, options) : eqSet.add(c.semver);
          if (eqSet.size > 1) return null;
          if (gt && lt) {
            if (gtltComp = compare(gt.semver, lt.semver, options), gtltComp > 0) return null;
            if (0 === gtltComp && (">=" !== gt.operator || "<=" !== lt.operator)) return null;
          }
          for (const eq of eqSet) {
            if (gt && !satisfies(eq, String(gt), options)) return null;
            if (lt && !satisfies(eq, String(lt), options)) return null;
            for (const c of dom) if (!satisfies(eq, String(c), options)) return false;
            return true;
          }
          let needDomLTPre = !(!lt || options.includePrerelease || !lt.semver.prerelease.length) && lt.semver, needDomGTPre = !(!gt || options.includePrerelease || !gt.semver.prerelease.length) && gt.semver;
          needDomLTPre && 1 === needDomLTPre.prerelease.length && "<" === lt.operator && 0 === needDomLTPre.prerelease[0] && (needDomLTPre = false);
          for (const c of dom) {
            if (hasDomGT = hasDomGT || ">" === c.operator || ">=" === c.operator, hasDomLT = hasDomLT || "<" === c.operator || "<=" === c.operator, gt) {
              if (needDomGTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch && (needDomGTPre = false), ">" === c.operator || ">=" === c.operator) {
                if (higher = higherGT(gt, c, options), higher === c && higher !== gt) return false;
              } else if (">=" === gt.operator && !satisfies(gt.semver, String(c), options)) return false;
            }
            if (lt) {
              if (needDomLTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch && (needDomLTPre = false), "<" === c.operator || "<=" === c.operator) {
                if (lower = lowerLT(lt, c, options), lower === c && lower !== lt) return false;
              } else if ("<=" === lt.operator && !satisfies(lt.semver, String(c), options)) return false;
            }
            if (!c.operator && (lt || gt) && 0 !== gtltComp) return false;
          }
          return !(gt && hasDomLT && !lt && 0 !== gtltComp) && (!(lt && hasDomGT && !gt && 0 !== gtltComp) && (!needDomGTPre && !needDomLTPre));
        }, higherGT = (a, b, options) => {
          if (!a) return b;
          const comp = compare(a.semver, b.semver, options);
          return comp > 0 ? a : comp < 0 || ">" === b.operator && ">=" === a.operator ? b : a;
        }, lowerLT = (a, b, options) => {
          if (!a) return b;
          const comp = compare(a.semver, b.semver, options);
          return comp < 0 ? a : comp > 0 || "<" === b.operator && "<=" === a.operator ? b : a;
        };
        module3.exports = (sub, dom, options = {}) => {
          if (sub === dom) return true;
          sub = new Range(sub, options), dom = new Range(dom, options);
          let sawNonNull = false;
          OUTER: for (const simpleSub of sub.set) {
            for (const simpleDom of dom.set) {
              const isSub = simpleSubset(simpleSub, simpleDom, options);
              if (sawNonNull = sawNonNull || null !== isSub, isSub) continue OUTER;
            }
            if (sawNonNull) return false;
          }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/to-comparators.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js");
        module3.exports = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
      }, "./node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/valid.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js");
        module3.exports = (range, options) => {
          try {
            return new Range(range, options).range || "*";
          } catch (er) {
            return null;
          }
        };
      }, "./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js": (module3) => {
        "use strict";
        module3.exports = function(Yallist) {
          Yallist.prototype[Symbol.iterator] = function* () {
            for (let walker = this.head; walker; walker = walker.next) yield walker.value;
          };
        };
      }, "./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        function Yallist(list) {
          var self2 = this;
          if (self2 instanceof Yallist || (self2 = new Yallist()), self2.tail = null, self2.head = null, self2.length = 0, list && "function" == typeof list.forEach) list.forEach(function(item) {
            self2.push(item);
          });
          else if (arguments.length > 0) for (var i = 0, l = arguments.length; i < l; i++) self2.push(arguments[i]);
          return self2;
        }
        function insert(self2, node, value2) {
          var inserted = node === self2.head ? new Node(value2, null, node, self2) : new Node(value2, node, node.next, self2);
          return null === inserted.next && (self2.tail = inserted), null === inserted.prev && (self2.head = inserted), self2.length++, inserted;
        }
        function push(self2, item) {
          self2.tail = new Node(item, self2.tail, null, self2), self2.head || (self2.head = self2.tail), self2.length++;
        }
        function unshift(self2, item) {
          self2.head = new Node(item, null, self2.head, self2), self2.tail || (self2.tail = self2.head), self2.length++;
        }
        function Node(value2, prev, next, list) {
          if (!(this instanceof Node)) return new Node(value2, prev, next, list);
          this.list = list, this.value = value2, prev ? (prev.next = this, this.prev = prev) : this.prev = null, next ? (next.prev = this, this.next = next) : this.next = null;
        }
        module3.exports = Yallist, Yallist.Node = Node, Yallist.create = Yallist, Yallist.prototype.removeNode = function(node) {
          if (node.list !== this) throw new Error("removing node which does not belong to this list");
          var next = node.next, prev = node.prev;
          return next && (next.prev = prev), prev && (prev.next = next), node === this.head && (this.head = next), node === this.tail && (this.tail = prev), node.list.length--, node.next = null, node.prev = null, node.list = null, next;
        }, Yallist.prototype.unshiftNode = function(node) {
          if (node !== this.head) {
            node.list && node.list.removeNode(node);
            var head2 = this.head;
            node.list = this, node.next = head2, head2 && (head2.prev = node), this.head = node, this.tail || (this.tail = node), this.length++;
          }
        }, Yallist.prototype.pushNode = function(node) {
          if (node !== this.tail) {
            node.list && node.list.removeNode(node);
            var tail = this.tail;
            node.list = this, node.prev = tail, tail && (tail.next = node), this.tail = node, this.head || (this.head = node), this.length++;
          }
        }, Yallist.prototype.push = function() {
          for (var i = 0, l = arguments.length; i < l; i++) push(this, arguments[i]);
          return this.length;
        }, Yallist.prototype.unshift = function() {
          for (var i = 0, l = arguments.length; i < l; i++) unshift(this, arguments[i]);
          return this.length;
        }, Yallist.prototype.pop = function() {
          if (this.tail) {
            var res = this.tail.value;
            return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, res;
          }
        }, Yallist.prototype.shift = function() {
          if (this.head) {
            var res = this.head.value;
            return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, res;
          }
        }, Yallist.prototype.forEach = function(fn, thisp) {
          thisp = thisp || this;
          for (var walker = this.head, i = 0; null !== walker; i++) fn.call(thisp, walker.value, i, this), walker = walker.next;
        }, Yallist.prototype.forEachReverse = function(fn, thisp) {
          thisp = thisp || this;
          for (var walker = this.tail, i = this.length - 1; null !== walker; i--) fn.call(thisp, walker.value, i, this), walker = walker.prev;
        }, Yallist.prototype.get = function(n) {
          for (var i = 0, walker = this.head; null !== walker && i < n; i++) walker = walker.next;
          if (i === n && null !== walker) return walker.value;
        }, Yallist.prototype.getReverse = function(n) {
          for (var i = 0, walker = this.tail; null !== walker && i < n; i++) walker = walker.prev;
          if (i === n && null !== walker) return walker.value;
        }, Yallist.prototype.map = function(fn, thisp) {
          thisp = thisp || this;
          for (var res = new Yallist(), walker = this.head; null !== walker; ) res.push(fn.call(thisp, walker.value, this)), walker = walker.next;
          return res;
        }, Yallist.prototype.mapReverse = function(fn, thisp) {
          thisp = thisp || this;
          for (var res = new Yallist(), walker = this.tail; null !== walker; ) res.push(fn.call(thisp, walker.value, this)), walker = walker.prev;
          return res;
        }, Yallist.prototype.reduce = function(fn, initial) {
          var acc, walker = this.head;
          if (arguments.length > 1) acc = initial;
          else {
            if (!this.head) throw new TypeError("Reduce of empty list with no initial value");
            walker = this.head.next, acc = this.head.value;
          }
          for (var i = 0; null !== walker; i++) acc = fn(acc, walker.value, i), walker = walker.next;
          return acc;
        }, Yallist.prototype.reduceReverse = function(fn, initial) {
          var acc, walker = this.tail;
          if (arguments.length > 1) acc = initial;
          else {
            if (!this.tail) throw new TypeError("Reduce of empty list with no initial value");
            walker = this.tail.prev, acc = this.tail.value;
          }
          for (var i = this.length - 1; null !== walker; i--) acc = fn(acc, walker.value, i), walker = walker.prev;
          return acc;
        }, Yallist.prototype.toArray = function() {
          for (var arr = new Array(this.length), i = 0, walker = this.head; null !== walker; i++) arr[i] = walker.value, walker = walker.next;
          return arr;
        }, Yallist.prototype.toArrayReverse = function() {
          for (var arr = new Array(this.length), i = 0, walker = this.tail; null !== walker; i++) arr[i] = walker.value, walker = walker.prev;
          return arr;
        }, Yallist.prototype.slice = function(from, to) {
          (to = to || this.length) < 0 && (to += this.length), (from = from || 0) < 0 && (from += this.length);
          var ret = new Yallist();
          if (to < from || to < 0) return ret;
          from < 0 && (from = 0), to > this.length && (to = this.length);
          for (var i = 0, walker = this.head; null !== walker && i < from; i++) walker = walker.next;
          for (; null !== walker && i < to; i++, walker = walker.next) ret.push(walker.value);
          return ret;
        }, Yallist.prototype.sliceReverse = function(from, to) {
          (to = to || this.length) < 0 && (to += this.length), (from = from || 0) < 0 && (from += this.length);
          var ret = new Yallist();
          if (to < from || to < 0) return ret;
          from < 0 && (from = 0), to > this.length && (to = this.length);
          for (var i = this.length, walker = this.tail; null !== walker && i > to; i--) walker = walker.prev;
          for (; null !== walker && i > from; i--, walker = walker.prev) ret.push(walker.value);
          return ret;
        }, Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
          start > this.length && (start = this.length - 1), start < 0 && (start = this.length + start);
          for (var i = 0, walker = this.head; null !== walker && i < start; i++) walker = walker.next;
          var ret = [];
          for (i = 0; walker && i < deleteCount; i++) ret.push(walker.value), walker = this.removeNode(walker);
          null === walker && (walker = this.tail), walker !== this.head && walker !== this.tail && (walker = walker.prev);
          for (i = 0; i < nodes.length; i++) walker = insert(this, walker, nodes[i]);
          return ret;
        }, Yallist.prototype.reverse = function() {
          for (var head2 = this.head, tail = this.tail, walker = head2; null !== walker; walker = walker.prev) {
            var p = walker.prev;
            walker.prev = walker.next, walker.next = p;
          }
          return this.head = tail, this.tail = head2, this;
        };
        try {
          __webpack_require__2("./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js")(Yallist);
        } catch (er) {
        }
      }, crypto: (module3) => {
        "use strict";
        module3.exports = require("crypto");
      }, fs: (module3) => {
        "use strict";
        module3.exports = require("fs");
      }, module: (module3) => {
        "use strict";
        module3.exports = require("module");
      }, path: (module3) => {
        "use strict";
        module3.exports = require("path");
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule) return cachedModule.exports;
        var module3 = __webpack_module_cache__[moduleId] = { id: moduleId, loaded: false, exports: {} };
        return __webpack_modules__[moduleId](module3, module3.exports, __webpack_require__), module3.loaded = true, module3.exports;
      }
      __webpack_require__.n = (module3) => {
        var getter = module3 && module3.__esModule ? () => module3.default : () => module3;
        return __webpack_require__.d(getter, { a: getter }), getter;
      }, __webpack_require__.d = (exports3, definition) => {
        for (var key in definition) __webpack_require__.o(definition, key) && !__webpack_require__.o(exports3, key) && Object.defineProperty(exports3, key, { enumerable: true, get: definition[key] });
      }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.nmd = (module3) => (module3.paths = [], module3.children || (module3.children = []), module3);
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, { default: () => createJITI });
        var external_fs_ = __webpack_require__("fs"), external_module_ = __webpack_require__("module");
        const external_perf_hooks_namespaceObject = require("perf_hooks"), external_os_namespaceObject = require("os"), external_vm_namespaceObject = require("vm");
        var external_vm_default = __webpack_require__.n(external_vm_namespaceObject);
        const external_url_namespaceObject = require("url");
        function normalizeWindowsPath(input = "") {
          return input && input.includes("\\") ? input.replace(/\\/g, "/") : input;
        }
        const _UNC_REGEX = /^[/\\]{2}/, _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/, _DRIVE_LETTER_RE = /^[A-Za-z]:$/, pathe_92c04245_normalize = function(path3) {
          if (0 === path3.length) return ".";
          const isUNCPath = (path3 = normalizeWindowsPath(path3)).match(_UNC_REGEX), isPathAbsolute = isAbsolute(path3), trailingSeparator = "/" === path3[path3.length - 1];
          return 0 === (path3 = normalizeString(path3, !isPathAbsolute)).length ? isPathAbsolute ? "/" : trailingSeparator ? "./" : "." : (trailingSeparator && (path3 += "/"), _DRIVE_LETTER_RE.test(path3) && (path3 += "/"), isUNCPath ? isPathAbsolute ? `//${path3}` : `//./${path3}` : isPathAbsolute && !isAbsolute(path3) ? `/${path3}` : path3);
        }, join2 = function(...arguments_) {
          if (0 === arguments_.length) return ".";
          let joined;
          for (const argument of arguments_) argument && argument.length > 0 && (void 0 === joined ? joined = argument : joined += `/${argument}`);
          return void 0 === joined ? "." : pathe_92c04245_normalize(joined.replace(/\/\/+/g, "/"));
        };
        function normalizeString(path3, allowAboveRoot) {
          let res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, char = null;
          for (let index = 0; index <= path3.length; ++index) {
            if (index < path3.length) char = path3[index];
            else {
              if ("/" === char) break;
              char = "/";
            }
            if ("/" === char) {
              if (lastSlash === index - 1 || 1 === dots) ;
              else if (2 === dots) {
                if (res.length < 2 || 2 !== lastSegmentLength || "." !== res[res.length - 1] || "." !== res[res.length - 2]) {
                  if (res.length > 2) {
                    const lastSlashIndex = res.lastIndexOf("/");
                    -1 === lastSlashIndex ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = index, dots = 0;
                    continue;
                  }
                  if (res.length > 0) {
                    res = "", lastSegmentLength = 0, lastSlash = index, dots = 0;
                    continue;
                  }
                }
                allowAboveRoot && (res += res.length > 0 ? "/.." : "..", lastSegmentLength = 2);
              } else res.length > 0 ? res += `/${path3.slice(lastSlash + 1, index)}` : res = path3.slice(lastSlash + 1, index), lastSegmentLength = index - lastSlash - 1;
              lastSlash = index, dots = 0;
            } else "." === char && -1 !== dots ? ++dots : dots = -1;
          }
          return res;
        }
        const isAbsolute = function(p) {
          return _IS_ABSOLUTE_RE.test(p);
        }, _EXTNAME_RE = /.(\.[^./]+)$/, extname = function(p) {
          const match = _EXTNAME_RE.exec(normalizeWindowsPath(p));
          return match && match[1] || "";
        }, pathe_92c04245_dirname = function(p) {
          const segments = normalizeWindowsPath(p).replace(/\/$/, "").split("/").slice(0, -1);
          return 1 === segments.length && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (isAbsolute(p) ? "/" : ".");
        }, basename = function(p, extension) {
          const lastSegment = normalizeWindowsPath(p).split("/").pop();
          return extension && lastSegment.endsWith(extension) ? lastSegment.slice(0, -extension.length) : lastSegment;
        }, suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/, suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/, JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
        function jsonParseTransform(key, value2) {
          if (!("__proto__" === key || "constructor" === key && value2 && "object" == typeof value2 && "prototype" in value2)) return value2;
          !function(key2) {
            console.warn(`[destr] Dropping "${key2}" key to prevent prototype pollution.`);
          }(key);
        }
        function destr(value2, options = {}) {
          if ("string" != typeof value2) return value2;
          const _value = value2.trim();
          if ('"' === value2[0] && '"' === value2.at(-1) && !value2.includes("\\")) return _value.slice(1, -1);
          if (_value.length <= 9) {
            const _lval = _value.toLowerCase();
            if ("true" === _lval) return true;
            if ("false" === _lval) return false;
            if ("undefined" === _lval) return;
            if ("null" === _lval) return null;
            if ("nan" === _lval) return Number.NaN;
            if ("infinity" === _lval) return Number.POSITIVE_INFINITY;
            if ("-infinity" === _lval) return Number.NEGATIVE_INFINITY;
          }
          if (!JsonSigRx.test(value2)) {
            if (options.strict) throw new SyntaxError("[destr] Invalid JSON");
            return value2;
          }
          try {
            if (suspectProtoRx.test(value2) || suspectConstructorRx.test(value2)) {
              if (options.strict) throw new Error("[destr] Possible prototype pollution");
              return JSON.parse(value2, jsonParseTransform);
            }
            return JSON.parse(value2);
          } catch (error) {
            if (options.strict) throw error;
            return value2;
          }
        }
        function escapeStringRegexp(string) {
          if ("string" != typeof string) throw new TypeError("Expected a string");
          return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
        }
        var create_require = __webpack_require__("./node_modules/.pnpm/create-require@1.1.1/node_modules/create-require/create-require.js"), create_require_default = __webpack_require__.n(create_require), semver = __webpack_require__("./node_modules/.pnpm/semver@7.5.4/node_modules/semver/index.js");
        const pathSeparators = /* @__PURE__ */ new Set(["/", "\\", void 0]), normalizedAliasSymbol = Symbol.for("pathe:normalizedAlias");
        function normalizeAliases(_aliases) {
          if (_aliases[normalizedAliasSymbol]) return _aliases;
          const aliases2 = Object.fromEntries(Object.entries(_aliases).sort(([a], [b]) => function(a2, b2) {
            return b2.split("/").length - a2.split("/").length;
          }(a, b)));
          for (const key in aliases2) for (const alias in aliases2) alias === key || key.startsWith(alias) || aliases2[key].startsWith(alias) && pathSeparators.has(aliases2[key][alias.length]) && (aliases2[key] = aliases2[alias] + aliases2[key].slice(alias.length));
          return Object.defineProperty(aliases2, normalizedAliasSymbol, { value: true, enumerable: false }), aliases2;
        }
        var lib = __webpack_require__("./node_modules/.pnpm/pirates@4.0.6/node_modules/pirates/lib/index.js"), object_hash = __webpack_require__("./node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/index.js"), object_hash_default = __webpack_require__.n(object_hash), astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239], astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", reservedWords = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" }, ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", keywords$1 = { 5: ecma5AndLessKeywords, "5module": ecma5AndLessKeywords + " export import", 6: ecma5AndLessKeywords + " const class extends export import super" }, keywordRelationalOperator = /^in(stanceof)?$/, nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65]");
        function isInAstralSet(code, set) {
          for (var pos = 65536, i2 = 0; i2 < set.length; i2 += 2) {
            if ((pos += set[i2]) > code) return false;
            if ((pos += set[i2 + 1]) >= code) return true;
          }
          return false;
        }
        function isIdentifierStart(code, astral) {
          return code < 65 ? 36 === code : code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : false !== astral && isInAstralSet(code, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code, astral) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : false !== astral && (isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)))));
        }
        var TokenType = function(label, conf) {
          void 0 === conf && (conf = {}), this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop || null, this.updateContext = null;
        };
        function binop(name, prec) {
          return new TokenType(name, { beforeExpr: true, binop: prec });
        }
        var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true }, keywords = {};
        function kw(name, options) {
          return void 0 === options && (options = {}), options.keyword = name, keywords[name] = new TokenType(name, options);
        }
        var types$1 = { num: new TokenType("num", startsExpr), regexp: new TokenType("regexp", startsExpr), string: new TokenType("string", startsExpr), name: new TokenType("name", startsExpr), privateId: new TokenType("privateId", startsExpr), eof: new TokenType("eof"), bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }), bracketR: new TokenType("]"), braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }), braceR: new TokenType("}"), parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }), parenR: new TokenType(")"), comma: new TokenType(",", beforeExpr), semi: new TokenType(";", beforeExpr), colon: new TokenType(":", beforeExpr), dot: new TokenType("."), question: new TokenType("?", beforeExpr), questionDot: new TokenType("?."), arrow: new TokenType("=>", beforeExpr), template: new TokenType("template"), invalidTemplate: new TokenType("invalidTemplate"), ellipsis: new TokenType("...", beforeExpr), backQuote: new TokenType("`", startsExpr), dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }), eq: new TokenType("=", { beforeExpr: true, isAssign: true }), assign: new TokenType("_=", { beforeExpr: true, isAssign: true }), incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: binop("||", 1), logicalAND: binop("&&", 2), bitwiseOR: binop("|", 3), bitwiseXOR: binop("^", 4), bitwiseAND: binop("&", 5), equality: binop("==/!=/===/!==", 6), relational: binop("</>/<=/>=", 7), bitShift: binop("<</>>/>>>", 8), plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: binop("%", 10), star: binop("*", 10), slash: binop("/", 10), starstar: new TokenType("**", { beforeExpr: true }), coalesce: binop("??", 1), _break: kw("break"), _case: kw("case", beforeExpr), _catch: kw("catch"), _continue: kw("continue"), _debugger: kw("debugger"), _default: kw("default", beforeExpr), _do: kw("do", { isLoop: true, beforeExpr: true }), _else: kw("else", beforeExpr), _finally: kw("finally"), _for: kw("for", { isLoop: true }), _function: kw("function", startsExpr), _if: kw("if"), _return: kw("return", beforeExpr), _switch: kw("switch"), _throw: kw("throw", beforeExpr), _try: kw("try"), _var: kw("var"), _const: kw("const"), _while: kw("while", { isLoop: true }), _with: kw("with"), _new: kw("new", { beforeExpr: true, startsExpr: true }), _this: kw("this", startsExpr), _super: kw("super", startsExpr), _class: kw("class", startsExpr), _extends: kw("extends", beforeExpr), _export: kw("export"), _import: kw("import", startsExpr), _null: kw("null", startsExpr), _true: kw("true", startsExpr), _false: kw("false", startsExpr), _in: kw("in", { beforeExpr: true, binop: 7 }), _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }), _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true }) }, lineBreak = /\r\n?|\n|\u2028|\u2029/, lineBreakG = new RegExp(lineBreak.source, "g");
        function isNewLine(code) {
          return 10 === code || 13 === code || 8232 === code || 8233 === code;
        }
        function nextLineBreak(code, from, end) {
          void 0 === end && (end = code.length);
          for (var i2 = from; i2 < end; i2++) {
            var next = code.charCodeAt(i2);
            if (isNewLine(next)) return i2 < end - 1 && 13 === next && 10 === code.charCodeAt(i2 + 1) ? i2 + 2 : i2 + 1;
          }
          return -1;
        }
        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ref = Object.prototype, acorn_hasOwnProperty = ref.hasOwnProperty, acorn_toString = ref.toString, hasOwn = Object.hasOwn || function(obj, propName) {
          return acorn_hasOwnProperty.call(obj, propName);
        }, isArray = Array.isArray || function(obj) {
          return "[object Array]" === acorn_toString.call(obj);
        }, regexpCache = /* @__PURE__ */ Object.create(null);
        function wordsRegexp(words) {
          return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
        }
        function codePointToString(code) {
          return code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(55296 + (code >> 10), 56320 + (1023 & code)));
        }
        var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Position = function(line, col) {
          this.line = line, this.column = col;
        };
        Position.prototype.offset = function(n) {
          return new Position(this.line, this.column + n);
        };
        var SourceLocation = function(p, start, end) {
          this.start = start, this.end = end, null !== p.sourceFile && (this.source = p.sourceFile);
        };
        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0; ; ) {
            var nextBreak = nextLineBreak(input, cur, offset);
            if (nextBreak < 0) return new Position(line, offset - cur);
            ++line, cur = nextBreak;
          }
        }
        var defaultOptions = { ecmaVersion: null, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: null, allowSuperOutsideMethod: null, allowHashBang: false, checkPrivateFields: true, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false }, warnedAboutEcmaVersion = false;
        function getOptions(opts) {
          var options = {};
          for (var opt in defaultOptions) options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
          if ("latest" === options.ecmaVersion ? options.ecmaVersion = 1e8 : null == options.ecmaVersion ? (!warnedAboutEcmaVersion && "object" == typeof console && console.warn && (warnedAboutEcmaVersion = true, console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")), options.ecmaVersion = 11) : options.ecmaVersion >= 2015 && (options.ecmaVersion -= 2009), null == options.allowReserved && (options.allowReserved = options.ecmaVersion < 5), opts && null != opts.allowHashBang || (options.allowHashBang = options.ecmaVersion >= 14), isArray(options.onToken)) {
            var tokens = options.onToken;
            options.onToken = function(token) {
              return tokens.push(token);
            };
          }
          return isArray(options.onComment) && (options.onComment = /* @__PURE__ */ function(options2, array) {
            return function(block, text, start, end, startLoc, endLoc) {
              var comment = { type: block ? "Block" : "Line", value: text, start, end };
              options2.locations && (comment.loc = new SourceLocation(this, startLoc, endLoc)), options2.ranges && (comment.range = [start, end]), array.push(comment);
            };
          }(options, options.onComment)), options;
        }
        function functionFlags(async, generator) {
          return 2 | (async ? 4 : 0) | (generator ? 8 : 0);
        }
        var Parser = function(options, input, startPos) {
          this.options = options = getOptions(options), this.sourceFile = options.sourceFile, this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : "module" === options.sourceType ? "5module" : 5]);
          var reserved = "";
          true !== options.allowReserved && (reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : 5 === options.ecmaVersion ? 5 : 3], "module" === options.sourceType && (reserved += " await")), this.reservedWords = wordsRegexp(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
          this.reservedWordsStrict = wordsRegexp(reservedStrict), this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind), this.input = String(input), this.containsEsc = false, startPos ? (this.pos = startPos, this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = types$1.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = "module" === options.sourceType, this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = false, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = /* @__PURE__ */ Object.create(null), 0 === this.pos && options.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
        }, prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
        Parser.prototype.parse = function() {
          var node = this.options.program || this.startNode();
          return this.nextToken(), this.parseTopLevel(node);
        }, prototypeAccessors.inFunction.get = function() {
          return (2 & this.currentVarScope().flags) > 0;
        }, prototypeAccessors.inGenerator.get = function() {
          return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors.inAsync.get = function() {
          return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors.canAwait.get = function() {
          for (var i2 = this.scopeStack.length - 1; i2 >= 0; i2--) {
            var scope = this.scopeStack[i2];
            if (scope.inClassFieldInit || 256 & scope.flags) return false;
            if (2 & scope.flags) return (4 & scope.flags) > 0;
          }
          return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
        }, prototypeAccessors.allowSuper.get = function() {
          var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
          return (64 & flags) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
        }, prototypeAccessors.allowDirectSuper.get = function() {
          return (128 & this.currentThisScope().flags) > 0;
        }, prototypeAccessors.treatFunctionsAsVar.get = function() {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        }, prototypeAccessors.allowNewDotTarget.get = function() {
          var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
          return (258 & flags) > 0 || inClassFieldInit;
        }, prototypeAccessors.inClassStaticBlock.get = function() {
          return (256 & this.currentVarScope().flags) > 0;
        }, Parser.extend = function() {
          for (var plugins = [], len = arguments.length; len--; ) plugins[len] = arguments[len];
          for (var cls = this, i2 = 0; i2 < plugins.length; i2++) cls = plugins[i2](cls);
          return cls;
        }, Parser.parse = function(input, options) {
          return new this(options, input).parse();
        }, Parser.parseExpressionAt = function(input, pos, options) {
          var parser = new this(options, input, pos);
          return parser.nextToken(), parser.parseExpression();
        }, Parser.tokenizer = function(input, options) {
          return new this(options, input);
        }, Object.defineProperties(Parser.prototype, prototypeAccessors);
        var pp$9 = Parser.prototype, literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
        pp$9.strictDirective = function(start) {
          if (this.options.ecmaVersion < 5) return false;
          for (; ; ) {
            skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length;
            var match = literal.exec(this.input.slice(start));
            if (!match) return false;
            if ("use strict" === (match[1] || match[2])) {
              skipWhiteSpace.lastIndex = start + match[0].length;
              var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length, next = this.input.charAt(end);
              return ";" === next || "}" === next || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || "!" === next && "=" === this.input.charAt(end + 1));
            }
            start += match[0].length, skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length, ";" === this.input[start] && start++;
          }
        }, pp$9.eat = function(type) {
          return this.type === type && (this.next(), true);
        }, pp$9.isContextual = function(name) {
          return this.type === types$1.name && this.value === name && !this.containsEsc;
        }, pp$9.eatContextual = function(name) {
          return !!this.isContextual(name) && (this.next(), true);
        }, pp$9.expectContextual = function(name) {
          this.eatContextual(name) || this.unexpected();
        }, pp$9.canInsertSemicolon = function() {
          return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$9.insertSemicolon = function() {
          if (this.canInsertSemicolon()) return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
        }, pp$9.semicolon = function() {
          this.eat(types$1.semi) || this.insertSemicolon() || this.unexpected();
        }, pp$9.afterTrailingComma = function(tokType, notNext) {
          if (this.type === tokType) return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), notNext || this.next(), true;
        }, pp$9.expect = function(type) {
          this.eat(type) || this.unexpected();
        }, pp$9.unexpected = function(pos) {
          this.raise(null != pos ? pos : this.start, "Unexpected token");
        };
        var DestructuringErrors = function() {
          this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
        };
        pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
          if (refDestructuringErrors) {
            refDestructuringErrors.trailingComma > -1 && this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
            var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
            parens > -1 && this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
          }
        }, pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors) return false;
          var shorthandAssign = refDestructuringErrors.shorthandAssign, doubleProto = refDestructuringErrors.doubleProto;
          if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;
          shorthandAssign >= 0 && this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"), doubleProto >= 0 && this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }, pp$9.checkYieldAwaitInDefaultParams = function() {
          this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
        }, pp$9.isSimpleAssignTarget = function(expr) {
          return "ParenthesizedExpression" === expr.type ? this.isSimpleAssignTarget(expr.expression) : "Identifier" === expr.type || "MemberExpression" === expr.type;
        };
        var pp$8 = Parser.prototype;
        pp$8.parseTopLevel = function(node) {
          var exports3 = /* @__PURE__ */ Object.create(null);
          for (node.body || (node.body = []); this.type !== types$1.eof; ) {
            var stmt = this.parseStatement(null, true, exports3);
            node.body.push(stmt);
          }
          if (this.inModule) for (var i2 = 0, list2 = Object.keys(this.undefinedExports); i2 < list2.length; i2 += 1) {
            var name = list2[i2];
            this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
          }
          return this.adaptDirectivePrologue(node.body), this.next(), node.sourceType = this.options.sourceType, this.finishNode(node, "Program");
        };
        var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
        pp$8.isLet = function(context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return false;
          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
          if (91 === nextCh || 92 === nextCh) return true;
          if (context) return false;
          if (123 === nextCh || nextCh > 55295 && nextCh < 56320) return true;
          if (isIdentifierStart(nextCh, true)) {
            for (var pos = next + 1; isIdentifierChar(nextCh = this.input.charCodeAt(pos), true); ) ++pos;
            if (92 === nextCh || nextCh > 55295 && nextCh < 56320) return true;
            var ident = this.input.slice(next, pos);
            if (!keywordRelationalOperator.test(ident)) return true;
          }
          return false;
        }, pp$8.isAsyncFunction = function() {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return false;
          skipWhiteSpace.lastIndex = this.pos;
          var after, skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length;
          return !(lineBreak.test(this.input.slice(this.pos, next)) || "function" !== this.input.slice(next, next + 8) || next + 8 !== this.input.length && (isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
        }, pp$8.parseStatement = function(context, topLevel, exports3) {
          var kind, starttype = this.type, node = this.startNode();
          switch (this.isLet(context) && (starttype = types$1._var, kind = "let"), starttype) {
            case types$1._break:
            case types$1._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword);
            case types$1._debugger:
              return this.parseDebuggerStatement(node);
            case types$1._do:
              return this.parseDoStatement(node);
            case types$1._for:
              return this.parseForStatement(node);
            case types$1._function:
              return context && (this.strict || "if" !== context && "label" !== context) && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(node, false, !context);
            case types$1._class:
              return context && this.unexpected(), this.parseClass(node, true);
            case types$1._if:
              return this.parseIfStatement(node);
            case types$1._return:
              return this.parseReturnStatement(node);
            case types$1._switch:
              return this.parseSwitchStatement(node);
            case types$1._throw:
              return this.parseThrowStatement(node);
            case types$1._try:
              return this.parseTryStatement(node);
            case types$1._const:
            case types$1._var:
              return kind = kind || this.value, context && "var" !== kind && this.unexpected(), this.parseVarStatement(node, kind);
            case types$1._while:
              return this.parseWhileStatement(node);
            case types$1._with:
              return this.parseWithStatement(node);
            case types$1.braceL:
              return this.parseBlock(true, node);
            case types$1.semi:
              return this.parseEmptyStatement(node);
            case types$1._export:
            case types$1._import:
              if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
                skipWhiteSpace.lastIndex = this.pos;
                var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
                if (40 === nextCh || 46 === nextCh) return this.parseExpressionStatement(node, this.parseExpression());
              }
              return this.options.allowImportExportEverywhere || (topLevel || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports3);
            default:
              if (this.isAsyncFunction()) return context && this.unexpected(), this.next(), this.parseFunctionStatement(node, true, !context);
              var maybeName = this.value, expr = this.parseExpression();
              return starttype === types$1.name && "Identifier" === expr.type && this.eat(types$1.colon) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
          }
        }, pp$8.parseBreakContinueStatement = function(node, keyword) {
          var isBreak = "break" === keyword;
          this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.label = null : this.type !== types$1.name ? this.unexpected() : (node.label = this.parseIdent(), this.semicolon());
          for (var i2 = 0; i2 < this.labels.length; ++i2) {
            var lab = this.labels[i2];
            if (null == node.label || lab.name === node.label.name) {
              if (null != lab.kind && (isBreak || "loop" === lab.kind)) break;
              if (node.label && isBreak) break;
            }
          }
          return i2 === this.labels.length && this.raise(node.start, "Unsyntactic " + keyword), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        }, pp$8.parseDebuggerStatement = function(node) {
          return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
        }, pp$8.parseDoStatement = function(node) {
          return this.next(), this.labels.push(loopLabel), node.body = this.parseStatement("do"), this.labels.pop(), this.expect(types$1._while), node.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(types$1.semi) : this.semicolon(), this.finishNode(node, "DoWhileStatement");
        }, pp$8.parseForStatement = function(node) {
          this.next();
          var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
          if (this.labels.push(loopLabel), this.enterScope(0), this.expect(types$1.parenL), this.type === types$1.semi) return awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, null);
          var isLet = this.isLet();
          if (this.type === types$1._var || this.type === types$1._const || isLet) {
            var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
            return this.next(), this.parseVar(init$1, true, kind), this.finishNode(init$1, "VariableDeclaration"), (this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === init$1.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === types$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), this.parseForIn(node, init$1)) : (awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$1));
          }
          var startsWithLet = this.isContextual("let"), isForOf = false, refDestructuringErrors = new DestructuringErrors(), init = this.parseExpression(!(awaitAt > -1) || "await", refDestructuringErrors);
          return this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (this.options.ecmaVersion >= 9 && (this.type === types$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), startsWithLet && isForOf && this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(init, false, refDestructuringErrors), this.checkLValPattern(init), this.parseForIn(node, init)) : (this.checkExpressionErrors(refDestructuringErrors, true), awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init));
        }, pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
          return this.next(), this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
        }, pp$8.parseIfStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
        }, pp$8.parseReturnStatement = function(node) {
          return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
        }, pp$8.parseSwitchStatement = function(node) {
          var cur;
          this.next(), node.discriminant = this.parseParenExpression(), node.cases = [], this.expect(types$1.braceL), this.labels.push(switchLabel), this.enterScope(0);
          for (var sawDefault = false; this.type !== types$1.braceR; ) if (this.type === types$1._case || this.type === types$1._default) {
            var isCase = this.type === types$1._case;
            cur && this.finishNode(cur, "SwitchCase"), node.cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), sawDefault = true, cur.test = null), this.expect(types$1.colon);
          } else cur || this.unexpected(), cur.consequent.push(this.parseStatement(null));
          return this.exitScope(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(node, "SwitchStatement");
        }, pp$8.parseThrowStatement = function(node) {
          return this.next(), lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
        };
        var empty$1 = [];
        pp$8.parseCatchClauseParam = function() {
          var param = this.parseBindingAtom(), simple = "Identifier" === param.type;
          return this.enterScope(simple ? 32 : 0), this.checkLValPattern(param, simple ? 4 : 2), this.expect(types$1.parenR), param;
        }, pp$8.parseTryStatement = function(node) {
          if (this.next(), node.block = this.parseBlock(), node.handler = null, this.type === types$1._catch) {
            var clause = this.startNode();
            this.next(), this.eat(types$1.parenL) ? clause.param = this.parseCatchClauseParam() : (this.options.ecmaVersion < 10 && this.unexpected(), clause.param = null, this.enterScope(0)), clause.body = this.parseBlock(false), this.exitScope(), node.handler = this.finishNode(clause, "CatchClause");
          }
          return node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(node.start, "Missing catch or finally clause"), this.finishNode(node, "TryStatement");
        }, pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {
          return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
        }, pp$8.parseWhileStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), this.labels.push(loopLabel), node.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(node, "WhileStatement");
        }, pp$8.parseWithStatement = function(node) {
          return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), node.object = this.parseParenExpression(), node.body = this.parseStatement("with"), this.finishNode(node, "WithStatement");
        }, pp$8.parseEmptyStatement = function(node) {
          return this.next(), this.finishNode(node, "EmptyStatement");
        }, pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
          for (var i$1 = 0, list2 = this.labels; i$1 < list2.length; i$1 += 1) {
            list2[i$1].name === maybeName && this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
          for (var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null, i2 = this.labels.length - 1; i2 >= 0; i2--) {
            var label$1 = this.labels[i2];
            if (label$1.statementStart !== node.start) break;
            label$1.statementStart = this.start, label$1.kind = kind;
          }
          return this.labels.push({ name: maybeName, kind, statementStart: this.start }), node.body = this.parseStatement(context ? -1 === context.indexOf("label") ? context + "label" : context : "label"), this.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
        }, pp$8.parseExpressionStatement = function(node, expr) {
          return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
        }, pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
          for (void 0 === createNewLexicalScope && (createNewLexicalScope = true), void 0 === node && (node = this.startNode()), node.body = [], this.expect(types$1.braceL), createNewLexicalScope && this.enterScope(0); this.type !== types$1.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return exitStrict && (this.strict = false), this.next(), createNewLexicalScope && this.exitScope(), this.finishNode(node, "BlockStatement");
        }, pp$8.parseFor = function(node, init) {
          return node.init = init, this.expect(types$1.semi), node.test = this.type === types$1.semi ? null : this.parseExpression(), this.expect(types$1.semi), node.update = this.type === types$1.parenR ? null : this.parseExpression(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, "ForStatement");
        }, pp$8.parseForIn = function(node, init) {
          var isForIn = this.type === types$1._in;
          return this.next(), "VariableDeclaration" === init.type && null != init.declarations[0].init && (!isForIn || this.options.ecmaVersion < 8 || this.strict || "var" !== init.kind || "Identifier" !== init.declarations[0].id.type) && this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        }, pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {
          for (node.declarations = [], node.kind = kind; ; ) {
            var decl = this.startNode();
            if (this.parseVarId(decl, kind), this.eat(types$1.eq) ? decl.init = this.parseMaybeAssign(isFor) : allowMissingInitializer || "const" !== kind || this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? allowMissingInitializer || "Identifier" === decl.id.type || isFor && (this.type === types$1._in || this.isContextual("of")) ? decl.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), node.declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(types$1.comma)) break;
          }
          return node;
        }, pp$8.parseVarId = function(decl, kind) {
          decl.id = this.parseBindingAtom(), this.checkLValPattern(decl.id, "var" === kind ? 1 : 2, false);
        };
        var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2;
        function isPrivateNameConflicted(privateNameMap, element) {
          var name = element.key.name, curr = privateNameMap[name], next = "true";
          return "MethodDefinition" !== element.type || "get" !== element.kind && "set" !== element.kind || (next = (element.static ? "s" : "i") + element.kind), "iget" === curr && "iset" === next || "iset" === curr && "iget" === next || "sget" === curr && "sset" === next || "sset" === curr && "sget" === next ? (privateNameMap[name] = "true", false) : !!curr || (privateNameMap[name] = next, false);
        }
        function checkKeyName(node, name) {
          var computed = node.computed, key = node.key;
          return !computed && ("Identifier" === key.type && key.name === name || "Literal" === key.type && key.value === name);
        }
        pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
          this.initFunction(node), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) && (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT && this.unexpected(), node.generator = this.eat(types$1.star)), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), statement & FUNC_STATEMENT && (node.id = 4 & statement && this.type !== types$1.name ? null : this.parseIdent(), !node.id || statement & FUNC_HANGING_STATEMENT || this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(functionFlags(node.async, node.generator)), statement & FUNC_STATEMENT || (node.id = this.type === types$1.name ? this.parseIdent() : null), this.parseFunctionParams(node), this.parseFunctionBody(node, allowExpressionBody, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
        }, pp$8.parseFunctionParams = function(node) {
          this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
        }, pp$8.parseClass = function(node, isStatement) {
          this.next();
          var oldStrict = this.strict;
          this.strict = true, this.parseClassId(node, isStatement), this.parseClassSuper(node);
          var privateNameMap = this.enterClassBody(), classBody = this.startNode(), hadConstructor = false;
          for (classBody.body = [], this.expect(types$1.braceL); this.type !== types$1.braceR; ) {
            var element = this.parseClassElement(null !== node.superClass);
            element && (classBody.body.push(element), "MethodDefinition" === element.type && "constructor" === element.kind ? (hadConstructor && this.raiseRecoverable(element.start, "Duplicate constructor in the same class"), hadConstructor = true) : element.key && "PrivateIdentifier" === element.key.type && isPrivateNameConflicted(privateNameMap, element) && this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared"));
          }
          return this.strict = oldStrict, this.next(), node.body = this.finishNode(classBody, "ClassBody"), this.exitClassBody(), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        }, pp$8.parseClassElement = function(constructorAllowsSuper) {
          if (this.eat(types$1.semi)) return null;
          var ecmaVersion = this.options.ecmaVersion, node = this.startNode(), keyName = "", isGenerator = false, isAsync = false, kind = "method", isStatic = false;
          if (this.eatContextual("static")) {
            if (ecmaVersion >= 13 && this.eat(types$1.braceL)) return this.parseClassStaticBlock(node), node;
            this.isClassElementNameStart() || this.type === types$1.star ? isStatic = true : keyName = "static";
          }
          if (node.static = isStatic, !keyName && ecmaVersion >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== types$1.star || this.canInsertSemicolon() ? keyName = "async" : isAsync = true), !keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star) && (isGenerator = true), !keyName && !isAsync && !isGenerator) {
            var lastValue = this.value;
            (this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? kind = lastValue : keyName = lastValue);
          }
          if (keyName ? (node.computed = false, node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), node.key.name = keyName, this.finishNode(node.key, "Identifier")) : this.parseClassElementName(node), ecmaVersion < 13 || this.type === types$1.parenL || "method" !== kind || isGenerator || isAsync) {
            var isConstructor = !node.static && checkKeyName(node, "constructor"), allowsDirectSuper = isConstructor && constructorAllowsSuper;
            isConstructor && "method" !== kind && this.raise(node.key.start, "Constructor can't have get/set modifier"), node.kind = isConstructor ? "constructor" : kind, this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
          } else this.parseClassField(node);
          return node;
        }, pp$8.isClassElementNameStart = function() {
          return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
        }, pp$8.parseClassElementName = function(element) {
          this.type === types$1.privateId ? ("constructor" === this.value && this.raise(this.start, "Classes can't have an element named '#constructor'"), element.computed = false, element.key = this.parsePrivateIdent()) : this.parsePropertyName(element);
        }, pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
          var key = method.key;
          "constructor" === method.kind ? (isGenerator && this.raise(key.start, "Constructor can't be a generator"), isAsync && this.raise(key.start, "Constructor can't be an async method")) : method.static && checkKeyName(method, "prototype") && this.raise(key.start, "Classes may not have a static property named prototype");
          var value2 = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
          return "get" === method.kind && 0 !== value2.params.length && this.raiseRecoverable(value2.start, "getter should have no params"), "set" === method.kind && 1 !== value2.params.length && this.raiseRecoverable(value2.start, "setter should have exactly one param"), "set" === method.kind && "RestElement" === value2.params[0].type && this.raiseRecoverable(value2.params[0].start, "Setter cannot use rest params"), this.finishNode(method, "MethodDefinition");
        }, pp$8.parseClassField = function(field) {
          if (checkKeyName(field, "constructor") ? this.raise(field.key.start, "Classes can't have a field named 'constructor'") : field.static && checkKeyName(field, "prototype") && this.raise(field.key.start, "Classes can't have a static field named 'prototype'"), this.eat(types$1.eq)) {
            var scope = this.currentThisScope(), inClassFieldInit = scope.inClassFieldInit;
            scope.inClassFieldInit = true, field.value = this.parseMaybeAssign(), scope.inClassFieldInit = inClassFieldInit;
          } else field.value = null;
          return this.semicolon(), this.finishNode(field, "PropertyDefinition");
        }, pp$8.parseClassStaticBlock = function(node) {
          node.body = [];
          var oldLabels = this.labels;
          for (this.labels = [], this.enterScope(320); this.type !== types$1.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return this.next(), this.exitScope(), this.labels = oldLabels, this.finishNode(node, "StaticBlock");
        }, pp$8.parseClassId = function(node, isStatement) {
          this.type === types$1.name ? (node.id = this.parseIdent(), isStatement && this.checkLValSimple(node.id, 2, false)) : (true === isStatement && this.unexpected(), node.id = null);
        }, pp$8.parseClassSuper = function(node) {
          node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
        }, pp$8.enterClassBody = function() {
          var element = { declared: /* @__PURE__ */ Object.create(null), used: [] };
          return this.privateNameStack.push(element), element.declared;
        }, pp$8.exitClassBody = function() {
          var ref2 = this.privateNameStack.pop(), declared = ref2.declared, used = ref2.used;
          if (this.options.checkPrivateFields) for (var len = this.privateNameStack.length, parent = 0 === len ? null : this.privateNameStack[len - 1], i2 = 0; i2 < used.length; ++i2) {
            var id = used[i2];
            hasOwn(declared, id.name) || (parent ? parent.used.push(id) : this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class"));
          }
        }, pp$8.parseExportAllDeclaration = function(node, exports3) {
          return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (node.exported = this.parseModuleExportName(), this.checkExport(exports3, node.exported, this.lastTokStart)) : node.exported = null), this.expectContextual("from"), this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.semicolon(), this.finishNode(node, "ExportAllDeclaration");
        }, pp$8.parseExport = function(node, exports3) {
          if (this.next(), this.eat(types$1.star)) return this.parseExportAllDeclaration(node, exports3);
          if (this.eat(types$1._default)) return this.checkExport(exports3, "default", this.lastTokStart), node.declaration = this.parseExportDefaultDeclaration(), this.finishNode(node, "ExportDefaultDeclaration");
          if (this.shouldParseExportStatement()) node.declaration = this.parseExportDeclaration(node), "VariableDeclaration" === node.declaration.type ? this.checkVariableExport(exports3, node.declaration.declarations) : this.checkExport(exports3, node.declaration.id, node.declaration.id.start), node.specifiers = [], node.source = null;
          else {
            if (node.declaration = null, node.specifiers = this.parseExportSpecifiers(exports3), this.eatContextual("from")) this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom();
            else {
              for (var i2 = 0, list2 = node.specifiers; i2 < list2.length; i2 += 1) {
                var spec = list2[i2];
                this.checkUnreserved(spec.local), this.checkLocalExport(spec.local), "Literal" === spec.local.type && this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
              }
              node.source = null;
            }
            this.semicolon();
          }
          return this.finishNode(node, "ExportNamedDeclaration");
        }, pp$8.parseExportDeclaration = function(node) {
          return this.parseStatement(null);
        }, pp$8.parseExportDefaultDeclaration = function() {
          var isAsync;
          if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
            var fNode = this.startNode();
            return this.next(), isAsync && this.next(), this.parseFunction(fNode, 4 | FUNC_STATEMENT, false, isAsync);
          }
          if (this.type === types$1._class) {
            var cNode = this.startNode();
            return this.parseClass(cNode, "nullableID");
          }
          var declaration = this.parseMaybeAssign();
          return this.semicolon(), declaration;
        }, pp$8.checkExport = function(exports3, name, pos) {
          exports3 && ("string" != typeof name && (name = "Identifier" === name.type ? name.name : name.value), hasOwn(exports3, name) && this.raiseRecoverable(pos, "Duplicate export '" + name + "'"), exports3[name] = true);
        }, pp$8.checkPatternExport = function(exports3, pat) {
          var type = pat.type;
          if ("Identifier" === type) this.checkExport(exports3, pat, pat.start);
          else if ("ObjectPattern" === type) for (var i2 = 0, list2 = pat.properties; i2 < list2.length; i2 += 1) {
            var prop = list2[i2];
            this.checkPatternExport(exports3, prop);
          }
          else if ("ArrayPattern" === type) for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            elt && this.checkPatternExport(exports3, elt);
          }
          else "Property" === type ? this.checkPatternExport(exports3, pat.value) : "AssignmentPattern" === type ? this.checkPatternExport(exports3, pat.left) : "RestElement" === type && this.checkPatternExport(exports3, pat.argument);
        }, pp$8.checkVariableExport = function(exports3, decls) {
          if (exports3) for (var i2 = 0, list2 = decls; i2 < list2.length; i2 += 1) {
            var decl = list2[i2];
            this.checkPatternExport(exports3, decl.id);
          }
        }, pp$8.shouldParseExportStatement = function() {
          return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction();
        }, pp$8.parseExportSpecifier = function(exports3) {
          var node = this.startNode();
          return node.local = this.parseModuleExportName(), node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local, this.checkExport(exports3, node.exported, node.exported.start), this.finishNode(node, "ExportSpecifier");
        }, pp$8.parseExportSpecifiers = function(exports3) {
          var nodes = [], first = true;
          for (this.expect(types$1.braceL); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            nodes.push(this.parseExportSpecifier(exports3));
          }
          return nodes;
        }, pp$8.parseImport = function(node) {
          return this.next(), this.type === types$1.string ? (node.specifiers = empty$1, node.source = this.parseExprAtom()) : (node.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected()), this.semicolon(), this.finishNode(node, "ImportDeclaration");
        }, pp$8.parseImportSpecifier = function() {
          var node = this.startNode();
          return node.imported = this.parseModuleExportName(), this.eatContextual("as") ? node.local = this.parseIdent() : (this.checkUnreserved(node.imported), node.local = node.imported), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportSpecifier");
        }, pp$8.parseImportDefaultSpecifier = function() {
          var node = this.startNode();
          return node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportDefaultSpecifier");
        }, pp$8.parseImportNamespaceSpecifier = function() {
          var node = this.startNode();
          return this.next(), this.expectContextual("as"), node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportNamespaceSpecifier");
        }, pp$8.parseImportSpecifiers = function() {
          var nodes = [], first = true;
          if (this.type === types$1.name && (nodes.push(this.parseImportDefaultSpecifier()), !this.eat(types$1.comma))) return nodes;
          if (this.type === types$1.star) return nodes.push(this.parseImportNamespaceSpecifier()), nodes;
          for (this.expect(types$1.braceL); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR)) break;
            nodes.push(this.parseImportSpecifier());
          }
          return nodes;
        }, pp$8.parseModuleExportName = function() {
          if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
            var stringLiteral = this.parseLiteral(this.value);
            return loneSurrogate.test(stringLiteral.value) && this.raise(stringLiteral.start, "An export name cannot include a lone surrogate."), stringLiteral;
          }
          return this.parseIdent(true);
        }, pp$8.adaptDirectivePrologue = function(statements) {
          for (var i2 = 0; i2 < statements.length && this.isDirectiveCandidate(statements[i2]); ++i2) statements[i2].directive = statements[i2].expression.raw.slice(1, -1);
        }, pp$8.isDirectiveCandidate = function(statement) {
          return this.options.ecmaVersion >= 5 && "ExpressionStatement" === statement.type && "Literal" === statement.expression.type && "string" == typeof statement.expression.value && ('"' === this.input[statement.start] || "'" === this.input[statement.start]);
        };
        var pp$7 = Parser.prototype;
        pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node) switch (node.type) {
            case "Identifier":
              this.inAsync && "await" === node.name && this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
              for (var i2 = 0, list2 = node.properties; i2 < list2.length; i2 += 1) {
                var prop = list2[i2];
                this.toAssignable(prop, isBinding), "RestElement" !== prop.type || "ArrayPattern" !== prop.argument.type && "ObjectPattern" !== prop.argument.type || this.raise(prop.argument.start, "Unexpected token");
              }
              break;
            case "Property":
              "init" !== node.kind && this.raise(node.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(node.value, isBinding);
              break;
            case "ArrayExpression":
              node.type = "ArrayPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true), this.toAssignableList(node.elements, isBinding);
              break;
            case "SpreadElement":
              node.type = "RestElement", this.toAssignable(node.argument, isBinding), "AssignmentPattern" === node.argument.type && this.raise(node.argument.start, "Rest elements cannot have a default value");
              break;
            case "AssignmentExpression":
              "=" !== node.operator && this.raise(node.left.end, "Only '=' operator can be used for specifying default value."), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isBinding);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding) break;
            default:
              this.raise(node.start, "Assigning to rvalue");
          }
          else refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
          return node;
        }, pp$7.toAssignableList = function(exprList, isBinding) {
          for (var end = exprList.length, i2 = 0; i2 < end; i2++) {
            var elt = exprList[i2];
            elt && this.toAssignable(elt, isBinding);
          }
          if (end) {
            var last = exprList[end - 1];
            6 === this.options.ecmaVersion && isBinding && last && "RestElement" === last.type && "Identifier" !== last.argument.type && this.unexpected(last.argument.start);
          }
          return exprList;
        }, pp$7.parseSpread = function(refDestructuringErrors) {
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.finishNode(node, "SpreadElement");
        }, pp$7.parseRestBinding = function() {
          var node = this.startNode();
          return this.next(), 6 === this.options.ecmaVersion && this.type !== types$1.name && this.unexpected(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
        }, pp$7.parseBindingAtom = function() {
          if (this.options.ecmaVersion >= 6) switch (this.type) {
            case types$1.bracketL:
              var node = this.startNode();
              return this.next(), node.elements = this.parseBindingList(types$1.bracketR, true, true), this.finishNode(node, "ArrayPattern");
            case types$1.braceL:
              return this.parseObj(true);
          }
          return this.parseIdent();
        }, pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
          for (var elts = [], first = true; !this.eat(close); ) if (first ? first = false : this.expect(types$1.comma), allowEmpty && this.type === types$1.comma) elts.push(null);
          else {
            if (allowTrailingComma && this.afterTrailingComma(close)) break;
            if (this.type === types$1.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest), elts.push(rest), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.expect(close);
              break;
            }
            elts.push(this.parseAssignableListItem(allowModifiers));
          }
          return elts;
        }, pp$7.parseAssignableListItem = function(allowModifiers) {
          var elem = this.parseMaybeDefault(this.start, this.startLoc);
          return this.parseBindingListItem(elem), elem;
        }, pp$7.parseBindingListItem = function(param) {
          return param;
        }, pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
          if (left = left || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) return left;
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.right = this.parseMaybeAssign(), this.finishNode(node, "AssignmentPattern");
        }, pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
          void 0 === bindingType && (bindingType = 0);
          var isBind = 0 !== bindingType;
          switch (expr.type) {
            case "Identifier":
              this.strict && this.reservedWordsStrictBind.test(expr.name) && this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"), isBind && (2 === bindingType && "let" === expr.name && this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"), checkClashes && (hasOwn(checkClashes, expr.name) && this.raiseRecoverable(expr.start, "Argument name clash"), checkClashes[expr.name] = true), 5 !== bindingType && this.declareName(expr.name, bindingType, expr.start));
              break;
            case "ChainExpression":
              this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              isBind && this.raiseRecoverable(expr.start, "Binding member expression");
              break;
            case "ParenthesizedExpression":
              return isBind && this.raiseRecoverable(expr.start, "Binding parenthesized expression"), this.checkLValSimple(expr.expression, bindingType, checkClashes);
            default:
              this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
          }
        }, pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "ObjectPattern":
              for (var i2 = 0, list2 = expr.properties; i2 < list2.length; i2 += 1) {
                var prop = list2[i2];
                this.checkLValInnerPattern(prop, bindingType, checkClashes);
              }
              break;
            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1];
                elem && this.checkLValInnerPattern(elem, bindingType, checkClashes);
              }
              break;
            default:
              this.checkLValSimple(expr, bindingType, checkClashes);
          }
        }, pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "Property":
              this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
              break;
            case "AssignmentPattern":
              this.checkLValPattern(expr.left, bindingType, checkClashes);
              break;
            case "RestElement":
              this.checkLValPattern(expr.argument, bindingType, checkClashes);
              break;
            default:
              this.checkLValPattern(expr, bindingType, checkClashes);
          }
        };
        var TokContext = function(token, isExpr, preserveSpace, override, generator) {
          this.token = token, this.isExpr = !!isExpr, this.preserveSpace = !!preserveSpace, this.override = override, this.generator = !!generator;
        }, types = { b_stat: new TokContext("{", false), b_expr: new TokContext("{", true), b_tmpl: new TokContext("${", false), p_stat: new TokContext("(", false), p_expr: new TokContext("(", true), q_tmpl: new TokContext("`", true, true, function(p) {
          return p.tryReadTemplateToken();
        }), f_stat: new TokContext("function", false), f_expr: new TokContext("function", true), f_expr_gen: new TokContext("function", true, false, null, true), f_gen: new TokContext("function", false, false, null, true) }, pp$6 = Parser.prototype;
        pp$6.initialContext = function() {
          return [types.b_stat];
        }, pp$6.curContext = function() {
          return this.context[this.context.length - 1];
        }, pp$6.braceIsBlock = function(prevType) {
          var parent = this.curContext();
          return parent === types.f_expr || parent === types.f_stat || (prevType !== types$1.colon || parent !== types.b_stat && parent !== types.b_expr ? prevType === types$1._return || prevType === types$1.name && this.exprAllowed ? lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) : prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow || (prevType === types$1.braceL ? parent === types.b_stat : prevType !== types$1._var && prevType !== types$1._const && prevType !== types$1.name && !this.exprAllowed) : !parent.isExpr);
        }, pp$6.inGeneratorContext = function() {
          for (var i2 = this.context.length - 1; i2 >= 1; i2--) {
            var context = this.context[i2];
            if ("function" === context.token) return context.generator;
          }
          return false;
        }, pp$6.updateContext = function(prevType) {
          var update, type = this.type;
          type.keyword && prevType === types$1.dot ? this.exprAllowed = false : (update = type.updateContext) ? update.call(this, prevType) : this.exprAllowed = type.beforeExpr;
        }, pp$6.overrideContext = function(tokenCtx) {
          this.curContext() !== tokenCtx && (this.context[this.context.length - 1] = tokenCtx);
        }, types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
          if (1 !== this.context.length) {
            var out = this.context.pop();
            out === types.b_stat && "function" === this.curContext().token && (out = this.context.pop()), this.exprAllowed = !out.isExpr;
          } else this.exprAllowed = true;
        }, types$1.braceL.updateContext = function(prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr), this.exprAllowed = true;
        }, types$1.dollarBraceL.updateContext = function() {
          this.context.push(types.b_tmpl), this.exprAllowed = true;
        }, types$1.parenL.updateContext = function(prevType) {
          var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
          this.context.push(statementParens ? types.p_stat : types.p_expr), this.exprAllowed = true;
        }, types$1.incDec.updateContext = function() {
        }, types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
          !prevType.beforeExpr || prevType === types$1._else || prevType === types$1.semi && this.curContext() !== types.p_stat || prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) || (prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat ? this.context.push(types.f_stat) : this.context.push(types.f_expr), this.exprAllowed = false;
        }, types$1.colon.updateContext = function() {
          "function" === this.curContext().token && this.context.pop(), this.exprAllowed = true;
        }, types$1.backQuote.updateContext = function() {
          this.curContext() === types.q_tmpl ? this.context.pop() : this.context.push(types.q_tmpl), this.exprAllowed = false;
        }, types$1.star.updateContext = function(prevType) {
          if (prevType === types$1._function) {
            var index = this.context.length - 1;
            this.context[index] === types.f_expr ? this.context[index] = types.f_expr_gen : this.context[index] = types.f_gen;
          }
          this.exprAllowed = true;
        }, types$1.name.updateContext = function(prevType) {
          var allowed = false;
          this.options.ecmaVersion >= 6 && prevType !== types$1.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (allowed = true), this.exprAllowed = allowed;
        };
        var pp$5 = Parser.prototype;
        function isPrivateFieldAccess(node) {
          return "MemberExpression" === node.type && "PrivateIdentifier" === node.property.type || "ChainExpression" === node.type && isPrivateFieldAccess(node.expression);
        }
        pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
          if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === prop.type || this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))) {
            var name, key = prop.key;
            switch (key.type) {
              case "Identifier":
                name = key.name;
                break;
              case "Literal":
                name = String(key.value);
                break;
              default:
                return;
            }
            var kind = prop.kind;
            if (this.options.ecmaVersion >= 6) "__proto__" === name && "init" === kind && (propHash.proto && (refDestructuringErrors ? refDestructuringErrors.doubleProto < 0 && (refDestructuringErrors.doubleProto = key.start) : this.raiseRecoverable(key.start, "Redefinition of __proto__ property")), propHash.proto = true);
            else {
              var other = propHash[name = "$" + name];
              if (other) ("init" === kind ? this.strict && other.init || other.get || other.set : other.init || other[kind]) && this.raiseRecoverable(key.start, "Redefinition of property");
              else other = propHash[name] = { init: false, get: false, set: false };
              other[kind] = true;
            }
          }
        }, pp$5.parseExpression = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
          if (this.type === types$1.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            for (node.expressions = [expr]; this.eat(types$1.comma); ) node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
            return this.finishNode(node, "SequenceExpression");
          }
          return expr;
        }, pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator) return this.parseYield(forInit);
            this.exprAllowed = false;
          }
          var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
          refDestructuringErrors ? (oldParenAssign = refDestructuringErrors.parenthesizedAssign, oldTrailingComma = refDestructuringErrors.trailingComma, oldDoubleProto = refDestructuringErrors.doubleProto, refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1) : (refDestructuringErrors = new DestructuringErrors(), ownDestructuringErrors = true);
          var startPos = this.start, startLoc = this.startLoc;
          this.type !== types$1.parenL && this.type !== types$1.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = "await" === forInit);
          var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
          if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.operator = this.value, this.type === types$1.eq && (left = this.toAssignable(left, false, refDestructuringErrors)), ownDestructuringErrors || (refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1), refDestructuringErrors.shorthandAssign >= left.start && (refDestructuringErrors.shorthandAssign = -1), this.type === types$1.eq ? this.checkLValPattern(left) : this.checkLValSimple(left), node.left = left, this.next(), node.right = this.parseMaybeAssign(forInit), oldDoubleProto > -1 && (refDestructuringErrors.doubleProto = oldDoubleProto), this.finishNode(node, "AssignmentExpression");
          }
          return ownDestructuringErrors && this.checkExpressionErrors(refDestructuringErrors, true), oldParenAssign > -1 && (refDestructuringErrors.parenthesizedAssign = oldParenAssign), oldTrailingComma > -1 && (refDestructuringErrors.trailingComma = oldTrailingComma), left;
        }, pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprOps(forInit, refDestructuringErrors);
          if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
          if (this.eat(types$1.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.test = expr, node.consequent = this.parseMaybeAssign(), this.expect(types$1.colon), node.alternate = this.parseMaybeAssign(forInit), this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        }, pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
          return this.checkExpressionErrors(refDestructuringErrors) || expr.start === startPos && "ArrowFunctionExpression" === expr.type ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
        }, pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
          var prec = this.type.binop;
          if (null != prec && (!forInit || this.type !== types$1._in) && prec > minPrec) {
            var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND, coalesce = this.type === types$1.coalesce;
            coalesce && (prec = types$1.logicalAND.binop);
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc, right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit), node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            return (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
          }
          return left;
        }, pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
          "PrivateIdentifier" === right.type && this.raise(right.start, "Private identifier can only be left side of binary expression");
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.operator = op, node.right = right, this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        }, pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
          var expr, startPos = this.start, startLoc = this.startLoc;
          if (this.isContextual("await") && this.canAwait) expr = this.parseAwait(forInit), sawUnary = true;
          else if (this.type.prefix) {
            var node = this.startNode(), update = this.type === types$1.incDec;
            node.operator = this.value, node.prefix = true, this.next(), node.argument = this.parseMaybeUnary(null, true, update, forInit), this.checkExpressionErrors(refDestructuringErrors, true), update ? this.checkLValSimple(node.argument) : this.strict && "delete" === node.operator && "Identifier" === node.argument.type ? this.raiseRecoverable(node.start, "Deleting local variable in strict mode") : "delete" === node.operator && isPrivateFieldAccess(node.argument) ? this.raiseRecoverable(node.start, "Private fields can not be deleted") : sawUnary = true, expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else if (sawUnary || this.type !== types$1.privateId) {
            if (expr = this.parseExprSubscripts(refDestructuringErrors, forInit), this.checkExpressionErrors(refDestructuringErrors)) return expr;
            for (; this.type.postfix && !this.canInsertSemicolon(); ) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = this.value, node$1.prefix = false, node$1.argument = expr, this.checkLValSimple(expr), this.next(), expr = this.finishNode(node$1, "UpdateExpression");
            }
          } else (forInit || 0 === this.privateNameStack.length) && this.options.checkPrivateFields && this.unexpected(), expr = this.parsePrivateIdent(), this.type !== types$1._in && this.unexpected();
          return incDec || !this.eat(types$1.starstar) ? expr : sawUnary ? void this.unexpected(this.lastTokStart) : this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
        }, pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprAtom(refDestructuringErrors, forInit);
          if ("ArrowFunctionExpression" === expr.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd)) return expr;
          var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
          return refDestructuringErrors && "MemberExpression" === result.type && (refDestructuringErrors.parenthesizedAssign >= result.start && (refDestructuringErrors.parenthesizedAssign = -1), refDestructuringErrors.parenthesizedBind >= result.start && (refDestructuringErrors.parenthesizedBind = -1), refDestructuringErrors.trailingComma >= result.start && (refDestructuringErrors.trailingComma = -1)), result;
        }, pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
          for (var maybeAsyncArrow = this.options.ecmaVersion >= 8 && "Identifier" === base.type && "async" === base.name && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.potentialArrowAt === base.start, optionalChained = false; ; ) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
            if (element.optional && (optionalChained = true), element === base || "ArrowFunctionExpression" === element.type) {
              if (optionalChained) {
                var chainNode = this.startNodeAt(startPos, startLoc);
                chainNode.expression = element, element = this.finishNode(chainNode, "ChainExpression");
              }
              return element;
            }
            base = element;
          }
        }, pp$5.shouldParseAsyncArrow = function() {
          return !this.canInsertSemicolon() && this.eat(types$1.arrow);
        }, pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
        }, pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
          var optionalSupported = this.options.ecmaVersion >= 11, optional = optionalSupported && this.eat(types$1.questionDot);
          noCalls && optional && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
          var computed = this.eat(types$1.bracketL);
          if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base, computed ? (node.property = this.parseExpression(), this.expect(types$1.bracketR)) : this.type === types$1.privateId && "Super" !== base.type ? node.property = this.parsePrivateIdent() : node.property = this.parseIdent("never" !== this.options.allowReserved), node.computed = !!computed, optionalSupported && (node.optional = optional), base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types$1.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
            this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
            var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
            if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
            this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base, node$1.arguments = exprList, optionalSupported && (node$1.optional = optional), base = this.finishNode(node$1, "CallExpression");
          } else if (this.type === types$1.backQuote) {
            (optional || optionalChained) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base, node$2.quasi = this.parseTemplate({ isTagged: true }), base = this.finishNode(node$2, "TaggedTemplateExpression");
          }
          return base;
        }, pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
          this.type === types$1.slash && this.readRegexp();
          var node, canBeArrow = this.potentialArrowAt === this.start;
          switch (this.type) {
            case types$1._super:
              return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), node = this.startNode(), this.next(), this.type !== types$1.parenL || this.allowDirectSuper || this.raise(node.start, "super() call outside constructor of a subclass"), this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL && this.unexpected(), this.finishNode(node, "Super");
            case types$1._this:
              return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
            case types$1.name:
              var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc, id = this.parseIdent(false);
              if (this.options.ecmaVersion >= 8 && !containsEsc && "async" === id.name && !this.canInsertSemicolon() && this.eat(types$1._function)) return this.overrideContext(types.f_expr), this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types$1.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
                if (this.options.ecmaVersion >= 8 && "async" === id.name && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || "of" !== this.value || this.containsEsc)) return id = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(types$1.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
              }
              return id;
            case types$1.regexp:
              var value2 = this.value;
              return (node = this.parseLiteral(value2.value)).regex = { pattern: value2.pattern, flags: value2.flags }, node;
            case types$1.num:
            case types$1.string:
              return this.parseLiteral(this.value);
            case types$1._null:
            case types$1._true:
            case types$1._false:
              return (node = this.startNode()).value = this.type === types$1._null ? null : this.type === types$1._true, node.raw = this.type.keyword, this.next(), this.finishNode(node, "Literal");
            case types$1.parenL:
              var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
              return refDestructuringErrors && (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr) && (refDestructuringErrors.parenthesizedAssign = start), refDestructuringErrors.parenthesizedBind < 0 && (refDestructuringErrors.parenthesizedBind = start)), expr;
            case types$1.bracketL:
              return node = this.startNode(), this.next(), node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors), this.finishNode(node, "ArrayExpression");
            case types$1.braceL:
              return this.overrideContext(types.b_expr), this.parseObj(false, refDestructuringErrors);
            case types$1._function:
              return node = this.startNode(), this.next(), this.parseFunction(node, 0);
            case types$1._class:
              return this.parseClass(this.startNode(), false);
            case types$1._new:
              return this.parseNew();
            case types$1.backQuote:
              return this.parseTemplate();
            case types$1._import:
              return this.options.ecmaVersion >= 11 ? this.parseExprImport(forNew) : this.unexpected();
            default:
              return this.parseExprAtomDefault();
          }
        }, pp$5.parseExprAtomDefault = function() {
          this.unexpected();
        }, pp$5.parseExprImport = function(forNew) {
          var node = this.startNode();
          this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import");
          var meta = this.parseIdent(true);
          return this.type !== types$1.parenL || forNew ? this.type === types$1.dot ? (node.meta = meta, this.parseImportMeta(node)) : void this.unexpected() : this.parseDynamicImport(node);
        }, pp$5.parseDynamicImport = function(node) {
          if (this.next(), node.source = this.parseMaybeAssign(), !this.eat(types$1.parenR)) {
            var errorPos = this.start;
            this.eat(types$1.comma) && this.eat(types$1.parenR) ? this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()") : this.unexpected(errorPos);
          }
          return this.finishNode(node, "ImportExpression");
        }, pp$5.parseImportMeta = function(node) {
          this.next();
          var containsEsc = this.containsEsc;
          return node.property = this.parseIdent(true), "meta" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"), containsEsc && this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"), "module" === this.options.sourceType || this.options.allowImportExportEverywhere || this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"), this.finishNode(node, "MetaProperty");
        }, pp$5.parseLiteral = function(value2) {
          var node = this.startNode();
          return node.value = value2, node.raw = this.input.slice(this.start, this.end), 110 === node.raw.charCodeAt(node.raw.length - 1) && (node.bigint = node.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(node, "Literal");
        }, pp$5.parseParenExpression = function() {
          this.expect(types$1.parenL);
          var val = this.parseExpression();
          return this.expect(types$1.parenR), val;
        }, pp$5.shouldParseArrow = function(exprList) {
          return !this.canInsertSemicolon();
        }, pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
          var val, startPos = this.start, startLoc = this.startLoc, allowTrailingComma = this.options.ecmaVersion >= 8;
          if (this.options.ecmaVersion >= 6) {
            this.next();
            var spreadStart, innerStartPos = this.start, innerStartLoc = this.startLoc, exprList = [], first = true, lastIsComma = false, refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;
            for (this.yieldPos = 0, this.awaitPos = 0; this.type !== types$1.parenR; ) {
              if (first ? first = false : this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
                lastIsComma = true;
                break;
              }
              if (this.type === types$1.ellipsis) {
                spreadStart = this.start, exprList.push(this.parseParenItem(this.parseRestBinding())), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
                break;
              }
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
            var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
            if (this.expect(types$1.parenR), canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.parseParenArrowList(startPos, startLoc, exprList, forInit);
            exprList.length && !lastIsComma || this.unexpected(this.lastTokStart), spreadStart && this.unexpected(spreadStart), this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, exprList.length > 1 ? ((val = this.startNodeAt(innerStartPos, innerStartLoc)).expressions = exprList, this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)) : val = exprList[0];
          } else val = this.parseParenExpression();
          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            return par.expression = val, this.finishNode(par, "ParenthesizedExpression");
          }
          return val;
        }, pp$5.parseParenItem = function(item) {
          return item;
        }, pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
        };
        var empty = [];
        pp$5.parseNew = function() {
          this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
          var node = this.startNode();
          if (this.next(), this.options.ecmaVersion >= 6 && this.type === types$1.dot) {
            var meta = this.startNodeAt(node.start, node.startLoc);
            meta.name = "new", node.meta = this.finishNode(meta, "Identifier"), this.next();
            var containsEsc = this.containsEsc;
            return node.property = this.parseIdent(true), "target" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"), containsEsc && this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"), this.finishNode(node, "MetaProperty");
          }
          var startPos = this.start, startLoc = this.startLoc;
          return node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false), this.eat(types$1.parenL) ? node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false) : node.arguments = empty, this.finishNode(node, "NewExpression");
        }, pp$5.parseTemplateElement = function(ref2) {
          var isTagged = ref2.isTagged, elem = this.startNode();
          return this.type === types$1.invalidTemplate ? (isTagged || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), elem.value = { raw: this.value, cooked: null }) : elem.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"), cooked: this.value }, this.next(), elem.tail = this.type === types$1.backQuote, this.finishNode(elem, "TemplateElement");
        }, pp$5.parseTemplate = function(ref2) {
          void 0 === ref2 && (ref2 = {});
          var isTagged = ref2.isTagged;
          void 0 === isTagged && (isTagged = false);
          var node = this.startNode();
          this.next(), node.expressions = [];
          var curElt = this.parseTemplateElement({ isTagged });
          for (node.quasis = [curElt]; !curElt.tail; ) this.type === types$1.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(types$1.dollarBraceL), node.expressions.push(this.parseExpression()), this.expect(types$1.braceR), node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
          return this.next(), this.finishNode(node, "TemplateLiteral");
        }, pp$5.isAsyncProp = function(prop) {
          return !prop.computed && "Identifier" === prop.key.type && "async" === prop.key.name && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$5.parseObj = function(isPattern, refDestructuringErrors) {
          var node = this.startNode(), first = true, propHash = {};
          for (node.properties = [], this.next(); !this.eat(types$1.braceR); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) break;
            var prop = this.parseProperty(isPattern, refDestructuringErrors);
            isPattern || this.checkPropClash(prop, propHash, refDestructuringErrors), node.properties.push(prop);
          }
          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        }, pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
          var isGenerator, isAsync, startPos, startLoc, prop = this.startNode();
          if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) return isPattern ? (prop.argument = this.parseIdent(false), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.finishNode(prop, "RestElement")) : (prop.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start), this.finishNode(prop, "SpreadElement"));
          this.options.ecmaVersion >= 6 && (prop.method = false, prop.shorthand = false, (isPattern || refDestructuringErrors) && (startPos = this.start, startLoc = this.startLoc), isPattern || (isGenerator = this.eat(types$1.star)));
          var containsEsc = this.containsEsc;
          return this.parsePropertyName(prop), !isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop) ? (isAsync = true, isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star), this.parsePropertyName(prop)) : isAsync = false, this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc), this.finishNode(prop, "Property");
        }, pp$5.parseGetterSetter = function(prop) {
          prop.kind = prop.key.name, this.parsePropertyName(prop), prop.value = this.parseMethod(false);
          var paramCount = "get" === prop.kind ? 0 : 1;
          if (prop.value.params.length !== paramCount) {
            var start = prop.value.start;
            "get" === prop.kind ? this.raiseRecoverable(start, "getter should have no params") : this.raiseRecoverable(start, "setter should have exactly one param");
          } else "set" === prop.kind && "RestElement" === prop.value.params[0].type && this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
        }, pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          (isGenerator || isAsync) && this.type === types$1.colon && this.unexpected(), this.eat(types$1.colon) ? (prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors), prop.kind = "init") : this.options.ecmaVersion >= 6 && this.type === types$1.parenL ? (isPattern && this.unexpected(), prop.kind = "init", prop.method = true, prop.value = this.parseMethod(isGenerator, isAsync)) : isPattern || containsEsc || !(this.options.ecmaVersion >= 5) || prop.computed || "Identifier" !== prop.key.type || "get" !== prop.key.name && "set" !== prop.key.name || this.type === types$1.comma || this.type === types$1.braceR || this.type === types$1.eq ? this.options.ecmaVersion >= 6 && !prop.computed && "Identifier" === prop.key.type ? ((isGenerator || isAsync) && this.unexpected(), this.checkUnreserved(prop.key), "await" !== prop.key.name || this.awaitIdentPos || (this.awaitIdentPos = startPos), prop.kind = "init", isPattern ? prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key)) : this.type === types$1.eq && refDestructuringErrors ? (refDestructuringErrors.shorthandAssign < 0 && (refDestructuringErrors.shorthandAssign = this.start), prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))) : prop.value = this.copyNode(prop.key), prop.shorthand = true) : this.unexpected() : ((isGenerator || isAsync) && this.unexpected(), this.parseGetterSetter(prop));
        }, pp$5.parsePropertyName = function(prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types$1.bracketL)) return prop.computed = true, prop.key = this.parseMaybeAssign(), this.expect(types$1.bracketR), prop.key;
            prop.computed = false;
          }
          return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved);
        }, pp$5.initFunction = function(node) {
          node.id = null, this.options.ecmaVersion >= 6 && (node.generator = node.expression = false), this.options.ecmaVersion >= 8 && (node.async = false);
        }, pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.initFunction(node), this.options.ecmaVersion >= 6 && (node.generator = isGenerator), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | functionFlags(isAsync, node.generator) | (allowDirectSuper ? 128 : 0)), this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(node, false, true, false), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "FunctionExpression");
        }, pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.enterScope(16 | functionFlags(isAsync, false)), this.initFunction(node), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, node.params = this.toAssignableList(params, true), this.parseFunctionBody(node, true, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "ArrowFunctionExpression");
        }, pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
          var isExpression = isArrowFunction && this.type !== types$1.braceL, oldStrict = this.strict, useStrict = false;
          if (isExpression) node.body = this.parseMaybeAssign(forInit), node.expression = true, this.checkParams(node, false);
          else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
            oldStrict && !nonSimple || (useStrict = this.strictDirective(this.end)) && nonSimple && this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            var oldLabels = this.labels;
            this.labels = [], useStrict && (this.strict = true), this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)), this.strict && node.id && this.checkLValSimple(node.id, 5), node.body = this.parseBlock(false, void 0, useStrict && !oldStrict), node.expression = false, this.adaptDirectivePrologue(node.body.body), this.labels = oldLabels;
          }
          this.exitScope();
        }, pp$5.isSimpleParamList = function(params) {
          for (var i2 = 0, list2 = params; i2 < list2.length; i2 += 1) {
            if ("Identifier" !== list2[i2].type) return false;
          }
          return true;
        }, pp$5.checkParams = function(node, allowDuplicates) {
          for (var nameHash = /* @__PURE__ */ Object.create(null), i2 = 0, list2 = node.params; i2 < list2.length; i2 += 1) {
            var param = list2[i2];
            this.checkLValInnerPattern(param, 1, allowDuplicates ? null : nameHash);
          }
        }, pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          for (var elts = [], first = true; !this.eat(close); ) {
            if (first) first = false;
            else if (this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(close)) break;
            var elt = void 0;
            allowEmpty && this.type === types$1.comma ? elt = null : this.type === types$1.ellipsis ? (elt = this.parseSpread(refDestructuringErrors), refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start)) : elt = this.parseMaybeAssign(false, refDestructuringErrors), elts.push(elt);
          }
          return elts;
        }, pp$5.checkUnreserved = function(ref2) {
          var start = ref2.start, end = ref2.end, name = ref2.name;
          (this.inGenerator && "yield" === name && this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && "await" === name && this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && "arguments" === name && this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || "arguments" !== name && "await" !== name || this.raise(start, "Cannot use " + name + " in class static initialization block"), this.keywords.test(name) && this.raise(start, "Unexpected keyword '" + name + "'"), this.options.ecmaVersion < 6 && -1 !== this.input.slice(start, end).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(name) && (this.inAsync || "await" !== name || this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(start, "The keyword '" + name + "' is reserved"));
        }, pp$5.parseIdent = function(liberal) {
          var node = this.parseIdentNode();
          return this.next(!!liberal), this.finishNode(node, "Identifier"), liberal || (this.checkUnreserved(node), "await" !== node.name || this.awaitIdentPos || (this.awaitIdentPos = node.start)), node;
        }, pp$5.parseIdentNode = function() {
          var node = this.startNode();
          return this.type === types$1.name ? node.name = this.value : this.type.keyword ? (node.name = this.type.keyword, "class" !== node.name && "function" !== node.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop(), this.type = types$1.name) : this.unexpected(), node;
        }, pp$5.parsePrivateIdent = function() {
          var node = this.startNode();
          return this.type === types$1.privateId ? node.name = this.value : this.unexpected(), this.next(), this.finishNode(node, "PrivateIdentifier"), this.options.checkPrivateFields && (0 === this.privateNameStack.length ? this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(node)), node;
        }, pp$5.parseYield = function(forInit) {
          this.yieldPos || (this.yieldPos = this.start);
          var node = this.startNode();
          return this.next(), this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr ? (node.delegate = false, node.argument = null) : (node.delegate = this.eat(types$1.star), node.argument = this.parseMaybeAssign(forInit)), this.finishNode(node, "YieldExpression");
        }, pp$5.parseAwait = function(forInit) {
          this.awaitPos || (this.awaitPos = this.start);
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeUnary(null, true, false, forInit), this.finishNode(node, "AwaitExpression");
        };
        var pp$4 = Parser.prototype;
        pp$4.raise = function(pos, message) {
          var loc = getLineInfo(this.input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          throw err.pos = pos, err.loc = loc, err.raisedAt = this.pos, err;
        }, pp$4.raiseRecoverable = pp$4.raise, pp$4.curPosition = function() {
          if (this.options.locations) return new Position(this.curLine, this.pos - this.lineStart);
        };
        var pp$3 = Parser.prototype, Scope = function(flags) {
          this.flags = flags, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = false;
        };
        pp$3.enterScope = function(flags) {
          this.scopeStack.push(new Scope(flags));
        }, pp$3.exitScope = function() {
          this.scopeStack.pop();
        }, pp$3.treatFunctionsAsVarInScope = function(scope) {
          return 2 & scope.flags || !this.inModule && 1 & scope.flags;
        }, pp$3.declareName = function(name, bindingType, pos) {
          var redeclared = false;
          if (2 === bindingType) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1, scope.lexical.push(name), this.inModule && 1 & scope.flags && delete this.undefinedExports[name];
          } else if (4 === bindingType) {
            this.currentScope().lexical.push(name);
          } else if (3 === bindingType) {
            var scope$2 = this.currentScope();
            redeclared = this.treatFunctionsAsVar ? scope$2.lexical.indexOf(name) > -1 : scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1, scope$2.functions.push(name);
          } else for (var i2 = this.scopeStack.length - 1; i2 >= 0; --i2) {
            var scope$3 = this.scopeStack[i2];
            if (scope$3.lexical.indexOf(name) > -1 && !(32 & scope$3.flags && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
              redeclared = true;
              break;
            }
            if (scope$3.var.push(name), this.inModule && 1 & scope$3.flags && delete this.undefinedExports[name], 259 & scope$3.flags) break;
          }
          redeclared && this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
        }, pp$3.checkLocalExport = function(id) {
          -1 === this.scopeStack[0].lexical.indexOf(id.name) && -1 === this.scopeStack[0].var.indexOf(id.name) && (this.undefinedExports[id.name] = id);
        }, pp$3.currentScope = function() {
          return this.scopeStack[this.scopeStack.length - 1];
        }, pp$3.currentVarScope = function() {
          for (var i2 = this.scopeStack.length - 1; ; i2--) {
            var scope = this.scopeStack[i2];
            if (259 & scope.flags) return scope;
          }
        }, pp$3.currentThisScope = function() {
          for (var i2 = this.scopeStack.length - 1; ; i2--) {
            var scope = this.scopeStack[i2];
            if (259 & scope.flags && !(16 & scope.flags)) return scope;
          }
        };
        var Node = function(parser, pos, loc) {
          this.type = "", this.start = pos, this.end = 0, parser.options.locations && (this.loc = new SourceLocation(parser, loc)), parser.options.directSourceFile && (this.sourceFile = parser.options.directSourceFile), parser.options.ranges && (this.range = [pos, 0]);
        }, pp$2 = Parser.prototype;
        function finishNodeAt(node, type, pos, loc) {
          return node.type = type, node.end = pos, this.options.locations && (node.loc.end = loc), this.options.ranges && (node.range[1] = pos), node;
        }
        pp$2.startNode = function() {
          return new Node(this, this.start, this.startLoc);
        }, pp$2.startNodeAt = function(pos, loc) {
          return new Node(this, pos, loc);
        }, pp$2.finishNode = function(node, type) {
          return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
        }, pp$2.finishNodeAt = function(node, type, pos, loc) {
          return finishNodeAt.call(this, node, type, pos, loc);
        }, pp$2.copyNode = function(node) {
          var newNode = new Node(this, node.start, this.startLoc);
          for (var prop in node) newNode[prop] = node[prop];
          return newNode;
        };
        var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic", ecma12BinaryProperties = ecma10BinaryProperties + " EBase EComp EMod EPres ExtPict", unicodeBinaryProperties = { 9: ecma9BinaryProperties, 10: ecma10BinaryProperties, 11: ecma10BinaryProperties, 12: ecma12BinaryProperties, 13: ecma12BinaryProperties, 14: ecma12BinaryProperties }, unicodeBinaryPropertiesOfStrings = { 9: "", 10: "", 11: "", 12: "", 13: "", 14: "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji" }, unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith", unicodeScriptValues = { 9: ecma9ScriptValues, 10: ecma10ScriptValues, 11: ecma11ScriptValues, 12: ecma12ScriptValues, 13: ecma13ScriptValues, 14: ecma13ScriptValues + " Hrkt Katakana_Or_Hiragana Kawi Nag_Mundari Nagm Unknown Zzzz" }, data = {};
        function buildUnicodeData(ecmaVersion) {
          var d = data[ecmaVersion] = { binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues), binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]), nonBinary: { General_Category: wordsRegexp(unicodeGeneralCategoryValues), Script: wordsRegexp(unicodeScriptValues[ecmaVersion]) } };
          d.nonBinary.Script_Extensions = d.nonBinary.Script, d.nonBinary.gc = d.nonBinary.General_Category, d.nonBinary.sc = d.nonBinary.Script, d.nonBinary.scx = d.nonBinary.Script_Extensions;
        }
        for (var i = 0, list = [9, 10, 11, 12, 13, 14]; i < list.length; i += 1) {
          buildUnicodeData(list[i]);
        }
        var pp$1 = Parser.prototype, RegExpValidationState = function(parser) {
          this.parser = parser, this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : ""), this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchV = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = [], this.backReferenceNames = [];
        };
        function isSyntaxCharacter(ch) {
          return 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
        }
        function isControlLetter(ch) {
          return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
        }
        RegExpValidationState.prototype.reset = function(start, pattern, flags) {
          var unicodeSets = -1 !== flags.indexOf("v"), unicode = -1 !== flags.indexOf("u");
          this.start = 0 | start, this.source = pattern + "", this.flags = flags, unicodeSets && this.parser.options.ecmaVersion >= 15 ? (this.switchU = true, this.switchV = true, this.switchN = true) : (this.switchU = unicode && this.parser.options.ecmaVersion >= 6, this.switchV = false, this.switchN = unicode && this.parser.options.ecmaVersion >= 9);
        }, RegExpValidationState.prototype.raise = function(message) {
          this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
        }, RegExpValidationState.prototype.at = function(i2, forceU) {
          void 0 === forceU && (forceU = false);
          var s = this.source, l = s.length;
          if (i2 >= l) return -1;
          var c = s.charCodeAt(i2);
          if (!forceU && !this.switchU || c <= 55295 || c >= 57344 || i2 + 1 >= l) return c;
          var next = s.charCodeAt(i2 + 1);
          return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
        }, RegExpValidationState.prototype.nextIndex = function(i2, forceU) {
          void 0 === forceU && (forceU = false);
          var s = this.source, l = s.length;
          if (i2 >= l) return l;
          var next, c = s.charCodeAt(i2);
          return !forceU && !this.switchU || c <= 55295 || c >= 57344 || i2 + 1 >= l || (next = s.charCodeAt(i2 + 1)) < 56320 || next > 57343 ? i2 + 1 : i2 + 2;
        }, RegExpValidationState.prototype.current = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.pos, forceU);
        }, RegExpValidationState.prototype.lookahead = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.nextIndex(this.pos, forceU), forceU);
        }, RegExpValidationState.prototype.advance = function(forceU) {
          void 0 === forceU && (forceU = false), this.pos = this.nextIndex(this.pos, forceU);
        }, RegExpValidationState.prototype.eat = function(ch, forceU) {
          return void 0 === forceU && (forceU = false), this.current(forceU) === ch && (this.advance(forceU), true);
        }, RegExpValidationState.prototype.eatChars = function(chs, forceU) {
          void 0 === forceU && (forceU = false);
          for (var pos = this.pos, i2 = 0, list2 = chs; i2 < list2.length; i2 += 1) {
            var ch = list2[i2], current = this.at(pos, forceU);
            if (-1 === current || current !== ch) return false;
            pos = this.nextIndex(pos, forceU);
          }
          return this.pos = pos, true;
        }, pp$1.validateRegExpFlags = function(state) {
          for (var validFlags = state.validFlags, flags = state.flags, u = false, v = false, i2 = 0; i2 < flags.length; i2++) {
            var flag = flags.charAt(i2);
            -1 === validFlags.indexOf(flag) && this.raise(state.start, "Invalid regular expression flag"), flags.indexOf(flag, i2 + 1) > -1 && this.raise(state.start, "Duplicate regular expression flag"), "u" === flag && (u = true), "v" === flag && (v = true);
          }
          this.options.ecmaVersion >= 15 && u && v && this.raise(state.start, "Invalid regular expression flag");
        }, pp$1.validateRegExpPattern = function(state) {
          this.regexp_pattern(state), !state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0 && (state.switchN = true, this.regexp_pattern(state));
        }, pp$1.regexp_pattern = function(state) {
          state.pos = 0, state.lastIntValue = 0, state.lastStringValue = "", state.lastAssertionIsQuantifiable = false, state.numCapturingParens = 0, state.maxBackReference = 0, state.groupNames.length = 0, state.backReferenceNames.length = 0, this.regexp_disjunction(state), state.pos !== state.source.length && (state.eat(41) && state.raise("Unmatched ')'"), (state.eat(93) || state.eat(125)) && state.raise("Lone quantifier brackets")), state.maxBackReference > state.numCapturingParens && state.raise("Invalid escape");
          for (var i2 = 0, list2 = state.backReferenceNames; i2 < list2.length; i2 += 1) {
            var name = list2[i2];
            -1 === state.groupNames.indexOf(name) && state.raise("Invalid named capture referenced");
          }
        }, pp$1.regexp_disjunction = function(state) {
          for (this.regexp_alternative(state); state.eat(124); ) this.regexp_alternative(state);
          this.regexp_eatQuantifier(state, true) && state.raise("Nothing to repeat"), state.eat(123) && state.raise("Lone quantifier brackets");
        }, pp$1.regexp_alternative = function(state) {
          for (; state.pos < state.source.length && this.regexp_eatTerm(state); ) ;
        }, pp$1.regexp_eatTerm = function(state) {
          return this.regexp_eatAssertion(state) ? (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state) && state.switchU && state.raise("Invalid quantifier"), true) : !!(state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) && (this.regexp_eatQuantifier(state), true);
        }, pp$1.regexp_eatAssertion = function(state) {
          var start = state.pos;
          if (state.lastAssertionIsQuantifiable = false, state.eat(94) || state.eat(36)) return true;
          if (state.eat(92)) {
            if (state.eat(66) || state.eat(98)) return true;
            state.pos = start;
          }
          if (state.eat(40) && state.eat(63)) {
            var lookbehind = false;
            if (this.options.ecmaVersion >= 9 && (lookbehind = state.eat(60)), state.eat(61) || state.eat(33)) return this.regexp_disjunction(state), state.eat(41) || state.raise("Unterminated group"), state.lastAssertionIsQuantifiable = !lookbehind, true;
          }
          return state.pos = start, false;
        }, pp$1.regexp_eatQuantifier = function(state, noError) {
          return void 0 === noError && (noError = false), !!this.regexp_eatQuantifierPrefix(state, noError) && (state.eat(63), true);
        }, pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
          return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
        }, pp$1.regexp_eatBracedQuantifier = function(state, noError) {
          var start = state.pos;
          if (state.eat(123)) {
            var min = 0, max = -1;
            if (this.regexp_eatDecimalDigits(state) && (min = state.lastIntValue, state.eat(44) && this.regexp_eatDecimalDigits(state) && (max = state.lastIntValue), state.eat(125))) return -1 !== max && max < min && !noError && state.raise("numbers out of order in {} quantifier"), true;
            state.switchU && !noError && state.raise("Incomplete quantifier"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatAtom = function(state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        }, pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatAtomEscape(state)) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatUncapturingGroup = function(state) {
          var start = state.pos;
          if (state.eat(40)) {
            if (state.eat(63) && state.eat(58)) {
              if (this.regexp_disjunction(state), state.eat(41)) return true;
              state.raise("Unterminated group");
            }
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatCapturingGroup = function(state) {
          if (state.eat(40)) {
            if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(state) : 63 === state.current() && state.raise("Invalid group"), this.regexp_disjunction(state), state.eat(41)) return state.numCapturingParens += 1, true;
            state.raise("Unterminated group");
          }
          return false;
        }, pp$1.regexp_eatExtendedAtom = function(state) {
          return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        }, pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
          return this.regexp_eatBracedQuantifier(state, true) && state.raise("Nothing to repeat"), false;
        }, pp$1.regexp_eatSyntaxCharacter = function(state) {
          var ch = state.current();
          return !!isSyntaxCharacter(ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatPatternCharacters = function(state) {
          for (var start = state.pos, ch = 0; -1 !== (ch = state.current()) && !isSyntaxCharacter(ch); ) state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatExtendedPatternCharacter = function(state) {
          var ch = state.current();
          return !(-1 === ch || 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || 91 === ch || 94 === ch || 124 === ch) && (state.advance(), true);
        }, pp$1.regexp_groupSpecifier = function(state) {
          if (state.eat(63)) {
            if (this.regexp_eatGroupName(state)) return -1 !== state.groupNames.indexOf(state.lastStringValue) && state.raise("Duplicate capture group name"), void state.groupNames.push(state.lastStringValue);
            state.raise("Invalid group");
          }
        }, pp$1.regexp_eatGroupName = function(state) {
          if (state.lastStringValue = "", state.eat(60)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) return true;
            state.raise("Invalid capture group name");
          }
          return false;
        }, pp$1.regexp_eatRegExpIdentifierName = function(state) {
          if (state.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(state)) {
            for (state.lastStringValue += codePointToString(state.lastIntValue); this.regexp_eatRegExpIdentifierPart(state); ) state.lastStringValue += codePointToString(state.lastIntValue);
            return true;
          }
          return false;
        }, pp$1.regexp_eatRegExpIdentifierStart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierStart(ch2, true) || 36 === ch2 || 95 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$1.regexp_eatRegExpIdentifierPart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierChar(ch2, true) || 36 === ch2 || 95 === ch2 || 8204 === ch2 || 8205 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$1.regexp_eatAtomEscape = function(state) {
          return !!(this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) || (state.switchU && (99 === state.current() && state.raise("Invalid unicode escape"), state.raise("Invalid escape")), false);
        }, pp$1.regexp_eatBackReference = function(state) {
          var start = state.pos;
          if (this.regexp_eatDecimalEscape(state)) {
            var n = state.lastIntValue;
            if (state.switchU) return n > state.maxBackReference && (state.maxBackReference = n), true;
            if (n <= state.numCapturingParens) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatKGroupName = function(state) {
          if (state.eat(107)) {
            if (this.regexp_eatGroupName(state)) return state.backReferenceNames.push(state.lastStringValue), true;
            state.raise("Invalid named reference");
          }
          return false;
        }, pp$1.regexp_eatCharacterEscape = function(state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        }, pp$1.regexp_eatCControlLetter = function(state) {
          var start = state.pos;
          if (state.eat(99)) {
            if (this.regexp_eatControlLetter(state)) return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatZero = function(state) {
          return 48 === state.current() && !isDecimalDigit(state.lookahead()) && (state.lastIntValue = 0, state.advance(), true);
        }, pp$1.regexp_eatControlEscape = function(state) {
          var ch = state.current();
          return 116 === ch ? (state.lastIntValue = 9, state.advance(), true) : 110 === ch ? (state.lastIntValue = 10, state.advance(), true) : 118 === ch ? (state.lastIntValue = 11, state.advance(), true) : 102 === ch ? (state.lastIntValue = 12, state.advance(), true) : 114 === ch && (state.lastIntValue = 13, state.advance(), true);
        }, pp$1.regexp_eatControlLetter = function(state) {
          var ch = state.current();
          return !!isControlLetter(ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
          void 0 === forceU && (forceU = false);
          var ch, start = state.pos, switchU = forceU || state.switchU;
          if (state.eat(117)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;
              if (switchU && lead >= 55296 && lead <= 56319) {
                var leadSurrogateEnd = state.pos;
                if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;
                  if (trail >= 56320 && trail <= 57343) return state.lastIntValue = 1024 * (lead - 55296) + (trail - 56320) + 65536, true;
                }
                state.pos = leadSurrogateEnd, state.lastIntValue = lead;
              }
              return true;
            }
            if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && ((ch = state.lastIntValue) >= 0 && ch <= 1114111)) return true;
            switchU && state.raise("Invalid unicode escape"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatIdentityEscape = function(state) {
          if (state.switchU) return !!this.regexp_eatSyntaxCharacter(state) || !!state.eat(47) && (state.lastIntValue = 47, true);
          var ch = state.current();
          return !(99 === ch || state.switchN && 107 === ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatDecimalEscape = function(state) {
          state.lastIntValue = 0;
          var ch = state.current();
          if (ch >= 49 && ch <= 57) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
            } while ((ch = state.current()) >= 48 && ch <= 57);
            return true;
          }
          return false;
        };
        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || 95 === ch;
        }
        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
        }
        function isDecimalDigit(ch) {
          return ch >= 48 && ch <= 57;
        }
        function isHexDigit(ch) {
          return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
        }
        function hexToInt(ch) {
          return ch >= 65 && ch <= 70 ? ch - 65 + 10 : ch >= 97 && ch <= 102 ? ch - 97 + 10 : ch - 48;
        }
        function isOctalDigit(ch) {
          return ch >= 48 && ch <= 55;
        }
        pp$1.regexp_eatCharacterClassEscape = function(state) {
          var ch = state.current();
          if (/* @__PURE__ */ function(ch2) {
            return 100 === ch2 || 68 === ch2 || 115 === ch2 || 83 === ch2 || 119 === ch2 || 87 === ch2;
          }(ch)) return state.lastIntValue = -1, state.advance(), 1;
          var negate = false;
          if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = 80 === ch) || 112 === ch)) {
            var result;
            if (state.lastIntValue = -1, state.advance(), state.eat(123) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(125)) return negate && 2 === result && state.raise("Invalid property name"), result;
            state.raise("Invalid property name");
          }
          return 0;
        }, pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
          var start = state.pos;
          if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
            var name = state.lastStringValue;
            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value2 = state.lastStringValue;
              return this.regexp_validateUnicodePropertyNameAndValue(state, name, value2), 1;
            }
          }
          if (state.pos = start, this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
          }
          return 0;
        }, pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value2) {
          hasOwn(state.unicodeProperties.nonBinary, name) || state.raise("Invalid property name"), state.unicodeProperties.nonBinary[name].test(value2) || state.raise("Invalid property value");
        }, pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
          return state.unicodeProperties.binary.test(nameOrValue) ? 1 : state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue) ? 2 : void state.raise("Invalid property name");
        }, pp$1.regexp_eatUnicodePropertyName = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyNameCharacter(ch = state.current()); ) state.lastStringValue += codePointToString(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$1.regexp_eatUnicodePropertyValue = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyValueCharacter(ch = state.current()); ) state.lastStringValue += codePointToString(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
          return this.regexp_eatUnicodePropertyValue(state);
        }, pp$1.regexp_eatCharacterClass = function(state) {
          if (state.eat(91)) {
            var negate = state.eat(94), result = this.regexp_classContents(state);
            return state.eat(93) || state.raise("Unterminated character class"), negate && 2 === result && state.raise("Negated character class may contain strings"), true;
          }
          return false;
        }, pp$1.regexp_classContents = function(state) {
          return 93 === state.current() ? 1 : state.switchV ? this.regexp_classSetExpression(state) : (this.regexp_nonEmptyClassRanges(state), 1);
        }, pp$1.regexp_nonEmptyClassRanges = function(state) {
          for (; this.regexp_eatClassAtom(state); ) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;
              !state.switchU || -1 !== left && -1 !== right || state.raise("Invalid character class"), -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class");
            }
          }
        }, pp$1.regexp_eatClassAtom = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatClassEscape(state)) return true;
            if (state.switchU) {
              var ch$1 = state.current();
              (99 === ch$1 || isOctalDigit(ch$1)) && state.raise("Invalid class escape"), state.raise("Invalid escape");
            }
            state.pos = start;
          }
          var ch = state.current();
          return 93 !== ch && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatClassEscape = function(state) {
          var start = state.pos;
          if (state.eat(98)) return state.lastIntValue = 8, true;
          if (state.switchU && state.eat(45)) return state.lastIntValue = 45, true;
          if (!state.switchU && state.eat(99)) {
            if (this.regexp_eatClassControlLetter(state)) return true;
            state.pos = start;
          }
          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        }, pp$1.regexp_classSetExpression = function(state) {
          var subResult, result = 1;
          if (this.regexp_eatClassSetRange(state)) ;
          else if (subResult = this.regexp_eatClassSetOperand(state)) {
            2 === subResult && (result = 2);
            for (var start = state.pos; state.eatChars([38, 38]); ) 38 !== state.current() && (subResult = this.regexp_eatClassSetOperand(state)) ? 2 !== subResult && (result = 1) : state.raise("Invalid character in character class");
            if (start !== state.pos) return result;
            for (; state.eatChars([45, 45]); ) this.regexp_eatClassSetOperand(state) || state.raise("Invalid character in character class");
            if (start !== state.pos) return result;
          } else state.raise("Invalid character in character class");
          for (; ; ) if (!this.regexp_eatClassSetRange(state)) {
            if (!(subResult = this.regexp_eatClassSetOperand(state))) return result;
            2 === subResult && (result = 2);
          }
        }, pp$1.regexp_eatClassSetRange = function(state) {
          var start = state.pos;
          if (this.regexp_eatClassSetCharacter(state)) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassSetCharacter(state)) {
              var right = state.lastIntValue;
              return -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class"), true;
            }
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatClassSetOperand = function(state) {
          return this.regexp_eatClassSetCharacter(state) ? 1 : this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
        }, pp$1.regexp_eatNestedClass = function(state) {
          var start = state.pos;
          if (state.eat(91)) {
            var negate = state.eat(94), result = this.regexp_classContents(state);
            if (state.eat(93)) return negate && 2 === result && state.raise("Negated character class may contain strings"), result;
            state.pos = start;
          }
          if (state.eat(92)) {
            var result$1 = this.regexp_eatCharacterClassEscape(state);
            if (result$1) return result$1;
            state.pos = start;
          }
          return null;
        }, pp$1.regexp_eatClassStringDisjunction = function(state) {
          var start = state.pos;
          if (state.eatChars([92, 113])) {
            if (state.eat(123)) {
              var result = this.regexp_classStringDisjunctionContents(state);
              if (state.eat(125)) return result;
            } else state.raise("Invalid escape");
            state.pos = start;
          }
          return null;
        }, pp$1.regexp_classStringDisjunctionContents = function(state) {
          for (var result = this.regexp_classString(state); state.eat(124); ) 2 === this.regexp_classString(state) && (result = 2);
          return result;
        }, pp$1.regexp_classString = function(state) {
          for (var count = 0; this.regexp_eatClassSetCharacter(state); ) count++;
          return 1 === count ? 1 : 2;
        }, pp$1.regexp_eatClassSetCharacter = function(state) {
          var start = state.pos;
          if (state.eat(92)) return !(!this.regexp_eatCharacterEscape(state) && !this.regexp_eatClassSetReservedPunctuator(state)) || (state.eat(98) ? (state.lastIntValue = 8, true) : (state.pos = start, false));
          var ch = state.current();
          return !(ch < 0 || ch === state.lookahead() && function(ch2) {
            return 33 === ch2 || ch2 >= 35 && ch2 <= 38 || ch2 >= 42 && ch2 <= 44 || 46 === ch2 || ch2 >= 58 && ch2 <= 64 || 94 === ch2 || 96 === ch2 || 126 === ch2;
          }(ch)) && (!function(ch2) {
            return 40 === ch2 || 41 === ch2 || 45 === ch2 || 47 === ch2 || ch2 >= 91 && ch2 <= 93 || ch2 >= 123 && ch2 <= 125;
          }(ch) && (state.advance(), state.lastIntValue = ch, true));
        }, pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
          var ch = state.current();
          return !!function(ch2) {
            return 33 === ch2 || 35 === ch2 || 37 === ch2 || 38 === ch2 || 44 === ch2 || 45 === ch2 || ch2 >= 58 && ch2 <= 62 || 64 === ch2 || 96 === ch2 || 126 === ch2;
          }(ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatClassControlLetter = function(state) {
          var ch = state.current();
          return !(!isDecimalDigit(ch) && 95 !== ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$1.regexp_eatHexEscapeSequence = function(state) {
          var start = state.pos;
          if (state.eat(120)) {
            if (this.regexp_eatFixedHexDigits(state, 2)) return true;
            state.switchU && state.raise("Invalid escape"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatDecimalDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isDecimalDigit(ch = state.current()); ) state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatHexDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isHexDigit(ch = state.current()); ) state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;
            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;
              n1 <= 3 && this.regexp_eatOctalDigit(state) ? state.lastIntValue = 64 * n1 + 8 * n2 + state.lastIntValue : state.lastIntValue = 8 * n1 + n2;
            } else state.lastIntValue = n1;
            return true;
          }
          return false;
        }, pp$1.regexp_eatOctalDigit = function(state) {
          var ch = state.current();
          return isOctalDigit(ch) ? (state.lastIntValue = ch - 48, state.advance(), true) : (state.lastIntValue = 0, false);
        }, pp$1.regexp_eatFixedHexDigits = function(state, length) {
          var start = state.pos;
          state.lastIntValue = 0;
          for (var i2 = 0; i2 < length; ++i2) {
            var ch = state.current();
            if (!isHexDigit(ch)) return state.pos = start, false;
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
          }
          return true;
        };
        var Token = function(p) {
          this.type = p.type, this.value = p.value, this.start = p.start, this.end = p.end, p.options.locations && (this.loc = new SourceLocation(p, p.startLoc, p.endLoc)), p.options.ranges && (this.range = [p.start, p.end]);
        }, pp = Parser.prototype;
        function stringToBigInt(str) {
          return "function" != typeof BigInt ? null : BigInt(str.replace(/_/g, ""));
        }
        pp.next = function(ignoreEscapeSequenceInKeyword) {
          !ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Token(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
        }, pp.getToken = function() {
          return this.next(), new Token(this);
        }, "undefined" != typeof Symbol && (pp[Symbol.iterator] = function() {
          var this$1$1 = this;
          return { next: function() {
            var token = this$1$1.getToken();
            return { done: token.type === types$1.eof, value: token };
          } };
        }), pp.nextToken = function() {
          var curContext = this.curContext();
          return curContext && curContext.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(types$1.eof) : curContext.override ? curContext.override(this) : void this.readToken(this.fullCharCodeAtPos());
        }, pp.readToken = function(code) {
          return isIdentifierStart(code, this.options.ecmaVersion >= 6) || 92 === code ? this.readWord() : this.getTokenFromCode(code);
        }, pp.fullCharCodeAtPos = function() {
          var code = this.input.charCodeAt(this.pos);
          if (code <= 55295 || code >= 56320) return code;
          var next = this.input.charCodeAt(this.pos + 1);
          return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
        }, pp.skipBlockComment = function() {
          var startLoc = this.options.onComment && this.curPosition(), start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
          if (-1 === end && this.raise(this.pos - 2, "Unterminated comment"), this.pos = end + 2, this.options.locations) for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; ) ++this.curLine, pos = this.lineStart = nextBreak;
          this.options.onComment && this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
        }, pp.skipLineComment = function(startSkip) {
          for (var start = this.pos, startLoc = this.options.onComment && this.curPosition(), ch = this.input.charCodeAt(this.pos += startSkip); this.pos < this.input.length && !isNewLine(ch); ) ch = this.input.charCodeAt(++this.pos);
          this.options.onComment && this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
        }, pp.skipSpace = function() {
          loop: for (; this.pos < this.input.length; ) {
            var ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;
              case 13:
                10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
              case 10:
              case 8232:
              case 8233:
                ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
                break;
              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;
                  case 47:
                    this.skipLineComment(2);
                    break;
                  default:
                    break loop;
                }
                break;
              default:
                if (!(ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch)))) break loop;
                ++this.pos;
            }
          }
        }, pp.finishToken = function(type, val) {
          this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
          var prevType = this.type;
          this.type = type, this.value = val, this.updateContext(prevType);
        }, pp.readToken_dot = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next >= 48 && next <= 57) return this.readNumber(true);
          var next2 = this.input.charCodeAt(this.pos + 2);
          return this.options.ecmaVersion >= 6 && 46 === next && 46 === next2 ? (this.pos += 3, this.finishToken(types$1.ellipsis)) : (++this.pos, this.finishToken(types$1.dot));
        }, pp.readToken_slash = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          return this.exprAllowed ? (++this.pos, this.readRegexp()) : 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.slash, 1);
        }, pp.readToken_mult_modulo_exp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1, tokentype = 42 === code ? types$1.star : types$1.modulo;
          return this.options.ecmaVersion >= 7 && 42 === code && 42 === next && (++size, tokentype = types$1.starstar, next = this.input.charCodeAt(this.pos + 2)), 61 === next ? this.finishOp(types$1.assign, size + 1) : this.finishOp(tokentype, size);
        }, pp.readToken_pipe_amp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === code) {
            if (this.options.ecmaVersion >= 12) {
              if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1.assign, 3);
            }
            return this.finishOp(124 === code ? types$1.logicalOR : types$1.logicalAND, 2);
          }
          return 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(124 === code ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
        }, pp.readToken_caret = function() {
          return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.bitwiseXOR, 1);
        }, pp.readToken_plus_min = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return next === code ? 45 !== next || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(types$1.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.plusMin, 1);
        }, pp.readToken_lt_gt = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1;
          return next === code ? (size = 62 === code && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.pos + size) ? this.finishOp(types$1.assign, size + 1) : this.finishOp(types$1.bitShift, size)) : 33 !== next || 60 !== code || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === next && (size = 2), this.finishOp(types$1.relational, size)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
        }, pp.readToken_eq_excl = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return 61 === next ? this.finishOp(types$1.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === code && 62 === next && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(types$1.arrow)) : this.finishOp(61 === code ? types$1.eq : types$1.prefix, 1);
        }, pp.readToken_question = function() {
          var ecmaVersion = this.options.ecmaVersion;
          if (ecmaVersion >= 11) {
            var next = this.input.charCodeAt(this.pos + 1);
            if (46 === next) {
              var next2 = this.input.charCodeAt(this.pos + 2);
              if (next2 < 48 || next2 > 57) return this.finishOp(types$1.questionDot, 2);
            }
            if (63 === next) {
              if (ecmaVersion >= 12) {
                if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1.assign, 3);
              }
              return this.finishOp(types$1.coalesce, 2);
            }
          }
          return this.finishOp(types$1.question, 1);
        }, pp.readToken_numberSign = function() {
          var code = 35;
          if (this.options.ecmaVersion >= 13 && (++this.pos, isIdentifierStart(code = this.fullCharCodeAtPos(), true) || 92 === code)) return this.finishToken(types$1.privateId, this.readWord1());
          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
        }, pp.getTokenFromCode = function(code) {
          switch (code) {
            case 46:
              return this.readToken_dot();
            case 40:
              return ++this.pos, this.finishToken(types$1.parenL);
            case 41:
              return ++this.pos, this.finishToken(types$1.parenR);
            case 59:
              return ++this.pos, this.finishToken(types$1.semi);
            case 44:
              return ++this.pos, this.finishToken(types$1.comma);
            case 91:
              return ++this.pos, this.finishToken(types$1.bracketL);
            case 93:
              return ++this.pos, this.finishToken(types$1.bracketR);
            case 123:
              return ++this.pos, this.finishToken(types$1.braceL);
            case 125:
              return ++this.pos, this.finishToken(types$1.braceR);
            case 58:
              return ++this.pos, this.finishToken(types$1.colon);
            case 96:
              if (this.options.ecmaVersion < 6) break;
              return ++this.pos, this.finishToken(types$1.backQuote);
            case 48:
              var next = this.input.charCodeAt(this.pos + 1);
              if (120 === next || 88 === next) return this.readRadixNumber(16);
              if (this.options.ecmaVersion >= 6) {
                if (111 === next || 79 === next) return this.readRadixNumber(8);
                if (98 === next || 66 === next) return this.readRadixNumber(2);
              }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return this.readNumber(false);
            case 34:
            case 39:
              return this.readString(code);
            case 47:
              return this.readToken_slash();
            case 37:
            case 42:
              return this.readToken_mult_modulo_exp(code);
            case 124:
            case 38:
              return this.readToken_pipe_amp(code);
            case 94:
              return this.readToken_caret();
            case 43:
            case 45:
              return this.readToken_plus_min(code);
            case 60:
            case 62:
              return this.readToken_lt_gt(code);
            case 61:
            case 33:
              return this.readToken_eq_excl(code);
            case 63:
              return this.readToken_question();
            case 126:
              return this.finishOp(types$1.prefix, 1);
            case 35:
              return this.readToken_numberSign();
          }
          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
        }, pp.finishOp = function(type, size) {
          var str = this.input.slice(this.pos, this.pos + size);
          return this.pos += size, this.finishToken(type, str);
        }, pp.readRegexp = function() {
          for (var escaped, inClass, start = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(start, "Unterminated regular expression");
            var ch = this.input.charAt(this.pos);
            if (lineBreak.test(ch) && this.raise(start, "Unterminated regular expression"), escaped) escaped = false;
            else {
              if ("[" === ch) inClass = true;
              else if ("]" === ch && inClass) inClass = false;
              else if ("/" === ch && !inClass) break;
              escaped = "\\" === ch;
            }
            ++this.pos;
          }
          var pattern = this.input.slice(start, this.pos);
          ++this.pos;
          var flagsStart = this.pos, flags = this.readWord1();
          this.containsEsc && this.unexpected(flagsStart);
          var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
          state.reset(start, pattern, flags), this.validateRegExpFlags(state), this.validateRegExpPattern(state);
          var value2 = null;
          try {
            value2 = new RegExp(pattern, flags);
          } catch (e) {
          }
          return this.finishToken(types$1.regexp, { pattern, flags, value: value2 });
        }, pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
          for (var allowSeparators = this.options.ecmaVersion >= 12 && void 0 === len, isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && 48 === this.input.charCodeAt(this.pos), start = this.pos, total = 0, lastCode = 0, i2 = 0, e = null == len ? 1 / 0 : len; i2 < e; ++i2, ++this.pos) {
            var code = this.input.charCodeAt(this.pos), val = void 0;
            if (allowSeparators && 95 === code) isLegacyOctalNumericLiteral && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), 95 === lastCode && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), 0 === i2 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), lastCode = code;
            else {
              if ((val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : code >= 48 && code <= 57 ? code - 48 : 1 / 0) >= radix) break;
              lastCode = code, total = total * radix + val;
            }
          }
          return allowSeparators && 95 === lastCode && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === start || null != len && this.pos - start !== len ? null : total;
        }, pp.readRadixNumber = function(radix) {
          var start = this.pos;
          this.pos += 2;
          var val = this.readInt(radix);
          return null == val && this.raise(this.start + 2, "Expected number in radix " + radix), this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (val = stringToBigInt(this.input.slice(start, this.pos)), ++this.pos) : isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val);
        }, pp.readNumber = function(startsWithDot) {
          var start = this.pos;
          startsWithDot || null !== this.readInt(10, void 0, true) || this.raise(start, "Invalid number");
          var octal = this.pos - start >= 2 && 48 === this.input.charCodeAt(start);
          octal && this.strict && this.raise(start, "Invalid number");
          var next = this.input.charCodeAt(this.pos);
          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && 110 === next) {
            var val$1 = stringToBigInt(this.input.slice(start, this.pos));
            return ++this.pos, isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val$1);
          }
          octal && /[89]/.test(this.input.slice(start, this.pos)) && (octal = false), 46 !== next || octal || (++this.pos, this.readInt(10), next = this.input.charCodeAt(this.pos)), 69 !== next && 101 !== next || octal || (43 !== (next = this.input.charCodeAt(++this.pos)) && 45 !== next || ++this.pos, null === this.readInt(10) && this.raise(start, "Invalid number")), isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
          var str, val = (str = this.input.slice(start, this.pos), octal ? parseInt(str, 8) : parseFloat(str.replace(/_/g, "")));
          return this.finishToken(types$1.num, val);
        }, pp.readCodePoint = function() {
          var code;
          if (123 === this.input.charCodeAt(this.pos)) {
            this.options.ecmaVersion < 6 && this.unexpected();
            var codePos = ++this.pos;
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, code > 1114111 && this.invalidStringToken(codePos, "Code point out of bounds");
          } else code = this.readHexChar(4);
          return code;
        }, pp.readString = function(quote) {
          for (var out = "", chunkStart = ++this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
            var ch = this.input.charCodeAt(this.pos);
            if (ch === quote) break;
            92 === ch ? (out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(false), chunkStart = this.pos) : 8232 === ch || 8233 === ch ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (isNewLine(ch) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
          }
          return out += this.input.slice(chunkStart, this.pos++), this.finishToken(types$1.string, out);
        };
        var INVALID_TEMPLATE_ESCAPE_ERROR = {};
        pp.tryReadTemplateToken = function() {
          this.inTemplateElement = true;
          try {
            this.readTmplToken();
          } catch (err) {
            if (err !== INVALID_TEMPLATE_ESCAPE_ERROR) throw err;
            this.readInvalidTemplateToken();
          }
          this.inTemplateElement = false;
        }, pp.invalidStringToken = function(position, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw INVALID_TEMPLATE_ESCAPE_ERROR;
          this.raise(position, message);
        }, pp.readTmplToken = function() {
          for (var out = "", chunkStart = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
            var ch = this.input.charCodeAt(this.pos);
            if (96 === ch || 36 === ch && 123 === this.input.charCodeAt(this.pos + 1)) return this.pos !== this.start || this.type !== types$1.template && this.type !== types$1.invalidTemplate ? (out += this.input.slice(chunkStart, this.pos), this.finishToken(types$1.template, out)) : 36 === ch ? (this.pos += 2, this.finishToken(types$1.dollarBraceL)) : (++this.pos, this.finishToken(types$1.backQuote));
            if (92 === ch) out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(true), chunkStart = this.pos;
            else if (isNewLine(ch)) {
              switch (out += this.input.slice(chunkStart, this.pos), ++this.pos, ch) {
                case 13:
                  10 === this.input.charCodeAt(this.pos) && ++this.pos;
                case 10:
                  out += "\n";
                  break;
                default:
                  out += String.fromCharCode(ch);
              }
              this.options.locations && (++this.curLine, this.lineStart = this.pos), chunkStart = this.pos;
            } else ++this.pos;
          }
        }, pp.readInvalidTemplateToken = function() {
          for (; this.pos < this.input.length; this.pos++) switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if ("{" !== this.input[this.pos + 1]) break;
            case "`":
              return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
          }
          this.raise(this.start, "Unterminated template");
        }, pp.readEscapedChar = function(inTemplate) {
          var ch = this.input.charCodeAt(++this.pos);
          switch (++this.pos, ch) {
            case 110:
              return "\n";
            case 114:
              return "\r";
            case 120:
              return String.fromCharCode(this.readHexChar(2));
            case 117:
              return codePointToString(this.readCodePoint());
            case 116:
              return "	";
            case 98:
              return "\b";
            case 118:
              return "\v";
            case 102:
              return "\f";
            case 13:
              10 === this.input.charCodeAt(this.pos) && ++this.pos;
            case 10:
              return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
            case 56:
            case 57:
              if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), inTemplate) {
                var codePos = this.pos - 1;
                this.invalidStringToken(codePos, "Invalid escape sequence in template string");
              }
            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                return octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), this.pos += octalStr.length - 1, ch = this.input.charCodeAt(this.pos), "0" === octalStr && 56 !== ch && 57 !== ch || !this.strict && !inTemplate || this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(octal);
              }
              return isNewLine(ch) ? "" : String.fromCharCode(ch);
          }
        }, pp.readHexChar = function(len) {
          var codePos = this.pos, n = this.readInt(16, len);
          return null === n && this.invalidStringToken(codePos, "Bad character escape sequence"), n;
        }, pp.readWord1 = function() {
          this.containsEsc = false;
          for (var word = "", first = true, chunkStart = this.pos, astral = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
            var ch = this.fullCharCodeAtPos();
            if (isIdentifierChar(ch, astral)) this.pos += ch <= 65535 ? 1 : 2;
            else {
              if (92 !== ch) break;
              this.containsEsc = true, word += this.input.slice(chunkStart, this.pos);
              var escStart = this.pos;
              117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
              var esc = this.readCodePoint();
              (first ? isIdentifierStart : isIdentifierChar)(esc, astral) || this.invalidStringToken(escStart, "Invalid Unicode escape"), word += codePointToString(esc), chunkStart = this.pos;
            }
            first = false;
          }
          return word + this.input.slice(chunkStart, this.pos);
        }, pp.readWord = function() {
          var word = this.readWord1(), type = types$1.name;
          return this.keywords.test(word) && (type = keywords[word]), this.finishToken(type, word);
        };
        Parser.acorn = { Parser, version: "8.11.2", defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, tokTypes: types$1, keywordTypes: keywords, TokContext, tokContexts: types, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };
        const external_node_module_namespaceObject = require("module"), external_node_fs_namespaceObject = require("fs"), external_node_url_namespaceObject = require("url");
        Math.floor, String.fromCharCode;
        Object.defineProperty;
        const TRAILING_SLASH_RE = /\/$|\/\?/;
        function hasTrailingSlash(input = "", queryParameters = false) {
          return queryParameters ? TRAILING_SLASH_RE.test(input) : input.endsWith("/");
        }
        function withTrailingSlash(input = "", queryParameters = false) {
          if (!queryParameters) return input.endsWith("/") ? input : input + "/";
          if (hasTrailingSlash(input, true)) return input || "/";
          const [s0, ...s] = input.split("?");
          return s0 + "/" + (s.length > 0 ? `?${s.join("?")}` : "");
        }
        function isNonEmptyURL(url2) {
          return url2 && "/" !== url2;
        }
        const JOIN_LEADING_SLASH_RE = /^\.?\//;
        function joinURL(base, ...input) {
          let url2 = base || "";
          for (const segment of input.filter((url22) => isNonEmptyURL(url22))) if (url2) {
            const _segment = segment.replace(JOIN_LEADING_SLASH_RE, "");
            url2 = withTrailingSlash(url2) + _segment;
          } else url2 = segment;
          return url2;
        }
        const external_node_assert_namespaceObject = require("assert"), external_node_process_namespaceObject = require("process"), external_node_path_namespaceObject = require("path"), external_node_v8_namespaceObject = require("v8"), external_node_util_namespaceObject = require("util"), BUILTIN_MODULES = new Set(external_node_module_namespaceObject.builtinModules);
        function normalizeSlash(string_) {
          return string_.replace(/\\/g, "/");
        }
        const isWindows = "win32" === external_node_process_namespaceObject.platform, own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = /* @__PURE__ */ new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]), codes = {};
        function formatList(array, type = "and") {
          return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
        }
        const messages = /* @__PURE__ */ new Map();
        let userStackTraceLimit;
        function createError(sym, value2, def) {
          return messages.set(sym, value2), /* @__PURE__ */ function(Base, key) {
            return NodeError;
            function NodeError(...args) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
              const message = function(key2, args2, self2) {
                const message2 = messages.get(key2);
                if (external_node_assert_namespaceObject(void 0 !== message2, "expected `message` to be found"), "function" == typeof message2) return external_node_assert_namespaceObject(message2.length <= args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self2, args2);
                const regex = /%[dfijoOs]/g;
                let expectedLength = 0;
                for (; null !== regex.exec(message2); ) expectedLength++;
                return external_node_assert_namespaceObject(expectedLength === args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${expectedLength}).`), 0 === args2.length ? message2 : (args2.unshift(message2), Reflect.apply(external_node_util_namespaceObject.format, null, args2));
              }(key, args, error);
              return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
            }
          }(def, sym);
        }
        function isErrorStackTraceLimitWritable() {
          try {
            if (external_node_v8_namespaceObject.startupSnapshot.isBuildingSnapshot()) return false;
          } catch {
          }
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
        }
        codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
          external_node_assert_namespaceObject("string" == typeof name, "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
          let message = "The ";
          if (name.endsWith(" argument")) message += `${name} `;
          else {
            const type = name.includes(".") ? "property" : "argument";
            message += `"${name}" ${type} `;
          }
          message += "must be ";
          const types2 = [], instances = [], other = [];
          for (const value2 of expected) external_node_assert_namespaceObject("string" == typeof value2, "All expected entries have to be of type string"), kTypes.has(value2) ? types2.push(value2.toLowerCase()) : null === classRegExp.exec(value2) ? (external_node_assert_namespaceObject("object" !== value2, 'The value "object" should be written as "Object"'), other.push(value2)) : instances.push(value2);
          if (instances.length > 0) {
            const pos = types2.indexOf("object");
            -1 !== pos && (types2.slice(pos, 1), instances.push("Object"));
          }
          return types2.length > 0 && (message += `${types2.length > 1 ? "one of type" : "of type"} ${formatList(types2, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value2) {
            if (null == value2) return String(value2);
            if ("function" == typeof value2 && value2.name) return `function ${value2.name}`;
            if ("object" == typeof value2) return value2.constructor && value2.constructor.name ? `an instance of ${value2.constructor.name}` : `${(0, external_node_util_namespaceObject.inspect)(value2, { depth: -1 })}`;
            let inspected = (0, external_node_util_namespaceObject.inspect)(value2, { colors: false });
            inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
            return `type ${typeof value2} (${inspected})`;
          }(actual)}`, message;
        }, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = void 0) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path3, base, message) => `Invalid package config ${path3}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (pkgPath, key, target, isImport = false, base = void 0) => {
          const relError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (external_node_assert_namespaceObject(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`;
        }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path3, base, type = "package") => `Cannot find ${type} '${path3}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (pkgPath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (ext, path3) => `Unknown file extension "${ext}" for ${path3}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
          let inspected = (0, external_node_util_namespaceObject.inspect)(value2);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError), codes.ERR_UNSUPPORTED_ESM_URL_SCHEME = createError("ERR_UNSUPPORTED_ESM_URL_SCHEME", (url2, supported) => {
          let message = `Only URLs with a scheme in: ${formatList(supported)} are supported by the default ESM loader`;
          return isWindows && 2 === url2.protocol.length && (message += ". On Windows, absolute paths must be valid file:// URLs"), message += `. Received protocol '${url2.protocol}'`, message;
        }, Error);
        const captureLargerStackTrace = function(fn) {
          const hidden = "__node_internal_" + fn.name;
          return Object.defineProperty(fn, "name", { value: hidden }), fn;
        }(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
          return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
        });
        const packageJsonReader = { read: function(jsonPath) {
          try {
            return { string: external_node_fs_namespaceObject.readFileSync(external_node_path_namespaceObject.toNamespacedPath(external_node_path_namespaceObject.join(external_node_path_namespaceObject.dirname(jsonPath), "package.json")), "utf8") };
          } catch (error) {
            const exception = error;
            if ("ENOENT" === exception.code) return { string: void 0 };
            throw exception;
          }
        } };
        const { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, packageJsonCache = /* @__PURE__ */ new Map();
        function getPackageConfig(path3, specifier, base) {
          const existing = packageJsonCache.get(path3);
          if (void 0 !== existing) return existing;
          const source = packageJsonReader.read(path3).string;
          if (void 0 === source) {
            const packageConfig2 = { pjsonPath: path3, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
            return packageJsonCache.set(path3, packageConfig2), packageConfig2;
          }
          let packageJson;
          try {
            packageJson = JSON.parse(source);
          } catch (error) {
            const exception = error;
            throw new ERR_INVALID_PACKAGE_CONFIG$1(path3, (base ? `"${specifier}" from ` : "") + (0, external_node_url_namespaceObject.fileURLToPath)(base || specifier), exception.message);
          }
          const { exports: exports3, imports, main, name, type } = packageJson, packageConfig = { pjsonPath: path3, exists: true, main: "string" == typeof main ? main : void 0, name: "string" == typeof name ? name : void 0, type: "module" === type || "commonjs" === type ? type : "none", exports: exports3, imports: imports && "object" == typeof imports ? imports : void 0 };
          return packageJsonCache.set(path3, packageConfig), packageConfig;
        }
        function getPackageScopeConfig(resolved) {
          let packageJsonUrl = new external_node_url_namespaceObject.URL("package.json", resolved);
          for (; ; ) {
            if (packageJsonUrl.pathname.endsWith("node_modules/package.json")) break;
            const packageConfig2 = getPackageConfig((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), resolved);
            if (packageConfig2.exists) return packageConfig2;
            const lastPackageJsonUrl = packageJsonUrl;
            if (packageJsonUrl = new external_node_url_namespaceObject.URL("../package.json", packageJsonUrl), packageJsonUrl.pathname === lastPackageJsonUrl.pathname) break;
          }
          const packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), packageConfig = { pjsonPath: packageJsonPath, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
          return packageJsonCache.set(packageJsonPath, packageConfig), packageConfig;
        }
        const { ERR_UNKNOWN_FILE_EXTENSION } = codes, dist_hasOwnProperty = {}.hasOwnProperty, extensionFormatMap = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".json": "json", ".mjs": "module" };
        const protocolHandlers = { __proto__: null, "data:": function(parsed) {
          const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null, null];
          return function(mime2) {
            return mime2 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime2) ? "module" : "application/json" === mime2 ? "json" : null;
          }(mime);
        }, "file:": function(url2, _context, ignoreErrors) {
          const ext = function(url3) {
            const pathname = url3.pathname;
            let index = pathname.length;
            for (; index--; ) {
              const code = pathname.codePointAt(index);
              if (47 === code) return "";
              if (46 === code) return 47 === pathname.codePointAt(index - 1) ? "" : pathname.slice(index);
            }
            return "";
          }(url2);
          if (".js" === ext) return "module" === function(url3) {
            return getPackageScopeConfig(url3).type;
          }(url2) ? "module" : "commonjs";
          const format = extensionFormatMap[ext];
          if (format) return format;
          if (ignoreErrors) return;
          const filepath = (0, external_node_url_namespaceObject.fileURLToPath)(url2);
          throw new ERR_UNKNOWN_FILE_EXTENSION(ext, filepath);
        }, "http:": getHttpProtocolModuleFormat, "https:": getHttpProtocolModuleFormat, "node:": () => "builtin" };
        function getHttpProtocolModuleFormat() {
        }
        const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_ESM_URL_SCHEME } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSepRegEx = /%2f|%5c/i, emittedPackageWarnings = /* @__PURE__ */ new Set(), doubleSlashRegEx = /[/\\]{2}/;
        function emitInvalidSegmentDeprecation(target, request, match, packageJsonUrl, internal, base, isTarget) {
          const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), double = null !== doubleSlashRegEx.exec(isTarget ? target : request);
          external_node_process_namespaceObject.emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request}" ${request === match ? "" : `matched to "${match}" `}in the "${internal ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
        }
        function emitLegacyIndexDeprecation(url2, packageJsonUrl, base, main) {
          const format = function(url3, context) {
            return dist_hasOwnProperty.call(protocolHandlers, url3.protocol) && protocolHandlers[url3.protocol](url3, context, true) || null;
          }(url2, { parentURL: base.href });
          if ("module" !== format) return;
          const path3 = (0, external_node_url_namespaceObject.fileURLToPath)(url2.href), pkgPath = (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), basePath = (0, external_node_url_namespaceObject.fileURLToPath)(base);
          main ? external_node_process_namespaceObject.emitWarning(`Package ${pkgPath} has a "main" field set to ${JSON.stringify(main)}, excluding the full filename and extension to the resolved file at "${path3.slice(pkgPath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field isdeprecated for ES modules.`, "DeprecationWarning", "DEP0151") : external_node_process_namespaceObject.emitWarning(`No "main" or "exports" field defined in the package.json for ${pkgPath} resolving the main entry point "${path3.slice(pkgPath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
        }
        function tryStatSync(path3) {
          try {
            return (0, external_node_fs_namespaceObject.statSync)(path3);
          } catch {
            return new external_node_fs_namespaceObject.Stats();
          }
        }
        function fileExists(url2) {
          const stats = (0, external_node_fs_namespaceObject.statSync)(url2, { throwIfNoEntry: false }), isFile = stats ? stats.isFile() : void 0;
          return null != isFile && isFile;
        }
        function legacyMainResolve(packageJsonUrl, packageConfig, base) {
          let guess;
          if (void 0 !== packageConfig.main) {
            if (guess = new external_node_url_namespaceObject.URL(packageConfig.main, packageJsonUrl), fileExists(guess)) return guess;
            const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
            let i3 = -1;
            for (; ++i3 < tries2.length && (guess = new external_node_url_namespaceObject.URL(tries2[i3], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
            if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          }
          const tries = ["./index.js", "./index.json", "./index.node"];
          let i2 = -1;
          for (; ++i2 < tries.length && (guess = new external_node_url_namespaceObject.URL(tries[i2], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
          if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          throw new ERR_MODULE_NOT_FOUND((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function exportsNotFound(subpath, packageJsonUrl, base) {
          return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function invalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
          return target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, target, internal, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, isPathMap, conditions) {
          if ("" !== subpath && !pattern && "/" !== target[target.length - 1]) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if (!target.startsWith("./")) {
            if (internal && !target.startsWith("../") && !target.startsWith("/")) {
              let isURL = false;
              try {
                new external_node_url_namespaceObject.URL(target), isURL = true;
              } catch {
              }
              if (!isURL) {
                return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
              }
            }
            throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          }
          if (null !== invalidSegmentRegEx.exec(target.slice(2))) {
            if (null !== deprecatedInvalidSegmentRegEx.exec(target.slice(2))) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
            if (!isPathMap) {
              const request = pattern ? match.replace("*", () => subpath) : match + subpath;
              emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, true);
            }
          }
          const resolved = new external_node_url_namespaceObject.URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new external_node_url_namespaceObject.URL(".", packageJsonUrl).pathname;
          if (!resolvedPath.startsWith(packagePath)) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if ("" === subpath) return resolved;
          if (null !== invalidSegmentRegEx.exec(subpath)) {
            const request = pattern ? match.replace("*", () => subpath) : match + subpath;
            if (null === deprecatedInvalidSegmentRegEx.exec(subpath)) {
              if (!isPathMap) {
                emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, false);
              }
            } else !function(request2, match2, packageJsonUrl2, internal2, base2) {
              const reason = `request is not a valid match in pattern "${match2}" for the "${internal2 ? "imports" : "exports"}" resolution of ${(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl2)}`;
              throw new ERR_INVALID_MODULE_SPECIFIER(request2, reason, base2 && (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            }(request, match, packageJsonUrl, internal, base);
          }
          return pattern ? new external_node_url_namespaceObject.URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new external_node_url_namespaceObject.URL(subpath, resolved);
        }
        function isArrayIndex(key) {
          const keyNumber = Number(key);
          return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
        }
        function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions) {
          if ("string" == typeof target) return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, isPathMap, conditions);
          if (Array.isArray(target)) {
            const targetList = target;
            if (0 === targetList.length) return null;
            let lastException, i2 = -1;
            for (; ++i2 < targetList.length; ) {
              const targetItem = targetList[i2];
              let resolveResult;
              try {
                resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
              } catch (error) {
                if (lastException = error, "ERR_INVALID_PACKAGE_TARGET" === error.code) continue;
                throw error;
              }
              if (void 0 !== resolveResult) {
                if (null !== resolveResult) return resolveResult;
                lastException = null;
              }
            }
            if (null == lastException) return null;
            throw lastException;
          }
          if ("object" == typeof target && null !== target) {
            const keys = Object.getOwnPropertyNames(target);
            let i2 = -1;
            for (; ++i2 < keys.length; ) {
              if (isArrayIndex(keys[i2])) throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
            }
            for (i2 = -1; ++i2 < keys.length; ) {
              const key = keys[i2];
              if ("default" === key || conditions && conditions.has(key)) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
                if (void 0 === resolveResult) continue;
                return resolveResult;
              }
            }
            return null;
          }
          if (null === target) return null;
          throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
        }
        function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
          const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(pjsonUrl);
          emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), external_node_process_namespaceObject.emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
        }
        function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
          let exports3 = packageConfig.exports;
          if (function(exports4, packageJsonUrl2, base2) {
            if ("string" == typeof exports4 || Array.isArray(exports4)) return true;
            if ("object" != typeof exports4 || null === exports4) return false;
            const keys2 = Object.getOwnPropertyNames(exports4);
            let isConditionalSugar = false, i3 = 0, j = -1;
            for (; ++j < keys2.length; ) {
              const key = keys2[j], curIsConditionalSugar = "" === key || "." !== key[0];
              if (0 == i3++) isConditionalSugar = curIsConditionalSugar;
              else if (isConditionalSugar !== curIsConditionalSugar) throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
            }
            return isConditionalSugar;
          }(exports3, packageJsonUrl, base) && (exports3 = { ".": exports3 }), own.call(exports3, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports3[packageSubpath], "", packageSubpath, base, false, false, false, conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          let bestMatch = "", bestMatchSubpath = "";
          const keys = Object.getOwnPropertyNames(exports3);
          let i2 = -1;
          for (; ++i2 < keys.length; ) {
            const key = keys[i2], patternIndex = key.indexOf("*");
            if (-1 !== patternIndex && packageSubpath.startsWith(key.slice(0, patternIndex))) {
              packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
              const patternTrailer = key.slice(patternIndex + 1);
              packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
            }
          }
          if (bestMatch) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports3[bestMatch], bestMatchSubpath, bestMatch, base, true, false, packageSubpath.endsWith("/"), conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          throw exportsNotFound(packageSubpath, packageJsonUrl, base);
        }
        function patternKeyCompare(a, b) {
          const aPatternIndex = a.indexOf("*"), bPatternIndex = b.indexOf("*"), baseLengthA = -1 === aPatternIndex ? a.length : aPatternIndex + 1, baseLengthB = -1 === bPatternIndex ? b.length : bPatternIndex + 1;
          return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || -1 === aPatternIndex ? 1 : -1 === bPatternIndex || a.length > b.length ? -1 : b.length > a.length ? 1 : 0;
        }
        function packageImportsResolve(name, base, conditions) {
          if ("#" === name || name.startsWith("#/") || name.endsWith("/")) {
            throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, external_node_url_namespaceObject.fileURLToPath)(base));
          }
          let packageJsonUrl;
          const packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            packageJsonUrl = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
            const imports = packageConfig.imports;
            if (imports) if (own.call(imports, name) && !name.includes("*")) {
              const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, false, conditions);
              if (null != resolveResult) return resolveResult;
            } else {
              let bestMatch = "", bestMatchSubpath = "";
              const keys = Object.getOwnPropertyNames(imports);
              let i2 = -1;
              for (; ++i2 < keys.length; ) {
                const key = keys[i2], patternIndex = key.indexOf("*");
                if (-1 !== patternIndex && name.startsWith(key.slice(0, -1))) {
                  const patternTrailer = key.slice(patternIndex + 1);
                  name.length >= key.length && name.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
                }
              }
              if (bestMatch) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, true, true, false, conditions);
                if (null != resolveResult) return resolveResult;
              }
            }
          }
          throw function(specifier, packageJsonUrl2, base2) {
            return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl2 && (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl2)), (0, external_node_url_namespaceObject.fileURLToPath)(base2));
          }(name, packageJsonUrl, base);
        }
        function packageResolve(specifier, base, conditions) {
          if (external_node_module_namespaceObject.builtinModules.includes(specifier)) return new external_node_url_namespaceObject.URL("node:" + specifier);
          const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
            let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
            "@" === specifier2[0] && (isScoped2 = true, -1 === separatorIndex || 0 === specifier2.length ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
            const packageName2 = -1 === separatorIndex ? specifier2 : specifier2.slice(0, separatorIndex);
            if (null !== invalidPackageNameRegEx.exec(packageName2) && (validPackageName = false), !validPackageName) throw new ERR_INVALID_MODULE_SPECIFIER(specifier2, "is not a valid package name", (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            return { packageName: packageName2, packageSubpath: "." + (-1 === separatorIndex ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
          }(specifier, base), packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            const packageJsonUrl2 = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
            if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports) return packageExportsResolve(packageJsonUrl2, packageSubpath, packageConfig, base, conditions);
          }
          let lastPath, packageJsonUrl = new external_node_url_namespaceObject.URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
          do {
            if (!tryStatSync(packageJsonPath.slice(0, -13)).isDirectory()) {
              lastPath = packageJsonPath, packageJsonUrl = new external_node_url_namespaceObject.URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
              continue;
            }
            const packageConfig2 = getPackageConfig(packageJsonPath, specifier, base);
            return void 0 !== packageConfig2.exports && null !== packageConfig2.exports ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig2, base, conditions) : "." === packageSubpath ? legacyMainResolve(packageJsonUrl, packageConfig2, base) : new external_node_url_namespaceObject.URL(packageSubpath, packageJsonUrl);
          } while (packageJsonPath.length !== lastPath.length);
          throw new ERR_MODULE_NOT_FOUND(packageName, (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function moduleResolve(specifier, base, conditions, preserveSymlinks) {
          const protocol = base.protocol, isRemote = "http:" === protocol || "https:" === protocol;
          let resolved;
          if (function(specifier2) {
            return "" !== specifier2 && ("/" === specifier2[0] || function(specifier3) {
              if ("." === specifier3[0]) {
                if (1 === specifier3.length || "/" === specifier3[1]) return true;
                if ("." === specifier3[1] && (2 === specifier3.length || "/" === specifier3[2])) return true;
              }
              return false;
            }(specifier2));
          }(specifier)) resolved = new external_node_url_namespaceObject.URL(specifier, base);
          else if (isRemote || "#" !== specifier[0]) try {
            resolved = new external_node_url_namespaceObject.URL(specifier);
          } catch {
            isRemote || (resolved = packageResolve(specifier, base, conditions));
          }
          else resolved = packageImportsResolve(specifier, base, conditions);
          return external_node_assert_namespaceObject(void 0 !== resolved, "expected to be defined"), "file:" !== resolved.protocol ? resolved : function(resolved2, base2, preserveSymlinks2) {
            if (null !== encodedSepRegEx.exec(resolved2.pathname)) throw new ERR_INVALID_MODULE_SPECIFIER(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            const filePath = (0, external_node_url_namespaceObject.fileURLToPath)(resolved2), stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
            if (stats.isDirectory()) {
              const error = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, external_node_url_namespaceObject.fileURLToPath)(base2));
              throw error.url = String(resolved2), error;
            }
            if (!stats.isFile()) throw new ERR_MODULE_NOT_FOUND(filePath || resolved2.pathname, base2 && (0, external_node_url_namespaceObject.fileURLToPath)(base2), "module");
            if (!preserveSymlinks2) {
              const real = (0, external_node_fs_namespaceObject.realpathSync)(filePath), { search, hash } = resolved2;
              (resolved2 = (0, external_node_url_namespaceObject.pathToFileURL)(real + (filePath.endsWith(external_node_path_namespaceObject.sep) ? "/" : ""))).search = search, resolved2.hash = hash;
            }
            return resolved2;
          }(resolved, base, preserveSymlinks);
        }
        function fileURLToPath2(id) {
          return "string" != typeof id || id.startsWith("file://") ? normalizeSlash((0, external_node_url_namespaceObject.fileURLToPath)(id)) : normalizeSlash(id);
        }
        const DEFAULT_CONDITIONS_SET = /* @__PURE__ */ new Set(["node", "import"]), DEFAULT_URL = (0, external_node_url_namespaceObject.pathToFileURL)(process.cwd()), DEFAULT_EXTENSIONS = [".mjs", ".cjs", ".js", ".json"], NOT_FOUND_ERRORS = /* @__PURE__ */ new Set(["ERR_MODULE_NOT_FOUND", "ERR_UNSUPPORTED_DIR_IMPORT", "MODULE_NOT_FOUND", "ERR_PACKAGE_PATH_NOT_EXPORTED"]);
        function _tryModuleResolve(id, url2, conditions) {
          try {
            return moduleResolve(id, url2, conditions);
          } catch (error) {
            if (!NOT_FOUND_ERRORS.has(error.code)) throw error;
          }
        }
        function _resolve(id, options = {}) {
          if (/(node|data|http|https):/.test(id)) return id;
          if (BUILTIN_MODULES.has(id)) return "node:" + id;
          if (isAbsolute(id) && (0, external_node_fs_namespaceObject.existsSync)(id)) {
            const realPath2 = (0, external_node_fs_namespaceObject.realpathSync)(fileURLToPath2(id));
            return (0, external_node_url_namespaceObject.pathToFileURL)(realPath2).toString();
          }
          const conditionsSet = options.conditions ? new Set(options.conditions) : DEFAULT_CONDITIONS_SET, _urls = (Array.isArray(options.url) ? options.url : [options.url]).filter(Boolean).map((u) => new URL(function(id2) {
            return "string" != typeof id2 && (id2 = id2.toString()), /(node|data|http|https|file):/.test(id2) ? id2 : BUILTIN_MODULES.has(id2) ? "node:" + id2 : "file://" + encodeURI(normalizeSlash(id2));
          }(u.toString())));
          0 === _urls.length && _urls.push(DEFAULT_URL);
          const urls = [..._urls];
          for (const url2 of _urls) "file:" === url2.protocol && urls.push(new URL("./", url2), new URL(joinURL(url2.pathname, "_index.js"), url2), new URL("node_modules", url2));
          let resolved;
          for (const url2 of urls) {
            if (resolved = _tryModuleResolve(id, url2, conditionsSet), resolved) break;
            for (const prefix of ["", "/index"]) {
              for (const extension of options.extensions || DEFAULT_EXTENSIONS) if (resolved = _tryModuleResolve(id + prefix + extension, url2, conditionsSet), resolved) break;
              if (resolved) break;
            }
            if (resolved) break;
          }
          if (!resolved) {
            const error = new Error(`Cannot find module ${id} imported from ${urls.join(", ")}`);
            throw error.code = "ERR_MODULE_NOT_FOUND", error;
          }
          const realPath = (0, external_node_fs_namespaceObject.realpathSync)(fileURLToPath2(resolved));
          return (0, external_node_url_namespaceObject.pathToFileURL)(realPath).toString();
        }
        function resolveSync(id, options) {
          return _resolve(id, options);
        }
        function resolvePathSync(id, options) {
          return fileURLToPath2(resolveSync(id, options));
        }
        const ESM_RE = /([\s;]|^)(import[\s\w*,{}]*from|import\s*["'*{]|export\b\s*(?:[*{]|default|class|type|function|const|var|let|async function)|import\.meta\b)/m;
        function hasESMSyntax(code) {
          return ESM_RE.test(code);
        }
        var external_crypto_ = __webpack_require__("crypto");
        function md5(content, len = 8) {
          return (0, external_crypto_.createHash)("md5").update(content).digest("hex").slice(0, len);
        }
        var __awaiter = function(thisArg, _arguments, P, generator) {
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value2) {
              try {
                step(generator.next(value2));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value2) {
              try {
                step(generator.throw(value2));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              var value2;
              result.done ? resolve(result.value) : (value2 = result.value, value2 instanceof P ? value2 : new P(function(resolve2) {
                resolve2(value2);
              })).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        const _EnvDebug = destr(process.env.JITI_DEBUG), _EnvCache = destr(process.env.JITI_CACHE), _EnvESMResolve = destr(process.env.JITI_ESM_RESOLVE), _EnvRequireCache = destr(process.env.JITI_REQUIRE_CACHE), _EnvSourceMaps = destr(process.env.JITI_SOURCE_MAPS), _EnvAlias = destr(process.env.JITI_ALIAS), _EnvTransform = destr(process.env.JITI_TRANSFORM_MODULES), _EnvNative = destr(process.env.JITI_NATIVE_MODULES), _ExpBun = destr(process.env.JITI_EXPERIMENTAL_BUN), jiti_isWindows = "win32" === (0, external_os_namespaceObject.platform)(), defaults = { debug: _EnvDebug, cache: void 0 === _EnvCache || !!_EnvCache, requireCache: void 0 === _EnvRequireCache || !!_EnvRequireCache, sourceMaps: void 0 !== _EnvSourceMaps && !!_EnvSourceMaps, interopDefault: false, esmResolve: _EnvESMResolve || false, cacheVersion: "7", legacy: (0, semver.lt)(process.version || "0.0.0", "14.0.0"), extensions: [".js", ".mjs", ".cjs", ".ts", ".mts", ".cts", ".json"], alias: _EnvAlias, nativeModules: _EnvNative || [], transformModules: _EnvTransform || [], experimentalBun: void 0 === _ExpBun ? !!process.versions.bun : !!_ExpBun }, JS_EXT_RE = /\.(c|m)?j(sx?)$/, TS_EXT_RE = /\.(c|m)?t(sx?)$/;
        function createJITI(_filename2, opts = {}, parentModule, parentCache) {
          (opts = Object.assign(Object.assign({}, defaults), opts)).legacy && (opts.cacheVersion += "-legacy"), opts.transformOptions && (opts.cacheVersion += "-" + object_hash_default()(opts.transformOptions));
          const alias = opts.alias && Object.keys(opts.alias).length > 0 ? normalizeAliases(opts.alias || {}) : null, nativeModules = ["typescript", "jiti", ...opts.nativeModules || []], transformModules = [...opts.transformModules || []], isNativeRe = new RegExp(`node_modules/(${nativeModules.map((m) => escapeStringRegexp(m)).join("|")})/`), isTransformRe = new RegExp(`node_modules/(${transformModules.map((m) => escapeStringRegexp(m)).join("|")})/`);
          function debug(...args) {
            opts.debug && console.log("[jiti]", ...args);
          }
          if (_filename2 || (_filename2 = process.cwd()), function(filename) {
            try {
              return (0, external_fs_.lstatSync)(filename).isDirectory();
            } catch (_a) {
              return false;
            }
          }(_filename2) && (_filename2 = join2(_filename2, "index.js")), true === opts.cache && (opts.cache = function() {
            let _tmpDir = (0, external_os_namespaceObject.tmpdir)();
            if (process.env.TMPDIR && _tmpDir === process.cwd() && !process.env.JITI_RESPECT_TMPDIR_ENV) {
              const _env = process.env.TMPDIR;
              delete process.env.TMPDIR, _tmpDir = (0, external_os_namespaceObject.tmpdir)(), process.env.TMPDIR = _env;
            }
            return join2(_tmpDir, "node-jiti");
          }()), opts.cache) try {
            if ((0, external_fs_.mkdirSync)(opts.cache, { recursive: true }), !function(filename) {
              try {
                return (0, external_fs_.accessSync)(filename, external_fs_.constants.W_OK), true;
              } catch (_a) {
                return false;
              }
            }(opts.cache)) throw new Error("directory is not writable");
          } catch (error) {
            debug("Error creating cache directory at ", opts.cache, error), opts.cache = false;
          }
          const nativeRequire = create_require_default()(jiti_isWindows ? _filename2.replace(/\//g, "\\") : _filename2), tryResolve = (id, options) => {
            try {
              return nativeRequire.resolve(id, options);
            } catch (_a) {
            }
          }, _url = (0, external_url_namespaceObject.pathToFileURL)(_filename2), _additionalExts = [...opts.extensions].filter((ext) => ".js" !== ext), _resolve2 = (id, options) => {
            let resolved, err;
            if (alias && (id = function(path3, aliases2) {
              const _path = normalizeWindowsPath(path3);
              aliases2 = normalizeAliases(aliases2);
              for (const alias2 in aliases2) if (_path.startsWith(alias2) && pathSeparators.has(_path[alias2.length])) return join2(aliases2[alias2], _path.slice(alias2.length));
              return _path;
            }(id, alias)), opts.esmResolve) {
              const conditionSets = [["node", "require"], ["node", "import"]];
              for (const conditions of conditionSets) {
                try {
                  resolved = resolvePathSync(id, { url: _url, conditions, extensions: opts.extensions });
                } catch (error) {
                  err = error;
                }
                if (resolved) return resolved;
              }
            }
            try {
              return nativeRequire.resolve(id, options);
            } catch (error) {
              err = error;
            }
            for (const ext of _additionalExts) {
              if (resolved = tryResolve(id + ext, options) || tryResolve(id + "/index" + ext, options), resolved) return resolved;
              if (TS_EXT_RE.test((null == parentModule ? void 0 : parentModule.filename) || "") && (resolved = tryResolve(id.replace(JS_EXT_RE, ".$1t$2"), options), resolved)) return resolved;
            }
            throw err;
          };
          function transform2(topts) {
            let code = function(filename, source, get) {
              if (!opts.cache || !filename) return get();
              const sourceHash = ` /* v${opts.cacheVersion}-${md5(source, 16)} */`, filebase = basename(pathe_92c04245_dirname(filename)) + "-" + basename(filename), cacheFile = join2(opts.cache, filebase + "." + md5(filename) + ".js");
              if ((0, external_fs_.existsSync)(cacheFile)) {
                const cacheSource = (0, external_fs_.readFileSync)(cacheFile, "utf8");
                if (cacheSource.endsWith(sourceHash)) return debug("[cache hit]", filename, "~>", cacheFile), cacheSource;
              }
              debug("[cache miss]", filename);
              const result = get();
              return result.includes("__JITI_ERROR__") || (0, external_fs_.writeFileSync)(cacheFile, result + sourceHash, "utf8"), result;
            }(topts.filename, topts.source, () => {
              var _a;
              const res = opts.transform(Object.assign(Object.assign(Object.assign({ legacy: opts.legacy }, opts.transformOptions), { babel: Object.assign(Object.assign({}, opts.sourceMaps ? { sourceFileName: topts.filename, sourceMaps: "inline" } : {}), null === (_a = opts.transformOptions) || void 0 === _a ? void 0 : _a.babel) }), topts));
              return res.error && opts.debug && debug(res.error), res.code;
            });
            return code.startsWith("#!") && (code = "// " + code), code;
          }
          function _interopDefault(mod) {
            return opts.interopDefault ? function(sourceModule) {
              if (null === (value2 = sourceModule) || "object" != typeof value2 || !("default" in sourceModule)) return sourceModule;
              var value2;
              const newModule = sourceModule.default;
              for (const key in sourceModule) if ("default" === key) try {
                key in newModule || Object.defineProperty(newModule, key, { enumerable: false, configurable: false, get: () => newModule });
              } catch {
              }
              else try {
                key in newModule || Object.defineProperty(newModule, key, { enumerable: true, configurable: true, get: () => sourceModule[key] });
              } catch {
              }
              return newModule;
            }(mod) : mod;
          }
          function jiti2(id, _importOptions) {
            var _a, _b;
            const cache = parentCache || {};
            if (id.startsWith("node:") ? id = id.slice(5) : id.startsWith("file:") && (id = (0, external_url_namespaceObject.fileURLToPath)(id)), external_module_.builtinModules.includes(id) || ".pnp.js" === id) return nativeRequire(id);
            if (opts.experimentalBun && !opts.transformOptions) try {
              debug(`[bun] [native] ${id}`);
              const _mod = nativeRequire(id);
              return false === opts.requireCache && delete nativeRequire.cache[id], _interopDefault(_mod);
            } catch (error) {
              debug(`[bun] Using fallback for ${id} because of an error:`, error);
            }
            const filename = _resolve2(id), ext = extname(filename);
            if (".json" === ext) {
              debug("[json]", filename);
              const jsonModule = nativeRequire(id);
              return Object.defineProperty(jsonModule, "default", { value: jsonModule }), jsonModule;
            }
            if (ext && !opts.extensions.includes(ext)) return debug("[unknown]", filename), nativeRequire(id);
            if (isNativeRe.test(filename)) return debug("[native]", filename), nativeRequire(id);
            if (cache[filename]) return _interopDefault(null === (_a = cache[filename]) || void 0 === _a ? void 0 : _a.exports);
            if (opts.requireCache && nativeRequire.cache[filename]) return _interopDefault(null === (_b = nativeRequire.cache[filename]) || void 0 === _b ? void 0 : _b.exports);
            return evalModule((0, external_fs_.readFileSync)(filename, "utf8"), { id, filename, ext, cache });
          }
          function evalModule(source, evalOptions = {}) {
            var _a;
            const id = evalOptions.id || (evalOptions.filename ? basename(evalOptions.filename) : `_jitiEval.${evalOptions.ext || ".js"}`), filename = evalOptions.filename || _resolve2(id), ext = evalOptions.ext || extname(filename), cache = evalOptions.cache || parentCache || {}, isTypescript = ".ts" === ext || ".mts" === ext || ".cts" === ext, isNativeModule = ".mjs" === ext || ".js" === ext && "module" === (null === (_a = function(path3) {
              for (; path3 && "." !== path3 && "/" !== path3; ) {
                path3 = join2(path3, "..");
                try {
                  const pkg = (0, external_fs_.readFileSync)(join2(path3, "package.json"), "utf8");
                  try {
                    return JSON.parse(pkg);
                  } catch (_a2) {
                  }
                  break;
                } catch (_b) {
                }
              }
            }(filename)) || void 0 === _a ? void 0 : _a.type), needsTranspile = !(".cjs" === ext) && (isTypescript || isNativeModule || isTransformRe.test(filename) || hasESMSyntax(source) || opts.legacy && source.match(/\?\.|\?\?/));
            const start = external_perf_hooks_namespaceObject.performance.now();
            if (needsTranspile) {
              source = transform2({ filename, source, ts: isTypescript });
              debug("[transpile]" + (isNativeModule ? " [esm]" : ""), filename, `(${Math.round(1e3 * (external_perf_hooks_namespaceObject.performance.now() - start)) / 1e3}ms)`);
            } else try {
              return debug("[native]", filename), _interopDefault(nativeRequire(id));
            } catch (error) {
              debug("Native require error:", error), debug("[fallback]", filename), source = transform2({ filename, source, ts: isTypescript });
            }
            const mod = new external_module_.Module(filename);
            let compiled;
            mod.filename = filename, parentModule && (mod.parent = parentModule, Array.isArray(parentModule.children) && !parentModule.children.includes(mod) && parentModule.children.push(mod)), mod.require = createJITI(filename, opts, mod, cache), mod.path = pathe_92c04245_dirname(filename), mod.paths = external_module_.Module._nodeModulePaths(mod.path), cache[filename] = mod, opts.requireCache && (nativeRequire.cache[filename] = mod);
            try {
              compiled = external_vm_default().runInThisContext(external_module_.Module.wrap(source), { filename, lineOffset: 0, displayErrors: false });
            } catch (error) {
              opts.requireCache && delete nativeRequire.cache[filename], opts.onError(error);
            }
            try {
              compiled(mod.exports, mod.require, mod, mod.filename, pathe_92c04245_dirname(mod.filename));
            } catch (error) {
              opts.requireCache && delete nativeRequire.cache[filename], opts.onError(error);
            }
            if (mod.exports && mod.exports.__JITI_ERROR__) {
              const { filename: filename2, line, column, code, message } = mod.exports.__JITI_ERROR__, err = new Error(`${code}: ${message} 
 ${`${filename2}:${line}:${column}`}`);
              Error.captureStackTrace(err, jiti2), opts.onError(err);
            }
            mod.loaded = true;
            return _interopDefault(mod.exports);
          }
          return _resolve2.paths = nativeRequire.resolve.paths, jiti2.resolve = _resolve2, jiti2.cache = opts.requireCache ? nativeRequire.cache : {}, jiti2.extensions = nativeRequire.extensions, jiti2.main = nativeRequire.main, jiti2.transform = transform2, jiti2.register = function() {
            return (0, lib.addHook)((source, filename) => jiti2.transform({ source, filename, ts: !!/\.[cm]?ts$/.test(filename) }), { exts: opts.extensions });
          }, jiti2.evalModule = evalModule, jiti2.import = (id, importOptions) => __awaiter(this, void 0, void 0, function* () {
            return yield jiti2(id);
          }), jiti2;
        }
      })(), module2.exports = __webpack_exports__.default;
    })();
  }
});

// ../../../node_modules/.pnpm/jiti@1.21.0/node_modules/jiti/dist/babel.js
var require_babel = __commonJS({
  "../../../node_modules/.pnpm/jiti@1.21.0/node_modules/jiti/dist/babel.js"(exports2, module2) {
    (() => {
      var __webpack_modules__ = { "./node_modules/.pnpm/@ampproject+remapping@2.2.1/node_modules/@ampproject/remapping/dist/remapping.umd.js": function(module3, __unused_webpack_exports, __webpack_require__2) {
        module3.exports = function(traceMapping, genMapping) {
          "use strict";
          const SOURCELESS_MAPPING = SegmentObject("", -1, -1, "", null), EMPTY_SOURCES = [];
          function SegmentObject(source, line, column, name, content) {
            return { source, line, column, name, content };
          }
          function Source(map, sources, source, content) {
            return { map, sources, source, content };
          }
          function MapSource(map, sources) {
            return Source(map, sources, "", null);
          }
          function OriginalSource(source, content) {
            return Source(null, EMPTY_SOURCES, source, content);
          }
          function traceMappings(tree) {
            const gen = new genMapping.GenMapping({ file: tree.map.file }), { sources: rootSources, map } = tree, rootNames = map.names, rootMappings = traceMapping.decodedMappings(map);
            for (let i = 0; i < rootMappings.length; i++) {
              const segments = rootMappings[i];
              for (let j = 0; j < segments.length; j++) {
                const segment = segments[j], genCol = segment[0];
                let traced = SOURCELESS_MAPPING;
                if (1 !== segment.length && (traced = originalPositionFor(rootSources[segment[1]], segment[2], segment[3], 5 === segment.length ? rootNames[segment[4]] : ""), null == traced)) continue;
                const { column, line, name, content, source } = traced;
                genMapping.maybeAddSegment(gen, i, genCol, source, line, column, name), source && null != content && genMapping.setSourceContent(gen, source, content);
              }
            }
            return gen;
          }
          function originalPositionFor(source, line, column, name) {
            if (!source.map) return SegmentObject(source.source, line, column, name, source.content);
            const segment = traceMapping.traceSegment(source.map, line, column);
            return null == segment ? null : 1 === segment.length ? SOURCELESS_MAPPING : originalPositionFor(source.sources[segment[1]], segment[2], segment[3], 5 === segment.length ? source.map.names[segment[4]] : name);
          }
          function asArray(value2) {
            return Array.isArray(value2) ? value2 : [value2];
          }
          function buildSourceMapTree(input, loader) {
            const maps = asArray(input).map((m) => new traceMapping.TraceMap(m, "")), map = maps.pop();
            for (let i = 0; i < maps.length; i++) if (maps[i].sources.length > 1) throw new Error(`Transformation map ${i} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
            let tree = build(map, loader, "", 0);
            for (let i = maps.length - 1; i >= 0; i--) tree = MapSource(maps[i], [tree]);
            return tree;
          }
          function build(map, loader, importer, importerDepth) {
            const { resolvedSources, sourcesContent } = map, depth = importerDepth + 1;
            return MapSource(map, resolvedSources.map((sourceFile, i) => {
              const ctx = { importer, depth, source: sourceFile || "", content: void 0 }, sourceMap = loader(ctx.source, ctx), { source, content } = ctx;
              return sourceMap ? build(new traceMapping.TraceMap(sourceMap, source), loader, source, depth) : OriginalSource(source, void 0 !== content ? content : sourcesContent ? sourcesContent[i] : null);
            }));
          }
          class SourceMap {
            constructor(map, options) {
              const out = options.decodedMappings ? genMapping.toDecodedMap(map) : genMapping.toEncodedMap(map);
              this.version = out.version, this.file = out.file, this.mappings = out.mappings, this.names = out.names, this.sourceRoot = out.sourceRoot, this.sources = out.sources, options.excludeContent || (this.sourcesContent = out.sourcesContent);
            }
            toString() {
              return JSON.stringify(this);
            }
          }
          function remapping(input, loader, options) {
            const opts = "object" == typeof options ? options : { excludeContent: !!options, decodedMappings: false }, tree = buildSourceMapTree(input, loader);
            return new SourceMap(traceMappings(tree), opts);
          }
          return remapping;
        }(__webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.20/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.3/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"));
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files lazy recursive": (module3) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e = new Error("Cannot find module '" + req + "'");
            throw e.code = "MODULE_NOT_FOUND", e;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files lazy recursive", module3.exports = webpackEmptyAsyncContext;
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive": (module3) => {
        function webpackEmptyContext(req) {
          var e = new Error("Cannot find module '" + req + "'");
          throw e.code = "MODULE_NOT_FOUND", e;
        }
        webpackEmptyContext.keys = () => [], webpackEmptyContext.resolve = webpackEmptyContext, webpackEmptyContext.id = "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive", module3.exports = webpackEmptyContext;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-class-properties/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-class-properties", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("classProperties", "classPrivateProperties", "classPrivateMethods");
        } }));
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-export-namespace-from@7.8.3_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-export-namespace-from/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        exports3.Z = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-export-namespace-from", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("exportNamespaceFrom");
        } }));
        exports3.Z = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-nullish-coalescing-operator@7.8.3_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        exports3.Z = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-nullish-coalescing-operator", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("nullishCoalescingOperator");
        } }));
        exports3.Z = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-optional-chaining@7.8.3_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-optional-chaining/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        exports3.Z = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-optional-chaining", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("optionalChaining");
        } }));
        exports3.Z = _default;
      }, "./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.3/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js": function(__unused_webpack_module, exports3, __webpack_require__2) {
        !function(exports4, setArray, sourcemapCodec, traceMapping) {
          "use strict";
          const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, NO_NAME = -1;
          let addSegmentInternal;
          exports4.addSegment = void 0, exports4.addMapping = void 0, exports4.maybeAddSegment = void 0, exports4.maybeAddMapping = void 0, exports4.setSourceContent = void 0, exports4.toDecodedMap = void 0, exports4.toEncodedMap = void 0, exports4.fromMap = void 0, exports4.allMappings = void 0;
          class GenMapping {
            constructor({ file, sourceRoot } = {}) {
              this._names = new setArray.SetArray(), this._sources = new setArray.SetArray(), this._sourcesContent = [], this._mappings = [], this.file = file, this.sourceRoot = sourceRoot;
            }
          }
          function getLine(mappings, index) {
            for (let i = mappings.length; i <= index; i++) mappings[i] = [];
            return mappings[index];
          }
          function getColumnIndex(line, genColumn) {
            let index = line.length;
            for (let i = index - 1; i >= 0 && !(genColumn >= line[i][COLUMN]); index = i--) ;
            return index;
          }
          function insert(array, index, value2) {
            for (let i = array.length; i > index; i--) array[i] = array[i - 1];
            array[index] = value2;
          }
          function removeEmptyFinalLines(mappings) {
            const { length } = mappings;
            let len = length;
            for (let i = len - 1; i >= 0 && !(mappings[i].length > 0); len = i, i--) ;
            len < length && (mappings.length = len);
          }
          function putAll(strarr, array) {
            for (let i = 0; i < array.length; i++) setArray.put(strarr, array[i]);
          }
          function skipSourceless(line, index) {
            return 0 === index || 1 === line[index - 1].length;
          }
          function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
            if (0 === index) return false;
            const prev = line[index - 1];
            return 1 !== prev.length && sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (5 === prev.length ? prev[NAMES_INDEX] : NO_NAME);
          }
          function addMappingInternal(skipable, map, mapping) {
            const { generated, source, original, name, content } = mapping;
            if (!source) return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
            const s = source;
            return addSegmentInternal(skipable, map, generated.line - 1, generated.column, s, original.line - 1, original.column, name, content);
          }
          exports4.addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content), exports4.maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content), exports4.addMapping = (map, mapping) => addMappingInternal(false, map, mapping), exports4.maybeAddMapping = (map, mapping) => addMappingInternal(true, map, mapping), exports4.setSourceContent = (map, source, content) => {
            const { _sources: sources, _sourcesContent: sourcesContent } = map;
            sourcesContent[setArray.put(sources, source)] = content;
          }, exports4.toDecodedMap = (map) => {
            const { file, sourceRoot, _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map;
            return removeEmptyFinalLines(mappings), { version: 3, file: file || void 0, names: names.array, sourceRoot: sourceRoot || void 0, sources: sources.array, sourcesContent, mappings };
          }, exports4.toEncodedMap = (map) => {
            const decoded = exports4.toDecodedMap(map);
            return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
          }, exports4.allMappings = (map) => {
            const out = [], { _mappings: mappings, _sources: sources, _names: names } = map;
            for (let i = 0; i < mappings.length; i++) {
              const line = mappings[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], generated = { line: i + 1, column: seg[COLUMN] };
                let source, original, name;
                1 !== seg.length && (source = sources.array[seg[SOURCES_INDEX]], original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] }, 5 === seg.length && (name = names.array[seg[NAMES_INDEX]])), out.push({ generated, source, original, name });
              }
            }
            return out;
          }, exports4.fromMap = (input) => {
            const map = new traceMapping.TraceMap(input), gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
            return putAll(gen._names, map.names), putAll(gen._sources, map.sources), gen._sourcesContent = map.sourcesContent || map.sources.map(() => null), gen._mappings = traceMapping.decodedMappings(map), gen;
          }, addSegmentInternal = (skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
            const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map, line = getLine(mappings, genLine), index = getColumnIndex(line, genColumn);
            if (!source) {
              if (skipable && skipSourceless(line, index)) return;
              return insert(line, index, [genColumn]);
            }
            const sourcesIndex = setArray.put(sources, source), namesIndex = name ? setArray.put(names, name) : NO_NAME;
            if (sourcesIndex === sourcesContent.length && (sourcesContent[sourcesIndex] = null != content ? content : null), !skipable || !skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
          }, exports4.GenMapping = GenMapping, Object.defineProperty(exports4, "__esModule", { value: true });
        }(exports3, __webpack_require__2("./node_modules/.pnpm/@jridgewell+set-array@1.1.2/node_modules/@jridgewell/set-array/dist/set-array.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.15/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.20/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"));
      }, "./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.1/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js": function(module3) {
        module3.exports = function() {
          "use strict";
          const schemeRegex = /^[\w+.-]+:\/\//, urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/, fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
          var UrlType;
          function isAbsoluteUrl(input) {
            return schemeRegex.test(input);
          }
          function isSchemeRelativeUrl(input) {
            return input.startsWith("//");
          }
          function isAbsolutePath(input) {
            return input.startsWith("/");
          }
          function isFileUrl(input) {
            return input.startsWith("file:");
          }
          function isRelative(input) {
            return /^[.?#]/.test(input);
          }
          function parseAbsoluteUrl(input) {
            const match = urlRegex.exec(input);
            return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
          }
          function parseFileUrl(input) {
            const match = fileRegex.exec(input), path3 = match[2];
            return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path3) ? path3 : "/" + path3, match[3] || "", match[4] || "");
          }
          function makeUrl(scheme, user, host, port, path3, query, hash) {
            return { scheme, user, host, port, path: path3, query, hash, type: UrlType.Absolute };
          }
          function parseUrl(input) {
            if (isSchemeRelativeUrl(input)) {
              const url3 = parseAbsoluteUrl("http:" + input);
              return url3.scheme = "", url3.type = UrlType.SchemeRelative, url3;
            }
            if (isAbsolutePath(input)) {
              const url3 = parseAbsoluteUrl("http://foo.com" + input);
              return url3.scheme = "", url3.host = "", url3.type = UrlType.AbsolutePath, url3;
            }
            if (isFileUrl(input)) return parseFileUrl(input);
            if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);
            const url2 = parseAbsoluteUrl("http://foo.com/" + input);
            return url2.scheme = "", url2.host = "", url2.type = input ? input.startsWith("?") ? UrlType.Query : input.startsWith("#") ? UrlType.Hash : UrlType.RelativePath : UrlType.Empty, url2;
          }
          function stripPathFilename(path3) {
            if (path3.endsWith("/..")) return path3;
            const index = path3.lastIndexOf("/");
            return path3.slice(0, index + 1);
          }
          function mergePaths(url2, base) {
            normalizePath(base, base.type), "/" === url2.path ? url2.path = base.path : url2.path = stripPathFilename(base.path) + url2.path;
          }
          function normalizePath(url2, type) {
            const rel = type <= UrlType.RelativePath, pieces = url2.path.split("/");
            let pointer = 1, positive = 0, addTrailingSlash = false;
            for (let i = 1; i < pieces.length; i++) {
              const piece = pieces[i];
              piece ? (addTrailingSlash = false, "." !== piece && (".." !== piece ? (pieces[pointer++] = piece, positive++) : positive ? (addTrailingSlash = true, positive--, pointer--) : rel && (pieces[pointer++] = piece))) : addTrailingSlash = true;
            }
            let path3 = "";
            for (let i = 1; i < pointer; i++) path3 += "/" + pieces[i];
            (!path3 || addTrailingSlash && !path3.endsWith("/..")) && (path3 += "/"), url2.path = path3;
          }
          function resolve(input, base) {
            if (!input && !base) return "";
            const url2 = parseUrl(input);
            let inputType = url2.type;
            if (base && inputType !== UrlType.Absolute) {
              const baseUrl = parseUrl(base), baseType = baseUrl.type;
              switch (inputType) {
                case UrlType.Empty:
                  url2.hash = baseUrl.hash;
                case UrlType.Hash:
                  url2.query = baseUrl.query;
                case UrlType.Query:
                case UrlType.RelativePath:
                  mergePaths(url2, baseUrl);
                case UrlType.AbsolutePath:
                  url2.user = baseUrl.user, url2.host = baseUrl.host, url2.port = baseUrl.port;
                case UrlType.SchemeRelative:
                  url2.scheme = baseUrl.scheme;
              }
              baseType > inputType && (inputType = baseType);
            }
            normalizePath(url2, inputType);
            const queryHash = url2.query + url2.hash;
            switch (inputType) {
              case UrlType.Hash:
              case UrlType.Query:
                return queryHash;
              case UrlType.RelativePath: {
                const path3 = url2.path.slice(1);
                return path3 ? isRelative(base || input) && !isRelative(path3) ? "./" + path3 + queryHash : path3 + queryHash : queryHash || ".";
              }
              case UrlType.AbsolutePath:
                return url2.path + queryHash;
              default:
                return url2.scheme + "//" + url2.user + url2.host + url2.port + url2.path + queryHash;
            }
          }
          return function(UrlType2) {
            UrlType2[UrlType2.Empty = 1] = "Empty", UrlType2[UrlType2.Hash = 2] = "Hash", UrlType2[UrlType2.Query = 3] = "Query", UrlType2[UrlType2.RelativePath = 4] = "RelativePath", UrlType2[UrlType2.AbsolutePath = 5] = "AbsolutePath", UrlType2[UrlType2.SchemeRelative = 6] = "SchemeRelative", UrlType2[UrlType2.Absolute = 7] = "Absolute";
          }(UrlType || (UrlType = {})), resolve;
        }();
      }, "./node_modules/.pnpm/@jridgewell+set-array@1.1.2/node_modules/@jridgewell/set-array/dist/set-array.umd.js": function(__unused_webpack_module, exports3) {
        !function(exports4) {
          "use strict";
          exports4.get = void 0, exports4.put = void 0, exports4.pop = void 0;
          class SetArray {
            constructor() {
              this._indexes = { __proto__: null }, this.array = [];
            }
          }
          exports4.get = (strarr, key) => strarr._indexes[key], exports4.put = (strarr, key) => {
            const index = exports4.get(strarr, key);
            if (void 0 !== index) return index;
            const { array, _indexes: indexes } = strarr;
            return indexes[key] = array.push(key) - 1;
          }, exports4.pop = (strarr) => {
            const { array, _indexes: indexes } = strarr;
            0 !== array.length && (indexes[array.pop()] = void 0);
          }, exports4.SetArray = SetArray, Object.defineProperty(exports4, "__esModule", { value: true });
        }(exports3);
      }, "./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.15/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js": function(__unused_webpack_module, exports3) {
        !function(exports4) {
          "use strict";
          const comma = ",".charCodeAt(0), semicolon = ";".charCodeAt(0), chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", intToChar = new Uint8Array(64), charToInt = new Uint8Array(128);
          for (let i = 0; i < chars.length; i++) {
            const c = chars.charCodeAt(i);
            intToChar[i] = c, charToInt[c] = i;
          }
          const td = "undefined" != typeof TextDecoder ? new TextDecoder() : "undefined" != typeof Buffer ? { decode: (buf) => Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength).toString() } : { decode(buf) {
            let out = "";
            for (let i = 0; i < buf.length; i++) out += String.fromCharCode(buf[i]);
            return out;
          } };
          function decode(mappings) {
            const state = new Int32Array(5), decoded = [];
            let index = 0;
            do {
              const semi = indexOf(mappings, index), line = [];
              let sorted = true, lastCol = 0;
              state[0] = 0;
              for (let i = index; i < semi; i++) {
                let seg;
                i = decodeInteger(mappings, i, state, 0);
                const col = state[0];
                col < lastCol && (sorted = false), lastCol = col, hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 1), i = decodeInteger(mappings, i, state, 2), i = decodeInteger(mappings, i, state, 3), hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 4), seg = [col, state[1], state[2], state[3], state[4]]) : seg = [col, state[1], state[2], state[3]]) : seg = [col], line.push(seg);
              }
              sorted || sort(line), decoded.push(line), index = semi + 1;
            } while (index <= mappings.length);
            return decoded;
          }
          function indexOf(mappings, index) {
            const idx = mappings.indexOf(";", index);
            return -1 === idx ? mappings.length : idx;
          }
          function decodeInteger(mappings, pos, state, j) {
            let value2 = 0, shift = 0, integer = 0;
            do {
              const c = mappings.charCodeAt(pos++);
              integer = charToInt[c], value2 |= (31 & integer) << shift, shift += 5;
            } while (32 & integer);
            const shouldNegate = 1 & value2;
            return value2 >>>= 1, shouldNegate && (value2 = -2147483648 | -value2), state[j] += value2, pos;
          }
          function hasMoreVlq(mappings, i, length) {
            return !(i >= length) && mappings.charCodeAt(i) !== comma;
          }
          function sort(line) {
            line.sort(sortComparator);
          }
          function sortComparator(a, b) {
            return a[0] - b[0];
          }
          function encode(decoded) {
            const state = new Int32Array(5), bufLength = 16384, subLength = bufLength - 36, buf = new Uint8Array(bufLength), sub = buf.subarray(0, subLength);
            let pos = 0, out = "";
            for (let i = 0; i < decoded.length; i++) {
              const line = decoded[i];
              if (i > 0 && (pos === bufLength && (out += td.decode(buf), pos = 0), buf[pos++] = semicolon), 0 !== line.length) {
                state[0] = 0;
                for (let j = 0; j < line.length; j++) {
                  const segment = line[j];
                  pos > subLength && (out += td.decode(sub), buf.copyWithin(0, subLength, pos), pos -= subLength), j > 0 && (buf[pos++] = comma), pos = encodeInteger(buf, pos, state, segment, 0), 1 !== segment.length && (pos = encodeInteger(buf, pos, state, segment, 1), pos = encodeInteger(buf, pos, state, segment, 2), pos = encodeInteger(buf, pos, state, segment, 3), 4 !== segment.length && (pos = encodeInteger(buf, pos, state, segment, 4)));
                }
              }
            }
            return out + td.decode(buf.subarray(0, pos));
          }
          function encodeInteger(buf, pos, state, segment, j) {
            const next = segment[j];
            let num = next - state[j];
            state[j] = next, num = num < 0 ? -num << 1 | 1 : num << 1;
            do {
              let clamped = 31 & num;
              num >>>= 5, num > 0 && (clamped |= 32), buf[pos++] = intToChar[clamped];
            } while (num > 0);
            return pos;
          }
          exports4.decode = decode, exports4.encode = encode, Object.defineProperty(exports4, "__esModule", { value: true });
        }(exports3);
      }, "./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.20/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js": function(__unused_webpack_module, exports3, __webpack_require__2) {
        !function(exports4, sourcemapCodec, resolveUri) {
          "use strict";
          function _interopDefaultLegacy(e) {
            return e && "object" == typeof e && "default" in e ? e : { default: e };
          }
          var resolveUri__default = _interopDefaultLegacy(resolveUri);
          function resolve(input, base) {
            return base && !base.endsWith("/") && (base += "/"), resolveUri__default.default(input, base);
          }
          function stripFilename(path3) {
            if (!path3) return "";
            const index = path3.lastIndexOf("/");
            return path3.slice(0, index + 1);
          }
          const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, REV_GENERATED_LINE = 1, REV_GENERATED_COLUMN = 2;
          function maybeSort(mappings, owned) {
            const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
            if (unsortedIndex === mappings.length) return mappings;
            owned || (mappings = mappings.slice());
            for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) mappings[i] = sortSegments(mappings[i], owned);
            return mappings;
          }
          function nextUnsortedSegmentLine(mappings, start) {
            for (let i = start; i < mappings.length; i++) if (!isSorted(mappings[i])) return i;
            return mappings.length;
          }
          function isSorted(line) {
            for (let j = 1; j < line.length; j++) if (line[j][COLUMN] < line[j - 1][COLUMN]) return false;
            return true;
          }
          function sortSegments(line, owned) {
            return owned || (line = line.slice()), line.sort(sortComparator);
          }
          function sortComparator(a, b) {
            return a[COLUMN] - b[COLUMN];
          }
          let found = false;
          function binarySearch(haystack, needle, low, high) {
            for (; low <= high; ) {
              const mid = low + (high - low >> 1), cmp = haystack[mid][COLUMN] - needle;
              if (0 === cmp) return found = true, mid;
              cmp < 0 ? low = mid + 1 : high = mid - 1;
            }
            return found = false, low - 1;
          }
          function upperBound(haystack, needle, index) {
            for (let i = index + 1; i < haystack.length && haystack[i][COLUMN] === needle; index = i++) ;
            return index;
          }
          function lowerBound(haystack, needle, index) {
            for (let i = index - 1; i >= 0 && haystack[i][COLUMN] === needle; index = i--) ;
            return index;
          }
          function memoizedState() {
            return { lastKey: -1, lastNeedle: -1, lastIndex: -1 };
          }
          function memoizedBinarySearch(haystack, needle, state, key) {
            const { lastKey, lastNeedle, lastIndex } = state;
            let low = 0, high = haystack.length - 1;
            if (key === lastKey) {
              if (needle === lastNeedle) return found = -1 !== lastIndex && haystack[lastIndex][COLUMN] === needle, lastIndex;
              needle >= lastNeedle ? low = -1 === lastIndex ? 0 : lastIndex : high = lastIndex;
            }
            return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);
          }
          function buildBySources(decoded, memos) {
            const sources = memos.map(buildNullArray);
            for (let i = 0; i < decoded.length; i++) {
              const line = decoded[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j];
                if (1 === seg.length) continue;
                const sourceIndex = seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN], originalSource = sources[sourceIndex], originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []), memo = memos[sourceIndex], index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
                insert(originalLine, memo.lastIndex = index + 1, [sourceColumn, i, seg[COLUMN]]);
              }
            }
            return sources;
          }
          function insert(array, index, value2) {
            for (let i = array.length; i > index; i--) array[i] = array[i - 1];
            array[index] = value2;
          }
          function buildNullArray() {
            return { __proto__: null };
          }
          const AnyMap = function(map, mapUrl) {
            const parsed = "string" == typeof map ? JSON.parse(map) : map;
            if (!("sections" in parsed)) return new TraceMap(parsed, mapUrl);
            const mappings = [], sources = [], sourcesContent = [], names = [];
            recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, 0, 0, 1 / 0, 1 / 0);
            const joined = { version: 3, file: parsed.file, names, sources, sourcesContent, mappings };
            return exports4.presortedDecodedMap(joined);
          };
          function recurse(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {
            const { sections } = input;
            for (let i = 0; i < sections.length; i++) {
              const { map, offset } = sections[i];
              let sl = stopLine, sc = stopColumn;
              if (i + 1 < sections.length) {
                const nextOffset = sections[i + 1].offset;
                sl = Math.min(stopLine, lineOffset + nextOffset.line), sl === stopLine ? sc = Math.min(stopColumn, columnOffset + nextOffset.column) : sl < stopLine && (sc = columnOffset + nextOffset.column);
              }
              addSection(map, mapUrl, mappings, sources, sourcesContent, names, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
            }
          }
          function addSection(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {
            if ("sections" in input) return recurse(...arguments);
            const map = new TraceMap(input, mapUrl), sourcesOffset = sources.length, namesOffset = names.length, decoded = exports4.decodedMappings(map), { resolvedSources, sourcesContent: contents } = map;
            if (append(sources, resolvedSources), append(names, map.names), contents) append(sourcesContent, contents);
            else for (let i = 0; i < resolvedSources.length; i++) sourcesContent.push(null);
            for (let i = 0; i < decoded.length; i++) {
              const lineI = lineOffset + i;
              if (lineI > stopLine) return;
              const out = getLine(mappings, lineI), cOffset = 0 === i ? columnOffset : 0, line = decoded[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], column = cOffset + seg[COLUMN];
                if (lineI === stopLine && column >= stopColumn) return;
                if (1 === seg.length) {
                  out.push([column]);
                  continue;
                }
                const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN];
                out.push(4 === seg.length ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
              }
            }
          }
          function append(arr, other) {
            for (let i = 0; i < other.length; i++) arr.push(other[i]);
          }
          function getLine(arr, index) {
            for (let i = arr.length; i <= index; i++) arr[i] = [];
            return arr[index];
          }
          const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)", COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;
          exports4.encodedMappings = void 0, exports4.decodedMappings = void 0, exports4.traceSegment = void 0, exports4.originalPositionFor = void 0, exports4.generatedPositionFor = void 0, exports4.allGeneratedPositionsFor = void 0, exports4.eachMapping = void 0, exports4.sourceContentFor = void 0, exports4.presortedDecodedMap = void 0, exports4.decodedMap = void 0, exports4.encodedMap = void 0;
          class TraceMap {
            constructor(map, mapUrl) {
              const isString = "string" == typeof map;
              if (!isString && map._decodedMemo) return map;
              const parsed = isString ? JSON.parse(map) : map, { version, file, names, sourceRoot, sources, sourcesContent } = parsed;
              this.version = version, this.file = file, this.names = names || [], this.sourceRoot = sourceRoot, this.sources = sources, this.sourcesContent = sourcesContent;
              const from = resolve(sourceRoot || "", stripFilename(mapUrl));
              this.resolvedSources = sources.map((s) => resolve(s || "", from));
              const { mappings } = parsed;
              "string" == typeof mappings ? (this._encoded = mappings, this._decoded = void 0) : (this._encoded = void 0, this._decoded = maybeSort(mappings, isString)), this._decodedMemo = memoizedState(), this._bySources = void 0, this._bySourceMemos = void 0;
            }
          }
          function clone(map, mappings) {
            return { version: map.version, file: map.file, names: map.names, sourceRoot: map.sourceRoot, sources: map.sources, sourcesContent: map.sourcesContent, mappings };
          }
          function OMapping(source, line, column, name) {
            return { source, line, column, name };
          }
          function GMapping(line, column) {
            return { line, column };
          }
          function traceSegmentInternal(segments, memo, line, column, bias) {
            let index = memoizedBinarySearch(segments, column, memo, line);
            return found ? index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index) : bias === LEAST_UPPER_BOUND && index++, -1 === index || index === segments.length ? -1 : index;
          }
          function sliceGeneratedPositions(segments, memo, line, column, bias) {
            let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
            if (found || bias !== LEAST_UPPER_BOUND || min++, -1 === min || min === segments.length) return [];
            const matchedColumn = found ? column : segments[min][COLUMN];
            found || (min = lowerBound(segments, matchedColumn, min));
            const max = upperBound(segments, matchedColumn, min), result = [];
            for (; min <= max; min++) {
              const segment = segments[min];
              result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
            }
            return result;
          }
          (() => {
            function generatedPosition(map, source, line, column, bias, all) {
              if (--line < 0) throw new Error(LINE_GTR_ZERO);
              if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
              const { sources, resolvedSources } = map;
              let sourceIndex = sources.indexOf(source);
              if (-1 === sourceIndex && (sourceIndex = resolvedSources.indexOf(source)), -1 === sourceIndex) return all ? [] : GMapping(null, null);
              const segments = (map._bySources || (map._bySources = buildBySources(exports4.decodedMappings(map), map._bySourceMemos = sources.map(memoizedState))))[sourceIndex][line];
              if (null == segments) return all ? [] : GMapping(null, null);
              const memo = map._bySourceMemos[sourceIndex];
              if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);
              const index = traceSegmentInternal(segments, memo, line, column, bias);
              if (-1 === index) return GMapping(null, null);
              const segment = segments[index];
              return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
            }
            exports4.encodedMappings = (map) => {
              var _a;
              return null !== (_a = map._encoded) && void 0 !== _a ? _a : map._encoded = sourcemapCodec.encode(map._decoded);
            }, exports4.decodedMappings = (map) => map._decoded || (map._decoded = sourcemapCodec.decode(map._encoded)), exports4.traceSegment = (map, line, column) => {
              const decoded = exports4.decodedMappings(map);
              if (line >= decoded.length) return null;
              const segments = decoded[line], index = traceSegmentInternal(segments, map._decodedMemo, line, column, GREATEST_LOWER_BOUND);
              return -1 === index ? null : segments[index];
            }, exports4.originalPositionFor = (map, { line, column, bias }) => {
              if (--line < 0) throw new Error(LINE_GTR_ZERO);
              if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
              const decoded = exports4.decodedMappings(map);
              if (line >= decoded.length) return OMapping(null, null, null, null);
              const segments = decoded[line], index = traceSegmentInternal(segments, map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
              if (-1 === index) return OMapping(null, null, null, null);
              const segment = segments[index];
              if (1 === segment.length) return OMapping(null, null, null, null);
              const { names, resolvedSources } = map;
              return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], 5 === segment.length ? names[segment[NAMES_INDEX]] : null);
            }, exports4.allGeneratedPositionsFor = (map, { source, line, column, bias }) => generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true), exports4.generatedPositionFor = (map, { source, line, column, bias }) => generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false), exports4.eachMapping = (map, cb) => {
              const decoded = exports4.decodedMappings(map), { names, resolvedSources } = map;
              for (let i = 0; i < decoded.length; i++) {
                const line = decoded[i];
                for (let j = 0; j < line.length; j++) {
                  const seg = line[j], generatedLine = i + 1, generatedColumn = seg[0];
                  let source = null, originalLine = null, originalColumn = null, name = null;
                  1 !== seg.length && (source = resolvedSources[seg[1]], originalLine = seg[2] + 1, originalColumn = seg[3]), 5 === seg.length && (name = names[seg[4]]), cb({ generatedLine, generatedColumn, source, originalLine, originalColumn, name });
                }
              }
            }, exports4.sourceContentFor = (map, source) => {
              const { sources, resolvedSources, sourcesContent } = map;
              if (null == sourcesContent) return null;
              let index = sources.indexOf(source);
              return -1 === index && (index = resolvedSources.indexOf(source)), -1 === index ? null : sourcesContent[index];
            }, exports4.presortedDecodedMap = (map, mapUrl) => {
              const tracer = new TraceMap(clone(map, []), mapUrl);
              return tracer._decoded = map.mappings, tracer;
            }, exports4.decodedMap = (map) => clone(map, exports4.decodedMappings(map)), exports4.encodedMap = (map) => clone(map, exports4.encodedMappings(map));
          })(), exports4.AnyMap = AnyMap, exports4.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND, exports4.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND, exports4.TraceMap = TraceMap, Object.defineProperty(exports4, "__esModule", { value: true });
        }(exports3, __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.15/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.1/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"));
      }, "./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/index.js": (module3, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(api) {
          var transformImport = (0, _utils.createDynamicImportTransform)(api);
          return { manipulateOptions: function(opts, parserOpts) {
            parserOpts.plugins.push("dynamicImport");
          }, visitor: { Import: function(path3) {
            transformImport(this, path3);
          } } };
        };
        var _utils = __webpack_require__2("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js");
        module3.exports = exports3.default;
      }, "./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        var _slicedToArray = function(arr, i) {
          if (Array.isArray(arr)) return arr;
          if (Symbol.iterator in Object(arr)) return function(arr2, i2) {
            var _arr = [], _n = true, _d = false, _e = void 0;
            try {
              for (var _s, _i = arr2[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !i2 || _arr.length !== i2); _n = true) ;
            } catch (err) {
              _d = true, _e = err;
            } finally {
              try {
                !_n && _i.return && _i.return();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }(arr, i);
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        };
        function getImportSource(t, callNode) {
          var importArguments = callNode.arguments, importPath = _slicedToArray(importArguments, 1)[0];
          return t.isStringLiteral(importPath) || t.isTemplateLiteral(importPath) ? (t.removeComments(importPath), importPath) : t.templateLiteral([t.templateElement({ raw: "", cooked: "" }), t.templateElement({ raw: "", cooked: "" }, true)], importArguments);
        }
        exports3.getImportSource = getImportSource, exports3.createDynamicImportTransform = function(_ref) {
          var template = _ref.template, t = _ref.types, builders = { static: { interop: template("Promise.resolve().then(() => INTEROP(require(SOURCE)))"), noInterop: template("Promise.resolve().then(() => require(SOURCE))") }, dynamic: { interop: template("Promise.resolve(SOURCE).then(s => INTEROP(require(s)))"), noInterop: template("Promise.resolve(SOURCE).then(s => require(s))") } }, visited = "function" == typeof WeakSet && /* @__PURE__ */ new WeakSet();
          return function(context, path3) {
            if (visited) {
              if (visited.has(path3)) return;
              visited.add(path3);
            }
            var node, SOURCE = getImportSource(t, path3.parent), builder = (node = SOURCE, t.isStringLiteral(node) || t.isTemplateLiteral(node) && 0 === node.expressions.length ? builders.static : builders.dynamic), newImport = context.opts.noInterop ? builder.noInterop({ SOURCE }) : builder.interop({ SOURCE, INTEROP: context.addHelper("interopRequireWildcard") });
            path3.parentPath.replaceWith(newImport);
          };
        };
      }, "./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _path = __webpack_require__2("path");
        function isInType(path3) {
          switch (path3.parent.type) {
            case "TSTypeReference":
            case "TSQualifiedName":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;
            default:
              return false;
          }
        }
        module3.exports = function(_ref) {
          var types = _ref.types, decoratorExpressionForConstructor = function(decorator, param) {
            return function(className) {
              var resultantDecorator = types.callExpression(decorator.expression, [types.Identifier(className), types.Identifier("undefined"), types.NumericLiteral(param.key)]), resultantDecoratorWithFallback = types.logicalExpression("||", resultantDecorator, types.Identifier(className)), assignment = types.assignmentExpression("=", types.Identifier(className), resultantDecoratorWithFallback);
              return types.expressionStatement(assignment);
            };
          }, decoratorExpressionForMethod = function(decorator, param) {
            return function(className, functionName) {
              var resultantDecorator = types.callExpression(decorator.expression, [types.Identifier("".concat(className, ".prototype")), types.StringLiteral(functionName), types.NumericLiteral(param.key)]);
              return types.expressionStatement(resultantDecorator);
            };
          };
          return { visitor: { Program: function(path3, state) {
            var extension = (0, _path.extname)(state.file.opts.filename);
            ".ts" !== extension && ".tsx" !== extension || function() {
              var decorators = /* @__PURE__ */ Object.create(null);
              path3.node.body.filter(function(it) {
                var type = it.type, declaration = it.declaration;
                switch (type) {
                  case "ClassDeclaration":
                    return true;
                  case "ExportNamedDeclaration":
                  case "ExportDefaultDeclaration":
                    return declaration && "ClassDeclaration" === declaration.type;
                  default:
                    return false;
                }
              }).map(function(it) {
                return "ClassDeclaration" === it.type ? it : it.declaration;
              }).forEach(function(clazz) {
                clazz.body.body.forEach(function(body) {
                  (body.params || []).forEach(function(param) {
                    (param.decorators || []).forEach(function(decorator) {
                      decorator.expression.callee ? decorators[decorator.expression.callee.name] = decorator : decorators[decorator.expression.name] = decorator;
                    });
                  });
                });
              });
              var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
              try {
                for (var _step, _iterator = path3.get("body")[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var stmt = _step.value;
                  if ("ImportDeclaration" === stmt.node.type) {
                    if (0 === stmt.node.specifiers.length) continue;
                    var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = void 0;
                    try {
                      for (var _step2, _loop = function() {
                        var specifier = _step2.value, binding = stmt.scope.getBinding(specifier.local.name);
                        binding.referencePaths.length ? binding.referencePaths.reduce(function(prev, next) {
                          return prev || isInType(next);
                        }, false) && Object.keys(decorators).forEach(function(k) {
                          var decorator = decorators[k];
                          (decorator.expression.arguments || []).forEach(function(arg) {
                            arg.name === specifier.local.name && binding.referencePaths.push({ parent: decorator.expression });
                          });
                        }) : decorators[specifier.local.name] && binding.referencePaths.push({ parent: decorators[specifier.local.name] });
                      }, _iterator2 = stmt.node.specifiers[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) _loop();
                    } catch (err) {
                      _didIteratorError2 = true, _iteratorError2 = err;
                    } finally {
                      try {
                        _iteratorNormalCompletion2 || null == _iterator2.return || _iterator2.return();
                      } finally {
                        if (_didIteratorError2) throw _iteratorError2;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true, _iteratorError = err;
              } finally {
                try {
                  _iteratorNormalCompletion || null == _iterator.return || _iterator.return();
                } finally {
                  if (_didIteratorError) throw _iteratorError;
                }
              }
            }();
          }, Function: function(path3) {
            var functionName = "";
            path3.node.id ? functionName = path3.node.id.name : path3.node.key && (functionName = path3.node.key.name), (path3.get("params") || []).slice().forEach(function(param) {
              var decorators = param.node.decorators || [], transformable = decorators.length;
              if (decorators.slice().forEach(function(decorator) {
                if ("ClassMethod" === path3.type) {
                  var classIdentifier, parentNode = path3.parentPath.parentPath, classDeclaration = path3.findParent(function(p) {
                    return "ClassDeclaration" === p.type;
                  });
                  if (classDeclaration ? classIdentifier = classDeclaration.node.id.name : (parentNode.insertAfter(null), classIdentifier = function(path4) {
                    var assignment = path4.findParent(function(p) {
                      return "AssignmentExpression" === p.node.type;
                    });
                    return "SequenceExpression" === assignment.node.right.type ? assignment.node.right.expressions[1].name : "ClassExpression" === assignment.node.right.type ? assignment.node.left.name : null;
                  }(path3)), "constructor" === functionName) {
                    var expression = decoratorExpressionForConstructor(decorator, param)(classIdentifier);
                    parentNode.insertAfter(expression);
                  } else {
                    var _expression = decoratorExpressionForMethod(decorator, param)(classIdentifier, functionName);
                    parentNode.insertAfter(_expression);
                  }
                } else {
                  var className = path3.findParent(function(p) {
                    return "VariableDeclarator" === p.node.type;
                  }).node.id.name;
                  if (functionName === className) {
                    var _expression2 = decoratorExpressionForConstructor(decorator, param)(className);
                    if ("body" === path3.parentKey) path3.insertAfter(_expression2);
                    else path3.findParent(function(p) {
                      return "body" === p.parentKey;
                    }).insertAfter(_expression2);
                  } else {
                    var classParent = path3.findParent(function(p) {
                      return "CallExpression" === p.node.type;
                    }), _expression3 = decoratorExpressionForMethod(decorator, param)(className, functionName);
                    classParent.insertAfter(_expression3);
                  }
                }
              }), transformable) {
                var replacement = function(path4) {
                  switch (path4.node.type) {
                    case "ObjectPattern":
                      return types.ObjectPattern(path4.node.properties);
                    case "AssignmentPattern":
                      return types.AssignmentPattern(path4.node.left, path4.node.right);
                    case "TSParameterProperty":
                      return types.Identifier(path4.node.parameter.name);
                    default:
                      return types.Identifier(path4.node.name);
                  }
                }(param);
                param.replaceWith(replacement);
              }
            });
          } } };
        };
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.23.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/metadataVisitor.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.metadataVisitor = function(classPath, path3) {
          const field = path3.node, classNode = classPath.node;
          switch (field.type) {
            case "ClassMethod":
              const decorators = "constructor" === field.kind ? classNode.decorators : field.decorators;
              if (!decorators || 0 === decorators.length) return;
              decorators.push(createMetadataDesignDecorator("design:type", _core.types.identifier("Function"))), decorators.push(createMetadataDesignDecorator("design:paramtypes", _core.types.arrayExpression(field.params.map((param) => (0, _serializeType.serializeType)(classPath, param)))));
              break;
            case "ClassProperty":
              if (!field.decorators || 0 === field.decorators.length) return;
              if (!field.typeAnnotation || "TSTypeAnnotation" !== field.typeAnnotation.type) return;
              field.decorators.push(createMetadataDesignDecorator("design:type", (0, _serializeType.serializeType)(classPath, field)));
          }
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _serializeType = __webpack_require__2("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.23.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/serializeType.js");
        function createMetadataDesignDecorator(design, typeArg) {
          return _core.types.decorator(_core.types.callExpression(_core.types.memberExpression(_core.types.identifier("Reflect"), _core.types.identifier("metadata")), [_core.types.stringLiteral(design), typeArg]));
        }
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.23.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/serializeType.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.serializeType = function(classPath, param) {
          const node = getTypedNode(param);
          if (null == node) return createVoidZero();
          if (!node.typeAnnotation || "TSTypeAnnotation" !== node.typeAnnotation.type) return createVoidZero();
          const annotation = node.typeAnnotation.typeAnnotation;
          return serializeTypeNode(classPath.node.id ? classPath.node.id.name : "", annotation);
        }, exports3.isClassType = isClassType;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js");
        function createVoidZero() {
          return _core.types.unaryExpression("void", _core.types.numericLiteral(0));
        }
        function getTypedNode(param) {
          return null == param ? null : "ClassProperty" === param.type || "Identifier" === param.type || "ObjectPattern" === param.type ? param : "AssignmentPattern" === param.type && "Identifier" === param.left.type ? param.left : "TSParameterProperty" === param.type ? getTypedNode(param.parameter) : null;
        }
        function serializeTypeReferenceNode(className, node) {
          const reference = serializeReference(node.typeName);
          return isClassType(className, reference) ? _core.types.identifier("Object") : _core.types.conditionalExpression(_core.types.binaryExpression("===", _core.types.unaryExpression("typeof", reference), _core.types.stringLiteral("undefined")), _core.types.identifier("Object"), _core.types.cloneDeep(reference));
        }
        function isClassType(className, node) {
          switch (node.type) {
            case "Identifier":
              return node.name === className;
            case "MemberExpression":
              return isClassType(className, node.object);
            default:
              throw new Error(`The property expression at ${node.start} is not valid as a Type to be used in Reflect.metadata`);
          }
        }
        function serializeReference(typeName) {
          return "Identifier" === typeName.type ? _core.types.identifier(typeName.name) : _core.types.memberExpression(serializeReference(typeName.left), typeName.right);
        }
        function serializeTypeNode(className, node) {
          if (void 0 === node) return _core.types.identifier("Object");
          switch (node.type) {
            case "TSVoidKeyword":
            case "TSUndefinedKeyword":
            case "TSNullKeyword":
            case "TSNeverKeyword":
              return createVoidZero();
            case "TSParenthesizedType":
              return serializeTypeNode(className, node.typeAnnotation);
            case "TSFunctionType":
            case "TSConstructorType":
              return _core.types.identifier("Function");
            case "TSArrayType":
            case "TSTupleType":
              return _core.types.identifier("Array");
            case "TSTypePredicate":
            case "TSBooleanKeyword":
              return _core.types.identifier("Boolean");
            case "TSStringKeyword":
              return _core.types.identifier("String");
            case "TSObjectKeyword":
              return _core.types.identifier("Object");
            case "TSLiteralType":
              switch (node.literal.type) {
                case "StringLiteral":
                  return _core.types.identifier("String");
                case "NumericLiteral":
                  return _core.types.identifier("Number");
                case "BooleanLiteral":
                  return _core.types.identifier("Boolean");
                default:
                  throw new Error("Bad type for decorator" + node.literal);
              }
            case "TSNumberKeyword":
            case "TSBigIntKeyword":
              return _core.types.identifier("Number");
            case "TSSymbolKeyword":
              return _core.types.identifier("Symbol");
            case "TSTypeReference":
              return serializeTypeReferenceNode(className, node);
            case "TSIntersectionType":
            case "TSUnionType":
              return serializeTypeList(className, node.types);
            case "TSConditionalType":
              return serializeTypeList(className, [node.trueType, node.falseType]);
            case "TSTypeQuery":
            case "TSTypeOperator":
            case "TSIndexedAccessType":
            case "TSMappedType":
            case "TSTypeLiteral":
            case "TSAnyKeyword":
            case "TSUnknownKeyword":
            case "TSThisType":
              break;
            default:
              throw new Error("Bad type for decorator");
          }
          return _core.types.identifier("Object");
        }
        function serializeTypeList(className, types) {
          let serializedUnion;
          for (let typeNode of types) {
            for (; "TSParenthesizedType" === typeNode.type; ) typeNode = typeNode.typeAnnotation;
            if ("TSNeverKeyword" === typeNode.type) continue;
            if ("TSNullKeyword" === typeNode.type || "TSUndefinedKeyword" === typeNode.type) continue;
            const serializedIndividual = serializeTypeNode(className, typeNode);
            if (_core.types.isIdentifier(serializedIndividual) && "Object" === serializedIndividual.name) return serializedIndividual;
            if (serializedUnion) {
              if (!_core.types.isIdentifier(serializedUnion) || !_core.types.isIdentifier(serializedIndividual) || serializedUnion.name !== serializedIndividual.name) return _core.types.identifier("Object");
            } else serializedUnion = serializedIndividual;
          }
          return serializedUnion || createVoidZero();
        }
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.23.2/node_modules/babel-plugin-transform-typescript-metadata/lib/parameter/parameterVisitor.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.parameterVisitor = function(classPath, path3) {
          if ("ClassMethod" !== path3.type) return;
          if ("ClassMethod" !== path3.node.type) return;
          if ("Identifier" !== path3.node.key.type) return;
          const methodPath = path3;
          (methodPath.get("params") || []).slice().forEach(function(param) {
            let resultantDecorator;
            null != ("Identifier" === param.node.type || "ObjectPattern" === param.node.type ? param.node : "TSParameterProperty" === param.node.type && "Identifier" === param.node.parameter.type ? param.node.parameter : null) && ((param.node.decorators || []).slice().forEach(function(decorator) {
              "constructor" === methodPath.node.kind ? (resultantDecorator = createParamDecorator(param.key, decorator.expression, true), classPath.node.decorators || (classPath.node.decorators = []), classPath.node.decorators.push(resultantDecorator)) : (resultantDecorator = createParamDecorator(param.key, decorator.expression, false), methodPath.node.decorators || (methodPath.node.decorators = []), methodPath.node.decorators.push(resultantDecorator));
            }), resultantDecorator && (param.node.decorators = null));
          });
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js");
        function createParamDecorator(paramIndex, decoratorExpression, isConstructor = false) {
          return _core.types.decorator(_core.types.functionExpression(null, [_core.types.identifier("target"), _core.types.identifier("key")], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(decoratorExpression, [_core.types.identifier("target"), _core.types.identifier(isConstructor ? "undefined" : "key"), _core.types.numericLiteral(paramIndex)]))])));
        }
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.23.2/node_modules/babel-plugin-transform-typescript-metadata/lib/plugin.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js"), _parameterVisitor = __webpack_require__2("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.23.2/node_modules/babel-plugin-transform-typescript-metadata/lib/parameter/parameterVisitor.js"), _metadataVisitor = __webpack_require__2("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.23.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/metadataVisitor.js"), _default = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { visitor: { Program(programPath) {
          programPath.traverse({ ClassDeclaration(path3) {
            for (const field of path3.get("body").get("body")) "ClassMethod" !== field.type && "ClassProperty" !== field.type || ((0, _parameterVisitor.parameterVisitor)(path3, field), (0, _metadataVisitor.metadataVisitor)(path3, field));
            path3.parentPath.scope.crawl();
          } });
        } } }));
        exports3.default = _default;
      }, "./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        var decodeBase64;
        function Converter(sm, opts) {
          (opts = opts || {}).hasComment && (sm = function(sm2) {
            return sm2.split(",").pop();
          }(sm)), "base64" === opts.encoding ? sm = decodeBase64(sm) : "uri" === opts.encoding && (sm = decodeURIComponent(sm)), (opts.isJSON || opts.encoding) && (sm = JSON.parse(sm)), this.sourcemap = sm;
        }
        function makeConverter(sm) {
          return new Converter(sm, { isJSON: true });
        }
        Object.defineProperty(exports3, "commentRegex", { get: function() {
          return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/gm;
        } }), Object.defineProperty(exports3, "mapFileCommentRegex", { get: function() {
          return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/gm;
        } }), decodeBase64 = "undefined" != typeof Buffer ? "function" == typeof Buffer.from ? function(base64) {
          return Buffer.from(base64, "base64").toString();
        } : function(base64) {
          if ("number" == typeof value) throw new TypeError("The value to decode must not be of type number.");
          return new Buffer(base64, "base64").toString();
        } : function(base64) {
          return decodeURIComponent(escape(atob(base64)));
        }, Converter.prototype.toJSON = function(space) {
          return JSON.stringify(this.sourcemap, null, space);
        }, "undefined" != typeof Buffer ? "function" == typeof Buffer.from ? Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          return Buffer.from(json, "utf8").toString("base64");
        } : Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          if ("number" == typeof json) throw new TypeError("The json to encode must not be of type number.");
          return new Buffer(json, "utf8").toString("base64");
        } : Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          return btoa(unescape(encodeURIComponent(json)));
        }, Converter.prototype.toURI = function() {
          var json = this.toJSON();
          return encodeURIComponent(json);
        }, Converter.prototype.toComment = function(options) {
          var encoding, content, data;
          return null != options && "uri" === options.encoding ? (encoding = "", content = this.toURI()) : (encoding = ";base64", content = this.toBase64()), data = "sourceMappingURL=data:application/json;charset=utf-8" + encoding + "," + content, null != options && options.multiline ? "/*# " + data + " */" : "//# " + data;
        }, Converter.prototype.toObject = function() {
          return JSON.parse(this.toJSON());
        }, Converter.prototype.addProperty = function(key, value2) {
          if (this.sourcemap.hasOwnProperty(key)) throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
          return this.setProperty(key, value2);
        }, Converter.prototype.setProperty = function(key, value2) {
          return this.sourcemap[key] = value2, this;
        }, Converter.prototype.getProperty = function(key) {
          return this.sourcemap[key];
        }, exports3.fromObject = function(obj) {
          return new Converter(obj);
        }, exports3.fromJSON = function(json) {
          return new Converter(json, { isJSON: true });
        }, exports3.fromURI = function(uri) {
          return new Converter(uri, { encoding: "uri" });
        }, exports3.fromBase64 = function(base64) {
          return new Converter(base64, { encoding: "base64" });
        }, exports3.fromComment = function(comment) {
          var m;
          return new Converter(comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, ""), { encoding: (m = exports3.commentRegex.exec(comment)) && m[4] || "uri", hasComment: true });
        }, exports3.fromMapFileComment = function(comment, read) {
          if ("string" == typeof read) throw new Error("String directory paths are no longer supported with `fromMapFileComment`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
          var sm = function(sm2, read2) {
            var r = exports3.mapFileCommentRegex.exec(sm2), filename = r[1] || r[2];
            try {
              return null != (sm2 = read2(filename)) && "function" == typeof sm2.catch ? sm2.catch(throwError) : sm2;
            } catch (e) {
              throwError(e);
            }
            function throwError(e) {
              throw new Error("An error occurred while trying to read the map file at " + filename + "\n" + e.stack);
            }
          }(comment, read);
          return null != sm && "function" == typeof sm.then ? sm.then(makeConverter) : makeConverter(sm);
        }, exports3.fromSource = function(content) {
          var m = content.match(exports3.commentRegex);
          return m ? exports3.fromComment(m.pop()) : null;
        }, exports3.fromMapFileSource = function(content, read) {
          if ("string" == typeof read) throw new Error("String directory paths are no longer supported with `fromMapFileSource`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
          var m = content.match(exports3.mapFileCommentRegex);
          return m ? exports3.fromMapFileComment(m.pop(), read) : null;
        }, exports3.removeComments = function(src) {
          return src.replace(exports3.commentRegex, "");
        }, exports3.removeMapFileComments = function(src) {
          return src.replace(exports3.mapFileCommentRegex, "");
        }, exports3.generateMapFileComment = function(file, options) {
          var data = "sourceMappingURL=" + file;
          return options && options.multiline ? "/*# " + data + " */" : "//# " + data;
        };
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js": (module3, exports3, __webpack_require__2) => {
        exports3.formatArgs = function(args) {
          if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module3.exports.humanize(this.diff), !this.useColors) return;
          const c = "color: " + this.color;
          args.splice(1, 0, c, "color: inherit");
          let index = 0, lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, (match) => {
            "%%" !== match && (index++, "%c" === match && (lastC = index));
          }), args.splice(lastC, 0, c);
        }, exports3.save = function(namespaces) {
          try {
            namespaces ? exports3.storage.setItem("debug", namespaces) : exports3.storage.removeItem("debug");
          } catch (error) {
          }
        }, exports3.load = function() {
          let r;
          try {
            r = exports3.storage.getItem("debug");
          } catch (error) {
          }
          !r && "undefined" != typeof process && "env" in process && (r = process.env.DEBUG);
          return r;
        }, exports3.useColors = function() {
          if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return true;
          if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
          return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }, exports3.storage = function() {
          try {
            return localStorage;
          } catch (error) {
          }
        }(), exports3.destroy = /* @__PURE__ */ (() => {
          let warned = false;
          return () => {
            warned || (warned = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
          };
        })(), exports3.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], exports3.log = console.debug || console.log || (() => {
        }), module3.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js")(exports3);
        const { formatters } = module3.exports;
        formatters.j = function(v) {
          try {
            return JSON.stringify(v);
          } catch (error) {
            return "[UnexpectedJSONParseError]: " + error.message;
          }
        };
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        module3.exports = function(env) {
          function createDebug(namespace) {
            let prevTime, namespacesCache, enabledCache, enableOverride = null;
            function debug(...args) {
              if (!debug.enabled) return;
              const self2 = debug, curr = Number(/* @__PURE__ */ new Date()), ms = curr - (prevTime || curr);
              self2.diff = ms, self2.prev = prevTime, self2.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), "string" != typeof args[0] && args.unshift("%O");
              let index = 0;
              args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
                if ("%%" === match) return "%";
                index++;
                const formatter = createDebug.formatters[format];
                if ("function" == typeof formatter) {
                  const val = args[index];
                  match = formatter.call(self2, val), args.splice(index, 1), index--;
                }
                return match;
              }), createDebug.formatArgs.call(self2, args);
              (self2.log || createDebug.log).apply(self2, args);
            }
            return debug.namespace = namespace, debug.useColors = createDebug.useColors(), debug.color = createDebug.selectColor(namespace), debug.extend = extend, debug.destroy = createDebug.destroy, Object.defineProperty(debug, "enabled", { enumerable: true, configurable: false, get: () => null !== enableOverride ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, enabledCache = createDebug.enabled(namespace)), enabledCache), set: (v) => {
              enableOverride = v;
            } }), "function" == typeof createDebug.init && createDebug.init(debug), debug;
          }
          function extend(namespace, delimiter) {
            const newDebug = createDebug(this.namespace + (void 0 === delimiter ? ":" : delimiter) + namespace);
            return newDebug.log = this.log, newDebug;
          }
          function toNamespace(regexp) {
            return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
          }
          return createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = function(val) {
            if (val instanceof Error) return val.stack || val.message;
            return val;
          }, createDebug.disable = function() {
            const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)].join(",");
            return createDebug.enable(""), namespaces;
          }, createDebug.enable = function(namespaces) {
            let i;
            createDebug.save(namespaces), createDebug.namespaces = namespaces, createDebug.names = [], createDebug.skips = [];
            const split = ("string" == typeof namespaces ? namespaces : "").split(/[\s,]+/), len = split.length;
            for (i = 0; i < len; i++) split[i] && ("-" === (namespaces = split[i].replace(/\*/g, ".*?"))[0] ? createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$")) : createDebug.names.push(new RegExp("^" + namespaces + "$")));
          }, createDebug.enabled = function(name) {
            if ("*" === name[name.length - 1]) return true;
            let i, len;
            for (i = 0, len = createDebug.skips.length; i < len; i++) if (createDebug.skips[i].test(name)) return false;
            for (i = 0, len = createDebug.names.length; i < len; i++) if (createDebug.names[i].test(name)) return true;
            return false;
          }, createDebug.humanize = __webpack_require__2("./node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js"), createDebug.destroy = function() {
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }, Object.keys(env).forEach((key) => {
            createDebug[key] = env[key];
          }), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {}, createDebug.selectColor = function(namespace) {
            let hash = 0;
            for (let i = 0; i < namespace.length; i++) hash = (hash << 5) - hash + namespace.charCodeAt(i), hash |= 0;
            return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
          }, createDebug.enable(createDebug.load()), createDebug;
        };
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "undefined" == typeof process || "renderer" === process.type || true === process.browser || process.__nwjs ? module3.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js") : module3.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js");
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js": (module3, exports3, __webpack_require__2) => {
        const tty = __webpack_require__2("tty"), util = __webpack_require__2("util");
        exports3.init = function(debug) {
          debug.inspectOpts = {};
          const keys = Object.keys(exports3.inspectOpts);
          for (let i = 0; i < keys.length; i++) debug.inspectOpts[keys[i]] = exports3.inspectOpts[keys[i]];
        }, exports3.log = function(...args) {
          return process.stderr.write(util.format(...args) + "\n");
        }, exports3.formatArgs = function(args) {
          const { namespace: name, useColors } = this;
          if (useColors) {
            const c = this.color, colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c), prefix = `  ${colorCode};1m${name} \x1B[0m`;
            args[0] = prefix + args[0].split("\n").join("\n" + prefix), args.push(colorCode + "m+" + module3.exports.humanize(this.diff) + "\x1B[0m");
          } else args[0] = function() {
            if (exports3.inspectOpts.hideDate) return "";
            return (/* @__PURE__ */ new Date()).toISOString() + " ";
          }() + name + " " + args[0];
        }, exports3.save = function(namespaces) {
          namespaces ? process.env.DEBUG = namespaces : delete process.env.DEBUG;
        }, exports3.load = function() {
          return process.env.DEBUG;
        }, exports3.useColors = function() {
          return "colors" in exports3.inspectOpts ? Boolean(exports3.inspectOpts.colors) : tty.isatty(process.stderr.fd);
        }, exports3.destroy = util.deprecate(() => {
        }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."), exports3.colors = [6, 2, 3, 4, 5, 1];
        try {
          const supportsColor = __webpack_require__2("./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js");
          supportsColor && (supportsColor.stderr || supportsColor).level >= 2 && (exports3.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
        } catch (error) {
        }
        exports3.inspectOpts = Object.keys(process.env).filter((key) => /^debug_/i.test(key)).reduce((obj, key) => {
          const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => k.toUpperCase());
          let val = process.env[key];
          return val = !!/^(yes|on|true|enabled)$/i.test(val) || !/^(no|off|false|disabled)$/i.test(val) && ("null" === val ? null : Number(val)), obj[prop] = val, obj;
        }, {}), module3.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js")(exports3);
        const { formatters } = module3.exports;
        formatters.o = function(v) {
          return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
        }, formatters.O = function(v) {
          return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts);
        };
      }, "./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js": (module3) => {
        "use strict";
        const GENSYNC_START = Symbol.for("gensync:v1:start"), GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend"), GENSYNC_EXPECTED_START = "GENSYNC_EXPECTED_START", GENSYNC_EXPECTED_SUSPEND = "GENSYNC_EXPECTED_SUSPEND", GENSYNC_OPTIONS_ERROR = "GENSYNC_OPTIONS_ERROR";
        function assertTypeof(type, name, value2, allowUndefined) {
          if (typeof value2 === type || allowUndefined && void 0 === value2) return;
          let msg;
          throw msg = allowUndefined ? `Expected opts.${name} to be either a ${type}, or undefined.` : `Expected opts.${name} to be a ${type}.`, makeError2(msg, GENSYNC_OPTIONS_ERROR);
        }
        function makeError2(msg, code) {
          return Object.assign(new Error(msg), { code });
        }
        function buildOperation({ name, arity, sync, async }) {
          return setFunctionMetadata(name, arity, function* (...args) {
            const resume = yield GENSYNC_START;
            if (!resume) {
              return sync.call(this, args);
            }
            let result;
            try {
              async.call(this, args, (value2) => {
                result || (result = { value: value2 }, resume());
              }, (err) => {
                result || (result = { err }, resume());
              });
            } catch (err) {
              result = { err }, resume();
            }
            if (yield GENSYNC_SUSPEND, result.hasOwnProperty("err")) throw result.err;
            return result.value;
          });
        }
        function evaluateSync(gen) {
          let value2;
          for (; !({ value: value2 } = gen.next()).done; ) assertStart(value2, gen);
          return value2;
        }
        function evaluateAsync(gen, resolve, reject) {
          !function step() {
            try {
              let value2;
              for (; !({ value: value2 } = gen.next()).done; ) {
                assertStart(value2, gen);
                let sync = true, didSyncResume = false;
                const out = gen.next(() => {
                  sync ? didSyncResume = true : step();
                });
                if (sync = false, assertSuspend(out, gen), !didSyncResume) return;
              }
              return resolve(value2);
            } catch (err) {
              return reject(err);
            }
          }();
        }
        function assertStart(value2, gen) {
          value2 !== GENSYNC_START && throwError(gen, makeError2(`Got unexpected yielded value in gensync generator: ${JSON.stringify(value2)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`, GENSYNC_EXPECTED_START));
        }
        function assertSuspend({ value: value2, done }, gen) {
          (done || value2 !== GENSYNC_SUSPEND) && throwError(gen, makeError2(done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(value2)}. If you get this, it is probably a gensync bug.`, GENSYNC_EXPECTED_SUSPEND));
        }
        function throwError(gen, err) {
          throw gen.throw && gen.throw(err), err;
        }
        function setFunctionMetadata(name, arity, fn) {
          if ("string" == typeof name) {
            const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
            nameDesc && !nameDesc.configurable || Object.defineProperty(fn, "name", Object.assign(nameDesc || {}, { configurable: true, value: name }));
          }
          if ("number" == typeof arity) {
            const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
            lengthDesc && !lengthDesc.configurable || Object.defineProperty(fn, "length", Object.assign(lengthDesc || {}, { configurable: true, value: arity }));
          }
          return fn;
        }
        module3.exports = Object.assign(function(optsOrFn) {
          let genFn = optsOrFn;
          return genFn = "function" != typeof optsOrFn ? function({ name, arity, sync, async, errback }) {
            if (assertTypeof("string", "name", name, true), assertTypeof("number", "arity", arity, true), assertTypeof("function", "sync", sync), assertTypeof("function", "async", async, true), assertTypeof("function", "errback", errback, true), async && errback) throw makeError2("Expected one of either opts.async or opts.errback, but got _both_.", GENSYNC_OPTIONS_ERROR);
            if ("string" != typeof name) {
              let fnName;
              errback && errback.name && "errback" !== errback.name && (fnName = errback.name), async && async.name && "async" !== async.name && (fnName = async.name.replace(/Async$/, "")), sync && sync.name && "sync" !== sync.name && (fnName = sync.name.replace(/Sync$/, "")), "string" == typeof fnName && (name = fnName);
            }
            "number" != typeof arity && (arity = sync.length);
            return buildOperation({ name, arity, sync: function(args) {
              return sync.apply(this, args);
            }, async: function(args, resolve, reject) {
              async ? async.apply(this, args).then(resolve, reject) : errback ? errback.call(this, ...args, (err, value2) => {
                null == err ? resolve(value2) : reject(err);
              }) : resolve(sync.apply(this, args));
            } });
          }(optsOrFn) : function(genFn2) {
            return setFunctionMetadata(genFn2.name, genFn2.length, function(...args) {
              return genFn2.apply(this, args);
            });
          }(optsOrFn), Object.assign(genFn, /* @__PURE__ */ function(genFn2) {
            const fns = { sync: function(...args) {
              return evaluateSync(genFn2.apply(this, args));
            }, async: function(...args) {
              return new Promise((resolve, reject) => {
                evaluateAsync(genFn2.apply(this, args), resolve, reject);
              });
            }, errback: function(...args) {
              const cb = args.pop();
              if ("function" != typeof cb) throw makeError2("Asynchronous function called without callback", "GENSYNC_ERRBACK_NO_CALLBACK");
              let gen;
              try {
                gen = genFn2.apply(this, args);
              } catch (err) {
                return void cb(err);
              }
              evaluateAsync(gen, (val) => cb(void 0, val), (err) => cb(err));
            } };
            return fns;
          }(genFn));
        }, { all: buildOperation({ name: "all", arity: 1, sync: function(args) {
          return Array.from(args[0]).map((item) => evaluateSync(item));
        }, async: function(args, resolve, reject) {
          const items = Array.from(args[0]);
          if (0 === items.length) return void Promise.resolve().then(() => resolve([]));
          let count = 0;
          const results = items.map(() => {
          });
          items.forEach((item, i) => {
            evaluateAsync(item, (val) => {
              results[i] = val, count += 1, count === results.length && resolve(results);
            }, reject);
          });
        } }), race: buildOperation({ name: "race", arity: 1, sync: function(args) {
          const items = Array.from(args[0]);
          if (0 === items.length) throw makeError2("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
          return evaluateSync(items[0]);
        }, async: function(args, resolve, reject) {
          const items = Array.from(args[0]);
          if (0 === items.length) throw makeError2("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
          for (const item of items) evaluateAsync(item, resolve, reject);
        } }) });
      }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        module3.exports = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json");
      }, "./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js": (module3) => {
        "use strict";
        module3.exports = (flag, argv = process.argv) => {
          const prefix = flag.startsWith("-") ? "" : 1 === flag.length ? "-" : "--", position = argv.indexOf(prefix + flag), terminatorPosition = argv.indexOf("--");
          return -1 !== position && (-1 === terminatorPosition || position < terminatorPosition);
        };
      }, "./node_modules/.pnpm/jsesc@2.5.2/node_modules/jsesc/jsesc.js": (module3) => {
        "use strict";
        const object = {}, hasOwnProperty = object.hasOwnProperty, forOwn = (object2, callback) => {
          for (const key in object2) hasOwnProperty.call(object2, key) && callback(key, object2[key]);
        }, toString = object.toString, isArray = Array.isArray, isBuffer = Buffer.isBuffer, singleEscapes = { '"': '\\"', "'": "\\'", "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t" }, regexSingleEscape = /["'\\\b\f\n\r\t]/, regexDigit = /[0-9]/, regexWhitelist = /[ !#-&\(-\[\]-_a-~]/, jsesc = (argument, options) => {
          const increaseIndentation = () => {
            oldIndent = indent, ++options.indentLevel, indent = options.indent.repeat(options.indentLevel);
          }, defaults = { escapeEverything: false, minimal: false, isScriptContext: false, quotes: "single", wrap: false, es6: false, json: false, compact: true, lowercaseHex: false, numbers: "decimal", indent: "	", indentLevel: 0, __inline1__: false, __inline2__: false }, json = options && options.json;
          var destination, source;
          json && (defaults.quotes = "double", defaults.wrap = true), destination = defaults, "single" != (options = (source = options) ? (forOwn(source, (key, value2) => {
            destination[key] = value2;
          }), destination) : destination).quotes && "double" != options.quotes && "backtick" != options.quotes && (options.quotes = "single");
          const quote = "double" == options.quotes ? '"' : "backtick" == options.quotes ? "`" : "'", compact = options.compact, lowercaseHex = options.lowercaseHex;
          let indent = options.indent.repeat(options.indentLevel), oldIndent = "";
          const inline1 = options.__inline1__, inline2 = options.__inline2__, newLine = compact ? "" : "\n";
          let result, isEmpty = true;
          const useBinNumbers = "binary" == options.numbers, useOctNumbers = "octal" == options.numbers, useDecNumbers = "decimal" == options.numbers, useHexNumbers = "hexadecimal" == options.numbers;
          if (json && argument && /* @__PURE__ */ ((value2) => "function" == typeof value2)(argument.toJSON) && (argument = argument.toJSON()), !((value2) => "string" == typeof value2 || "[object String]" == toString.call(value2))(argument)) {
            if (((value2) => "[object Map]" == toString.call(value2))(argument)) return 0 == argument.size ? "new Map()" : (compact || (options.__inline1__ = true, options.__inline2__ = false), "new Map(" + jsesc(Array.from(argument), options) + ")");
            if (((value2) => "[object Set]" == toString.call(value2))(argument)) return 0 == argument.size ? "new Set()" : "new Set(" + jsesc(Array.from(argument), options) + ")";
            if (isBuffer(argument)) return 0 == argument.length ? "Buffer.from([])" : "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
            if (isArray(argument)) return result = [], options.wrap = true, inline1 && (options.__inline1__ = false, options.__inline2__ = true), inline2 || increaseIndentation(), ((array, callback) => {
              const length2 = array.length;
              let index2 = -1;
              for (; ++index2 < length2; ) callback(array[index2]);
            })(argument, (value2) => {
              isEmpty = false, inline2 && (options.__inline2__ = false), result.push((compact || inline2 ? "" : indent) + jsesc(value2, options));
            }), isEmpty ? "[]" : inline2 ? "[" + result.join(", ") + "]" : "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
            if (!((value2) => "number" == typeof value2 || "[object Number]" == toString.call(value2))(argument)) return ((value2) => "[object Object]" == toString.call(value2))(argument) ? (result = [], options.wrap = true, increaseIndentation(), forOwn(argument, (key, value2) => {
              isEmpty = false, result.push((compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value2, options));
            }), isEmpty ? "{}" : "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}") : json ? JSON.stringify(argument) || "null" : String(argument);
            if (json) return JSON.stringify(argument);
            if (useDecNumbers) return String(argument);
            if (useHexNumbers) {
              let hexadecimal = argument.toString(16);
              return lowercaseHex || (hexadecimal = hexadecimal.toUpperCase()), "0x" + hexadecimal;
            }
            if (useBinNumbers) return "0b" + argument.toString(2);
            if (useOctNumbers) return "0o" + argument.toString(8);
          }
          const string = argument;
          let index = -1;
          const length = string.length;
          for (result = ""; ++index < length; ) {
            const character = string.charAt(index);
            if (options.es6) {
              const first = string.charCodeAt(index);
              if (first >= 55296 && first <= 56319 && length > index + 1) {
                const second = string.charCodeAt(index + 1);
                if (second >= 56320 && second <= 57343) {
                  let hexadecimal2 = (1024 * (first - 55296) + second - 56320 + 65536).toString(16);
                  lowercaseHex || (hexadecimal2 = hexadecimal2.toUpperCase()), result += "\\u{" + hexadecimal2 + "}", ++index;
                  continue;
                }
              }
            }
            if (!options.escapeEverything) {
              if (regexWhitelist.test(character)) {
                result += character;
                continue;
              }
              if ('"' == character) {
                result += quote == character ? '\\"' : character;
                continue;
              }
              if ("`" == character) {
                result += quote == character ? "\\`" : character;
                continue;
              }
              if ("'" == character) {
                result += quote == character ? "\\'" : character;
                continue;
              }
            }
            if ("\0" == character && !json && !regexDigit.test(string.charAt(index + 1))) {
              result += "\\0";
              continue;
            }
            if (regexSingleEscape.test(character)) {
              result += singleEscapes[character];
              continue;
            }
            const charCode = character.charCodeAt(0);
            if (options.minimal && 8232 != charCode && 8233 != charCode) {
              result += character;
              continue;
            }
            let hexadecimal = charCode.toString(16);
            lowercaseHex || (hexadecimal = hexadecimal.toUpperCase());
            const longhand = hexadecimal.length > 2 || json, escaped = "\\" + (longhand ? "u" : "x") + ("0000" + hexadecimal).slice(longhand ? -4 : -2);
            result += escaped;
          }
          return options.wrap && (result = quote + result + quote), "`" == quote && (result = result.replace(/\$\{/g, "\\${")), options.isScriptContext ? result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--") : result;
        };
        jsesc.version = "2.5.2", module3.exports = jsesc;
      }, "./node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js": (module3) => {
        var s = 1e3, m = 60 * s, h = 60 * m, d = 24 * h, w = 7 * d, y = 365.25 * d;
        function plural(ms, msAbs, n, name) {
          var isPlural = msAbs >= 1.5 * n;
          return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
        }
        module3.exports = function(val, options) {
          options = options || {};
          var type = typeof val;
          if ("string" === type && val.length > 0) return function(str) {
            if ((str = String(str)).length > 100) return;
            var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
            if (!match) return;
            var n = parseFloat(match[1]);
            switch ((match[2] || "ms").toLowerCase()) {
              case "years":
              case "year":
              case "yrs":
              case "yr":
              case "y":
                return n * y;
              case "weeks":
              case "week":
              case "w":
                return n * w;
              case "days":
              case "day":
              case "d":
                return n * d;
              case "hours":
              case "hour":
              case "hrs":
              case "hr":
              case "h":
                return n * h;
              case "minutes":
              case "minute":
              case "mins":
              case "min":
              case "m":
                return n * m;
              case "seconds":
              case "second":
              case "secs":
              case "sec":
              case "s":
                return n * s;
              case "milliseconds":
              case "millisecond":
              case "msecs":
              case "msec":
              case "ms":
                return n;
              default:
                return;
            }
          }(val);
          if ("number" === type && isFinite(val)) return options.long ? function(ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d) return plural(ms, msAbs, d, "day");
            if (msAbs >= h) return plural(ms, msAbs, h, "hour");
            if (msAbs >= m) return plural(ms, msAbs, m, "minute");
            if (msAbs >= s) return plural(ms, msAbs, s, "second");
            return ms + " ms";
          }(val) : function(ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d) return Math.round(ms / d) + "d";
            if (msAbs >= h) return Math.round(ms / h) + "h";
            if (msAbs >= m) return Math.round(ms / m) + "m";
            if (msAbs >= s) return Math.round(ms / s) + "s";
            return ms + "ms";
          }(val);
          throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
        };
      }, "./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js": (module3, exports3) => {
        var debug;
        exports3 = module3.exports = SemVer, debug = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? function() {
          var args = Array.prototype.slice.call(arguments, 0);
          args.unshift("SEMVER"), console.log.apply(console, args);
        } : function() {
        }, exports3.SEMVER_SPEC_VERSION = "2.0.0";
        var MAX_LENGTH = 256, MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6, re = exports3.re = [], safeRe = exports3.safeRe = [], src = exports3.src = [], t = exports3.tokens = {}, R = 0;
        function tok(n) {
          t[n] = R++;
        }
        var safeRegexReplacements = [["\\s", 1], ["\\d", MAX_LENGTH], ["[a-zA-Z0-9-]", MAX_SAFE_BUILD_LENGTH]];
        function makeSafeRe(value2) {
          for (var i2 = 0; i2 < safeRegexReplacements.length; i2++) {
            var token = safeRegexReplacements[i2][0], max = safeRegexReplacements[i2][1];
            value2 = value2.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
          }
          return value2;
        }
        tok("NUMERICIDENTIFIER"), src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*", tok("NUMERICIDENTIFIERLOOSE"), src[t.NUMERICIDENTIFIERLOOSE] = "\\d+", tok("NONNUMERICIDENTIFIER"), src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*", tok("MAINVERSION"), src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")", tok("MAINVERSIONLOOSE"), src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")", tok("PRERELEASEIDENTIFIER"), src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASEIDENTIFIERLOOSE"), src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASE"), src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))", tok("PRERELEASELOOSE"), src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))", tok("BUILDIDENTIFIER"), src[t.BUILDIDENTIFIER] = "[a-zA-Z0-9-]+", tok("BUILD"), src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))", tok("FULL"), tok("FULLPLAIN"), src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?", src[t.FULL] = "^" + src[t.FULLPLAIN] + "$", tok("LOOSEPLAIN"), src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?", tok("LOOSE"), src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$", tok("GTLT"), src[t.GTLT] = "((?:<|>)?=?)", tok("XRANGEIDENTIFIERLOOSE"), src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*", tok("XRANGEIDENTIFIER"), src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*", tok("XRANGEPLAIN"), src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?", tok("XRANGEPLAINLOOSE"), src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?", tok("XRANGE"), src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$", tok("XRANGELOOSE"), src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$", tok("COERCE"), src[t.COERCE] = "(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])", tok("COERCERTL"), re[t.COERCERTL] = new RegExp(src[t.COERCE], "g"), safeRe[t.COERCERTL] = new RegExp(makeSafeRe(src[t.COERCE]), "g"), tok("LONETILDE"), src[t.LONETILDE] = "(?:~>?)", tok("TILDETRIM"), src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+", re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g"), safeRe[t.TILDETRIM] = new RegExp(makeSafeRe(src[t.TILDETRIM]), "g");
        tok("TILDE"), src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$", tok("TILDELOOSE"), src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$", tok("LONECARET"), src[t.LONECARET] = "(?:\\^)", tok("CARETTRIM"), src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+", re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g"), safeRe[t.CARETTRIM] = new RegExp(makeSafeRe(src[t.CARETTRIM]), "g");
        tok("CARET"), src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$", tok("CARETLOOSE"), src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$", tok("COMPARATORLOOSE"), src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$", tok("COMPARATOR"), src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$", tok("COMPARATORTRIM"), src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")", re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g"), safeRe[t.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t.COMPARATORTRIM]), "g");
        tok("HYPHENRANGE"), src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$", tok("HYPHENRANGELOOSE"), src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$", tok("STAR"), src[t.STAR] = "(<|>)?=?\\s*\\*";
        for (var i = 0; i < R; i++) debug(i, src[i]), re[i] || (re[i] = new RegExp(src[i]), safeRe[i] = new RegExp(makeSafeRe(src[i])));
        function parse(version, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), version instanceof SemVer) return version;
          if ("string" != typeof version) return null;
          if (version.length > MAX_LENGTH) return null;
          if (!(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]).test(version)) return null;
          try {
            return new SemVer(version, options);
          } catch (er) {
            return null;
          }
        }
        function SemVer(version, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), version instanceof SemVer) {
            if (version.loose === options.loose) return version;
            version = version.version;
          } else if ("string" != typeof version) throw new TypeError("Invalid Version: " + version);
          if (version.length > MAX_LENGTH) throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
          if (!(this instanceof SemVer)) return new SemVer(version, options);
          debug("SemVer", version, options), this.options = options, this.loose = !!options.loose;
          var m = version.trim().match(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]);
          if (!m) throw new TypeError("Invalid Version: " + version);
          if (this.raw = version, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
          m[4] ? this.prerelease = m[4].split(".").map(function(id) {
            if (/^[0-9]+$/.test(id)) {
              var num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
            }
            return id;
          }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
        }
        exports3.parse = parse, exports3.valid = function(version, options) {
          var v = parse(version, options);
          return v ? v.version : null;
        }, exports3.clean = function(version, options) {
          var s = parse(version.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        }, exports3.SemVer = SemVer, SemVer.prototype.format = function() {
          return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), this.version;
        }, SemVer.prototype.toString = function() {
          return this.version;
        }, SemVer.prototype.compare = function(other) {
          return debug("SemVer.compare", this.version, this.options, other), other instanceof SemVer || (other = new SemVer(other, this.options)), this.compareMain(other) || this.comparePre(other);
        }, SemVer.prototype.compareMain = function(other) {
          return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        }, SemVer.prototype.comparePre = function(other) {
          if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length) return -1;
          if (!this.prerelease.length && other.prerelease.length) return 1;
          if (!this.prerelease.length && !other.prerelease.length) return 0;
          var i2 = 0;
          do {
            var a = this.prerelease[i2], b = other.prerelease[i2];
            if (debug("prerelease compare", i2, a, b), void 0 === a && void 0 === b) return 0;
            if (void 0 === b) return 1;
            if (void 0 === a) return -1;
            if (a !== b) return compareIdentifiers(a, b);
          } while (++i2);
        }, SemVer.prototype.compareBuild = function(other) {
          other instanceof SemVer || (other = new SemVer(other, this.options));
          var i2 = 0;
          do {
            var a = this.build[i2], b = other.build[i2];
            if (debug("prerelease compare", i2, a, b), void 0 === a && void 0 === b) return 0;
            if (void 0 === b) return 1;
            if (void 0 === a) return -1;
            if (a !== b) return compareIdentifiers(a, b);
          } while (++i2);
        }, SemVer.prototype.inc = function(release, identifier) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
              break;
            case "preminor":
              this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
              break;
            case "prepatch":
              this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
              break;
            case "prerelease":
              0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
              break;
            case "major":
              0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
              break;
            case "minor":
              0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
              break;
            case "patch":
              0 === this.prerelease.length && this.patch++, this.prerelease = [];
              break;
            case "pre":
              if (0 === this.prerelease.length) this.prerelease = [0];
              else {
                for (var i2 = this.prerelease.length; --i2 >= 0; ) "number" == typeof this.prerelease[i2] && (this.prerelease[i2]++, i2 = -2);
                -1 === i2 && this.prerelease.push(0);
              }
              identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
              break;
            default:
              throw new Error("invalid increment argument: " + release);
          }
          return this.format(), this.raw = this.version, this;
        }, exports3.inc = function(version, release, loose, identifier) {
          "string" == typeof loose && (identifier = loose, loose = void 0);
          try {
            return new SemVer(version, loose).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        }, exports3.diff = function(version1, version2) {
          if (eq(version1, version2)) return null;
          var v1 = parse(version1), v2 = parse(version2), prefix = "";
          if (v1.prerelease.length || v2.prerelease.length) {
            prefix = "pre";
            var defaultResult = "prerelease";
          }
          for (var key in v1) if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key]) return prefix + key;
          return defaultResult;
        }, exports3.compareIdentifiers = compareIdentifiers;
        var numeric = /^[0-9]+$/;
        function compareIdentifiers(a, b) {
          var anum = numeric.test(a), bnum = numeric.test(b);
          return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        }
        function compare(a, b, loose) {
          return new SemVer(a, loose).compare(new SemVer(b, loose));
        }
        function gt(a, b, loose) {
          return compare(a, b, loose) > 0;
        }
        function lt(a, b, loose) {
          return compare(a, b, loose) < 0;
        }
        function eq(a, b, loose) {
          return 0 === compare(a, b, loose);
        }
        function neq(a, b, loose) {
          return 0 !== compare(a, b, loose);
        }
        function gte(a, b, loose) {
          return compare(a, b, loose) >= 0;
        }
        function lte(a, b, loose) {
          return compare(a, b, loose) <= 0;
        }
        function cmp(a, op, b, loose) {
          switch (op) {
            case "===":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a === b;
            case "!==":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a !== b;
            case "":
            case "=":
            case "==":
              return eq(a, b, loose);
            case "!=":
              return neq(a, b, loose);
            case ">":
              return gt(a, b, loose);
            case ">=":
              return gte(a, b, loose);
            case "<":
              return lt(a, b, loose);
            case "<=":
              return lte(a, b, loose);
            default:
              throw new TypeError("Invalid operator: " + op);
          }
        }
        function Comparator(comp, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), comp instanceof Comparator) {
            if (comp.loose === !!options.loose) return comp;
            comp = comp.value;
          }
          if (!(this instanceof Comparator)) return new Comparator(comp, options);
          comp = comp.trim().split(/\s+/).join(" "), debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
        }
        exports3.rcompareIdentifiers = function(a, b) {
          return compareIdentifiers(b, a);
        }, exports3.major = function(a, loose) {
          return new SemVer(a, loose).major;
        }, exports3.minor = function(a, loose) {
          return new SemVer(a, loose).minor;
        }, exports3.patch = function(a, loose) {
          return new SemVer(a, loose).patch;
        }, exports3.compare = compare, exports3.compareLoose = function(a, b) {
          return compare(a, b, true);
        }, exports3.compareBuild = function(a, b, loose) {
          var versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        }, exports3.rcompare = function(a, b, loose) {
          return compare(b, a, loose);
        }, exports3.sort = function(list, loose) {
          return list.sort(function(a, b) {
            return exports3.compareBuild(a, b, loose);
          });
        }, exports3.rsort = function(list, loose) {
          return list.sort(function(a, b) {
            return exports3.compareBuild(b, a, loose);
          });
        }, exports3.gt = gt, exports3.lt = lt, exports3.eq = eq, exports3.neq = neq, exports3.gte = gte, exports3.lte = lte, exports3.cmp = cmp, exports3.Comparator = Comparator;
        var ANY = {};
        function Range(range, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), range instanceof Range) return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
          if (range instanceof Comparator) return new Range(range.value, options);
          if (!(this instanceof Range)) return new Range(range, options);
          if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range.trim().split(/\s+/).join(" "), this.set = this.raw.split("||").map(function(range2) {
            return this.parseRange(range2.trim());
          }, this).filter(function(c) {
            return c.length;
          }), !this.set.length) throw new TypeError("Invalid SemVer Range: " + this.raw);
          this.format();
        }
        function isSatisfiable(comparators, options) {
          for (var result = true, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop(); result && remainingComparators.length; ) result = remainingComparators.every(function(otherComparator) {
            return testComparator.intersects(otherComparator, options);
          }), testComparator = remainingComparators.pop();
          return result;
        }
        function isX(id) {
          return !id || "x" === id.toLowerCase() || "*" === id;
        }
        function hyphenReplace($0, from, fM, fm, fp, fpr, fb2, to, tM, tm, tp, tpr, tb) {
          return ((from = isX(fM) ? "" : isX(fm) ? ">=" + fM + ".0.0" : isX(fp) ? ">=" + fM + "." + fm + ".0" : ">=" + from) + " " + (to = isX(tM) ? "" : isX(tm) ? "<" + (+tM + 1) + ".0.0" : isX(tp) ? "<" + tM + "." + (+tm + 1) + ".0" : tpr ? "<=" + tM + "." + tm + "." + tp + "-" + tpr : "<=" + to)).trim();
        }
        function testSet(set, version, options) {
          for (var i2 = 0; i2 < set.length; i2++) if (!set[i2].test(version)) return false;
          if (version.prerelease.length && !options.includePrerelease) {
            for (i2 = 0; i2 < set.length; i2++) if (debug(set[i2].semver), set[i2].semver !== ANY && set[i2].semver.prerelease.length > 0) {
              var allowed = set[i2].semver;
              if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
            }
            return false;
          }
          return true;
        }
        function satisfies(version, range, options) {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }
          return range.test(version);
        }
        function outside(version, range, hilo, options) {
          var gtfn, ltefn, ltfn, comp, ecomp;
          switch (version = new SemVer(version, options), range = new Range(range, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies(version, range, options)) return false;
          for (var i2 = 0; i2 < range.set.length; ++i2) {
            var comparators = range.set[i2], high = null, low = null;
            if (comparators.forEach(function(comparator) {
              comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
            }), high.operator === comp || high.operator === ecomp) return false;
            if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
            if (low.operator === ecomp && ltfn(version, low.semver)) return false;
          }
          return true;
        }
        Comparator.prototype.parse = function(comp) {
          var r = this.options.loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR], m = comp.match(r);
          if (!m) throw new TypeError("Invalid comparator: " + comp);
          this.operator = void 0 !== m[1] ? m[1] : "", "=" === this.operator && (this.operator = ""), m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
        }, Comparator.prototype.toString = function() {
          return this.value;
        }, Comparator.prototype.test = function(version) {
          if (debug("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY) return true;
          if ("string" == typeof version) try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
          return cmp(version, this.operator, this.semver, this.options);
        }, Comparator.prototype.intersects = function(comp, options) {
          if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
          var rangeTmp;
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), "" === this.operator) return "" === this.value || (rangeTmp = new Range(comp.value, options), satisfies(this.value, rangeTmp, options));
          if ("" === comp.operator) return "" === comp.value || (rangeTmp = new Range(this.value, options), satisfies(comp.semver, rangeTmp, options));
          var sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
          return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
        }, exports3.Range = Range, Range.prototype.format = function() {
          return this.range = this.set.map(function(comps) {
            return comps.join(" ").trim();
          }).join("||").trim(), this.range;
        }, Range.prototype.toString = function() {
          return this.range;
        }, Range.prototype.parseRange = function(range) {
          var loose = this.options.loose, hr = loose ? safeRe[t.HYPHENRANGELOOSE] : safeRe[t.HYPHENRANGE];
          range = range.replace(hr, hyphenReplace), debug("hyphen replace", range), range = range.replace(safeRe[t.COMPARATORTRIM], "$1$2$3"), debug("comparator trim", range, safeRe[t.COMPARATORTRIM]), range = (range = (range = range.replace(safeRe[t.TILDETRIM], "$1~")).replace(safeRe[t.CARETTRIM], "$1^")).split(/\s+/).join(" ");
          var compRe = loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR], set = range.split(" ").map(function(comp) {
            return function(comp2, options) {
              return debug("comp", comp2, options), comp2 = function(comp3, options2) {
                return comp3.trim().split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    debug("caret", comp5, options3);
                    var r = options3.loose ? safeRe[t.CARETLOOSE] : safeRe[t.CARET];
                    return comp5.replace(r, function(_, M, m, p, pr) {
                      var ret;
                      return debug("caret", comp5, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = "0" === M ? ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0" : pr ? (debug("replaceCaret pr", pr), ret = "0" === M ? "0" === m ? ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1) : ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0") : (debug("no pr"), ret = "0" === M ? "0" === m ? ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1) : ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0"), debug("caret return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("caret", comp2), comp2 = function(comp3, options2) {
                return comp3.trim().split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    var r = options3.loose ? safeRe[t.TILDELOOSE] : safeRe[t.TILDE];
                    return comp5.replace(r, function(_, M, m, p, pr) {
                      var ret;
                      return debug("tilde", comp5, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0" : pr ? (debug("replaceTilde pr", pr), ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0") : ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0", debug("tilde return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("tildes", comp2), comp2 = function(comp3, options2) {
                return debug("replaceXRanges", comp3, options2), comp3.split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    comp5 = comp5.trim();
                    var r = options3.loose ? safeRe[t.XRANGELOOSE] : safeRe[t.XRANGE];
                    return comp5.replace(r, function(ret, gtlt, M, m, p, pr) {
                      debug("xRange", comp5, ret, gtlt, M, m, p, pr);
                      var xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
                      return "=" === gtlt && anyX && (gtlt = ""), pr = options3.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m = 0), p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), ret = gtlt + M + "." + m + "." + p + pr) : xm ? ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr : xp && (ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr), debug("xRange return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("xrange", comp2), comp2 = function(comp3, options2) {
                return debug("replaceStars", comp3, options2), comp3.trim().replace(safeRe[t.STAR], "");
              }(comp2, options), debug("stars", comp2), comp2;
            }(comp, this.options);
          }, this).join(" ").split(/\s+/);
          return this.options.loose && (set = set.filter(function(comp) {
            return !!comp.match(compRe);
          })), set = set.map(function(comp) {
            return new Comparator(comp, this.options);
          }, this);
        }, Range.prototype.intersects = function(range, options) {
          if (!(range instanceof Range)) throw new TypeError("a Range is required");
          return this.set.some(function(thisComparators) {
            return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
              return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
                return rangeComparators.every(function(rangeComparator) {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        }, exports3.toComparators = function(range, options) {
          return new Range(range, options).set.map(function(comp) {
            return comp.map(function(c) {
              return c.value;
            }).join(" ").trim().split(" ");
          });
        }, Range.prototype.test = function(version) {
          if (!version) return false;
          if ("string" == typeof version) try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
          for (var i2 = 0; i2 < this.set.length; i2++) if (testSet(this.set[i2], version, this.options)) return true;
          return false;
        }, exports3.satisfies = satisfies, exports3.maxSatisfying = function(versions, range, options) {
          var max = null, maxSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach(function(v) {
            rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (maxSV = new SemVer(max = v, options)));
          }), max;
        }, exports3.minSatisfying = function(versions, range, options) {
          var min = null, minSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach(function(v) {
            rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (minSV = new SemVer(min = v, options)));
          }), min;
        }, exports3.minVersion = function(range, loose) {
          range = new Range(range, loose);
          var minver = new SemVer("0.0.0");
          if (range.test(minver)) return minver;
          if (minver = new SemVer("0.0.0-0"), range.test(minver)) return minver;
          minver = null;
          for (var i2 = 0; i2 < range.set.length; ++i2) {
            range.set[i2].forEach(function(comparator) {
              var compver = new SemVer(comparator.semver.version);
              switch (comparator.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  minver && !gt(minver, compver) || (minver = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error("Unexpected operation: " + comparator.operator);
              }
            });
          }
          if (minver && range.test(minver)) return minver;
          return null;
        }, exports3.validRange = function(range, options) {
          try {
            return new Range(range, options).range || "*";
          } catch (er) {
            return null;
          }
        }, exports3.ltr = function(version, range, options) {
          return outside(version, range, "<", options);
        }, exports3.gtr = function(version, range, options) {
          return outside(version, range, ">", options);
        }, exports3.outside = outside, exports3.prerelease = function(version, options) {
          var parsed = parse(version, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        }, exports3.intersects = function(r1, r2, options) {
          return r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2);
        }, exports3.coerce = function(version, options) {
          if (version instanceof SemVer) return version;
          "number" == typeof version && (version = String(version));
          if ("string" != typeof version) return null;
          var match = null;
          if ((options = options || {}).rtl) {
            for (var next; (next = safeRe[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length); ) match && next.index + next[0].length === match.index + match[0].length || (match = next), safeRe[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            safeRe[t.COERCERTL].lastIndex = -1;
          } else match = version.match(safeRe[t.COERCE]);
          if (null === match) return null;
          return parse(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
        };
      }, "./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        const os2 = __webpack_require__2("os"), tty = __webpack_require__2("tty"), hasFlag = __webpack_require__2("./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"), { env } = process;
        let forceColor;
        function translateLevel(level) {
          return 0 !== level && { level, hasBasic: true, has256: level >= 2, has16m: level >= 3 };
        }
        function supportsColor(haveStream, streamIsTTY) {
          if (0 === forceColor) return 0;
          if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) return 3;
          if (hasFlag("color=256")) return 2;
          if (haveStream && !streamIsTTY && void 0 === forceColor) return 0;
          const min = forceColor || 0;
          if ("dumb" === env.TERM) return min;
          if ("win32" === process.platform) {
            const osRelease = os2.release().split(".");
            return Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586 ? Number(osRelease[2]) >= 14931 ? 3 : 2 : 1;
          }
          if ("CI" in env) return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || "codeship" === env.CI_NAME ? 1 : min;
          if ("TEAMCITY_VERSION" in env) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
          if ("truecolor" === env.COLORTERM) return 3;
          if ("TERM_PROGRAM" in env) {
            const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
            switch (env.TERM_PROGRAM) {
              case "iTerm.app":
                return version >= 3 ? 3 : 2;
              case "Apple_Terminal":
                return 2;
            }
          }
          return /-256(color)?$/i.test(env.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM) || "COLORTERM" in env ? 1 : min;
        }
        hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never") ? forceColor = 0 : (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) && (forceColor = 1), "FORCE_COLOR" in env && (forceColor = "true" === env.FORCE_COLOR ? 1 : "false" === env.FORCE_COLOR ? 0 : 0 === env.FORCE_COLOR.length ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3)), module3.exports = { supportsColor: function(stream) {
          return translateLevel(supportsColor(stream, stream && stream.isTTY));
        }, stdout: translateLevel(supportsColor(true, tty.isatty(1))), stderr: translateLevel(supportsColor(true, tty.isatty(2))) };
      }, "./node_modules/.pnpm/to-fast-properties@2.0.0/node_modules/to-fast-properties/index.js": (module3) => {
        "use strict";
        let fastProto = null;
        function FastObject(o) {
          if (null !== fastProto && (fastProto.property, 1)) {
            const result = fastProto;
            return fastProto = FastObject.prototype = null, result;
          }
          return fastProto = FastObject.prototype = null == o ? /* @__PURE__ */ Object.create(null) : o, new FastObject();
        }
        FastObject(), module3.exports = function(o) {
          return FastObject(o);
        };
      }, "./stubs/babel-codeframe.js": (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        function codeFrameColumns() {
          return "";
        }
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { codeFrameColumns: () => codeFrameColumns });
      }, "./stubs/helper-compilation-targets.js": (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        function getTargets() {
          return {};
        }
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => getTargets });
      }, assert: (module3) => {
        "use strict";
        module3.exports = require("assert");
      }, fs: (module3) => {
        "use strict";
        module3.exports = require("fs");
      }, module: (module3) => {
        "use strict";
        module3.exports = require("module");
      }, os: (module3) => {
        "use strict";
        module3.exports = require("os");
      }, path: (module3) => {
        "use strict";
        module3.exports = require("path");
      }, process: (module3) => {
        "use strict";
        module3.exports = require("process");
      }, tty: (module3) => {
        "use strict";
        module3.exports = require("tty");
      }, url: (module3) => {
        "use strict";
        module3.exports = require("url");
      }, util: (module3) => {
        "use strict";
        module3.exports = require("util");
      }, v8: (module3) => {
        "use strict";
        module3.exports = require("v8");
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/caching.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.assertSimpleType = assertSimpleType, exports3.makeStrongCache = makeStrongCache, exports3.makeStrongCacheSync = function(handler) {
          return synchronize(makeStrongCache(handler));
        }, exports3.makeWeakCache = makeWeakCache, exports3.makeWeakCacheSync = function(handler) {
          return synchronize(makeWeakCache(handler));
        };
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/util.js");
        const synchronize = (gen) => _gensync()(gen).sync;
        function* genTrue() {
          return true;
        }
        function makeWeakCache(handler) {
          return makeCachedFunction(WeakMap, handler);
        }
        function makeStrongCache(handler) {
          return makeCachedFunction(Map, handler);
        }
        function makeCachedFunction(CallCache, handler) {
          const callCacheSync = new CallCache(), callCacheAsync = new CallCache(), futureCache = new CallCache();
          return function* (arg, data) {
            const asyncContext = yield* (0, _async.isAsync)(), callCache = asyncContext ? callCacheAsync : callCacheSync, cached = yield* function* (asyncContext2, callCache2, futureCache2, arg2, data2) {
              const cached2 = yield* getCachedValue(callCache2, arg2, data2);
              if (cached2.valid) return cached2;
              if (asyncContext2) {
                const cached3 = yield* getCachedValue(futureCache2, arg2, data2);
                if (cached3.valid) {
                  return { valid: true, value: yield* (0, _async.waitFor)(cached3.value.promise) };
                }
              }
              return { valid: false, value: null };
            }(asyncContext, callCache, futureCache, arg, data);
            if (cached.valid) return cached.value;
            const cache = new CacheConfigurator(data), handlerResult = handler(arg, cache);
            let finishLock, value2;
            return value2 = (0, _util.isIterableIterator)(handlerResult) ? yield* (0, _async.onFirstPause)(handlerResult, () => {
              finishLock = function(config, futureCache2, arg2) {
                const finishLock2 = new Lock();
                return updateFunctionCache(futureCache2, config, arg2, finishLock2), finishLock2;
              }(cache, futureCache, arg);
            }) : handlerResult, updateFunctionCache(callCache, cache, arg, value2), finishLock && (futureCache.delete(arg), finishLock.release(value2)), value2;
          };
        }
        function* getCachedValue(cache, arg, data) {
          const cachedValue = cache.get(arg);
          if (cachedValue) {
            for (const { value: value2, valid } of cachedValue) if (yield* valid(data)) return { valid: true, value: value2 };
          }
          return { valid: false, value: null };
        }
        function updateFunctionCache(cache, config, arg, value2) {
          config.configured() || config.forever();
          let cachedValue = cache.get(arg);
          switch (config.deactivate(), config.mode()) {
            case "forever":
              cachedValue = [{ value: value2, valid: genTrue }], cache.set(arg, cachedValue);
              break;
            case "invalidate":
              cachedValue = [{ value: value2, valid: config.validator() }], cache.set(arg, cachedValue);
              break;
            case "valid":
              cachedValue ? cachedValue.push({ value: value2, valid: config.validator() }) : (cachedValue = [{ value: value2, valid: config.validator() }], cache.set(arg, cachedValue));
          }
        }
        class CacheConfigurator {
          constructor(data) {
            this._active = true, this._never = false, this._forever = false, this._invalidate = false, this._configured = false, this._pairs = [], this._data = void 0, this._data = data;
          }
          simple() {
            return function(cache) {
              function cacheFn(val) {
                if ("boolean" != typeof val) return cache.using(() => assertSimpleType(val()));
                val ? cache.forever() : cache.never();
              }
              return cacheFn.forever = () => cache.forever(), cacheFn.never = () => cache.never(), cacheFn.using = (cb) => cache.using(() => assertSimpleType(cb())), cacheFn.invalidate = (cb) => cache.invalidate(() => assertSimpleType(cb())), cacheFn;
            }(this);
          }
          mode() {
            return this._never ? "never" : this._forever ? "forever" : this._invalidate ? "invalidate" : "valid";
          }
          forever() {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never) throw new Error("Caching has already been configured with .never()");
            this._forever = true, this._configured = true;
          }
          never() {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._forever) throw new Error("Caching has already been configured with .forever()");
            this._never = true, this._configured = true;
          }
          using(handler) {
            if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never || this._forever) throw new Error("Caching has already been configured with .never or .forever()");
            this._configured = true;
            const key = handler(this._data), fn = (0, _async.maybeAsync)(handler, "You appear to be using an async cache handler, but Babel has been called synchronously");
            return (0, _async.isThenable)(key) ? key.then((key2) => (this._pairs.push([key2, fn]), key2)) : (this._pairs.push([key, fn]), key);
          }
          invalidate(handler) {
            return this._invalidate = true, this.using(handler);
          }
          validator() {
            const pairs = this._pairs;
            return function* (data) {
              for (const [key, fn] of pairs) if (key !== (yield* fn(data))) return false;
              return true;
            };
          }
          deactivate() {
            this._active = false;
          }
          configured() {
            return this._configured;
          }
        }
        function assertSimpleType(value2) {
          if ((0, _async.isThenable)(value2)) throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.");
          if (null != value2 && "string" != typeof value2 && "boolean" != typeof value2 && "number" != typeof value2) throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
          return value2;
        }
        class Lock {
          constructor() {
            this.released = false, this.promise = void 0, this._resolve = void 0, this.promise = new Promise((resolve) => {
              this._resolve = resolve;
            });
          }
          release(value2) {
            this.released = true, this._resolve(value2);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/config-chain.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.buildPresetChain = function* (arg, context) {
          const chain = yield* buildPresetChainWalker(arg, context);
          return chain ? { plugins: dedupDescriptors(chain.plugins), presets: dedupDescriptors(chain.presets), options: chain.options.map((o) => normalizeOptions(o)), files: /* @__PURE__ */ new Set() } : null;
        }, exports3.buildPresetChainWalker = void 0, exports3.buildRootChain = function* (opts, context) {
          let configReport, babelRcReport;
          const programmaticLogger = new _printer.ConfigPrinter(), programmaticChain = yield* loadProgrammaticChain({ options: opts, dirname: context.cwd }, context, void 0, programmaticLogger);
          if (!programmaticChain) return null;
          const programmaticReport = yield* programmaticLogger.output();
          let configFile;
          "string" == typeof opts.configFile ? configFile = yield* (0, _index.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller) : false !== opts.configFile && (configFile = yield* (0, _index.findRootConfig)(context.root, context.envName, context.caller));
          let { babelrc, babelrcRoots } = opts, babelrcRootsDirectory = context.cwd;
          const configFileChain = emptyChain(), configFileLogger = new _printer.ConfigPrinter();
          if (configFile) {
            const validatedFile = validateConfigFile(configFile), result = yield* loadFileChain(validatedFile, context, void 0, configFileLogger);
            if (!result) return null;
            configReport = yield* configFileLogger.output(), void 0 === babelrc && (babelrc = validatedFile.options.babelrc), void 0 === babelrcRoots && (babelrcRootsDirectory = validatedFile.dirname, babelrcRoots = validatedFile.options.babelrcRoots), mergeChain(configFileChain, result);
          }
          let ignoreFile, babelrcFile, isIgnored = false;
          const fileChain = emptyChain();
          if ((true === babelrc || void 0 === babelrc) && "string" == typeof context.filename) {
            const pkgData = yield* (0, _index.findPackageData)(context.filename);
            if (pkgData && function(context2, pkgData2, babelrcRoots2, babelrcRootsDirectory2) {
              if ("boolean" == typeof babelrcRoots2) return babelrcRoots2;
              const absoluteRoot = context2.root;
              if (void 0 === babelrcRoots2) return -1 !== pkgData2.directories.indexOf(absoluteRoot);
              let babelrcPatterns = babelrcRoots2;
              Array.isArray(babelrcPatterns) || (babelrcPatterns = [babelrcPatterns]);
              if (babelrcPatterns = babelrcPatterns.map((pat) => "string" == typeof pat ? _path().resolve(babelrcRootsDirectory2, pat) : pat), 1 === babelrcPatterns.length && babelrcPatterns[0] === absoluteRoot) return -1 !== pkgData2.directories.indexOf(absoluteRoot);
              return babelrcPatterns.some((pat) => ("string" == typeof pat && (pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory2)), pkgData2.directories.some((directory) => matchPattern(pat, babelrcRootsDirectory2, directory, context2))));
            }(context, pkgData, babelrcRoots, babelrcRootsDirectory)) {
              if ({ ignore: ignoreFile, config: babelrcFile } = yield* (0, _index.findRelativeConfig)(pkgData, context.envName, context.caller), ignoreFile && fileChain.files.add(ignoreFile.filepath), ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname) && (isIgnored = true), babelrcFile && !isIgnored) {
                const validatedFile = validateBabelrcFile(babelrcFile), babelrcLogger = new _printer.ConfigPrinter(), result = yield* loadFileChain(validatedFile, context, void 0, babelrcLogger);
                result ? (babelRcReport = yield* babelrcLogger.output(), mergeChain(fileChain, result)) : isIgnored = true;
              }
              babelrcFile && isIgnored && fileChain.files.add(babelrcFile.filepath);
            }
          }
          context.showConfig && console.log(`Babel configs on "${context.filename}" (ascending priority):
` + [configReport, babelRcReport, programmaticReport].filter((x) => !!x).join("\n\n") + "\n-----End Babel configs-----");
          const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
          return { plugins: isIgnored ? [] : dedupDescriptors(chain.plugins), presets: isIgnored ? [] : dedupDescriptors(chain.presets), options: isIgnored ? [] : chain.options.map((o) => normalizeOptions(o)), fileHandling: isIgnored ? "ignored" : "transpile", ignore: ignoreFile || void 0, babelrc: babelrcFile || void 0, config: configFile || void 0, files: chain.files };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/options.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/printer.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/config-error.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/caching.js"), _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/config-descriptors.js");
        const debug = _debug()("babel:config:config-chain");
        const buildPresetChainWalker = makeChainWalker({ root: (preset) => loadPresetDescriptors(preset), env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName), overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index), overridesEnv: (preset, index, envName) => loadPresetOverridesEnvDescriptors(preset)(index)(envName), createLogger: () => () => {
        } });
        exports3.buildPresetChainWalker = buildPresetChainWalker;
        const loadPresetDescriptors = (0, _caching.makeWeakCacheSync)((preset) => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors)), loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName))), loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index))), loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName))));
        const validateConfigFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("configfile", file.options, file.filepath) })), validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("babelrcfile", file.options, file.filepath) })), validateExtendFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("extendsfile", file.options, file.filepath) })), loadProgrammaticChain = makeChainWalker({ root: (input) => buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors), env: (input, envName) => buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName), overrides: (input, index) => buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index), overridesEnv: (input, index, envName) => buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index, envName), createLogger: (input, context, baseLogger) => function(_, context2, baseLogger2) {
          var _context$caller;
          if (!baseLogger2) return () => {
          };
          return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Programmatic, { callerName: null == (_context$caller = context2.caller) ? void 0 : _context$caller.name });
        }(0, context, baseLogger) }), loadFileChainWalker = makeChainWalker({ root: (file) => loadFileDescriptors(file), env: (file, envName) => loadFileEnvDescriptors(file)(envName), overrides: (file, index) => loadFileOverridesDescriptors(file)(index), overridesEnv: (file, index, envName) => loadFileOverridesEnvDescriptors(file)(index)(envName), createLogger: (file, context, baseLogger) => function(filepath, context2, baseLogger2) {
          if (!baseLogger2) return () => {
          };
          return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Config, { filepath });
        }(file.filepath, context, baseLogger) });
        function* loadFileChain(input, context, files, baseLogger) {
          const chain = yield* loadFileChainWalker(input, context, files, baseLogger);
          return null == chain || chain.files.add(input.filepath), chain;
        }
        const loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file) => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors)), loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName))), loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index))), loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index, envName))));
        function buildRootDescriptors({ dirname, options }, alias, descriptors2) {
          return descriptors2(dirname, options, alias);
        }
        function buildEnvDescriptors({ dirname, options }, alias, descriptors2, envName) {
          var _options$env;
          const opts = null == (_options$env = options.env) ? void 0 : _options$env[envName];
          return opts ? descriptors2(dirname, opts, `${alias}.env["${envName}"]`) : null;
        }
        function buildOverrideDescriptors({ dirname, options }, alias, descriptors2, index) {
          var _options$overrides;
          const opts = null == (_options$overrides = options.overrides) ? void 0 : _options$overrides[index];
          if (!opts) throw new Error("Assertion failure - missing override");
          return descriptors2(dirname, opts, `${alias}.overrides[${index}]`);
        }
        function buildOverrideEnvDescriptors({ dirname, options }, alias, descriptors2, index, envName) {
          var _options$overrides2, _override$env;
          const override = null == (_options$overrides2 = options.overrides) ? void 0 : _options$overrides2[index];
          if (!override) throw new Error("Assertion failure - missing override");
          const opts = null == (_override$env = override.env) ? void 0 : _override$env[envName];
          return opts ? descriptors2(dirname, opts, `${alias}.overrides[${index}].env["${envName}"]`) : null;
        }
        function makeChainWalker({ root, env, overrides, overridesEnv, createLogger }) {
          return function* (input, context, files = /* @__PURE__ */ new Set(), baseLogger) {
            const { dirname } = input, flattenedConfigs = [], rootOpts = root(input);
            if (configIsApplicable(rootOpts, dirname, context, input.filepath)) {
              flattenedConfigs.push({ config: rootOpts, envName: void 0, index: void 0 });
              const envOpts = env(input, context.envName);
              envOpts && configIsApplicable(envOpts, dirname, context, input.filepath) && flattenedConfigs.push({ config: envOpts, envName: context.envName, index: void 0 }), (rootOpts.options.overrides || []).forEach((_, index) => {
                const overrideOps = overrides(input, index);
                if (configIsApplicable(overrideOps, dirname, context, input.filepath)) {
                  flattenedConfigs.push({ config: overrideOps, index, envName: void 0 });
                  const overrideEnvOpts = overridesEnv(input, index, context.envName);
                  overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname, context, input.filepath) && flattenedConfigs.push({ config: overrideEnvOpts, index, envName: context.envName });
                }
              });
            }
            if (flattenedConfigs.some(({ config: { options: { ignore, only } } }) => shouldIgnore(context, ignore, only, dirname))) return null;
            const chain = emptyChain(), logger2 = createLogger(input, context, baseLogger);
            for (const { config, index, envName } of flattenedConfigs) {
              if (!(yield* mergeExtendsChain(chain, config.options, dirname, context, files, baseLogger))) return null;
              logger2(config, index, envName), yield* mergeChainOpts(chain, config);
            }
            return chain;
          };
        }
        function* mergeExtendsChain(chain, opts, dirname, context, files, baseLogger) {
          if (void 0 === opts.extends) return true;
          const file = yield* (0, _index.loadConfig)(opts.extends, dirname, context.envName, context.caller);
          if (files.has(file)) throw new Error(`Configuration cycle detected loading ${file.filepath}.
File already loaded following the config chain:
` + Array.from(files, (file2) => ` - ${file2.filepath}`).join("\n"));
          files.add(file);
          const fileChain = yield* loadFileChain(validateExtendFile(file), context, files, baseLogger);
          return files.delete(file), !!fileChain && (mergeChain(chain, fileChain), true);
        }
        function mergeChain(target, source) {
          target.options.push(...source.options), target.plugins.push(...source.plugins), target.presets.push(...source.presets);
          for (const file of source.files) target.files.add(file);
          return target;
        }
        function* mergeChainOpts(target, { options, plugins, presets }) {
          return target.options.push(options), target.plugins.push(...yield* plugins()), target.presets.push(...yield* presets()), target;
        }
        function emptyChain() {
          return { options: [], presets: [], plugins: [], files: /* @__PURE__ */ new Set() };
        }
        function normalizeOptions(opts) {
          const options = Object.assign({}, opts);
          return delete options.extends, delete options.env, delete options.overrides, delete options.plugins, delete options.presets, delete options.passPerPreset, delete options.ignore, delete options.only, delete options.test, delete options.include, delete options.exclude, Object.prototype.hasOwnProperty.call(options, "sourceMap") && (options.sourceMaps = options.sourceMap, delete options.sourceMap), options;
        }
        function dedupDescriptors(items) {
          const map = /* @__PURE__ */ new Map(), descriptors2 = [];
          for (const item of items) if ("function" == typeof item.value) {
            const fnKey = item.value;
            let nameMap = map.get(fnKey);
            nameMap || (nameMap = /* @__PURE__ */ new Map(), map.set(fnKey, nameMap));
            let desc = nameMap.get(item.name);
            desc ? desc.value = item : (desc = { value: item }, descriptors2.push(desc), item.ownPass || nameMap.set(item.name, desc));
          } else descriptors2.push({ value: item });
          return descriptors2.reduce((acc, desc) => (acc.push(desc.value), acc), []);
        }
        function configIsApplicable({ options }, dirname, context, configName) {
          return (void 0 === options.test || configFieldIsApplicable(context, options.test, dirname, configName)) && (void 0 === options.include || configFieldIsApplicable(context, options.include, dirname, configName)) && (void 0 === options.exclude || !configFieldIsApplicable(context, options.exclude, dirname, configName));
        }
        function configFieldIsApplicable(context, test, dirname, configName) {
          return matchesPatterns(context, Array.isArray(test) ? test : [test], dirname, configName);
        }
        function ignoreListReplacer(_key, value2) {
          return value2 instanceof RegExp ? String(value2) : value2;
        }
        function shouldIgnore(context, ignore, only, dirname) {
          if (ignore && matchesPatterns(context, ignore, dirname)) {
            var _context$filename;
            const message = `No config is applied to "${null != (_context$filename = context.filename) ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore, ignoreListReplacer)}\` from "${dirname}"`;
            return debug(message), context.showConfig && console.log(message), true;
          }
          if (only && !matchesPatterns(context, only, dirname)) {
            var _context$filename2;
            const message = `No config is applied to "${null != (_context$filename2 = context.filename) ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only, ignoreListReplacer)}\` from "${dirname}"`;
            return debug(message), context.showConfig && console.log(message), true;
          }
          return false;
        }
        function matchesPatterns(context, patterns, dirname, configName) {
          return patterns.some((pattern) => matchPattern(pattern, dirname, context.filename, context, configName));
        }
        function matchPattern(pattern, dirname, pathToTest, context, configName) {
          if ("function" == typeof pattern) return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, { dirname, envName: context.envName, caller: context.caller });
          if ("string" != typeof pathToTest) throw new _configError.default("Configuration contains string/RegExp pattern, but no filename was passed to Babel", configName);
          return "string" == typeof pattern && (pattern = (0, _patternToRegex.default)(pattern, dirname)), pattern.test(pathToTest);
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/config-descriptors.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.createCachedDescriptors = function(dirname, options, alias) {
          const { plugins, presets, passPerPreset } = options;
          return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname), plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname)(alias) : () => handlerOf([]), presets: presets ? () => createCachedPresetDescriptors(presets, dirname)(alias)(!!passPerPreset) : () => handlerOf([]) };
        }, exports3.createDescriptor = createDescriptor, exports3.createUncachedDescriptors = function(dirname, options, alias) {
          return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname), plugins: (0, _functional.once)(() => createPluginDescriptors(options.plugins || [], dirname, alias)), presets: (0, _functional.once)(() => createPresetDescriptors(options.presets || [], dirname, alias, !!options.passPerPreset)) };
        };
        var _functional = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/functional.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/index.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/item.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/caching.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/resolve-targets.js");
        function* handlerOf(value2) {
          return value2;
        }
        function optionsWithResolvedBrowserslistConfigFile(options, dirname) {
          return "string" == typeof options.browserslistConfigFile && (options.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options.browserslistConfigFile, dirname)), options;
        }
        const PRESET_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap(), createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
          const dirname = cache.using((dir) => dir);
          return (0, _caching.makeStrongCacheSync)((alias) => (0, _caching.makeStrongCache)(function* (passPerPreset) {
            return (yield* createPresetDescriptors(items, dirname, alias, passPerPreset)).map((desc) => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
          }));
        }), PLUGIN_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap(), createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
          const dirname = cache.using((dir) => dir);
          return (0, _caching.makeStrongCache)(function* (alias) {
            return (yield* createPluginDescriptors(items, dirname, alias)).map((desc) => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
          });
        }), DEFAULT_OPTIONS = {};
        function loadCachedDescriptor(cache, desc) {
          const { value: value2, options = DEFAULT_OPTIONS } = desc;
          if (false === options) return desc;
          let cacheByOptions = cache.get(value2);
          cacheByOptions || (cacheByOptions = /* @__PURE__ */ new WeakMap(), cache.set(value2, cacheByOptions));
          let possibilities = cacheByOptions.get(options);
          if (possibilities || (possibilities = [], cacheByOptions.set(options, possibilities)), -1 === possibilities.indexOf(desc)) {
            const matches = possibilities.filter((possibility) => {
              return b = desc, (a = possibility).name === b.name && a.value === b.value && a.options === b.options && a.dirname === b.dirname && a.alias === b.alias && a.ownPass === b.ownPass && (null == (_a$file = a.file) ? void 0 : _a$file.request) === (null == (_b$file = b.file) ? void 0 : _b$file.request) && (null == (_a$file2 = a.file) ? void 0 : _a$file2.resolved) === (null == (_b$file2 = b.file) ? void 0 : _b$file2.resolved);
              var a, b, _a$file, _b$file, _a$file2, _b$file2;
            });
            if (matches.length > 0) return matches[0];
            possibilities.push(desc);
          }
          return desc;
        }
        function* createPresetDescriptors(items, dirname, alias, passPerPreset) {
          return yield* createDescriptors("preset", items, dirname, alias, passPerPreset);
        }
        function* createPluginDescriptors(items, dirname, alias) {
          return yield* createDescriptors("plugin", items, dirname, alias);
        }
        function* createDescriptors(type, items, dirname, alias, ownPass) {
          const descriptors2 = yield* _gensync().all(items.map((item, index) => createDescriptor(item, dirname, { type, alias: `${alias}$${index}`, ownPass: !!ownPass })));
          return function(items2) {
            const map = /* @__PURE__ */ new Map();
            for (const item of items2) {
              if ("function" != typeof item.value) continue;
              let nameMap = map.get(item.value);
              if (nameMap || (nameMap = /* @__PURE__ */ new Set(), map.set(item.value, nameMap)), nameMap.has(item.name)) {
                const conflicts = items2.filter((i) => i.value === item.value);
                throw new Error(["Duplicate plugin/preset detected.", "If you'd like to use two separate instances of a plugin,", "they need separate names, e.g.", "", "  plugins: [", "    ['some-plugin', {}],", "    ['some-plugin', {}, 'some unique name'],", "  ]", "", "Duplicates detected are:", `${JSON.stringify(conflicts, null, 2)}`].join("\n"));
              }
              nameMap.add(item.name);
            }
          }(descriptors2), descriptors2;
        }
        function* createDescriptor(pair, dirname, { type, alias, ownPass }) {
          const desc = (0, _item.getItemDescriptor)(pair);
          if (desc) return desc;
          let name, options, file, value2 = pair;
          Array.isArray(value2) && (3 === value2.length ? [value2, options, name] = value2 : [value2, options] = value2);
          let filepath = null;
          if ("string" == typeof value2) {
            if ("string" != typeof type) throw new Error("To resolve a string-based item, the type of item must be given");
            const resolver = "plugin" === type ? _index.loadPlugin : _index.loadPreset, request = value2;
            ({ filepath, value: value2 } = yield* resolver(value2, dirname)), file = { request, resolved: filepath };
          }
          if (!value2) throw new Error(`Unexpected falsy value: ${String(value2)}`);
          if ("object" == typeof value2 && value2.__esModule) {
            if (!value2.default) throw new Error("Must export a default export when using ES6 modules.");
            value2 = value2.default;
          }
          if ("object" != typeof value2 && "function" != typeof value2) throw new Error(`Unsupported format: ${typeof value2}. Expected an object or a function.`);
          if (null !== filepath && "object" == typeof value2 && value2) throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
          return { name, alias: filepath || alias, value: value2, options, dirname, ownPass, file };
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/configuration.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _json() {
          const data = __webpack_require__2("./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs");
          return _json = function() {
            return data;
          }, data;
        }
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ROOT_CONFIG_FILENAMES = void 0, exports3.findConfigUpwards = function(rootDir) {
          let dirname = rootDir;
          for (; ; ) {
            for (const filename of ROOT_CONFIG_FILENAMES) if (_fs().existsSync(_path().join(dirname, filename))) return dirname;
            const nextDir = _path().dirname(dirname);
            if (dirname === nextDir) break;
            dirname = nextDir;
          }
          return null;
        }, exports3.findRelativeConfig = function* (packageData, envName, caller) {
          let config = null, ignore = null;
          const dirname = _path().dirname(packageData.filepath);
          for (const loc of packageData.directories) {
            var _packageData$pkg;
            if (!config) config = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, (null == (_packageData$pkg = packageData.pkg) ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null);
            if (!ignore) {
              const ignoreLoc = _path().join(loc, BABELIGNORE_FILENAME);
              ignore = yield* readIgnoreConfig(ignoreLoc), ignore && debug("Found ignore %o from %o.", ignore.filepath, dirname);
            }
          }
          return { config, ignore };
        }, exports3.findRootConfig = function(dirname, envName, caller) {
          return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname, envName, caller);
        }, exports3.loadConfig = function* (name, dirname, envName, caller) {
          const filepath = (v = process.versions.node, w = "8.9", v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r, { paths: [b] }, M = __webpack_require__2("module")) => {
            let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
            if (f) return f;
            throw f = new Error(`Cannot resolve module '${r}'`), f.code = "MODULE_NOT_FOUND", f;
          })(name, { paths: [dirname] }), conf = yield* readConfig(filepath, envName, caller);
          var v, w;
          if (!conf) throw new _configError.default("Config file contains no configuration data", filepath);
          return debug("Loaded config %o from %o.", name, dirname), conf;
        }, exports3.resolveShowConfigPath = function* (dirname) {
          const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;
          if (null != targetPath) {
            const absolutePath = _path().resolve(dirname, targetPath);
            if (!(yield* fs.stat(absolutePath)).isFile()) throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
            return absolutePath;
          }
          return null;
        };
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/caching.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/config-api.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/utils.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/module-types.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/config-error.js"), fs = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/fs.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const debug = _debug()("babel:config:loading:files:configuration"), ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json", "babel.config.cts"];
        exports3.ROOT_CONFIG_FILENAMES = ROOT_CONFIG_FILENAMES;
        const RELATIVE_CONFIG_FILENAMES = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json", ".babelrc.cts"], BABELIGNORE_FILENAME = ".babelignore", runConfig = (0, _caching.makeWeakCache)(function* (options, cache) {
          return yield* [], { options: (0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache)), cacheNeedsConfiguration: !cache.configured() };
        });
        function* readConfigCode(filepath, data) {
          if (!_fs().existsSync(filepath)) return null;
          let options = yield* (0, _moduleTypes.default)(filepath, "You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously."), cacheNeedsConfiguration = false;
          if ("function" == typeof options && ({ options, cacheNeedsConfiguration } = yield* runConfig(options, data)), !options || "object" != typeof options || Array.isArray(options)) throw new _configError.default("Configuration should be an exported JavaScript object.", filepath);
          if ("function" == typeof options.then) throw null == options.catch || options.catch(() => {
          }), new _configError.default("You appear to be using an async configuration, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously return your config.", filepath);
          return cacheNeedsConfiguration && function(filepath2) {
            throw new _configError.default(`Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === "production");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === "production");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};`, filepath2);
          }(filepath), function(options2, filepath2) {
            let configFilesByFilepath = cfboaf.get(options2);
            configFilesByFilepath || cfboaf.set(options2, configFilesByFilepath = /* @__PURE__ */ new Map());
            let configFile = configFilesByFilepath.get(filepath2);
            configFile || (configFile = { filepath: filepath2, dirname: _path().dirname(filepath2), options: options2 }, configFilesByFilepath.set(filepath2, configFile));
            return configFile;
          }(options, filepath);
        }
        const cfboaf = /* @__PURE__ */ new WeakMap();
        const packageToBabelConfig = (0, _caching.makeWeakCacheSync)((file) => {
          const babel = file.options.babel;
          if (void 0 === babel) return null;
          if ("object" != typeof babel || Array.isArray(babel) || null === babel) throw new _configError.default(".babel property must be an object", file.filepath);
          return { filepath: file.filepath, dirname: file.dirname, options: babel };
        }), readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {
          let options;
          try {
            options = _json().parse(content);
          } catch (err) {
            throw new _configError.default(`Error while parsing config - ${err.message}`, filepath);
          }
          if (!options) throw new _configError.default("No config detected", filepath);
          if ("object" != typeof options) throw new _configError.default("Config returned typeof " + typeof options, filepath);
          if (Array.isArray(options)) throw new _configError.default("Expected config object but found array", filepath);
          return delete options.$schema, { filepath, dirname: _path().dirname(filepath), options };
        }), readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {
          const ignoreDir = _path().dirname(filepath), ignorePatterns = content.split("\n").map((line) => line.replace(/#(.*?)$/, "").trim()).filter((line) => !!line);
          for (const pattern of ignorePatterns) if ("!" === pattern[0]) throw new _configError.default("Negation of file paths is not supported.", filepath);
          return { filepath, dirname: _path().dirname(filepath), ignore: ignorePatterns.map((pattern) => (0, _patternToRegex.default)(pattern, ignoreDir)) };
        });
        function* loadOneConfig(names, dirname, envName, caller, previousConfig = null) {
          const config = (yield* _gensync().all(names.map((filename) => readConfig(_path().join(dirname, filename), envName, caller)))).reduce((previousConfig2, config2) => {
            if (config2 && previousConfig2) throw new _configError.default(`Multiple configuration files found. Please remove one:
 - ${_path().basename(previousConfig2.filepath)}
 - ${config2.filepath}
from ${dirname}`);
            return config2 || previousConfig2;
          }, previousConfig);
          return config && debug("Found configuration %o from %o.", config.filepath, dirname), config;
        }
        function readConfig(filepath, envName, caller) {
          switch (_path().extname(filepath)) {
            case ".js":
            case ".cjs":
            case ".mjs":
            case ".cts":
              return readConfigCode(filepath, { envName, caller });
            default:
              return readConfigJSON5(filepath);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/import.cjs": (module3, __unused_webpack_exports, __webpack_require__2) => {
        module3.exports = function(filepath) {
          return __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files lazy recursive")(filepath);
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "ROOT_CONFIG_FILENAMES", { enumerable: true, get: function() {
          return _configuration.ROOT_CONFIG_FILENAMES;
        } }), Object.defineProperty(exports3, "findConfigUpwards", { enumerable: true, get: function() {
          return _configuration.findConfigUpwards;
        } }), Object.defineProperty(exports3, "findPackageData", { enumerable: true, get: function() {
          return _package.findPackageData;
        } }), Object.defineProperty(exports3, "findRelativeConfig", { enumerable: true, get: function() {
          return _configuration.findRelativeConfig;
        } }), Object.defineProperty(exports3, "findRootConfig", { enumerable: true, get: function() {
          return _configuration.findRootConfig;
        } }), Object.defineProperty(exports3, "loadConfig", { enumerable: true, get: function() {
          return _configuration.loadConfig;
        } }), Object.defineProperty(exports3, "loadPlugin", { enumerable: true, get: function() {
          return _plugins.loadPlugin;
        } }), Object.defineProperty(exports3, "loadPreset", { enumerable: true, get: function() {
          return _plugins.loadPreset;
        } }), Object.defineProperty(exports3, "resolvePlugin", { enumerable: true, get: function() {
          return _plugins.resolvePlugin;
        } }), Object.defineProperty(exports3, "resolvePreset", { enumerable: true, get: function() {
          return _plugins.resolvePreset;
        } }), Object.defineProperty(exports3, "resolveShowConfigPath", { enumerable: true, get: function() {
          return _configuration.resolveShowConfigPath;
        } });
        var _package = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/package.js"), _configuration = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/configuration.js"), _plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/plugins.js");
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/module-types.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function* (filepath, asyncError) {
          switch (_path().extname(filepath)) {
            case ".cjs":
              return loadCjsDefault(filepath, arguments[2]);
            case ".mjs":
              break;
            case ".cts":
              return function(filepath2) {
                const ext = ".cts", hasTsSupport = !!(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").extensions[".ts"] || __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").extensions[".cts"] || __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").extensions[".mts"]);
                let handler;
                if (!hasTsSupport) {
                  const opts = { babelrc: false, configFile: false, sourceType: "unambiguous", sourceMaps: "inline", sourceFileName: _path().basename(filepath2), presets: [[getTSPreset(filepath2), Object.assign({ onlyRemoveTypeImports: true, optimizeConstEnums: true }, { allowDeclareFields: true })]] };
                  handler = function(m, filename) {
                    if (handler && filename.endsWith(ext)) try {
                      return m._compile((0, _transformFile.transformFileSync)(filename, Object.assign({}, opts, { filename })).code, filename);
                    } catch (error) {
                      if (!hasTsSupport) {
                        const packageJson = __webpack_require__2("./node_modules/.pnpm/@babel+preset-typescript@7.23.2_@babel+core@7.23.2/node_modules/@babel/preset-typescript/package.json");
                        _semver().lt(packageJson.version, "7.21.4") && console.error("`.cts` configuration file failed to load, please try to update `@babel/preset-typescript`.");
                      }
                      throw error;
                    }
                    return __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").extensions[".js"](m, filename);
                  }, __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext] = handler;
                }
                try {
                  return loadCjsDefault(filepath2);
                } finally {
                  hasTsSupport || (__webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext] === handler && delete __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext], handler = void 0);
                }
              }(filepath);
            default:
              try {
                return loadCjsDefault(filepath, arguments[2]);
              } catch (e) {
                if ("ERR_REQUIRE_ESM" !== e.code) throw e;
              }
          }
          if (yield* (0, _async.isAsync)()) return yield* (0, _async.waitFor)(function(_x) {
            return _loadMjsDefault.apply(this, arguments);
          }(filepath));
          throw new _configError.default(asyncError, filepath);
        }, exports3.supportsESM = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/async.js");
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/config-error.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transform-file.js");
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value2 = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve(value2) : Promise.resolve(value2).then(_next, _throw);
        }
        const debug = _debug()("babel:config:loading:files:module-types");
        let import_;
        try {
          import_ = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/import.cjs");
        } catch (_unused) {
        }
        const supportsESM = _semver().satisfies(process.versions.node, "^12.17 || >=13.2");
        exports3.supportsESM = supportsESM;
        const LOADING_CJS_FILES = /* @__PURE__ */ new Set();
        function loadCjsDefault(filepath) {
          if (LOADING_CJS_FILES.has(filepath)) return debug("Auto-ignoring usage of config %o.", filepath), {};
          let module3;
          try {
            LOADING_CJS_FILES.add(filepath), module3 = (0, _rewriteStackTrace.endHiddenCallStack)(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive"))(filepath);
          } finally {
            LOADING_CJS_FILES.delete(filepath);
          }
          var _module;
          return null != (_module = module3) && _module.__esModule ? module3.default || (arguments[1] ? module3 : void 0) : module3;
        }
        function _loadMjsDefault() {
          var fn;
          return fn = function* (filepath) {
            if (!import_) throw new _configError.default("Internal error: Native ECMAScript modules aren't supported by this platform.\n", filepath);
            return (yield (0, _rewriteStackTrace.endHiddenCallStack)(import_)((0, _url().pathToFileURL)(filepath))).default;
          }, _loadMjsDefault = function() {
            var self2 = this, args = arguments;
            return new Promise(function(resolve, reject) {
              var gen = fn.apply(self2, args);
              function _next(value2) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value2);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          }, _loadMjsDefault.apply(this, arguments);
        }
        function getTSPreset(filepath) {
          try {
            return __webpack_require__2("./node_modules/.pnpm/@babel+preset-typescript@7.23.2_@babel+core@7.23.2/node_modules/@babel/preset-typescript/lib/index.js");
          } catch (error) {
            if ("MODULE_NOT_FOUND" !== error.code) throw error;
            let message = "You appear to be using a .cts file as Babel configuration, but the `@babel/preset-typescript` package was not found: please install it!";
            throw process.versions.pnp && (message += `
If you are using Yarn Plug'n'Play, you may also need to add the following configuration to your .yarnrc.yml file:

packageExtensions:
	"@babel/core@*":
		peerDependencies:
			"@babel/preset-typescript": "*"
`), new _configError.default(message, filepath);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/package.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.findPackageData = function* (filepath) {
          let pkg = null;
          const directories = [];
          let isPackage = true, dirname = _path().dirname(filepath);
          for (; !pkg && "node_modules" !== _path().basename(dirname); ) {
            directories.push(dirname), pkg = yield* readConfigPackage(_path().join(dirname, PACKAGE_FILENAME));
            const nextLoc = _path().dirname(dirname);
            if (dirname === nextLoc) {
              isPackage = false;
              break;
            }
            dirname = nextLoc;
          }
          return { filepath, directories, pkg, isPackage };
        };
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/utils.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/config-error.js");
        const PACKAGE_FILENAME = "package.json", readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {
          let options;
          try {
            options = JSON.parse(content);
          } catch (err) {
            throw new _configError.default(`Error while parsing JSON - ${err.message}`, filepath);
          }
          if (!options) throw new Error(`${filepath}: No config detected`);
          if ("object" != typeof options) throw new _configError.default("Config returned typeof " + typeof options, filepath);
          if (Array.isArray(options)) throw new _configError.default("Expected config object but found array", filepath);
          return { filepath, dirname: _path().dirname(filepath), options };
        });
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/plugins.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.loadPlugin = function* (name, dirname) {
          const filepath = resolvePlugin(name, dirname, yield* (0, _async.isAsync)()), value2 = yield* requireModule("plugin", filepath);
          return debug("Loaded plugin %o from %o.", name, dirname), { filepath, value: value2 };
        }, exports3.loadPreset = function* (name, dirname) {
          const filepath = resolvePreset(name, dirname, yield* (0, _async.isAsync)()), value2 = yield* requireModule("preset", filepath);
          return debug("Loaded preset %o from %o.", name, dirname), { filepath, value: value2 };
        }, exports3.resolvePreset = exports3.resolvePlugin = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/async.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/module-types.js");
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        var _importMetaResolve = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/vendor/import-meta-resolve.js");
        const debug = _debug()("babel:config:loading:files:plugins"), EXACT_RE = /^module:/, BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/, BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/, BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/, BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/, OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/, OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/, OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/, resolvePlugin = resolveStandardizedName.bind(null, "plugin");
        exports3.resolvePlugin = resolvePlugin;
        const resolvePreset = resolveStandardizedName.bind(null, "preset");
        function standardizeName(type, name) {
          if (_path().isAbsolute(name)) return name;
          const isPreset = "preset" === type;
          return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type}-`).replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`).replace(EXACT_RE, "");
        }
        function* resolveAlternativesHelper(type, name) {
          const standardizedName = standardizeName(type, name), { error, value: value2 } = yield standardizedName;
          if (!error) return value2;
          if ("MODULE_NOT_FOUND" !== error.code) throw error;
          standardizedName === name || (yield name).error || (error.message += `
- If you want to resolve "${name}", use "module:${name}"`), (yield standardizeName(type, "@babel/" + name)).error || (error.message += `
- Did you mean "@babel/${name}"?`);
          const oppositeType = "preset" === type ? "plugin" : "preset";
          if ((yield standardizeName(oppositeType, name)).error || (error.message += `
- Did you accidentally pass a ${oppositeType} as a ${type}?`), "plugin" === type) {
            const transformName = standardizedName.replace("-proposal-", "-transform-");
            transformName === standardizedName || (yield transformName).error || (error.message += `
- Did you mean "${transformName}"?`);
          }
          throw error.message += "\n\nMake sure that all the Babel plugins and presets you are using\nare defined as dependencies or devDependencies in your package.json\nfile. It's possible that the missing plugin is loaded by a preset\nyou are using that forgot to add the plugin to its dependencies: you\ncan workaround this problem by explicitly adding the missing package\nto your top-level package.json.\n", error;
        }
        function tryRequireResolve(id, dirname) {
          try {
            return dirname ? { error: null, value: (v = process.versions.node, w = "8.9", v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r, { paths: [b] }, M = __webpack_require__2("module")) => {
              let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
              if (f) return f;
              throw f = new Error(`Cannot resolve module '${r}'`), f.code = "MODULE_NOT_FOUND", f;
            })(id, { paths: [dirname] }) } : { error: null, value: __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files sync recursive").resolve(id) };
          } catch (error) {
            return { error, value: null };
          }
          var v, w;
        }
        function tryImportMetaResolve(id, options) {
          try {
            return { error: null, value: (0, _importMetaResolve.resolve)(id, options) };
          } catch (error) {
            return { error, value: null };
          }
        }
        function resolveStandardizedNameForRequire(type, name, dirname) {
          const it = resolveAlternativesHelper(type, name);
          let res = it.next();
          for (; !res.done; ) res = it.next(tryRequireResolve(res.value, dirname));
          return res.value;
        }
        function resolveStandardizedName(type, name, dirname, resolveESM) {
          if (!_moduleTypes.supportsESM || !resolveESM) return resolveStandardizedNameForRequire(type, name, dirname);
          try {
            return function(type2, name2, dirname2) {
              const parentUrl = (0, _url().pathToFileURL)(_path().join(dirname2, "./babel-virtual-resolve-base.js")).href, it = resolveAlternativesHelper(type2, name2);
              let res = it.next();
              for (; !res.done; ) res = it.next(tryImportMetaResolve(res.value, parentUrl));
              return (0, _url().fileURLToPath)(res.value);
            }(type, name, dirname);
          } catch (e) {
            try {
              return resolveStandardizedNameForRequire(type, name, dirname);
            } catch (e2) {
              if ("MODULE_NOT_FOUND" === e.type) throw e;
              if ("MODULE_NOT_FOUND" === e2.type) throw e2;
              throw e;
            }
          }
        }
        exports3.resolvePreset = resolvePreset;
        var LOADING_MODULES = /* @__PURE__ */ new Set();
        function* requireModule(type, name) {
          if (!(yield* (0, _async.isAsync)()) && LOADING_MODULES.has(name)) throw new Error(`Reentrant ${type} detected trying to load "${name}". This module is not ignored and is trying to load itself while compiling itself, leading to a dependency cycle. We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.`);
          try {
            return LOADING_MODULES.add(name), yield* (0, _moduleTypes.default)(name, `You appear to be using a native ECMAScript module ${type}, which is only supported when running Babel asynchronously.`, true);
          } catch (err) {
            throw err.message = `[BABEL]: ${err.message} (While processing: ${name})`, err;
          } finally {
            LOADING_MODULES.delete(name);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/utils.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.makeStaticFileCache = function(fn) {
          return (0, _caching.makeStrongCache)(function* (filepath, cache) {
            const cached = cache.invalidate(() => function(filepath2) {
              if (!_fs2().existsSync(filepath2)) return null;
              try {
                return +_fs2().statSync(filepath2).mtime;
              } catch (e) {
                if ("ENOENT" !== e.code && "ENOTDIR" !== e.code) throw e;
              }
              return null;
            }(filepath));
            return null === cached ? null : fn(filepath, yield* fs.readFile(filepath, "utf8"));
          });
        };
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/caching.js"), fs = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/fs.js");
        function _fs2() {
          const data = __webpack_require__2("fs");
          return _fs2 = function() {
            return data;
          }, data;
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/full.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/util.js"), context = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/plugin.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/config-chain.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/caching.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/options.js"), _plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/plugins.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/config-api.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/partial.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/config-error.js"), _default = _gensync()(function* (inputOpts) {
          var _opts$assumptions;
          const result = yield* (0, _partial.default)(inputOpts);
          if (!result) return null;
          const { options, context: context2, fileHandling } = result;
          if ("ignored" === fileHandling) return null;
          const optionDefaults = {}, { plugins, presets } = options;
          if (!plugins || !presets) throw new Error("Assertion failure - plugins and presets exist");
          const presetContext = Object.assign({}, context2, { targets: options.targets }), toDescriptor = (item) => {
            const desc = (0, _item.getItemDescriptor)(item);
            if (!desc) throw new Error("Assertion failure - must be config item");
            return desc;
          }, presetsDescriptors = presets.map(toDescriptor), initialPluginsDescriptors = plugins.map(toDescriptor), pluginDescriptorsByPass = [[]], passes = [], externalDependencies = [], ignored = yield* enhanceError(context2, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
            const presets2 = [];
            for (let i = 0; i < rawPresets.length; i++) {
              const descriptor = rawPresets[i];
              if (false !== descriptor.options) {
                try {
                  var preset = yield* loadPresetDescriptor(descriptor, presetContext);
                } catch (e) {
                  throw "BABEL_UNKNOWN_OPTION" === e.code && (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", e), e;
                }
                externalDependencies.push(preset.externalDependencies), descriptor.ownPass ? presets2.push({ preset: preset.chain, pass: [] }) : presets2.unshift({ preset: preset.chain, pass: pluginDescriptorsPass });
              }
            }
            if (presets2.length > 0) {
              pluginDescriptorsByPass.splice(1, 0, ...presets2.map((o) => o.pass).filter((p) => p !== pluginDescriptorsPass));
              for (const { preset: preset2, pass } of presets2) {
                if (!preset2) return true;
                pass.push(...preset2.plugins);
                if (yield* recursePresetDescriptors(preset2.presets, pass)) return true;
                preset2.options.forEach((opts2) => {
                  (0, _util.mergeOptions)(optionDefaults, opts2);
                });
              }
            }
          })(presetsDescriptors, pluginDescriptorsByPass[0]);
          if (ignored) return null;
          const opts = optionDefaults;
          (0, _util.mergeOptions)(opts, options);
          const pluginContext = Object.assign({}, presetContext, { assumptions: null != (_opts$assumptions = opts.assumptions) ? _opts$assumptions : {} });
          return yield* enhanceError(context2, function* () {
            pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
            for (const descs of pluginDescriptorsByPass) {
              const pass = [];
              passes.push(pass);
              for (let i = 0; i < descs.length; i++) {
                const descriptor = descs[i];
                if (false !== descriptor.options) {
                  try {
                    var plugin = yield* loadPluginDescriptor(descriptor, pluginContext);
                  } catch (e) {
                    throw "BABEL_UNKNOWN_PLUGIN_PROPERTY" === e.code && (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", e), e;
                  }
                  pass.push(plugin), externalDependencies.push(plugin.externalDependencies);
                }
              }
            }
          })(), opts.plugins = passes[0], opts.presets = passes.slice(1).filter((plugins2) => plugins2.length > 0).map((plugins2) => ({ plugins: plugins2 })), opts.passPerPreset = opts.presets.length > 0, { options: opts, passes, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
        });
        function enhanceError(context2, fn) {
          return function* (arg1, arg2) {
            try {
              return yield* fn(arg1, arg2);
            } catch (e) {
              var _context$filename;
              if (!/^\[BABEL\]/.test(e.message)) e.message = `[BABEL] ${null != (_context$filename = context2.filename) ? _context$filename : "unknown file"}: ${e.message}`;
              throw e;
            }
          };
        }
        exports3.default = _default;
        const makeDescriptorLoader = (apiFactory) => (0, _caching.makeWeakCache)(function* ({ value: value2, options, dirname, alias }, cache) {
          if (false === options) throw new Error("Assertion failure");
          options = options || {};
          const externalDependencies = [];
          let item = value2;
          if ("function" == typeof value2) {
            const factory = (0, _async.maybeAsync)(value2, "You appear to be using an async plugin/preset, but Babel has been called synchronously"), api = Object.assign({}, context, apiFactory(cache, externalDependencies));
            try {
              item = yield* factory(api, options, dirname);
            } catch (e) {
              throw alias && (e.message += ` (While processing: ${JSON.stringify(alias)})`), e;
            }
          }
          if (!item || "object" != typeof item) throw new Error("Plugin/Preset did not return an object.");
          if ((0, _async.isThenable)(item)) throw yield* [], new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(alias)})`);
          if (externalDependencies.length > 0 && (!cache.configured() || "forever" === cache.mode())) {
            let error = `A plugin/preset has external untracked dependencies (${externalDependencies[0]}), but the cache `;
            throw cache.configured() ? error += " has been configured to never be invalidated. " : error += "has not been configured to be invalidated when the external dependencies change. ", error += `Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`
(While processing: ${JSON.stringify(alias)})`, new Error(error);
          }
          return { value: item, options, dirname, alias, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
        }), pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI), presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI), instantiatePlugin = (0, _caching.makeWeakCache)(function* ({ value: value2, options, dirname, alias, externalDependencies }, cache) {
          const pluginObj = (0, _plugins.validatePluginObject)(value2), plugin = Object.assign({}, pluginObj);
          if (plugin.visitor && (plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor))), plugin.inherits) {
            const inheritsDescriptor = { name: void 0, alias: `${alias}$inherits`, value: plugin.inherits, options, dirname }, inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, (run) => cache.invalidate((data) => run(inheritsDescriptor, data)));
            plugin.pre = chain(inherits.pre, plugin.pre), plugin.post = chain(inherits.post, plugin.post), plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions), plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]), inherits.externalDependencies.length > 0 && (externalDependencies = 0 === externalDependencies.length ? inherits.externalDependencies : (0, _deepArray.finalize)([externalDependencies, inherits.externalDependencies]));
          }
          return new _plugin.default(plugin, options, alias, externalDependencies);
        });
        function* loadPluginDescriptor(descriptor, context2) {
          if (descriptor.value instanceof _plugin.default) {
            if (descriptor.options) throw new Error("Passed options to an existing Plugin instance will not work.");
            return descriptor.value;
          }
          return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context2), context2);
        }
        const needsFilename = (val) => val && "function" != typeof val, validateIfOptionNeedsFilename = (options, descriptor) => {
          if (needsFilename(options.test) || needsFilename(options.include) || needsFilename(options.exclude)) {
            const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
            throw new _configError.default([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, "```", `babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, "```", "See https://babeljs.io/docs/en/options#filename for more information."].join("\n"));
          }
        }, validatePreset = (preset, context2, descriptor) => {
          if (!context2.filename) {
            var _options$overrides;
            const { options } = preset;
            validateIfOptionNeedsFilename(options, descriptor), null == (_options$overrides = options.overrides) || _options$overrides.forEach((overrideOptions) => validateIfOptionNeedsFilename(overrideOptions, descriptor));
          }
        }, instantiatePreset = (0, _caching.makeWeakCacheSync)(({ value: value2, dirname, alias, externalDependencies }) => ({ options: (0, _options.validate)("preset", value2), alias, dirname, externalDependencies }));
        function* loadPresetDescriptor(descriptor, context2) {
          const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context2));
          return validatePreset(preset, context2, descriptor), { chain: yield* (0, _configChain.buildPresetChain)(preset, context2), externalDependencies: preset.externalDependencies };
        }
        function chain(a, b) {
          const fns = [a, b].filter(Boolean);
          return fns.length <= 1 ? fns[0] : function(...args) {
            for (const fn of fns) fn.apply(this, args);
          };
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/config-api.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.makeConfigAPI = makeConfigAPI, exports3.makePluginAPI = function(cache, externalDependencies) {
          return Object.assign({}, makePresetAPI(cache, externalDependencies), { assumption: (name) => cache.using((data) => data.assumptions[name]) });
        }, exports3.makePresetAPI = makePresetAPI;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/caching.js");
        function makeConfigAPI(cache) {
          return { version: _index.version, cache: cache.simple(), env: (value2) => cache.using((data) => void 0 === value2 ? data.envName : "function" == typeof value2 ? (0, _caching.assertSimpleType)(value2(data.envName)) : (Array.isArray(value2) ? value2 : [value2]).some((entry) => {
            if ("string" != typeof entry) throw new Error("Unexpected non-string value");
            return entry === data.envName;
          })), async: () => false, caller: (cb) => cache.using((data) => (0, _caching.assertSimpleType)(cb(data.caller))), assertVersion };
        }
        function makePresetAPI(cache, externalDependencies) {
          return Object.assign({}, makeConfigAPI(cache), { targets: () => JSON.parse(cache.using((data) => JSON.stringify(data.targets))), addExternalDependency: (ref) => {
            externalDependencies.push(ref);
          } });
        }
        function assertVersion(range) {
          if ("number" == typeof range) {
            if (!Number.isInteger(range)) throw new Error("Expected string or integer value.");
            range = `^${range}.0.0-0`;
          }
          if ("string" != typeof range) throw new Error("Expected string or integer value.");
          if (_semver().satisfies(_index.version, range)) return;
          const limit = Error.stackTraceLimit;
          "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
          const err = new Error(`Requires Babel "${range}", but was loaded with "${_index.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
          throw "number" == typeof limit && (Error.stackTraceLimit = limit), Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version: _index.version, range });
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/deep-array.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.finalize = function(deepArr) {
          return Object.freeze(deepArr);
        }, exports3.flattenToSet = function(arr) {
          const result = /* @__PURE__ */ new Set(), stack = [arr];
          for (; stack.length > 0; ) for (const el of stack.pop()) Array.isArray(el) ? stack.push(el) : result.add(el);
          return result;
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/environment.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.getEnv = function(defaultValue = "development") {
          return process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue;
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.createConfigItem = function(target, options, callback) {
          if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, options, callback);
          else {
            if ("function" != typeof options) return createConfigItemSync(target, options);
            (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, void 0, callback);
          }
        }, exports3.createConfigItemAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.async)(...args);
        }, exports3.createConfigItemSync = createConfigItemSync, Object.defineProperty(exports3, "default", { enumerable: true, get: function() {
          return _full.default;
        } }), exports3.loadOptions = function(opts, callback) {
          if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(opts, callback);
          else {
            if ("function" != typeof opts) return loadOptionsSync(opts);
            (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(void 0, opts);
          }
        }, exports3.loadOptionsAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.async)(...args);
        }, exports3.loadOptionsSync = loadOptionsSync, exports3.loadPartialConfig = function(opts, callback) {
          if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(opts, callback);
          else {
            if ("function" != typeof opts) return loadPartialConfigSync(opts);
            (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(void 0, opts);
          }
        }, exports3.loadPartialConfigAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.async)(...args);
        }, exports3.loadPartialConfigSync = loadPartialConfigSync;
        var _full = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/full.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/partial.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/item.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const loadPartialConfigRunner = _gensync()(_partial.loadPartialConfig);
        function loadPartialConfigSync(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.sync)(...args);
        }
        const loadOptionsRunner = _gensync()(function* (opts) {
          var _config$options;
          const config = yield* (0, _full.default)(opts);
          return null != (_config$options = null == config ? void 0 : config.options) ? _config$options : null;
        });
        function loadOptionsSync(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.sync)(...args);
        }
        const createConfigItemRunner = _gensync()(_item.createConfigItem);
        function createConfigItemSync(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.sync)(...args);
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/item.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.createConfigItem = function* (value2, { dirname = ".", type } = {}) {
          return createItemFromDescriptor(yield* (0, _configDescriptors.createDescriptor)(value2, _path().resolve(dirname), { type, alias: "programmatic item" }));
        }, exports3.createItemFromDescriptor = createItemFromDescriptor, exports3.getItemDescriptor = function(item) {
          if (null != item && item[CONFIG_ITEM_BRAND]) return item._descriptor;
          return;
        };
        var _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/config-descriptors.js");
        function createItemFromDescriptor(desc) {
          return new ConfigItem(desc);
        }
        const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");
        class ConfigItem {
          constructor(descriptor) {
            this._descriptor = void 0, this[CONFIG_ITEM_BRAND] = true, this.value = void 0, this.options = void 0, this.dirname = void 0, this.name = void 0, this.file = void 0, this._descriptor = descriptor, Object.defineProperty(this, "_descriptor", { enumerable: false }), Object.defineProperty(this, CONFIG_ITEM_BRAND, { enumerable: false }), this.value = this._descriptor.value, this.options = this._descriptor.options, this.dirname = this._descriptor.dirname, this.name = this._descriptor.name, this.file = this._descriptor.file ? { request: this._descriptor.file.request, resolved: this._descriptor.file.resolved } : void 0, Object.freeze(this);
          }
        }
        Object.freeze(ConfigItem.prototype);
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/partial.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = loadPrivatePartialConfig, exports3.loadPartialConfig = function* (opts) {
          let showIgnoredFiles = false;
          if ("object" == typeof opts && null !== opts && !Array.isArray(opts)) {
            var _opts = opts;
            ({ showIgnoredFiles } = _opts), opts = function(source, excluded) {
              if (null == source) return {};
              var key, i, target = {}, sourceKeys = Object.keys(source);
              for (i = 0; i < sourceKeys.length; i++) key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
              return target;
            }(_opts, _excluded);
          }
          const result = yield* loadPrivatePartialConfig(opts);
          if (!result) return null;
          const { options, babelrc, ignore, config, fileHandling, files } = result;
          if ("ignored" === fileHandling && !showIgnoredFiles) return null;
          return (options.plugins || []).forEach((item) => {
            if (item.value instanceof _plugin.default) throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
          }), new PartialConfig(options, babelrc ? babelrc.filepath : void 0, ignore ? ignore.filepath : void 0, config ? config.filepath : void 0, fileHandling, files);
        };
        var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/plugin.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/util.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/config-chain.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/environment.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/options.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/index.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/resolve-targets.js");
        const _excluded = ["showIgnoredFiles"];
        function* loadPrivatePartialConfig(inputOpts) {
          if (null != inputOpts && ("object" != typeof inputOpts || Array.isArray(inputOpts))) throw new Error("Babel options must be an object, null, or undefined");
          const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {}, { envName = (0, _environment.getEnv)(), cwd = ".", root: rootDir = ".", rootMode = "root", caller, cloneInputAst = true } = args, absoluteCwd = _path().resolve(cwd), absoluteRootDir = function(rootDir2, rootMode2) {
            switch (rootMode2) {
              case "root":
                return rootDir2;
              case "upward-optional": {
                const upwardRootDir = (0, _index.findConfigUpwards)(rootDir2);
                return null === upwardRootDir ? rootDir2 : upwardRootDir;
              }
              case "upward": {
                const upwardRootDir = (0, _index.findConfigUpwards)(rootDir2);
                if (null !== upwardRootDir) return upwardRootDir;
                throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${rootDir2}".
One of the following config files must be in the directory tree: "${_index.ROOT_CONFIG_FILENAMES.join(", ")}".`), { code: "BABEL_ROOT_NOT_FOUND", dirname: rootDir2 });
              }
              default:
                throw new Error("Assertion failure - unknown rootMode value.");
            }
          }(_path().resolve(absoluteCwd, rootDir), rootMode), filename = "string" == typeof args.filename ? _path().resolve(cwd, args.filename) : void 0, context = { filename, cwd: absoluteCwd, root: absoluteRootDir, envName, caller, showConfig: (yield* (0, _index.resolveShowConfigPath)(absoluteCwd)) === filename }, configChain = yield* (0, _configChain.buildRootChain)(args, context);
          if (!configChain) return null;
          const merged = { assumptions: {} };
          configChain.options.forEach((opts) => {
            (0, _util.mergeOptions)(merged, opts);
          });
          return { options: Object.assign({}, merged, { targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir), cloneInputAst, babelrc: false, configFile: false, browserslistConfigFile: false, passPerPreset: false, envName: context.envName, cwd: context.cwd, root: context.root, rootMode: "root", filename: "string" == typeof context.filename ? context.filename : void 0, plugins: configChain.plugins.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)), presets: configChain.presets.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)) }), context, fileHandling: configChain.fileHandling, ignore: configChain.ignore, babelrc: configChain.babelrc, config: configChain.config, files: configChain.files };
        }
        class PartialConfig {
          constructor(options, babelrc, ignore, config, fileHandling, files) {
            this.options = void 0, this.babelrc = void 0, this.babelignore = void 0, this.config = void 0, this.fileHandling = void 0, this.files = void 0, this.options = options, this.babelignore = ignore, this.babelrc = babelrc, this.config = config, this.fileHandling = fileHandling, this.files = files, Object.freeze(this);
          }
          hasFilesystemConfig() {
            return void 0 !== this.babelrc || void 0 !== this.config;
          }
        }
        Object.freeze(PartialConfig.prototype);
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/pattern-to-regex.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(pattern, dirname) {
          const parts = _path().resolve(dirname, pattern).split(_path().sep);
          return new RegExp(["^", ...parts.map((part, i) => {
            const last = i === parts.length - 1;
            return "**" === part ? last ? starStarPatLast : starStarPat : "*" === part ? last ? starPatLast : starPat : 0 === part.indexOf("*.") ? substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep) : escapeRegExp(part) + (last ? endSep : sep);
          })].join(""));
        };
        const sep = `\\${_path().sep}`, endSep = `(?:${sep}|$)`, substitution = `[^${sep}]+`, starPat = `(?:${substitution}${sep})`, starPatLast = `(?:${substitution}${endSep})`, starStarPat = `${starPat}*?`, starStarPatLast = `${starPat}*?${starPatLast}?`;
        function escapeRegExp(string) {
          return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/plugin.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        exports3.default = class {
          constructor(plugin, options, key, externalDependencies = (0, _deepArray.finalize)([])) {
            this.key = void 0, this.manipulateOptions = void 0, this.post = void 0, this.pre = void 0, this.visitor = void 0, this.parserOverride = void 0, this.generatorOverride = void 0, this.options = void 0, this.externalDependencies = void 0, this.key = plugin.name || key, this.manipulateOptions = plugin.manipulateOptions, this.post = plugin.post, this.pre = plugin.pre, this.visitor = plugin.visitor || {}, this.parserOverride = plugin.parserOverride, this.generatorOverride = plugin.generatorOverride, this.options = options, this.externalDependencies = externalDependencies;
          }
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/printer.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ConfigPrinter = exports3.ChainFormatter = void 0;
        const ChainFormatter = { Programmatic: 0, Config: 1 };
        exports3.ChainFormatter = ChainFormatter;
        const Formatter = { title(type, callerName, filepath) {
          let title = "";
          return type === ChainFormatter.Programmatic ? (title = "programmatic options", callerName && (title += " from " + callerName)) : title = "config " + filepath, title;
        }, loc(index, envName) {
          let loc = "";
          return null != index && (loc += `.overrides[${index}]`), null != envName && (loc += `.env["${envName}"]`), loc;
        }, *optionsAndDescriptors(opt) {
          const content = Object.assign({}, opt.options);
          delete content.overrides, delete content.env;
          const pluginDescriptors = [...yield* opt.plugins()];
          pluginDescriptors.length && (content.plugins = pluginDescriptors.map((d) => descriptorToConfig(d)));
          const presetDescriptors = [...yield* opt.presets()];
          return presetDescriptors.length && (content.presets = [...presetDescriptors].map((d) => descriptorToConfig(d))), JSON.stringify(content, void 0, 2);
        } };
        function descriptorToConfig(d) {
          var _d$file;
          let name = null == (_d$file = d.file) ? void 0 : _d$file.request;
          return null == name && ("object" == typeof d.value ? name = d.value : "function" == typeof d.value && (name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`)), null == name && (name = "[Unknown]"), void 0 === d.options ? name : null == d.name ? [name, d.options] : [name, d.options, d.name];
        }
        class ConfigPrinter {
          constructor() {
            this._stack = [];
          }
          configure(enabled, type, { callerName, filepath }) {
            return enabled ? (content, index, envName) => {
              this._stack.push({ type, callerName, filepath, content, index, envName });
            } : () => {
            };
          }
          static *format(config) {
            let title = Formatter.title(config.type, config.callerName, config.filepath);
            const loc = Formatter.loc(config.index, config.envName);
            loc && (title += ` ${loc}`);
            return `${title}
${yield* Formatter.optionsAndDescriptors(config.content)}`;
          }
          *output() {
            if (0 === this._stack.length) return "";
            return (yield* _gensync().all(this._stack.map((s) => ConfigPrinter.format(s)))).join("\n\n");
          }
        }
        exports3.ConfigPrinter = ConfigPrinter;
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/resolve-targets.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _helperCompilationTargets() {
          const data = __webpack_require__2("./stubs/helper-compilation-targets.js");
          return _helperCompilationTargets = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.resolveBrowserslistConfigFile = function(browserslistConfigFile, configFileDir) {
          return _path().resolve(configFileDir, browserslistConfigFile);
        }, exports3.resolveTargets = function(options, root) {
          const optTargets = options.targets;
          let targets;
          "string" == typeof optTargets || Array.isArray(optTargets) ? targets = { browsers: optTargets } : optTargets && (targets = "esmodules" in optTargets ? Object.assign({}, optTargets, { esmodules: "intersect" }) : optTargets);
          const { browserslistConfigFile } = options;
          let configFile, ignoreBrowserslistConfig = false;
          "string" == typeof browserslistConfigFile ? configFile = browserslistConfigFile : ignoreBrowserslistConfig = false === browserslistConfigFile;
          return (0, _helperCompilationTargets().default)(targets, { ignoreBrowserslistConfig, configFile, configPath: root, browserslistEnv: options.browserslistEnv });
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/util.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function mergeDefaultFields(target, source) {
          for (const k of Object.keys(source)) {
            const val = source[k];
            void 0 !== val && (target[k] = val);
          }
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isIterableIterator = function(value2) {
          return !!value2 && "function" == typeof value2.next && "function" == typeof value2[Symbol.iterator];
        }, exports3.mergeOptions = function(target, source) {
          for (const k of Object.keys(source)) if ("parserOpts" !== k && "generatorOpts" !== k && "assumptions" !== k || !source[k]) {
            const val = source[k];
            void 0 !== val && (target[k] = val);
          } else {
            const parserOpts = source[k];
            mergeDefaultFields(target[k] || (target[k] = {}), parserOpts);
          }
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/option-assertions.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _helperCompilationTargets() {
          const data = __webpack_require__2("./stubs/helper-compilation-targets.js");
          return _helperCompilationTargets = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.access = access, exports3.assertArray = assertArray, exports3.assertAssumptions = function(loc, value2) {
          if (void 0 === value2) return;
          if ("object" != typeof value2 || null === value2) throw new Error(`${msg(loc)} must be an object or undefined.`);
          let root = loc;
          do {
            root = root.parent;
          } while ("root" !== root.type);
          const inPreset = "preset" === root.source;
          for (const name of Object.keys(value2)) {
            const subLoc = access(loc, name);
            if (!_options.assumptionsNames.has(name)) throw new Error(`${msg(subLoc)} is not a supported assumption.`);
            if ("boolean" != typeof value2[name]) throw new Error(`${msg(subLoc)} must be a boolean.`);
            if (inPreset && false === value2[name]) throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
          }
          return value2;
        }, exports3.assertBabelrcSearch = function(loc, value2) {
          if (void 0 === value2 || "boolean" == typeof value2) return value2;
          if (Array.isArray(value2)) value2.forEach((item, i) => {
            if (!checkValidTest(item)) throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
          });
          else if (!checkValidTest(value2)) throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(value2)}`);
          return value2;
        }, exports3.assertBoolean = assertBoolean, exports3.assertCallerMetadata = function(loc, value2) {
          const obj = assertObject(loc, value2);
          if (obj) {
            if ("string" != typeof obj.name) throw new Error(`${msg(loc)} set but does not contain "name" property string`);
            for (const prop of Object.keys(obj)) {
              const propLoc = access(loc, prop), value3 = obj[prop];
              if (null != value3 && "boolean" != typeof value3 && "string" != typeof value3 && "number" != typeof value3) throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
            }
          }
          return value2;
        }, exports3.assertCompact = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "auto" !== value2) throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
          return value2;
        }, exports3.assertConfigApplicableTest = function(loc, value2) {
          if (void 0 === value2) return value2;
          if (Array.isArray(value2)) value2.forEach((item, i) => {
            if (!checkValidTest(item)) throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
          });
          else if (!checkValidTest(value2)) throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
          return value2;
        }, exports3.assertConfigFileSearch = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "string" != typeof value2) throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, got ${JSON.stringify(value2)}`);
          return value2;
        }, exports3.assertFunction = function(loc, value2) {
          if (void 0 !== value2 && "function" != typeof value2) throw new Error(`${msg(loc)} must be a function, or undefined`);
          return value2;
        }, exports3.assertIgnoreList = function(loc, value2) {
          const arr = assertArray(loc, value2);
          return null == arr || arr.forEach((item, i) => function(loc2, value3) {
            if ("string" != typeof value3 && "function" != typeof value3 && !(value3 instanceof RegExp)) throw new Error(`${msg(loc2)} must be an array of string/Function/RegExp values, or undefined`);
            return value3;
          }(access(loc, i), item)), arr;
        }, exports3.assertInputSourceMap = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && ("object" != typeof value2 || !value2)) throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
          return value2;
        }, exports3.assertObject = assertObject, exports3.assertPluginList = function(loc, value2) {
          const arr = assertArray(loc, value2);
          arr && arr.forEach((item, i) => function(loc2, value3) {
            if (Array.isArray(value3)) {
              if (0 === value3.length) throw new Error(`${msg(loc2)} must include an object`);
              if (value3.length > 3) throw new Error(`${msg(loc2)} may only be a two-tuple or three-tuple`);
              if (assertPluginTarget(access(loc2, 0), value3[0]), value3.length > 1) {
                const opts = value3[1];
                if (void 0 !== opts && false !== opts && ("object" != typeof opts || Array.isArray(opts) || null === opts)) throw new Error(`${msg(access(loc2, 1))} must be an object, false, or undefined`);
              }
              if (3 === value3.length) {
                const name = value3[2];
                if (void 0 !== name && "string" != typeof name) throw new Error(`${msg(access(loc2, 2))} must be a string, or undefined`);
              }
            } else assertPluginTarget(loc2, value3);
            return value3;
          }(access(loc, i), item));
          return arr;
        }, exports3.assertRootMode = function(loc, value2) {
          if (void 0 !== value2 && "root" !== value2 && "upward" !== value2 && "upward-optional" !== value2) throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
          return value2;
        }, exports3.assertSourceMaps = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "inline" !== value2 && "both" !== value2) throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
          return value2;
        }, exports3.assertSourceType = function(loc, value2) {
          if (void 0 !== value2 && "module" !== value2 && "script" !== value2 && "unambiguous" !== value2) throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
          return value2;
        }, exports3.assertString = function(loc, value2) {
          if (void 0 !== value2 && "string" != typeof value2) throw new Error(`${msg(loc)} must be a string, or undefined`);
          return value2;
        }, exports3.assertTargets = function(loc, value2) {
          if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value2)) return value2;
          if ("object" != typeof value2 || !value2 || Array.isArray(value2)) throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
          const browsersLoc = access(loc, "browsers"), esmodulesLoc = access(loc, "esmodules");
          assertBrowsersList(browsersLoc, value2.browsers), assertBoolean(esmodulesLoc, value2.esmodules);
          for (const key of Object.keys(value2)) {
            const val = value2[key], subLoc = access(loc, key);
            if ("esmodules" === key) assertBoolean(subLoc, val);
            else if ("browsers" === key) assertBrowsersList(subLoc, val);
            else {
              if (!Object.hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
                const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
                throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
              }
              assertBrowserVersion(subLoc, val);
            }
          }
          return value2;
        }, exports3.msg = msg;
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/options.js");
        function msg(loc) {
          switch (loc.type) {
            case "root":
              return "";
            case "env":
              return `${msg(loc.parent)}.env["${loc.name}"]`;
            case "overrides":
              return `${msg(loc.parent)}.overrides[${loc.index}]`;
            case "option":
              return `${msg(loc.parent)}.${loc.name}`;
            case "access":
              return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;
            default:
              throw new Error(`Assertion failure: Unknown type ${loc.type}`);
          }
        }
        function access(loc, name) {
          return { type: "access", name, parent: loc };
        }
        function assertBoolean(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2) throw new Error(`${msg(loc)} must be a boolean, or undefined`);
          return value2;
        }
        function assertObject(loc, value2) {
          if (void 0 !== value2 && ("object" != typeof value2 || Array.isArray(value2) || !value2)) throw new Error(`${msg(loc)} must be an object, or undefined`);
          return value2;
        }
        function assertArray(loc, value2) {
          if (null != value2 && !Array.isArray(value2)) throw new Error(`${msg(loc)} must be an array, or undefined`);
          return value2;
        }
        function checkValidTest(value2) {
          return "string" == typeof value2 || "function" == typeof value2 || value2 instanceof RegExp;
        }
        function assertPluginTarget(loc, value2) {
          if (("object" != typeof value2 || !value2) && "string" != typeof value2 && "function" != typeof value2) throw new Error(`${msg(loc)} must be a string, object, function`);
          return value2;
        }
        function assertBrowsersList(loc, value2) {
          if (void 0 !== value2 && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value2)) throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
        }
        function assertBrowserVersion(loc, value2) {
          if (("number" != typeof value2 || Math.round(value2) !== value2) && "string" != typeof value2) throw new Error(`${msg(loc)} must be a string or an integer number`);
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/options.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.assumptionsNames = void 0, exports3.checkNoUnwrappedItemOptionPairs = function(items, index, type, e) {
          if (0 === index) return;
          const lastItem = items[index - 1], thisItem = items[index];
          lastItem.file && void 0 === lastItem.options && "object" == typeof thisItem.value && (e.message += `
- Maybe you meant to use
"${type}s": [
  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, void 0, 2)}]
]
To be a valid ${type}, its name and options should be wrapped in a pair of brackets`);
        }, exports3.validate = function(type, opts, filename) {
          try {
            return validateNested({ type: "root", source: type }, opts);
          } catch (error) {
            const configError = new _configError.default(error.message, filename);
            throw error.code && (configError.code = error.code), configError;
          }
        };
        var _removed = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/removed.js"), _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/option-assertions.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/config-error.js");
        const ROOT_VALIDATORS = { cwd: _optionAssertions.assertString, root: _optionAssertions.assertString, rootMode: _optionAssertions.assertRootMode, configFile: _optionAssertions.assertConfigFileSearch, caller: _optionAssertions.assertCallerMetadata, filename: _optionAssertions.assertString, filenameRelative: _optionAssertions.assertString, code: _optionAssertions.assertBoolean, ast: _optionAssertions.assertBoolean, cloneInputAst: _optionAssertions.assertBoolean, envName: _optionAssertions.assertString }, BABELRC_VALIDATORS = { babelrc: _optionAssertions.assertBoolean, babelrcRoots: _optionAssertions.assertBabelrcSearch }, NONPRESET_VALIDATORS = { extends: _optionAssertions.assertString, ignore: _optionAssertions.assertIgnoreList, only: _optionAssertions.assertIgnoreList, targets: _optionAssertions.assertTargets, browserslistConfigFile: _optionAssertions.assertConfigFileSearch, browserslistEnv: _optionAssertions.assertString }, COMMON_VALIDATORS = { inputSourceMap: _optionAssertions.assertInputSourceMap, presets: _optionAssertions.assertPluginList, plugins: _optionAssertions.assertPluginList, passPerPreset: _optionAssertions.assertBoolean, assumptions: _optionAssertions.assertAssumptions, env: function(loc, value2) {
          if ("env" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);
          const parent = loc.parent, obj = (0, _optionAssertions.assertObject)(loc, value2);
          if (obj) for (const envName of Object.keys(obj)) {
            const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
            if (!env) continue;
            validateNested({ type: "env", name: envName, parent }, env);
          }
          return obj;
        }, overrides: function(loc, value2) {
          if ("env" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);
          if ("overrides" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);
          const parent = loc.parent, arr = (0, _optionAssertions.assertArray)(loc, value2);
          if (arr) for (const [index, item] of arr.entries()) {
            const objLoc = (0, _optionAssertions.access)(loc, index), env = (0, _optionAssertions.assertObject)(objLoc, item);
            if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);
            validateNested({ type: "overrides", index, parent }, env);
          }
          return arr;
        }, test: _optionAssertions.assertConfigApplicableTest, include: _optionAssertions.assertConfigApplicableTest, exclude: _optionAssertions.assertConfigApplicableTest, retainLines: _optionAssertions.assertBoolean, comments: _optionAssertions.assertBoolean, shouldPrintComment: _optionAssertions.assertFunction, compact: _optionAssertions.assertCompact, minified: _optionAssertions.assertBoolean, auxiliaryCommentBefore: _optionAssertions.assertString, auxiliaryCommentAfter: _optionAssertions.assertString, sourceType: _optionAssertions.assertSourceType, wrapPluginVisitorMethod: _optionAssertions.assertFunction, highlightCode: _optionAssertions.assertBoolean, sourceMaps: _optionAssertions.assertSourceMaps, sourceMap: _optionAssertions.assertSourceMaps, sourceFileName: _optionAssertions.assertString, sourceRoot: _optionAssertions.assertString, parserOpts: _optionAssertions.assertObject, generatorOpts: _optionAssertions.assertObject };
        Object.assign(COMMON_VALIDATORS, { getModuleId: _optionAssertions.assertFunction, moduleRoot: _optionAssertions.assertString, moduleIds: _optionAssertions.assertBoolean, moduleId: _optionAssertions.assertString });
        const assumptionsNames = /* @__PURE__ */ new Set(["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "objectRestNoSymbols", "privateFieldsAsSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"]);
        function getSource(loc) {
          return "root" === loc.type ? loc.source : getSource(loc.parent);
        }
        function validateNested(loc, opts) {
          const type = getSource(loc);
          return function(opts2) {
            if (has(opts2, "sourceMap") && has(opts2, "sourceMaps")) throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
          }(opts), Object.keys(opts).forEach((key) => {
            const optLoc = { type: "option", name: key, parent: loc };
            if ("preset" === type && NONPRESET_VALIDATORS[key]) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);
            if ("arguments" !== type && ROOT_VALIDATORS[key]) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);
            if ("arguments" !== type && "configfile" !== type && BABELRC_VALIDATORS[key]) {
              if ("babelrcfile" === type || "extendsfile" === type) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);
              throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
            }
            (COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError)(optLoc, opts[key]);
          }), opts;
        }
        function throwUnknownError(loc) {
          const key = loc.name;
          if (_removed.default[key]) {
            const { message, version = 5 } = _removed.default[key];
            throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);
          }
          {
            const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
            throw unknownOptErr.code = "BABEL_UNKNOWN_OPTION", unknownOptErr;
          }
        }
        function has(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }
        exports3.assumptionsNames = assumptionsNames;
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/plugins.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.validatePluginObject = function(obj) {
          const rootPath = { type: "root", source: "plugin" };
          return Object.keys(obj).forEach((key) => {
            const validator = VALIDATORS[key];
            if (!validator) {
              const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);
              throw invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY", invalidPluginPropertyError;
            }
            validator({ type: "option", name: key, parent: rootPath }, obj[key]);
          }), obj;
        };
        var _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/option-assertions.js");
        const VALIDATORS = { name: _optionAssertions.assertString, manipulateOptions: _optionAssertions.assertFunction, pre: _optionAssertions.assertFunction, post: _optionAssertions.assertFunction, inherits: _optionAssertions.assertFunction, visitor: function(loc, value2) {
          const obj = (0, _optionAssertions.assertObject)(loc, value2);
          if (obj && (Object.keys(obj).forEach((prop) => {
            "_exploded" !== prop && "_verified" !== prop && function(key, value3) {
              if (value3 && "object" == typeof value3) Object.keys(value3).forEach((handler) => {
                if ("enter" !== handler && "exit" !== handler) throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
              });
              else if ("function" != typeof value3) throw new Error(`.visitor["${key}"] must be a function`);
            }(prop, obj[prop]);
          }), obj.enter || obj.exit)) throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
          return obj;
        }, parserOverride: _optionAssertions.assertFunction, generatorOverride: _optionAssertions.assertFunction };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/validation/removed.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        exports3.default = { auxiliaryComment: { message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`" }, blacklist: { message: "Put the specific transforms you want in the `plugins` option" }, breakConfig: { message: "This is not a necessary option in Babel 6" }, experimental: { message: "Put the specific transforms you want in the `plugins` option" }, externalHelpers: { message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/" }, extra: { message: "" }, jsxPragma: { message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/" }, loose: { message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option." }, metadataUsedHelpers: { message: "Not required anymore as this is enabled by default" }, modules: { message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules" }, nonStandard: { message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/" }, optional: { message: "Put the specific transforms you want in the `plugins` option" }, sourceMapName: { message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." }, stage: { message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets" }, whitelist: { message: "Put the specific transforms you want in the `plugins` option" }, resolveModuleSource: { version: 6, message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options" }, metadata: { version: 6, message: "Generated plugin metadata is always included in the output result" }, sourceMapTarget: { version: 6, message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." } };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/config-error.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        class ConfigError extends Error {
          constructor(message, filename) {
            super(message), (0, _rewriteStackTrace.expectedError)(this), filename && (0, _rewriteStackTrace.injectVirtualStackFrame)(this, filename);
          }
        }
        exports3.default = ConfigError;
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js": (__unused_webpack_module, exports3) => {
        "use strict";
        var _Object$getOwnPropert;
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.beginHiddenCallStack = function(fn) {
          return SUPPORTED ? Object.defineProperty(function(...args) {
            return setupPrepareStackTrace(), fn(...args);
          }, "name", { value: STOP_HIDING }) : fn;
        }, exports3.endHiddenCallStack = function(fn) {
          return SUPPORTED ? Object.defineProperty(function(...args) {
            return fn(...args);
          }, "name", { value: START_HIDING }) : fn;
        }, exports3.expectedError = function(error) {
          if (!SUPPORTED) return;
          return expectedErrors.add(error), error;
        }, exports3.injectVirtualStackFrame = function(error, filename) {
          if (!SUPPORTED) return;
          let frames = virtualFrames.get(error);
          frames || virtualFrames.set(error, frames = []);
          return frames.push(/* @__PURE__ */ function(filename2) {
            return /* @__PURE__ */ Object.create({ isNative: () => false, isConstructor: () => false, isToplevel: () => true, getFileName: () => filename2, getLineNumber: () => {
            }, getColumnNumber: () => {
            }, getFunctionName: () => {
            }, getMethodName: () => {
            }, getTypeName: () => {
            }, toString: () => filename2 });
          }(filename)), error;
        };
        const ErrorToString = Function.call.bind(Error.prototype.toString), SUPPORTED = !!Error.captureStackTrace && true === (null == (_Object$getOwnPropert = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit")) ? void 0 : _Object$getOwnPropert.writable), START_HIDING = "startHiding - secret - don't use this - v1", STOP_HIDING = "stopHiding - secret - don't use this - v1", expectedErrors = /* @__PURE__ */ new WeakSet(), virtualFrames = /* @__PURE__ */ new WeakMap();
        function setupPrepareStackTrace() {
          setupPrepareStackTrace = () => {
          };
          const { prepareStackTrace = defaultPrepareStackTrace } = Error;
          Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, 50)), Error.prepareStackTrace = function(err, trace) {
            let newTrace = [];
            let status = expectedErrors.has(err) ? "hiding" : "unknown";
            for (let i = 0; i < trace.length; i++) {
              const name = trace[i].getFunctionName();
              if (name === START_HIDING) status = "hiding";
              else if (name === STOP_HIDING) {
                if ("hiding" === status) status = "showing", virtualFrames.has(err) && newTrace.unshift(...virtualFrames.get(err));
                else if ("unknown" === status) {
                  newTrace = trace;
                  break;
                }
              } else "hiding" !== status && newTrace.push(trace[i]);
            }
            return prepareStackTrace(err, newTrace);
          };
        }
        function defaultPrepareStackTrace(err, trace) {
          return 0 === trace.length ? ErrorToString(err) : `${ErrorToString(err)}
    at ${trace.join("\n    at ")}`;
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/async.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value2 = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve(value2) : Promise.resolve(value2).then(_next, _throw);
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self2 = this, args = arguments;
            return new Promise(function(resolve, reject) {
              var gen = fn.apply(self2, args);
              function _next(value2) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value2);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.forwardAsync = function(action, cb) {
          const g = _gensync()(action);
          return withKind((kind) => {
            const adapted = g[kind];
            return cb(adapted);
          });
        }, exports3.isAsync = void 0, exports3.isThenable = isThenable, exports3.maybeAsync = function(fn, message) {
          return _gensync()({ sync(...args) {
            const result = fn.apply(this, args);
            if (isThenable(result)) throw new Error(message);
            return result;
          }, async(...args) {
            return Promise.resolve(fn.apply(this, args));
          } });
        }, exports3.waitFor = exports3.onFirstPause = void 0;
        const runGenerator = _gensync()(function* (item) {
          return yield* item;
        }), isAsync = _gensync()({ sync: () => false, errback: (cb) => cb(null, true) });
        exports3.isAsync = isAsync;
        const withKind = _gensync()({ sync: (cb) => cb("sync"), async: (_ref = _asyncToGenerator(function* (cb) {
          return cb("async");
        }), function(_x) {
          return _ref.apply(this, arguments);
        }) });
        var _ref;
        const onFirstPause = _gensync()({ name: "onFirstPause", arity: 2, sync: function(item) {
          return runGenerator.sync(item);
        }, errback: function(item, firstPause, cb) {
          let completed = false;
          runGenerator.errback(item, (err, value2) => {
            completed = true, cb(err, value2);
          }), completed || firstPause();
        } });
        exports3.onFirstPause = onFirstPause;
        const waitFor = _gensync()({ sync: (x) => x, async: (_ref2 = _asyncToGenerator(function* (x) {
          return x;
        }), function(_x2) {
          return _ref2.apply(this, arguments);
        }) });
        var _ref2;
        function isThenable(val) {
          return !(!val || "object" != typeof val && "function" != typeof val || !val.then || "function" != typeof val.then);
        }
        exports3.waitFor = waitFor;
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/fs.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.stat = exports3.readFile = void 0;
        const readFile2 = _gensync()({ sync: _fs().readFileSync, errback: _fs().readFile });
        exports3.readFile = readFile2;
        const stat = _gensync()({ sync: _fs().statSync, errback: _fs().stat });
        exports3.stat = stat;
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/functional.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.once = function(fn) {
          let result, resultP;
          return function* () {
            if (result) return result;
            if (!(yield* (0, _async.isAsync)())) return result = yield* fn();
            if (resultP) return yield* (0, _async.waitFor)(resultP);
            let resolve, reject;
            resultP = new Promise((res, rej) => {
              resolve = res, reject = rej;
            });
            try {
              return result = yield* fn(), resultP = null, resolve(result), result;
            } catch (error) {
              throw reject(error), error;
            }
          };
        };
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/async.js");
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.DEFAULT_EXTENSIONS = void 0, Object.defineProperty(exports3, "File", { enumerable: true, get: function() {
          return _file.default;
        } }), Object.defineProperty(exports3, "buildExternalHelpers", { enumerable: true, get: function() {
          return _buildExternalHelpers.default;
        } }), Object.defineProperty(exports3, "createConfigItem", { enumerable: true, get: function() {
          return _index2.createConfigItem;
        } }), Object.defineProperty(exports3, "createConfigItemAsync", { enumerable: true, get: function() {
          return _index2.createConfigItemAsync;
        } }), Object.defineProperty(exports3, "createConfigItemSync", { enumerable: true, get: function() {
          return _index2.createConfigItemSync;
        } }), Object.defineProperty(exports3, "getEnv", { enumerable: true, get: function() {
          return _environment.getEnv;
        } }), Object.defineProperty(exports3, "loadOptions", { enumerable: true, get: function() {
          return _index2.loadOptions;
        } }), Object.defineProperty(exports3, "loadOptionsAsync", { enumerable: true, get: function() {
          return _index2.loadOptionsAsync;
        } }), Object.defineProperty(exports3, "loadOptionsSync", { enumerable: true, get: function() {
          return _index2.loadOptionsSync;
        } }), Object.defineProperty(exports3, "loadPartialConfig", { enumerable: true, get: function() {
          return _index2.loadPartialConfig;
        } }), Object.defineProperty(exports3, "loadPartialConfigAsync", { enumerable: true, get: function() {
          return _index2.loadPartialConfigAsync;
        } }), Object.defineProperty(exports3, "loadPartialConfigSync", { enumerable: true, get: function() {
          return _index2.loadPartialConfigSync;
        } }), Object.defineProperty(exports3, "parse", { enumerable: true, get: function() {
          return _parse.parse;
        } }), Object.defineProperty(exports3, "parseAsync", { enumerable: true, get: function() {
          return _parse.parseAsync;
        } }), Object.defineProperty(exports3, "parseSync", { enumerable: true, get: function() {
          return _parse.parseSync;
        } }), Object.defineProperty(exports3, "resolvePlugin", { enumerable: true, get: function() {
          return _index.resolvePlugin;
        } }), Object.defineProperty(exports3, "resolvePreset", { enumerable: true, get: function() {
          return _index.resolvePreset;
        } }), Object.defineProperty(exports3, "template", { enumerable: true, get: function() {
          return _template().default;
        } }), Object.defineProperty(exports3, "tokTypes", { enumerable: true, get: function() {
          return _parser().tokTypes;
        } }), Object.defineProperty(exports3, "transform", { enumerable: true, get: function() {
          return _transform.transform;
        } }), Object.defineProperty(exports3, "transformAsync", { enumerable: true, get: function() {
          return _transform.transformAsync;
        } }), Object.defineProperty(exports3, "transformFile", { enumerable: true, get: function() {
          return _transformFile.transformFile;
        } }), Object.defineProperty(exports3, "transformFileAsync", { enumerable: true, get: function() {
          return _transformFile.transformFileAsync;
        } }), Object.defineProperty(exports3, "transformFileSync", { enumerable: true, get: function() {
          return _transformFile.transformFileSync;
        } }), Object.defineProperty(exports3, "transformFromAst", { enumerable: true, get: function() {
          return _transformAst.transformFromAst;
        } }), Object.defineProperty(exports3, "transformFromAstAsync", { enumerable: true, get: function() {
          return _transformAst.transformFromAstAsync;
        } }), Object.defineProperty(exports3, "transformFromAstSync", { enumerable: true, get: function() {
          return _transformAst.transformFromAstSync;
        } }), Object.defineProperty(exports3, "transformSync", { enumerable: true, get: function() {
          return _transform.transformSync;
        } }), Object.defineProperty(exports3, "traverse", { enumerable: true, get: function() {
          return _traverse().default;
        } }), exports3.version = exports3.types = void 0;
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/file/file.js"), _buildExternalHelpers = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/tools/build-external-helpers.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/files/index.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/environment.js");
        function _types() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
          return _types = function() {
            return data;
          }, data;
        }
        function _parser() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.23.0/node_modules/@babel/parser/lib/index.js");
          return _parser = function() {
            return data;
          }, data;
        }
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        function _template() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/index.js");
          return _template = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "types", { enumerable: true, get: function() {
          return _types();
        } });
        var _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/index.js"), _transform = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transform.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transform-file.js"), _transformAst = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transform-ast.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/parse.js");
        __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js");
        exports3.version = "7.23.2";
        const DEFAULT_EXTENSIONS = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
        exports3.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS, exports3.OptionManager = class {
          init(opts) {
            return (0, _index2.loadOptionsSync)(opts);
          }
        }, exports3.Plugin = function(alias) {
          throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/parse.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.parse = void 0, exports3.parseAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args);
        }, exports3.parseSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/parser/index.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const parseRunner = _gensync()(function* (code, opts) {
          const config = yield* (0, _index.default)(opts);
          return null === config ? null : yield* (0, _index2.default)(config.passes, (0, _normalizeOpts.default)(config), code);
        });
        exports3.parse = function(code, opts, callback) {
          if ("function" == typeof opts && (callback = opts, opts = void 0), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/parser/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _parser() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.23.0/node_modules/@babel/parser/lib/index.js");
          return _parser = function() {
            return data;
          }, data;
        }
        function _codeFrame() {
          const data = __webpack_require__2("./stubs/babel-codeframe.js");
          return _codeFrame = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function* (pluginPasses, { parserOpts, highlightCode = true, filename = "unknown" }, code) {
          try {
            const results = [];
            for (const plugins of pluginPasses) for (const plugin of plugins) {
              const { parserOverride } = plugin;
              if (parserOverride) {
                const ast = parserOverride(code, parserOpts, _parser().parse);
                void 0 !== ast && results.push(ast);
              }
            }
            if (0 === results.length) return (0, _parser().parse)(code, parserOpts);
            if (1 === results.length) {
              if (yield* [], "function" == typeof results[0].then) throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
              return results[0];
            }
            throw new Error("More than one plugin attempted to override parsing.");
          } catch (err) {
            "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" === err.code && (err.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.");
            const { loc, missingPlugin } = err;
            if (loc) {
              const codeFrame = (0, _codeFrame().codeFrameColumns)(code, { start: { line: loc.line, column: loc.column + 1 } }, { highlightCode });
              err.message = missingPlugin ? `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame) : `${filename}: ${err.message}

` + codeFrame, err.code = "BABEL_PARSE_ERROR";
            }
            throw err;
          }
        };
        var _missingPluginHelper = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js");
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(missingPluginName, loc, codeFrame) {
          let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled (${loc.line}:${loc.column + 1}):

` + codeFrame;
          const pluginInfo = pluginNameMap[missingPluginName];
          if (pluginInfo) {
            const { syntax: syntaxPlugin, transform: transformPlugin } = pluginInfo;
            if (syntaxPlugin) {
              const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
              if (transformPlugin) {
                helpMessage += `

Add ${getNameURLCombination(transformPlugin)} to the '${transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets"}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
              } else helpMessage += `

Add ${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.`;
            }
          }
          return helpMessage;
        };
        const pluginNameMap = { asyncDoExpressions: { syntax: { name: "@babel/plugin-syntax-async-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions" } }, decimal: { syntax: { name: "@babel/plugin-syntax-decimal", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal" } }, decorators: { syntax: { name: "@babel/plugin-syntax-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators" }, transform: { name: "@babel/plugin-proposal-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators" } }, doExpressions: { syntax: { name: "@babel/plugin-syntax-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions" }, transform: { name: "@babel/plugin-proposal-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions" } }, exportDefaultFrom: { syntax: { name: "@babel/plugin-syntax-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from" }, transform: { name: "@babel/plugin-proposal-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from" } }, flow: { syntax: { name: "@babel/plugin-syntax-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow" }, transform: { name: "@babel/preset-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow" } }, functionBind: { syntax: { name: "@babel/plugin-syntax-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind" }, transform: { name: "@babel/plugin-proposal-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind" } }, functionSent: { syntax: { name: "@babel/plugin-syntax-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent" }, transform: { name: "@babel/plugin-proposal-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent" } }, jsx: { syntax: { name: "@babel/plugin-syntax-jsx", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx" }, transform: { name: "@babel/preset-react", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react" } }, importAttributes: { syntax: { name: "@babel/plugin-syntax-import-attributes", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes" } }, pipelineOperator: { syntax: { name: "@babel/plugin-syntax-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator" }, transform: { name: "@babel/plugin-proposal-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator" } }, recordAndTuple: { syntax: { name: "@babel/plugin-syntax-record-and-tuple", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple" } }, throwExpressions: { syntax: { name: "@babel/plugin-syntax-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions" }, transform: { name: "@babel/plugin-proposal-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions" } }, typescript: { syntax: { name: "@babel/plugin-syntax-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript" }, transform: { name: "@babel/preset-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript" } } };
        Object.assign(pluginNameMap, { asyncGenerators: { syntax: { name: "@babel/plugin-syntax-async-generators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators" }, transform: { name: "@babel/plugin-transform-async-generator-functions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions" } }, classProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties" } }, classPrivateProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties" } }, classPrivateMethods: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-private-methods", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods" } }, classStaticBlock: { syntax: { name: "@babel/plugin-syntax-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block" }, transform: { name: "@babel/plugin-transform-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block" } }, dynamicImport: { syntax: { name: "@babel/plugin-syntax-dynamic-import", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import" } }, exportNamespaceFrom: { syntax: { name: "@babel/plugin-syntax-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from" }, transform: { name: "@babel/plugin-transform-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from" } }, importAssertions: { syntax: { name: "@babel/plugin-syntax-import-assertions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions" } }, importMeta: { syntax: { name: "@babel/plugin-syntax-import-meta", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta" } }, logicalAssignment: { syntax: { name: "@babel/plugin-syntax-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators" }, transform: { name: "@babel/plugin-transform-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators" } }, moduleStringNames: { syntax: { name: "@babel/plugin-syntax-module-string-names", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names" } }, numericSeparator: { syntax: { name: "@babel/plugin-syntax-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator" }, transform: { name: "@babel/plugin-transform-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator" } }, nullishCoalescingOperator: { syntax: { name: "@babel/plugin-syntax-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator" }, transform: { name: "@babel/plugin-transform-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator" } }, objectRestSpread: { syntax: { name: "@babel/plugin-syntax-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread" }, transform: { name: "@babel/plugin-transform-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread" } }, optionalCatchBinding: { syntax: { name: "@babel/plugin-syntax-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding" }, transform: { name: "@babel/plugin-transform-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding" } }, optionalChaining: { syntax: { name: "@babel/plugin-syntax-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining" }, transform: { name: "@babel/plugin-transform-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining" } }, privateIn: { syntax: { name: "@babel/plugin-syntax-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object" }, transform: { name: "@babel/plugin-transform-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object" } }, regexpUnicodeSets: { syntax: { name: "@babel/plugin-syntax-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md" }, transform: { name: "@babel/plugin-transform-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md" } } });
        const getNameURLCombination = ({ name, url: url2 }) => `${name} (${url2})`;
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/tools/build-external-helpers.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function helpers() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.23.2/node_modules/@babel/helpers/lib/index.js");
          return helpers = function() {
            return data;
          }, data;
        }
        function _generator() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/index.js");
          return _generator = function() {
            return data;
          }, data;
        }
        function _template() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/index.js");
          return _template = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(allowlist, outputType = "global") {
          let tree;
          const build = { global: buildGlobal, module: buildModule, umd: buildUmd, var: buildVar }[outputType];
          if (!build) throw new Error(`Unsupported output type ${outputType}`);
          tree = build(allowlist);
          return (0, _generator().default)(tree).code;
        };
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/file/file.js");
        const { arrayExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, cloneNode, conditionalExpression, exportNamedDeclaration, exportSpecifier, expressionStatement, functionExpression, identifier, memberExpression, objectExpression, program, stringLiteral, unaryExpression, variableDeclaration, variableDeclarator } = _t(), buildUmdWrapper = (replacements) => _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);
        function buildGlobal(allowlist) {
          const namespace = identifier("babelHelpers"), body = [], container = functionExpression(null, [identifier("global")], blockStatement(body)), tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier("global")), stringLiteral("undefined")), identifier("self"), identifier("global"))]))]);
          return body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier("global"), namespace), objectExpression([])))])), buildHelpers(body, namespace, allowlist), tree;
        }
        function buildModule(allowlist) {
          const body = [], refs = buildHelpers(body, null, allowlist);
          return body.unshift(exportNamedDeclaration(null, Object.keys(refs).map((name) => exportSpecifier(cloneNode(refs[name]), identifier(name))))), program(body, [], "module");
        }
        function buildUmd(allowlist) {
          const namespace = identifier("babelHelpers"), body = [];
          return body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier("global"))])), buildHelpers(body, namespace, allowlist), program([buildUmdWrapper({ FACTORY_PARAMETERS: identifier("global"), BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier("root"), namespace), objectExpression([])), COMMON_ARGUMENTS: identifier("exports"), AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]), FACTORY_BODY: body, UMD_ROOT: identifier("this") })]);
        }
        function buildVar(allowlist) {
          const namespace = identifier("babelHelpers"), body = [];
          body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
          const tree = program(body);
          return buildHelpers(body, namespace, allowlist), body.push(expressionStatement(namespace)), tree;
        }
        function buildHelpers(body, namespace, allowlist) {
          const getHelperReference = (name) => namespace ? memberExpression(namespace, identifier(name)) : identifier(`_${name}`), refs = {};
          return helpers().list.forEach(function(name) {
            if (allowlist && allowlist.indexOf(name) < 0) return;
            const ref = refs[name] = getHelperReference(name);
            helpers().ensure(name, _file.default);
            const { nodes } = helpers().get(name, getHelperReference, ref);
            body.push(...nodes);
          }), refs;
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transform-ast.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.transformFromAst = void 0, exports3.transformFromAstAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args);
        }, exports3.transformFromAstSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const transformFromAstRunner = _gensync()(function* (ast, code, opts) {
          const config = yield* (0, _index.default)(opts);
          if (null === config) return null;
          if (!ast) throw new Error("No AST given");
          return yield* (0, _index2.run)(config, code, ast);
        });
        exports3.transformFromAst = function(ast, code, optsOrCallback, maybeCallback) {
          let opts, callback;
          if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transform-file.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.transformFile = function(...args) {
          transformFileRunner.errback(...args);
        }, exports3.transformFileAsync = function(...args) {
          return transformFileRunner.async(...args);
        }, exports3.transformFileSync = function(...args) {
          return transformFileRunner.sync(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/index.js"), fs = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/gensync-utils/fs.js");
        const transformFileRunner = _gensync()(function* (filename, opts) {
          const options = Object.assign({}, opts, { filename }), config = yield* (0, _index.default)(options);
          if (null === config) return null;
          const code = yield* fs.readFile(filename, "utf8");
          return yield* (0, _index2.run)(config, code);
        });
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transform.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.transform = void 0, exports3.transformAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args);
        }, exports3.transformSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const transformRunner = _gensync()(function* (code, opts) {
          const config = yield* (0, _index.default)(opts);
          return null === config ? null : yield* (0, _index2.run)(config, code);
        });
        exports3.transform = function(code, optsOrCallback, maybeCallback) {
          let opts, callback;
          if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function() {
          LOADED_PLUGIN || (LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, { visitor: _traverse().default.explode(blockHoistPlugin.visitor) }), {}));
          return LOADED_PLUGIN;
        };
        var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/plugin.js");
        let LOADED_PLUGIN;
        const blockHoistPlugin = { name: "internal.blockHoist", visitor: { Block: { exit({ node }) {
          const { body } = node;
          let max = Math.pow(2, 30) - 1, hasChange = false;
          for (let i = 0; i < body.length; i++) {
            const p = priority(body[i]);
            if (p > max) {
              hasChange = true;
              break;
            }
            max = p;
          }
          hasChange && (node.body = function(body2) {
            const buckets = /* @__PURE__ */ Object.create(null);
            for (let i = 0; i < body2.length; i++) {
              const n = body2[i], p = priority(n);
              (buckets[p] || (buckets[p] = [])).push(n);
            }
            const keys = Object.keys(buckets).map((k) => +k).sort((a, b) => b - a);
            let index = 0;
            for (const key of keys) {
              const bucket = buckets[key];
              for (const n of bucket) body2[index++] = n;
            }
            return body2;
          }(body.slice()));
        } } } };
        function priority(bodyNode) {
          const priority2 = null == bodyNode ? void 0 : bodyNode._blockHoist;
          return null == priority2 ? 1 : true === priority2 ? 2 : priority2;
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/file/file.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function helpers() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.23.2/node_modules/@babel/helpers/lib/index.js");
          return helpers = function() {
            return data;
          }, data;
        }
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        function _codeFrame() {
          const data = __webpack_require__2("./stubs/babel-codeframe.js");
          return _codeFrame = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        function _helperModuleTransforms() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/index.js");
          return _helperModuleTransforms = function() {
            return data;
          }, data;
        }
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        const { cloneNode, interpreterDirective } = _t(), errorVisitor = { enter(path3, state) {
          const loc = path3.node.loc;
          loc && (state.loc = loc, path3.stop());
        } };
        class File {
          constructor(options, { code, ast, inputMap }) {
            this._map = /* @__PURE__ */ new Map(), this.opts = void 0, this.declarations = {}, this.path = void 0, this.ast = void 0, this.scope = void 0, this.metadata = {}, this.code = "", this.inputMap = void 0, this.hub = { file: this, getCode: () => this.code, getScope: () => this.scope, addHelper: this.addHelper.bind(this), buildError: this.buildCodeFrameError.bind(this) }, this.opts = options, this.code = code, this.ast = ast, this.inputMap = inputMap, this.path = _traverse().NodePath.get({ hub: this.hub, parentPath: null, parent: this.ast, container: this.ast, key: "program" }).setContext(), this.scope = this.path.scope;
          }
          get shebang() {
            const { interpreter } = this.path.node;
            return interpreter ? interpreter.value : "";
          }
          set shebang(value2) {
            value2 ? this.path.get("interpreter").replaceWith(interpreterDirective(value2)) : this.path.get("interpreter").remove();
          }
          set(key, val) {
            if ("helpersNamespace" === key) throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");
            this._map.set(key, val);
          }
          get(key) {
            return this._map.get(key);
          }
          has(key) {
            return this._map.has(key);
          }
          getModuleName() {
            return (0, _helperModuleTransforms().getModuleName)(this.opts, this.opts);
          }
          addImport() {
            throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
          }
          availableHelper(name, versionRange) {
            let minVersion;
            try {
              minVersion = helpers().minVersion(name);
            } catch (err) {
              if ("BABEL_HELPER_UNKNOWN" !== err.code) throw err;
              return false;
            }
            return "string" != typeof versionRange || (_semver().valid(versionRange) && (versionRange = `^${versionRange}`), !_semver().intersects(`<${minVersion}`, versionRange) && !_semver().intersects(">=8.0.0", versionRange));
          }
          addHelper(name) {
            const declar = this.declarations[name];
            if (declar) return cloneNode(declar);
            const generator = this.get("helperGenerator");
            if (generator) {
              const res = generator(name);
              if (res) return res;
            }
            helpers().ensure(name, File);
            const uid = this.declarations[name] = this.scope.generateUidIdentifier(name), dependencies = {};
            for (const dep of helpers().getDependencies(name)) dependencies[dep] = this.addHelper(dep);
            const { nodes, globals } = helpers().get(name, (dep) => dependencies[dep], uid, Object.keys(this.scope.getAllBindings()));
            return globals.forEach((name2) => {
              this.path.scope.hasBinding(name2, true) && this.path.scope.rename(name2);
            }), nodes.forEach((node) => {
              node._compact = true;
            }), this.path.unshiftContainer("body", nodes), this.path.get("body").forEach((path3) => {
              -1 !== nodes.indexOf(path3.node) && path3.isVariableDeclaration() && this.scope.registerDeclaration(path3);
            }), uid;
          }
          addTemplateObject() {
            throw new Error("This function has been moved into the template literal transform itself.");
          }
          buildCodeFrameError(node, msg, _Error = SyntaxError) {
            let loc = node && (node.loc || node._loc);
            if (!loc && node) {
              const state = { loc: null };
              (0, _traverse().default)(node, errorVisitor, this.scope, state), loc = state.loc;
              let txt = "This is an error on an internal node. Probably an internal error.";
              loc && (txt += " Location has been estimated."), msg += ` (${txt})`;
            }
            if (loc) {
              const { highlightCode = true } = this.opts;
              msg += "\n" + (0, _codeFrame().codeFrameColumns)(this.code, { start: { line: loc.start.line, column: loc.start.column + 1 }, end: loc.end && loc.start.line === loc.end.line ? { line: loc.end.line, column: loc.end.column + 1 } : void 0 }, { highlightCode });
            }
            return new _Error(msg);
          }
        }
        exports3.default = File;
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/file/generate.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _convertSourceMap() {
          const data = __webpack_require__2("./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js");
          return _convertSourceMap = function() {
            return data;
          }, data;
        }
        function _generator() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/index.js");
          return _generator = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(pluginPasses, file) {
          const { opts, ast, code, inputMap } = file, { generatorOpts } = opts;
          generatorOpts.inputSourceMap = null == inputMap ? void 0 : inputMap.toObject();
          const results = [];
          for (const plugins of pluginPasses) for (const plugin of plugins) {
            const { generatorOverride } = plugin;
            if (generatorOverride) {
              const result2 = generatorOverride(ast, generatorOpts, code, _generator().default);
              void 0 !== result2 && results.push(result2);
            }
          }
          let result;
          if (0 === results.length) result = (0, _generator().default)(ast, generatorOpts, code);
          else {
            if (1 !== results.length) throw new Error("More than one plugin attempted to override codegen.");
            if (result = results[0], "function" == typeof result.then) throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
          }
          let { code: outputCode, decodedMap: outputMap = result.map } = result;
          result.__mergedMap ? outputMap = Object.assign({}, result.map) : outputMap && (outputMap = inputMap ? (0, _mergeMap.default)(inputMap.toObject(), outputMap, generatorOpts.sourceFileName) : result.map);
          "inline" !== opts.sourceMaps && "both" !== opts.sourceMaps || (outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment());
          "inline" === opts.sourceMaps && (outputMap = null);
          return { outputCode, outputMap };
        };
        var _mergeMap = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/file/merge-map.js");
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/file/merge-map.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _remapping() {
          const data = __webpack_require__2("./node_modules/.pnpm/@ampproject+remapping@2.2.1/node_modules/@ampproject/remapping/dist/remapping.umd.js");
          return _remapping = function() {
            return data;
          }, data;
        }
        function rootless(map) {
          return Object.assign({}, map, { sourceRoot: null });
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(inputMap, map, sourceFileName) {
          const source = sourceFileName.replace(/\\/g, "/");
          let found = false;
          const result = _remapping()(rootless(map), (s, ctx) => s !== source || found ? null : (found = true, ctx.source = "", rootless(inputMap)));
          "string" == typeof inputMap.sourceRoot && (result.sourceRoot = inputMap.sourceRoot);
          return Object.assign({}, result);
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.run = function* (config, code, ast) {
          const file = yield* (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast), opts = file.opts;
          try {
            yield* function* (file2, pluginPasses) {
              for (const pluginPairs of pluginPasses) {
                const passPairs = [], passes = [], visitors = [];
                for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
                  const pass = new _pluginPass.default(file2, plugin.key, plugin.options);
                  passPairs.push([plugin, pass]), passes.push(pass), visitors.push(plugin.visitor);
                }
                for (const [plugin, pass] of passPairs) {
                  const fn = plugin.pre;
                  if (fn) {
                    const result = fn.call(pass, file2);
                    if (yield* [], isThenable(result)) throw new Error("You appear to be using an plugin with an async .pre, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
                  }
                }
                const visitor = _traverse().default.visitors.merge(visitors, passes, file2.opts.wrapPluginVisitorMethod);
                (0, _traverse().default)(file2.ast, visitor, file2.scope);
                for (const [plugin, pass] of passPairs) {
                  const fn = plugin.post;
                  if (fn) {
                    const result = fn.call(pass, file2);
                    if (yield* [], isThenable(result)) throw new Error("You appear to be using an plugin with an async .post, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
                  }
                }
              }
            }(file, config.passes);
          } catch (e) {
            var _opts$filename;
            throw e.message = `${null != (_opts$filename = opts.filename) ? _opts$filename : "unknown file"}: ${e.message}`, e.code || (e.code = "BABEL_TRANSFORM_ERROR"), e;
          }
          let outputCode, outputMap;
          try {
            false !== opts.code && ({ outputCode, outputMap } = (0, _generate.default)(config.passes, file));
          } catch (e) {
            var _opts$filename2;
            throw e.message = `${null != (_opts$filename2 = opts.filename) ? _opts$filename2 : "unknown file"}: ${e.message}`, e.code || (e.code = "BABEL_GENERATE_ERROR"), e;
          }
          return { metadata: file.metadata, options: opts, ast: true === opts.ast ? file.ast : null, code: void 0 === outputCode ? null : outputCode, map: void 0 === outputMap ? null : outputMap, sourceType: file.ast.program.sourceType, externalDependencies: (0, _deepArray.flattenToSet)(config.externalDependencies) };
        };
        var _pluginPass = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/plugin-pass.js"), _blockHoistPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _normalizeFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/normalize-file.js"), _generate = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/file/generate.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        function isThenable(val) {
          return !(!val || "object" != typeof val && "function" != typeof val || !val.then || "function" != typeof val.then);
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/normalize-file.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        function _convertSourceMap() {
          const data = __webpack_require__2("./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js");
          return _convertSourceMap = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function* (pluginPasses, options, code, ast) {
          if (code = `${code || ""}`, ast) {
            if ("Program" === ast.type) ast = file(ast, [], []);
            else if ("File" !== ast.type) throw new Error("AST root must be a Program or File node");
            options.cloneInputAst && (ast = (0, _cloneDeep.default)(ast));
          } else ast = yield* (0, _index.default)(pluginPasses, options, code);
          let inputMap = null;
          if (false !== options.inputSourceMap) {
            if ("object" == typeof options.inputSourceMap && (inputMap = _convertSourceMap().fromObject(options.inputSourceMap)), !inputMap) {
              const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
              if (lastComment) try {
                inputMap = _convertSourceMap().fromComment("//" + lastComment);
              } catch (err) {
                debug("discarding unknown inline input sourcemap");
              }
            }
            if (!inputMap) {
              const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
              if ("string" == typeof options.filename && lastComment) try {
                const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment), inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]), "utf8");
                inputMap = _convertSourceMap().fromJSON(inputMapContent);
              } catch (err) {
                debug("discarding unknown file input sourcemap", err);
              }
              else lastComment && debug("discarding un-loadable file input sourcemap");
            }
          }
          return new _file.default(options, { code, ast, inputMap });
        };
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/file/file.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/parser/index.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/util/clone-deep.js");
        const { file, traverseFast } = _t(), debug = _debug()("babel:transform:file"), INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/, EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
        function extractCommentsFromList(regex, comments, lastComment) {
          return comments && (comments = comments.filter(({ value: value2 }) => !regex.test(value2) || (lastComment = value2, false))), [comments, lastComment];
        }
        function extractComments(regex, ast) {
          let lastComment = null;
          return traverseFast(ast, (node) => {
            [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment), [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment), [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);
          }), lastComment;
        }
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/normalize-opts.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(config) {
          const { filename, cwd, filenameRelative = "string" == typeof filename ? _path().relative(cwd, filename) : "unknown", sourceType = "module", inputSourceMap, sourceMaps = !!inputSourceMap, sourceRoot = config.options.moduleRoot, sourceFileName = _path().basename(filenameRelative), comments = true, compact = "auto" } = config.options, opts = config.options, options = Object.assign({}, opts, { parserOpts: Object.assign({ sourceType: ".mjs" === _path().extname(filenameRelative) ? "module" : sourceType, sourceFileName: filename, plugins: [] }, opts.parserOpts), generatorOpts: Object.assign({ filename, auxiliaryCommentBefore: opts.auxiliaryCommentBefore, auxiliaryCommentAfter: opts.auxiliaryCommentAfter, retainLines: opts.retainLines, comments, shouldPrintComment: opts.shouldPrintComment, compact, minified: opts.minified, sourceMaps, sourceRoot, sourceFileName }, opts.generatorOpts) });
          for (const plugins of config.passes) for (const plugin of plugins) plugin.manipulateOptions && plugin.manipulateOptions(options, options.parserOpts);
          return options;
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/plugin-pass.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        class PluginPass {
          constructor(file, key, options) {
            this._map = /* @__PURE__ */ new Map(), this.key = void 0, this.file = void 0, this.opts = void 0, this.cwd = void 0, this.filename = void 0, this.key = key, this.file = file, this.opts = options || {}, this.cwd = file.opts.cwd, this.filename = file.opts.filename;
          }
          set(key, val) {
            this._map.set(key, val);
          }
          get(key) {
            return this._map.get(key);
          }
          availableHelper(name, versionRange) {
            return this.file.availableHelper(name, versionRange);
          }
          addHelper(name) {
            return this.file.addHelper(name);
          }
          buildCodeFrameError(node, msg, _Error) {
            return this.file.buildCodeFrameError(node, msg, _Error);
          }
        }
        exports3.default = PluginPass, PluginPass.prototype.getModuleName = function() {
          return this.file.getModuleName();
        }, PluginPass.prototype.addImport = function() {
          this.file.addImport();
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/transformation/util/clone-deep.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function deepClone(value2, cache) {
          if (null !== value2) {
            if (cache.has(value2)) return cache.get(value2);
            let cloned;
            if (Array.isArray(value2)) {
              cloned = new Array(value2.length), cache.set(value2, cloned);
              for (let i = 0; i < value2.length; i++) cloned[i] = "object" != typeof value2[i] ? value2[i] : deepClone(value2[i], cache);
            } else {
              cloned = {}, cache.set(value2, cloned);
              const keys = Object.keys(value2);
              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                cloned[key] = "object" != typeof value2[key] ? value2[key] : deepClone(value2[key], cache);
              }
            }
            return cloned;
          }
          return value2;
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(value2) {
          return "object" != typeof value2 ? value2 : deepClone(value2, /* @__PURE__ */ new Map());
        };
      }, "./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/vendor/import-meta-resolve.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _assert() {
          const data = __webpack_require__2("assert");
          return _assert = function() {
            return data;
          }, data;
        }
        function _fs() {
          const data = function(obj, nodeInterop) {
            if (!nodeInterop && obj && obj.__esModule) return obj;
            if (null === obj || "object" != typeof obj && "function" != typeof obj) return { default: obj };
            var cache = _getRequireWildcardCache(nodeInterop);
            if (cache && cache.has(obj)) return cache.get(obj);
            var newObj = {}, hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var key in obj) if ("default" !== key && Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
              desc && (desc.get || desc.set) ? Object.defineProperty(newObj, key, desc) : newObj[key] = obj[key];
            }
            newObj.default = obj, cache && cache.set(obj, newObj);
            return newObj;
          }(__webpack_require__2("fs"), true);
          return _fs = function() {
            return data;
          }, data;
        }
        function _process() {
          const data = __webpack_require__2("process");
          return _process = function() {
            return data;
          }, data;
        }
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _module() {
          const data = __webpack_require__2("module");
          return _module = function() {
            return data;
          }, data;
        }
        function _v() {
          const data = __webpack_require__2("v8");
          return _v = function() {
            return data;
          }, data;
        }
        function _util() {
          const data = __webpack_require__2("util");
          return _util = function() {
            return data;
          }, data;
        }
        function _getRequireWildcardCache(nodeInterop) {
          if ("function" != typeof WeakMap) return null;
          var cacheBabelInterop = /* @__PURE__ */ new WeakMap(), cacheNodeInterop = /* @__PURE__ */ new WeakMap();
          return (_getRequireWildcardCache = function(nodeInterop2) {
            return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.moduleResolve = moduleResolve, exports3.resolve = function(specifier, parent) {
          if (!parent) throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");
          try {
            return function(specifier2, context = {}) {
              const { parentURL } = context;
              let parsedParentURL, parsed;
              if (_assert()(void 0 !== parentURL, "expected `parentURL` to be defined"), function(parentURL2) {
                if (void 0 === parentURL2) return;
                if ("string" != typeof parentURL2 && (self2 = parentURL2, !Boolean(self2 && "object" == typeof self2 && "href" in self2 && "string" == typeof self2.href && "protocol" in self2 && "string" == typeof self2.protocol && self2.href && self2.protocol))) throw new codes.ERR_INVALID_ARG_TYPE("parentURL", ["string", "URL"], parentURL2);
                var self2;
              }(parentURL), parentURL) try {
                parsedParentURL = new (_url()).URL(parentURL);
              } catch (_unused5) {
              }
              try {
                parsed = shouldBeTreatedAsRelativeOrAbsolutePath(specifier2) ? new (_url()).URL(specifier2, parsedParentURL) : new (_url()).URL(specifier2);
                const protocol = parsed.protocol;
                if ("data:" === protocol || experimentalNetworkImports && ("https:" === protocol || "http:" === protocol)) return { url: parsed.href, format: null };
              } catch (_unused6) {
              }
              const maybeReturn = function(specifier3, parsed2, parsedParentURL2) {
                if (parsedParentURL2) {
                  const parentProtocol = parsedParentURL2.protocol;
                  if ("http:" === parentProtocol || "https:" === parentProtocol) {
                    if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier3)) {
                      const parsedProtocol = null == parsed2 ? void 0 : parsed2.protocol;
                      if (parsedProtocol && "https:" !== parsedProtocol && "http:" !== parsedProtocol) throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "remote imports cannot import from a local location.");
                      return { url: (null == parsed2 ? void 0 : parsed2.href) || "" };
                    }
                    if (_module().builtinModules.includes(specifier3)) throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "remote imports cannot import from a local location.");
                    throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "only relative and absolute specifiers are supported.");
                  }
                }
              }(specifier2, parsed, parsedParentURL);
              if (maybeReturn) return maybeReturn;
              if (parsed && "node:" === parsed.protocol) return { url: specifier2 };
              !function(parsed2, experimentalNetworkImports2) {
                const protocol = null == parsed2 ? void 0 : parsed2.protocol;
                if (protocol && "file:" !== protocol && "data:" !== protocol && (!experimentalNetworkImports2 || "https:" !== protocol && "http:" !== protocol)) throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(parsed2, ["file", "data"].concat(experimentalNetworkImports2 ? ["https", "http"] : []));
              }(parsed, experimentalNetworkImports);
              const conditions = function(conditions2) {
                if (void 0 !== conditions2 && conditions2 !== DEFAULT_CONDITIONS) {
                  if (!Array.isArray(conditions2)) throw new ERR_INVALID_ARG_VALUE("conditions", conditions2, "expected an array");
                  return new Set(conditions2);
                }
                return DEFAULT_CONDITIONS_SET;
              }(context.conditions), url2 = moduleResolve(specifier2, new (_url()).URL(parentURL), conditions, false);
              return function(url3) {
                const protocol = url3.protocol;
                if ("file:" !== protocol && "data:" !== protocol && "node:" !== protocol) throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(url3);
              }(url2), { url: url2.href, format: defaultGetFormatWithoutErrors(url2, { parentURL }) };
            }(specifier, { parentURL: parent }).url;
          } catch (error) {
            const exception = error;
            if ("ERR_UNSUPPORTED_DIR_IMPORT" === exception.code && "string" == typeof exception.url) return exception.url;
            throw error;
          }
        };
        const isWindows = "win32" === _process().platform, own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = /* @__PURE__ */ new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]), codes = {};
        function formatList(array, type = "and") {
          return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
        }
        const messages = /* @__PURE__ */ new Map();
        let userStackTraceLimit;
        function createError(sym, value2, def) {
          return messages.set(sym, value2), /* @__PURE__ */ function(Base, key) {
            return NodeError;
            function NodeError(...args) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
              const message = function(key2, args2, self2) {
                const message2 = messages.get(key2);
                if (_assert()(void 0 !== message2, "expected `message` to be found"), "function" == typeof message2) return _assert()(message2.length <= args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self2, args2);
                const regex = /%[dfijoOs]/g;
                let expectedLength = 0;
                for (; null !== regex.exec(message2); ) expectedLength++;
                return _assert()(expectedLength === args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${expectedLength}).`), 0 === args2.length ? message2 : (args2.unshift(message2), Reflect.apply(_util().format, null, args2));
              }(key, args, error);
              return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
            }
          }(def, sym);
        }
        function isErrorStackTraceLimitWritable() {
          try {
            if (_v().startupSnapshot.isBuildingSnapshot()) return false;
          } catch (_unused) {
          }
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
        }
        codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
          _assert()("string" == typeof name, "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
          let message = "The ";
          if (name.endsWith(" argument")) message += `${name} `;
          else {
            const type = name.includes(".") ? "property" : "argument";
            message += `"${name}" ${type} `;
          }
          message += "must be ";
          const types = [], instances = [], other = [];
          for (const value2 of expected) _assert()("string" == typeof value2, "All expected entries have to be of type string"), kTypes.has(value2) ? types.push(value2.toLowerCase()) : null === classRegExp.exec(value2) ? (_assert()("object" !== value2, 'The value "object" should be written as "Object"'), other.push(value2)) : instances.push(value2);
          if (instances.length > 0) {
            const pos = types.indexOf("object");
            -1 !== pos && (types.slice(pos, 1), instances.push("Object"));
          }
          return types.length > 0 && (message += `${types.length > 1 ? "one of type" : "of type"} ${formatList(types, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value2) {
            if (null == value2) return String(value2);
            if ("function" == typeof value2 && value2.name) return `function ${value2.name}`;
            if ("object" == typeof value2) return value2.constructor && value2.constructor.name ? `an instance of ${value2.constructor.name}` : `${(0, _util().inspect)(value2, { depth: -1 })}`;
            let inspected = (0, _util().inspect)(value2, { colors: false });
            inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
            return `type ${typeof value2} (${inspected})`;
          }(actual)}`, message;
        }, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = void 0) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path3, base, message) => `Invalid package config ${path3}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (pkgPath, key, target, isImport = false, base = void 0) => {
          const relError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (_assert()(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`;
        }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path3, base, type = "package") => `Cannot find ${type} '${path3}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (pkgPath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (ext, path3) => `Unknown file extension "${ext}" for ${path3}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
          let inspected = (0, _util().inspect)(value2);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError), codes.ERR_UNSUPPORTED_ESM_URL_SCHEME = createError("ERR_UNSUPPORTED_ESM_URL_SCHEME", (url2, supported) => {
          let message = `Only URLs with a scheme in: ${formatList(supported)} are supported by the default ESM loader`;
          return isWindows && 2 === url2.protocol.length && (message += ". On Windows, absolute paths must be valid file:// URLs"), message += `. Received protocol '${url2.protocol}'`, message;
        }, Error);
        const captureLargerStackTrace = function(fn) {
          const hidden = "__node_internal_" + fn.name;
          return Object.defineProperty(fn, "name", { value: hidden }), fn;
        }(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
          return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
        });
        var packageJsonReader = { read: function(jsonPath) {
          try {
            return { string: _fs().default.readFileSync(_path().toNamespacedPath(_path().join(_path().dirname(jsonPath), "package.json")), "utf8") };
          } catch (error) {
            const exception = error;
            if ("ENOENT" === exception.code) return { string: void 0 };
            throw exception;
          }
        } };
        const { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, packageJsonCache = /* @__PURE__ */ new Map();
        function getPackageConfig(path3, specifier, base) {
          const existing = packageJsonCache.get(path3);
          if (void 0 !== existing) return existing;
          const source = packageJsonReader.read(path3).string;
          if (void 0 === source) {
            const packageConfig2 = { pjsonPath: path3, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
            return packageJsonCache.set(path3, packageConfig2), packageConfig2;
          }
          let packageJson;
          try {
            packageJson = JSON.parse(source);
          } catch (error) {
            const exception = error;
            throw new ERR_INVALID_PACKAGE_CONFIG$1(path3, (base ? `"${specifier}" from ` : "") + (0, _url().fileURLToPath)(base || specifier), exception.message);
          }
          const { exports: exports4, imports, main, name, type } = packageJson, packageConfig = { pjsonPath: path3, exists: true, main: "string" == typeof main ? main : void 0, name: "string" == typeof name ? name : void 0, type: "module" === type || "commonjs" === type ? type : "none", exports: exports4, imports: imports && "object" == typeof imports ? imports : void 0 };
          return packageJsonCache.set(path3, packageConfig), packageConfig;
        }
        function getPackageScopeConfig(resolved) {
          let packageJsonUrl = new (_url()).URL("package.json", resolved);
          for (; ; ) {
            if (packageJsonUrl.pathname.endsWith("node_modules/package.json")) break;
            const packageConfig2 = getPackageConfig((0, _url().fileURLToPath)(packageJsonUrl), resolved);
            if (packageConfig2.exists) return packageConfig2;
            const lastPackageJsonUrl = packageJsonUrl;
            if (packageJsonUrl = new (_url()).URL("../package.json", packageJsonUrl), packageJsonUrl.pathname === lastPackageJsonUrl.pathname) break;
          }
          const packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl), packageConfig = { pjsonPath: packageJsonPath, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
          return packageJsonCache.set(packageJsonPath, packageConfig), packageConfig;
        }
        const { ERR_UNKNOWN_FILE_EXTENSION } = codes, hasOwnProperty = {}.hasOwnProperty, extensionFormatMap = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".json": "json", ".mjs": "module" };
        const protocolHandlers = { __proto__: null, "data:": function(parsed) {
          const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null, null];
          return function(mime2) {
            return mime2 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime2) ? "module" : "application/json" === mime2 ? "json" : null;
          }(mime);
        }, "file:": function(url2, _context, ignoreErrors) {
          const ext = function(url3) {
            const pathname = url3.pathname;
            let index = pathname.length;
            for (; index--; ) {
              const code = pathname.codePointAt(index);
              if (47 === code) return "";
              if (46 === code) return 47 === pathname.codePointAt(index - 1) ? "" : pathname.slice(index);
            }
            return "";
          }(url2);
          if (".js" === ext) return "module" === function(url3) {
            return getPackageScopeConfig(url3).type;
          }(url2) ? "module" : "commonjs";
          const format = extensionFormatMap[ext];
          if (format) return format;
          if (ignoreErrors) return;
          const filepath = (0, _url().fileURLToPath)(url2);
          throw new ERR_UNKNOWN_FILE_EXTENSION(ext, filepath);
        }, "http:": getHttpProtocolModuleFormat, "https:": getHttpProtocolModuleFormat, "node:": () => "builtin" };
        function getHttpProtocolModuleFormat() {
        }
        function defaultGetFormatWithoutErrors(url2, context) {
          return hasOwnProperty.call(protocolHandlers, url2.protocol) && protocolHandlers[url2.protocol](url2, context, true) || null;
        }
        const { ERR_INVALID_ARG_VALUE } = codes, DEFAULT_CONDITIONS = Object.freeze(["node", "import"]), DEFAULT_CONDITIONS_SET = new Set(DEFAULT_CONDITIONS);
        const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], experimentalNetworkImports = false, { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_ESM_URL_SCHEME } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSepRegEx = /%2f|%5c/i, emittedPackageWarnings = /* @__PURE__ */ new Set(), doubleSlashRegEx = /[/\\]{2}/;
        function emitInvalidSegmentDeprecation(target, request, match, packageJsonUrl, internal, base, isTarget) {
          const pjsonPath = (0, _url().fileURLToPath)(packageJsonUrl), double = null !== doubleSlashRegEx.exec(isTarget ? target : request);
          _process().emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request}" ${request === match ? "" : `matched to "${match}" `}in the "${internal ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
        }
        function emitLegacyIndexDeprecation(url2, packageJsonUrl, base, main) {
          if ("module" !== defaultGetFormatWithoutErrors(url2, { parentURL: base.href })) return;
          const path3 = (0, _url().fileURLToPath)(url2.href), pkgPath = (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), basePath = (0, _url().fileURLToPath)(base);
          main ? _process().emitWarning(`Package ${pkgPath} has a "main" field set to ${JSON.stringify(main)}, excluding the full filename and extension to the resolved file at "${path3.slice(pkgPath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field isdeprecated for ES modules.`, "DeprecationWarning", "DEP0151") : _process().emitWarning(`No "main" or "exports" field defined in the package.json for ${pkgPath} resolving the main entry point "${path3.slice(pkgPath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
        }
        function tryStatSync(path3) {
          try {
            return (0, _fs().statSync)(path3);
          } catch (_unused2) {
            return new (_fs()).Stats();
          }
        }
        function fileExists(url2) {
          const stats = (0, _fs().statSync)(url2, { throwIfNoEntry: false }), isFile = stats ? stats.isFile() : void 0;
          return null != isFile && isFile;
        }
        function legacyMainResolve(packageJsonUrl, packageConfig, base) {
          let guess;
          if (void 0 !== packageConfig.main) {
            if (guess = new (_url()).URL(packageConfig.main, packageJsonUrl), fileExists(guess)) return guess;
            const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
            let i2 = -1;
            for (; ++i2 < tries2.length && (guess = new (_url()).URL(tries2[i2], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
            if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          }
          const tries = ["./index.js", "./index.json", "./index.node"];
          let i = -1;
          for (; ++i < tries.length && (guess = new (_url()).URL(tries[i], packageJsonUrl), !fileExists(guess)); ) guess = void 0;
          if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          throw new ERR_MODULE_NOT_FOUND((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), (0, _url().fileURLToPath)(base));
        }
        function exportsNotFound(subpath, packageJsonUrl, base) {
          return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, base && (0, _url().fileURLToPath)(base));
        }
        function invalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
          return target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, target, internal, base && (0, _url().fileURLToPath)(base));
        }
        function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, isPathMap, conditions) {
          if ("" !== subpath && !pattern && "/" !== target[target.length - 1]) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if (!target.startsWith("./")) {
            if (internal && !target.startsWith("../") && !target.startsWith("/")) {
              let isURL = false;
              try {
                new (_url()).URL(target), isURL = true;
              } catch (_unused3) {
              }
              if (!isURL) {
                return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
              }
            }
            throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          }
          if (null !== invalidSegmentRegEx.exec(target.slice(2))) {
            if (null !== deprecatedInvalidSegmentRegEx.exec(target.slice(2))) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
            if (!isPathMap) {
              const request = pattern ? match.replace("*", () => subpath) : match + subpath;
              emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, true);
            }
          }
          const resolved = new (_url()).URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new (_url()).URL(".", packageJsonUrl).pathname;
          if (!resolvedPath.startsWith(packagePath)) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if ("" === subpath) return resolved;
          if (null !== invalidSegmentRegEx.exec(subpath)) {
            const request = pattern ? match.replace("*", () => subpath) : match + subpath;
            if (null === deprecatedInvalidSegmentRegEx.exec(subpath)) {
              if (!isPathMap) {
                emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, false);
              }
            } else !function(request2, match2, packageJsonUrl2, internal2, base2) {
              const reason = `request is not a valid match in pattern "${match2}" for the "${internal2 ? "imports" : "exports"}" resolution of ${(0, _url().fileURLToPath)(packageJsonUrl2)}`;
              throw new ERR_INVALID_MODULE_SPECIFIER(request2, reason, base2 && (0, _url().fileURLToPath)(base2));
            }(request, match, packageJsonUrl, internal, base);
          }
          return pattern ? new (_url()).URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new (_url()).URL(subpath, resolved);
        }
        function isArrayIndex(key) {
          const keyNumber = Number(key);
          return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
        }
        function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions) {
          if ("string" == typeof target) return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, isPathMap, conditions);
          if (Array.isArray(target)) {
            const targetList = target;
            if (0 === targetList.length) return null;
            let lastException, i = -1;
            for (; ++i < targetList.length; ) {
              const targetItem = targetList[i];
              let resolveResult;
              try {
                resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
              } catch (error) {
                if (lastException = error, "ERR_INVALID_PACKAGE_TARGET" === error.code) continue;
                throw error;
              }
              if (void 0 !== resolveResult) {
                if (null !== resolveResult) return resolveResult;
                lastException = null;
              }
            }
            if (null == lastException) return null;
            throw lastException;
          }
          if ("object" == typeof target && null !== target) {
            const keys = Object.getOwnPropertyNames(target);
            let i = -1;
            for (; ++i < keys.length; ) {
              if (isArrayIndex(keys[i])) throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
            }
            for (i = -1; ++i < keys.length; ) {
              const key = keys[i];
              if ("default" === key || conditions && conditions.has(key)) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
                if (void 0 === resolveResult) continue;
                return resolveResult;
              }
            }
            return null;
          }
          if (null === target) return null;
          throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
        }
        function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
          const pjsonPath = (0, _url().fileURLToPath)(pjsonUrl);
          emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), _process().emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
        }
        function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
          let exports4 = packageConfig.exports;
          if (function(exports5, packageJsonUrl2, base2) {
            if ("string" == typeof exports5 || Array.isArray(exports5)) return true;
            if ("object" != typeof exports5 || null === exports5) return false;
            const keys2 = Object.getOwnPropertyNames(exports5);
            let isConditionalSugar = false, i2 = 0, j = -1;
            for (; ++j < keys2.length; ) {
              const key = keys2[j], curIsConditionalSugar = "" === key || "." !== key[0];
              if (0 == i2++) isConditionalSugar = curIsConditionalSugar;
              else if (isConditionalSugar !== curIsConditionalSugar) throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
            }
            return isConditionalSugar;
          }(exports4, packageJsonUrl, base) && (exports4 = { ".": exports4 }), own.call(exports4, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports4[packageSubpath], "", packageSubpath, base, false, false, false, conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          let bestMatch = "", bestMatchSubpath = "";
          const keys = Object.getOwnPropertyNames(exports4);
          let i = -1;
          for (; ++i < keys.length; ) {
            const key = keys[i], patternIndex = key.indexOf("*");
            if (-1 !== patternIndex && packageSubpath.startsWith(key.slice(0, patternIndex))) {
              packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
              const patternTrailer = key.slice(patternIndex + 1);
              packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
            }
          }
          if (bestMatch) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports4[bestMatch], bestMatchSubpath, bestMatch, base, true, false, packageSubpath.endsWith("/"), conditions);
            if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          throw exportsNotFound(packageSubpath, packageJsonUrl, base);
        }
        function patternKeyCompare(a, b) {
          const aPatternIndex = a.indexOf("*"), bPatternIndex = b.indexOf("*"), baseLengthA = -1 === aPatternIndex ? a.length : aPatternIndex + 1, baseLengthB = -1 === bPatternIndex ? b.length : bPatternIndex + 1;
          return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || -1 === aPatternIndex ? 1 : -1 === bPatternIndex || a.length > b.length ? -1 : b.length > a.length ? 1 : 0;
        }
        function packageImportsResolve(name, base, conditions) {
          if ("#" === name || name.startsWith("#/") || name.endsWith("/")) {
            throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, _url().fileURLToPath)(base));
          }
          let packageJsonUrl;
          const packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            packageJsonUrl = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
            const imports = packageConfig.imports;
            if (imports) if (own.call(imports, name) && !name.includes("*")) {
              const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, false, conditions);
              if (null != resolveResult) return resolveResult;
            } else {
              let bestMatch = "", bestMatchSubpath = "";
              const keys = Object.getOwnPropertyNames(imports);
              let i = -1;
              for (; ++i < keys.length; ) {
                const key = keys[i], patternIndex = key.indexOf("*");
                if (-1 !== patternIndex && name.startsWith(key.slice(0, -1))) {
                  const patternTrailer = key.slice(patternIndex + 1);
                  name.length >= key.length && name.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
                }
              }
              if (bestMatch) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, true, true, false, conditions);
                if (null != resolveResult) return resolveResult;
              }
            }
          }
          throw function(specifier, packageJsonUrl2, base2) {
            return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl2 && (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl2)), (0, _url().fileURLToPath)(base2));
          }(name, packageJsonUrl, base);
        }
        function packageResolve(specifier, base, conditions) {
          if (_module().builtinModules.includes(specifier)) return new (_url()).URL("node:" + specifier);
          const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
            let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
            "@" === specifier2[0] && (isScoped2 = true, -1 === separatorIndex || 0 === specifier2.length ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
            const packageName2 = -1 === separatorIndex ? specifier2 : specifier2.slice(0, separatorIndex);
            if (null !== invalidPackageNameRegEx.exec(packageName2) && (validPackageName = false), !validPackageName) throw new ERR_INVALID_MODULE_SPECIFIER(specifier2, "is not a valid package name", (0, _url().fileURLToPath)(base2));
            return { packageName: packageName2, packageSubpath: "." + (-1 === separatorIndex ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
          }(specifier, base), packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            const packageJsonUrl2 = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
            if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports) return packageExportsResolve(packageJsonUrl2, packageSubpath, packageConfig, base, conditions);
          }
          let lastPath, packageJsonUrl = new (_url()).URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
          do {
            if (!tryStatSync(packageJsonPath.slice(0, -13)).isDirectory()) {
              lastPath = packageJsonPath, packageJsonUrl = new (_url()).URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
              continue;
            }
            const packageConfig2 = getPackageConfig(packageJsonPath, specifier, base);
            return void 0 !== packageConfig2.exports && null !== packageConfig2.exports ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig2, base, conditions) : "." === packageSubpath ? legacyMainResolve(packageJsonUrl, packageConfig2, base) : new (_url()).URL(packageSubpath, packageJsonUrl);
          } while (packageJsonPath.length !== lastPath.length);
          throw new ERR_MODULE_NOT_FOUND(packageName, (0, _url().fileURLToPath)(base));
        }
        function shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {
          return "" !== specifier && ("/" === specifier[0] || function(specifier2) {
            if ("." === specifier2[0]) {
              if (1 === specifier2.length || "/" === specifier2[1]) return true;
              if ("." === specifier2[1] && (2 === specifier2.length || "/" === specifier2[2])) return true;
            }
            return false;
          }(specifier));
        }
        function moduleResolve(specifier, base, conditions, preserveSymlinks) {
          const protocol = base.protocol, isRemote = "http:" === protocol || "https:" === protocol;
          let resolved;
          if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) resolved = new (_url()).URL(specifier, base);
          else if (isRemote || "#" !== specifier[0]) try {
            resolved = new (_url()).URL(specifier);
          } catch (_unused4) {
            isRemote || (resolved = packageResolve(specifier, base, conditions));
          }
          else resolved = packageImportsResolve(specifier, base, conditions);
          return _assert()(void 0 !== resolved, "expected to be defined"), "file:" !== resolved.protocol ? resolved : function(resolved2, base2, preserveSymlinks2) {
            if (null !== encodedSepRegEx.exec(resolved2.pathname)) throw new ERR_INVALID_MODULE_SPECIFIER(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, _url().fileURLToPath)(base2));
            const filePath = (0, _url().fileURLToPath)(resolved2), stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
            if (stats.isDirectory()) {
              const error = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, _url().fileURLToPath)(base2));
              throw error.url = String(resolved2), error;
            }
            if (!stats.isFile()) throw new ERR_MODULE_NOT_FOUND(filePath || resolved2.pathname, base2 && (0, _url().fileURLToPath)(base2), "module");
            if (!preserveSymlinks2) {
              const real = (0, _fs().realpathSync)(filePath), { search, hash } = resolved2;
              (resolved2 = (0, _url().pathToFileURL)(real + (filePath.endsWith(_path().sep) ? "/" : ""))).search = search, resolved2.hash = hash;
            }
            return resolved2;
          }(resolved, base, preserveSymlinks);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/buffer.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        exports3.default = class {
          constructor(map) {
            this._map = null, this._buf = "", this._str = "", this._appendCount = 0, this._last = 0, this._queue = [], this._queueCursor = 0, this._canMarkIdName = true, this._position = { line: 1, column: 0 }, this._sourcePosition = { identifierName: void 0, identifierNamePos: void 0, line: void 0, column: void 0, filename: void 0 }, this._map = map, this._allocQueue();
          }
          _allocQueue() {
            const queue = this._queue;
            for (let i = 0; i < 16; i++) queue.push({ char: 0, repeat: 1, line: void 0, column: void 0, identifierName: void 0, identifierNamePos: void 0, filename: "" });
          }
          _pushQueue(char, repeat, line, column, filename) {
            const cursor = this._queueCursor;
            cursor === this._queue.length && this._allocQueue();
            const item = this._queue[cursor];
            item.char = char, item.repeat = repeat, item.line = line, item.column = column, item.filename = filename, this._queueCursor++;
          }
          _popQueue() {
            if (0 === this._queueCursor) throw new Error("Cannot pop from empty queue");
            return this._queue[--this._queueCursor];
          }
          get() {
            this._flush();
            const map = this._map, result = { code: (this._buf + this._str).trimRight(), decodedMap: null == map ? void 0 : map.getDecoded(), get __mergedMap() {
              return this.map;
            }, get map() {
              const resultMap = map ? map.get() : null;
              return result.map = resultMap, resultMap;
            }, set map(value2) {
              Object.defineProperty(result, "map", { value: value2, writable: true });
            }, get rawMappings() {
              const mappings = null == map ? void 0 : map.getRawMappings();
              return result.rawMappings = mappings, mappings;
            }, set rawMappings(value2) {
              Object.defineProperty(result, "rawMappings", { value: value2, writable: true });
            } };
            return result;
          }
          append(str, maybeNewline) {
            this._flush(), this._append(str, this._sourcePosition, maybeNewline);
          }
          appendChar(char) {
            this._flush(), this._appendChar(char, 1, this._sourcePosition);
          }
          queue(char) {
            if (10 === char) for (; 0 !== this._queueCursor; ) {
              const char2 = this._queue[this._queueCursor - 1].char;
              if (32 !== char2 && 9 !== char2) break;
              this._queueCursor--;
            }
            const sourcePosition = this._sourcePosition;
            this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
          }
          queueIndentation(char, repeat) {
            this._pushQueue(char, repeat, void 0, void 0, void 0);
          }
          _flush() {
            const queueCursor = this._queueCursor, queue = this._queue;
            for (let i = 0; i < queueCursor; i++) {
              const item = queue[i];
              this._appendChar(item.char, item.repeat, item);
            }
            this._queueCursor = 0;
          }
          _appendChar(char, repeat, sourcePos) {
            this._last = char, this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char), 10 !== char ? (this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename), this._position.column += repeat) : (this._position.line++, this._position.column = 0), this._canMarkIdName && (sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0);
          }
          _append(str, sourcePos, maybeNewline) {
            const len = str.length, position = this._position;
            if (this._last = str.charCodeAt(len - 1), ++this._appendCount > 4096 ? (this._str, this._buf += this._str, this._str = str, this._appendCount = 0) : this._str += str, !maybeNewline && !this._map) return void (position.column += len);
            const { column, identifierName, identifierNamePos, filename } = sourcePos;
            let line = sourcePos.line;
            null == identifierName && null == identifierNamePos || !this._canMarkIdName || (sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0);
            let i = str.indexOf("\n"), last = 0;
            for (0 !== i && this._mark(line, column, identifierName, identifierNamePos, filename); -1 !== i; ) position.line++, position.column = 0, last = i + 1, last < len && void 0 !== line && this._mark(++line, 0, null, null, filename), i = str.indexOf("\n", last);
            position.column += len - last;
          }
          _mark(line, column, identifierName, identifierNamePos, filename) {
            var _this$_map;
            null == (_this$_map = this._map) || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);
          }
          removeTrailingNewline() {
            const queueCursor = this._queueCursor;
            0 !== queueCursor && 10 === this._queue[queueCursor - 1].char && this._queueCursor--;
          }
          removeLastSemicolon() {
            const queueCursor = this._queueCursor;
            0 !== queueCursor && 59 === this._queue[queueCursor - 1].char && this._queueCursor--;
          }
          getLastChar() {
            const queueCursor = this._queueCursor;
            return 0 !== queueCursor ? this._queue[queueCursor - 1].char : this._last;
          }
          getNewlineCount() {
            const queueCursor = this._queueCursor;
            let count = 0;
            if (0 === queueCursor) return 10 === this._last ? 1 : 0;
            for (let i = queueCursor - 1; i >= 0 && 10 === this._queue[i].char; i--) count++;
            return count === queueCursor && 10 === this._last ? count + 1 : count;
          }
          endsWithCharAndNewline() {
            const queue = this._queue, queueCursor = this._queueCursor;
            if (0 !== queueCursor) {
              if (10 !== queue[queueCursor - 1].char) return;
              return queueCursor > 1 ? queue[queueCursor - 2].char : this._last;
            }
          }
          hasContent() {
            return 0 !== this._queueCursor || !!this._last;
          }
          exactSource(loc, cb) {
            if (!this._map) return void cb();
            this.source("start", loc);
            const identifierName = loc.identifierName, sourcePos = this._sourcePosition;
            identifierName && (this._canMarkIdName = false, sourcePos.identifierName = identifierName), cb(), identifierName && (this._canMarkIdName = true, sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0), this.source("end", loc);
          }
          source(prop, loc) {
            this._map && this._normalizePosition(prop, loc, 0);
          }
          sourceWithOffset(prop, loc, columnOffset) {
            this._map && this._normalizePosition(prop, loc, columnOffset);
          }
          withSource(prop, loc, cb) {
            this._map && this.source(prop, loc), cb();
          }
          _normalizePosition(prop, loc, columnOffset) {
            const pos = loc[prop], target = this._sourcePosition;
            pos && (target.line = pos.line, target.column = Math.max(pos.column + columnOffset, 0), target.filename = loc.filename);
          }
          getCurrentColumn() {
            const queue = this._queue, queueCursor = this._queueCursor;
            let lastIndex = -1, len = 0;
            for (let i = 0; i < queueCursor; i++) {
              const item = queue[i];
              10 === item.char && (lastIndex = len), len += item.repeat;
            }
            return -1 === lastIndex ? this._position.column + len : len - 1 - lastIndex;
          }
          getCurrentLine() {
            let count = 0;
            const queue = this._queue;
            for (let i = 0; i < this._queueCursor; i++) 10 === queue[i].char && count++;
            return this._position.line + count;
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/base.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.BlockStatement = function(node) {
          var _node$directives2;
          this.tokenChar(123);
          const directivesLen = null == (_node$directives2 = node.directives) ? void 0 : _node$directives2.length;
          if (directivesLen) {
            var _node$directives$trai2;
            const newline = node.body.length ? 2 : 1;
            this.printSequence(node.directives, node, { indent: true, trailingCommentsLineOffset: newline }), null != (_node$directives$trai2 = node.directives[directivesLen - 1].trailingComments) && _node$directives$trai2.length || this.newline(newline);
          }
          this.printSequence(node.body, node, { indent: true }), this.rightBrace(node);
        }, exports3.Directive = function(node) {
          this.print(node.value, node), this.semicolon();
        }, exports3.DirectiveLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw) return void this.token(raw);
          const { value: value2 } = node;
          if (unescapedDoubleQuoteRE.test(value2)) {
            if (unescapedSingleQuoteRE.test(value2)) throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
            this.token(`'${value2}'`);
          } else this.token(`"${value2}"`);
        }, exports3.File = function(node) {
          node.program && this.print(node.program.interpreter, node);
          this.print(node.program, node);
        }, exports3.InterpreterDirective = function(node) {
          this.token(`#!${node.value}`), this.newline(1, true);
        }, exports3.Placeholder = function(node) {
          this.token("%%"), this.print(node.name), this.token("%%"), "Statement" === node.expectedNode && this.semicolon();
        }, exports3.Program = function(node) {
          var _node$directives;
          this.noIndentInnerCommentsHere(), this.printInnerComments();
          const directivesLen = null == (_node$directives = node.directives) ? void 0 : _node$directives.length;
          if (directivesLen) {
            var _node$directives$trai;
            const newline = node.body.length ? 2 : 1;
            this.printSequence(node.directives, node, { trailingCommentsLineOffset: newline }), null != (_node$directives$trai = node.directives[directivesLen - 1].trailingComments) && _node$directives$trai.length || this.newline(newline);
          }
          this.printSequence(node.body, node);
        };
        const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/, unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/classes.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ClassAccessorProperty = function(node) {
          var _node$key$loc2;
          this.printJoin(node.decorators, node);
          const endLine = null == (_node$key$loc2 = node.key.loc) || null == (_node$key$loc2 = _node$key$loc2.end) ? void 0 : _node$key$loc2.line;
          endLine && this.catchUp(endLine);
          this.tsPrintClassMemberModifiers(node), this.word("accessor", true), this.space(), node.computed ? (this.tokenChar(91), this.print(node.key, node), this.tokenChar(93)) : (this._variance(node), this.print(node.key, node));
          node.optional && this.tokenChar(63);
          node.definite && this.tokenChar(33);
          this.print(node.typeAnnotation, node), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value, node));
          this.semicolon();
        }, exports3.ClassBody = function(node) {
          this.tokenChar(123), 0 === node.body.length ? this.tokenChar(125) : (this.newline(), this.printSequence(node.body, node, { indent: true }), this.endsWith(10) || this.newline(), this.rightBrace(node));
        }, exports3.ClassExpression = exports3.ClassDeclaration = function(node, parent) {
          (isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent)) && this._shouldPrintDecoratorsBeforeExport(parent) || this.printJoin(node.decorators, node);
          node.declare && (this.word("declare"), this.space());
          node.abstract && (this.word("abstract"), this.space());
          this.word("class"), node.id && (this.space(), this.print(node.id, node));
          this.print(node.typeParameters, node), node.superClass && (this.space(), this.word("extends"), this.space(), this.print(node.superClass, node), this.print(node.superTypeParameters, node));
          node.implements && (this.space(), this.word("implements"), this.space(), this.printList(node.implements, node));
          this.space(), this.print(node.body, node);
        }, exports3.ClassMethod = function(node) {
          this._classMethodHead(node), this.space(), this.print(node.body, node);
        }, exports3.ClassPrivateMethod = function(node) {
          this._classMethodHead(node), this.space(), this.print(node.body, node);
        }, exports3.ClassPrivateProperty = function(node) {
          this.printJoin(node.decorators, node), node.static && (this.word("static"), this.space());
          this.print(node.key, node), this.print(node.typeAnnotation, node), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value, node));
          this.semicolon();
        }, exports3.ClassProperty = function(node) {
          var _node$key$loc;
          this.printJoin(node.decorators, node);
          const endLine = null == (_node$key$loc = node.key.loc) || null == (_node$key$loc = _node$key$loc.end) ? void 0 : _node$key$loc.line;
          endLine && this.catchUp(endLine);
          this.tsPrintClassMemberModifiers(node), node.computed ? (this.tokenChar(91), this.print(node.key, node), this.tokenChar(93)) : (this._variance(node), this.print(node.key, node));
          node.optional && this.tokenChar(63);
          node.definite && this.tokenChar(33);
          this.print(node.typeAnnotation, node), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value, node));
          this.semicolon();
        }, exports3.StaticBlock = function(node) {
          this.word("static"), this.space(), this.tokenChar(123), 0 === node.body.length ? this.tokenChar(125) : (this.newline(), this.printSequence(node.body, node, { indent: true }), this.rightBrace(node));
        }, exports3._classMethodHead = function(node) {
          var _node$key$loc3;
          this.printJoin(node.decorators, node);
          const endLine = null == (_node$key$loc3 = node.key.loc) || null == (_node$key$loc3 = _node$key$loc3.end) ? void 0 : _node$key$loc3.line;
          endLine && this.catchUp(endLine);
          this.tsPrintClassMemberModifiers(node), this._methodHead(node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { isExportDefaultDeclaration, isExportNamedDeclaration } = _t;
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/expressions.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.LogicalExpression = exports3.BinaryExpression = exports3.AssignmentExpression = function(node, parent) {
          const parens = this.inForStatementInitCounter && "in" === node.operator && !n.needsParens(node, parent);
          parens && this.tokenChar(40);
          this.print(node.left, node), this.space(), "in" === node.operator || "instanceof" === node.operator ? this.word(node.operator) : this.token(node.operator);
          this.space(), this.print(node.right, node), parens && this.tokenChar(41);
        }, exports3.AssignmentPattern = function(node) {
          this.print(node.left, node), node.left.optional && this.tokenChar(63);
          this.print(node.left.typeAnnotation, node), this.space(), this.tokenChar(61), this.space(), this.print(node.right, node);
        }, exports3.AwaitExpression = function(node) {
          this.word("await"), node.argument && (this.space(), this.printTerminatorless(node.argument, node, false));
        }, exports3.BindExpression = function(node) {
          this.print(node.object, node), this.token("::"), this.print(node.callee, node);
        }, exports3.CallExpression = function(node) {
          this.print(node.callee, node), this.print(node.typeArguments, node), this.print(node.typeParameters, node), this.tokenChar(40), this.printList(node.arguments, node), this.rightParens(node);
        }, exports3.ConditionalExpression = function(node) {
          this.print(node.test, node), this.space(), this.tokenChar(63), this.space(), this.print(node.consequent, node), this.space(), this.tokenChar(58), this.space(), this.print(node.alternate, node);
        }, exports3.Decorator = function(node) {
          this.tokenChar(64);
          const { expression } = node;
          !function(node2) {
            if ("ParenthesizedExpression" === node2.type) return false;
            return !isDecoratorMemberExpression("CallExpression" === node2.type ? node2.callee : node2);
          }(expression) ? this.print(expression, node) : (this.tokenChar(40), this.print(expression, node), this.tokenChar(41));
          this.newline();
        }, exports3.DoExpression = function(node) {
          node.async && (this.word("async", true), this.space());
          this.word("do"), this.space(), this.print(node.body, node);
        }, exports3.EmptyStatement = function() {
          this.semicolon(true);
        }, exports3.ExpressionStatement = function(node) {
          this.print(node.expression, node), this.semicolon();
        }, exports3.Import = function() {
          this.word("import");
        }, exports3.MemberExpression = function(node) {
          if (this.print(node.object, node), !node.computed && isMemberExpression(node.property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
          let computed = node.computed;
          isLiteral(node.property) && "number" == typeof node.property.value && (computed = true);
          computed ? (this.tokenChar(91), this.print(node.property, node), this.tokenChar(93)) : (this.tokenChar(46), this.print(node.property, node));
        }, exports3.MetaProperty = function(node) {
          this.print(node.meta, node), this.tokenChar(46), this.print(node.property, node);
        }, exports3.ModuleExpression = function(node) {
          this.word("module", true), this.space(), this.tokenChar(123), this.indent();
          const { body } = node;
          (body.body.length || body.directives.length) && this.newline();
          this.print(body, node), this.dedent(), this.rightBrace(node);
        }, exports3.NewExpression = function(node, parent) {
          if (this.word("new"), this.space(), this.print(node.callee, node), this.format.minified && 0 === node.arguments.length && !node.optional && !isCallExpression(parent, { callee: node }) && !isMemberExpression(parent) && !isNewExpression(parent)) return;
          this.print(node.typeArguments, node), this.print(node.typeParameters, node), node.optional && this.token("?.");
          this.tokenChar(40), this.printList(node.arguments, node), this.rightParens(node);
        }, exports3.OptionalCallExpression = function(node) {
          this.print(node.callee, node), this.print(node.typeParameters, node), node.optional && this.token("?.");
          this.print(node.typeArguments, node), this.tokenChar(40), this.printList(node.arguments, node), this.rightParens(node);
        }, exports3.OptionalMemberExpression = function(node) {
          let { computed } = node;
          const { optional, property } = node;
          if (this.print(node.object, node), !computed && isMemberExpression(property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
          isLiteral(property) && "number" == typeof property.value && (computed = true);
          optional && this.token("?.");
          computed ? (this.tokenChar(91), this.print(property, node), this.tokenChar(93)) : (optional || this.tokenChar(46), this.print(property, node));
        }, exports3.ParenthesizedExpression = function(node) {
          this.tokenChar(40), this.print(node.expression, node), this.rightParens(node);
        }, exports3.PrivateName = function(node) {
          this.tokenChar(35), this.print(node.id, node);
        }, exports3.SequenceExpression = function(node) {
          this.printList(node.expressions, node);
        }, exports3.Super = function() {
          this.word("super");
        }, exports3.ThisExpression = function() {
          this.word("this");
        }, exports3.UnaryExpression = function(node) {
          const { operator } = node;
          "void" === operator || "delete" === operator || "typeof" === operator || "throw" === operator ? (this.word(operator), this.space()) : this.token(operator);
          this.print(node.argument, node);
        }, exports3.UpdateExpression = function(node) {
          node.prefix ? (this.token(node.operator), this.print(node.argument, node)) : (this.printTerminatorless(node.argument, node, true), this.token(node.operator));
        }, exports3.V8IntrinsicIdentifier = function(node) {
          this.tokenChar(37), this.word(node.name);
        }, exports3.YieldExpression = function(node) {
          this.word("yield", true), node.delegate ? (this.tokenChar(42), node.argument && (this.space(), this.print(node.argument, node))) : node.argument && (this.space(), this.printTerminatorless(node.argument, node, false));
        }, exports3._shouldPrintDecoratorsBeforeExport = function(node) {
          if ("boolean" == typeof this.format.decoratorsBeforeExport) return this.format.decoratorsBeforeExport;
          return "number" == typeof node.start && node.start === node.declaration.start;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), n = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/node/index.js");
        const { isCallExpression, isLiteral, isMemberExpression, isNewExpression } = _t;
        function isDecoratorMemberExpression(node) {
          switch (node.type) {
            case "Identifier":
              return true;
            case "MemberExpression":
              return !node.computed && "Identifier" === node.property.type && isDecoratorMemberExpression(node.object);
            default:
              return false;
          }
        }
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/flow.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.AnyTypeAnnotation = function() {
          this.word("any");
        }, exports3.ArrayTypeAnnotation = function(node) {
          this.print(node.elementType, node, true), this.tokenChar(91), this.tokenChar(93);
        }, exports3.BooleanLiteralTypeAnnotation = function(node) {
          this.word(node.value ? "true" : "false");
        }, exports3.BooleanTypeAnnotation = function() {
          this.word("boolean");
        }, exports3.DeclareClass = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("class"), this.space(), this._interfaceish(node);
        }, exports3.DeclareExportAllDeclaration = function(node) {
          this.word("declare"), this.space(), _modules.ExportAllDeclaration.call(this, node);
        }, exports3.DeclareExportDeclaration = function(node) {
          this.word("declare"), this.space(), this.word("export"), this.space(), node.default && (this.word("default"), this.space());
          FlowExportDeclaration.call(this, node);
        }, exports3.DeclareFunction = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("function"), this.space(), this.print(node.id, node), this.print(node.id.typeAnnotation.typeAnnotation, node), node.predicate && (this.space(), this.print(node.predicate, node));
          this.semicolon();
        }, exports3.DeclareInterface = function(node) {
          this.word("declare"), this.space(), this.InterfaceDeclaration(node);
        }, exports3.DeclareModule = function(node) {
          this.word("declare"), this.space(), this.word("module"), this.space(), this.print(node.id, node), this.space(), this.print(node.body, node);
        }, exports3.DeclareModuleExports = function(node) {
          this.word("declare"), this.space(), this.word("module"), this.tokenChar(46), this.word("exports"), this.print(node.typeAnnotation, node);
        }, exports3.DeclareOpaqueType = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.OpaqueType(node);
        }, exports3.DeclareTypeAlias = function(node) {
          this.word("declare"), this.space(), this.TypeAlias(node);
        }, exports3.DeclareVariable = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("var"), this.space(), this.print(node.id, node), this.print(node.id.typeAnnotation, node), this.semicolon();
        }, exports3.DeclaredPredicate = function(node) {
          this.tokenChar(37), this.word("checks"), this.tokenChar(40), this.print(node.value, node), this.tokenChar(41);
        }, exports3.EmptyTypeAnnotation = function() {
          this.word("empty");
        }, exports3.EnumBooleanBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "boolean", explicitType), enumBody(this, node);
        }, exports3.EnumBooleanMember = function(node) {
          enumInitializedMember(this, node);
        }, exports3.EnumDeclaration = function(node) {
          const { id, body } = node;
          this.word("enum"), this.space(), this.print(id, node), this.print(body, node);
        }, exports3.EnumDefaultedMember = function(node) {
          const { id } = node;
          this.print(id, node), this.tokenChar(44);
        }, exports3.EnumNumberBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "number", explicitType), enumBody(this, node);
        }, exports3.EnumNumberMember = function(node) {
          enumInitializedMember(this, node);
        }, exports3.EnumStringBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "string", explicitType), enumBody(this, node);
        }, exports3.EnumStringMember = function(node) {
          enumInitializedMember(this, node);
        }, exports3.EnumSymbolBody = function(node) {
          enumExplicitType(this, "symbol", true), enumBody(this, node);
        }, exports3.ExistsTypeAnnotation = function() {
          this.tokenChar(42);
        }, exports3.FunctionTypeAnnotation = function(node, parent) {
          this.print(node.typeParameters, node), this.tokenChar(40), node.this && (this.word("this"), this.tokenChar(58), this.space(), this.print(node.this.typeAnnotation, node), (node.params.length || node.rest) && (this.tokenChar(44), this.space()));
          this.printList(node.params, node), node.rest && (node.params.length && (this.tokenChar(44), this.space()), this.token("..."), this.print(node.rest, node));
          this.tokenChar(41);
          const type = null == parent ? void 0 : parent.type;
          null != type && ("ObjectTypeCallProperty" === type || "ObjectTypeInternalSlot" === type || "DeclareFunction" === type || "ObjectTypeProperty" === type && parent.method) ? this.tokenChar(58) : (this.space(), this.token("=>"));
          this.space(), this.print(node.returnType, node);
        }, exports3.FunctionTypeParam = function(node) {
          this.print(node.name, node), node.optional && this.tokenChar(63);
          node.name && (this.tokenChar(58), this.space());
          this.print(node.typeAnnotation, node);
        }, exports3.IndexedAccessType = function(node) {
          this.print(node.objectType, node, true), this.tokenChar(91), this.print(node.indexType, node), this.tokenChar(93);
        }, exports3.InferredPredicate = function() {
          this.tokenChar(37), this.word("checks");
        }, exports3.InterfaceDeclaration = function(node) {
          this.word("interface"), this.space(), this._interfaceish(node);
        }, exports3.GenericTypeAnnotation = exports3.ClassImplements = exports3.InterfaceExtends = function(node) {
          this.print(node.id, node), this.print(node.typeParameters, node, true);
        }, exports3.InterfaceTypeAnnotation = function(node) {
          var _node$extends2;
          this.word("interface"), null != (_node$extends2 = node.extends) && _node$extends2.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends, node));
          this.space(), this.print(node.body, node);
        }, exports3.IntersectionTypeAnnotation = function(node) {
          this.printJoin(node.types, node, { separator: andSeparator });
        }, exports3.MixedTypeAnnotation = function() {
          this.word("mixed");
        }, exports3.NullLiteralTypeAnnotation = function() {
          this.word("null");
        }, exports3.NullableTypeAnnotation = function(node) {
          this.tokenChar(63), this.print(node.typeAnnotation, node);
        }, Object.defineProperty(exports3, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _types2.NumericLiteral;
        } }), exports3.NumberTypeAnnotation = function() {
          this.word("number");
        }, exports3.ObjectTypeAnnotation = function(node) {
          node.exact ? this.token("{|") : this.tokenChar(123);
          const props = [...node.properties, ...node.callProperties || [], ...node.indexers || [], ...node.internalSlots || []];
          props.length && (this.newline(), this.space(), this.printJoin(props, node, { addNewlines(leading) {
            if (leading && !props[0]) return 1;
          }, indent: true, statement: true, iterator: () => {
            (1 !== props.length || node.inexact) && (this.tokenChar(44), this.space());
          } }), this.space());
          node.inexact && (this.indent(), this.token("..."), props.length && this.newline(), this.dedent());
          node.exact ? this.token("|}") : this.tokenChar(125);
        }, exports3.ObjectTypeCallProperty = function(node) {
          node.static && (this.word("static"), this.space());
          this.print(node.value, node);
        }, exports3.ObjectTypeIndexer = function(node) {
          node.static && (this.word("static"), this.space());
          this._variance(node), this.tokenChar(91), node.id && (this.print(node.id, node), this.tokenChar(58), this.space());
          this.print(node.key, node), this.tokenChar(93), this.tokenChar(58), this.space(), this.print(node.value, node);
        }, exports3.ObjectTypeInternalSlot = function(node) {
          node.static && (this.word("static"), this.space());
          this.tokenChar(91), this.tokenChar(91), this.print(node.id, node), this.tokenChar(93), this.tokenChar(93), node.optional && this.tokenChar(63);
          node.method || (this.tokenChar(58), this.space());
          this.print(node.value, node);
        }, exports3.ObjectTypeProperty = function(node) {
          node.proto && (this.word("proto"), this.space());
          node.static && (this.word("static"), this.space());
          "get" !== node.kind && "set" !== node.kind || (this.word(node.kind), this.space());
          this._variance(node), this.print(node.key, node), node.optional && this.tokenChar(63);
          node.method || (this.tokenChar(58), this.space());
          this.print(node.value, node);
        }, exports3.ObjectTypeSpreadProperty = function(node) {
          this.token("..."), this.print(node.argument, node);
        }, exports3.OpaqueType = function(node) {
          this.word("opaque"), this.space(), this.word("type"), this.space(), this.print(node.id, node), this.print(node.typeParameters, node), node.supertype && (this.tokenChar(58), this.space(), this.print(node.supertype, node));
          node.impltype && (this.space(), this.tokenChar(61), this.space(), this.print(node.impltype, node));
          this.semicolon();
        }, exports3.OptionalIndexedAccessType = function(node) {
          this.print(node.objectType, node), node.optional && this.token("?.");
          this.tokenChar(91), this.print(node.indexType, node), this.tokenChar(93);
        }, exports3.QualifiedTypeIdentifier = function(node) {
          this.print(node.qualification, node), this.tokenChar(46), this.print(node.id, node);
        }, Object.defineProperty(exports3, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _types2.StringLiteral;
        } }), exports3.StringTypeAnnotation = function() {
          this.word("string");
        }, exports3.SymbolTypeAnnotation = function() {
          this.word("symbol");
        }, exports3.ThisTypeAnnotation = function() {
          this.word("this");
        }, exports3.TupleTypeAnnotation = function(node) {
          this.tokenChar(91), this.printList(node.types, node), this.tokenChar(93);
        }, exports3.TypeAlias = function(node) {
          this.word("type"), this.space(), this.print(node.id, node), this.print(node.typeParameters, node), this.space(), this.tokenChar(61), this.space(), this.print(node.right, node), this.semicolon();
        }, exports3.TypeAnnotation = function(node) {
          this.tokenChar(58), this.space(), node.optional && this.tokenChar(63);
          this.print(node.typeAnnotation, node);
        }, exports3.TypeCastExpression = function(node) {
          this.tokenChar(40), this.print(node.expression, node), this.print(node.typeAnnotation, node), this.tokenChar(41);
        }, exports3.TypeParameter = function(node) {
          this._variance(node), this.word(node.name), node.bound && this.print(node.bound, node);
          node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default, node));
        }, exports3.TypeParameterDeclaration = exports3.TypeParameterInstantiation = function(node) {
          this.tokenChar(60), this.printList(node.params, node, {}), this.tokenChar(62);
        }, exports3.TypeofTypeAnnotation = function(node) {
          this.word("typeof"), this.space(), this.print(node.argument, node);
        }, exports3.UnionTypeAnnotation = function(node) {
          this.printJoin(node.types, node, { separator: orSeparator });
        }, exports3.Variance = function(node) {
          "plus" === node.kind ? this.tokenChar(43) : this.tokenChar(45);
        }, exports3.VoidTypeAnnotation = function() {
          this.word("void");
        }, exports3._interfaceish = function(node) {
          var _node$extends;
          this.print(node.id, node), this.print(node.typeParameters, node), null != (_node$extends = node.extends) && _node$extends.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends, node));
          if ("DeclareClass" === node.type) {
            var _node$mixins, _node$implements;
            null != (_node$mixins = node.mixins) && _node$mixins.length && (this.space(), this.word("mixins"), this.space(), this.printList(node.mixins, node)), null != (_node$implements = node.implements) && _node$implements.length && (this.space(), this.word("implements"), this.space(), this.printList(node.implements, node));
          }
          this.space(), this.print(node.body, node);
        }, exports3._variance = function(node) {
          var _node$variance;
          const kind = null == (_node$variance = node.variance) ? void 0 : _node$variance.kind;
          null != kind && ("plus" === kind ? this.tokenChar(43) : "minus" === kind && this.tokenChar(45));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/modules.js"), _types2 = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/types.js");
        const { isDeclareExportDeclaration, isStatement } = _t;
        function enumExplicitType(context, name, hasExplicitType) {
          hasExplicitType && (context.space(), context.word("of"), context.space(), context.word(name)), context.space();
        }
        function enumBody(context, node) {
          const { members } = node;
          context.token("{"), context.indent(), context.newline();
          for (const member of members) context.print(member, node), context.newline();
          node.hasUnknownMembers && (context.token("..."), context.newline()), context.dedent(), context.token("}");
        }
        function enumInitializedMember(context, node) {
          const { id, init } = node;
          context.print(id, node), context.space(), context.token("="), context.space(), context.print(init, node), context.token(",");
        }
        function FlowExportDeclaration(node) {
          if (node.declaration) {
            const declar = node.declaration;
            this.print(declar, node), isStatement(declar) || this.semicolon();
          } else this.tokenChar(123), node.specifiers.length && (this.space(), this.printList(node.specifiers, node), this.space()), this.tokenChar(125), node.source && (this.space(), this.word("from"), this.space(), this.print(node.source, node)), this.semicolon();
        }
        function andSeparator() {
          this.space(), this.tokenChar(38), this.space();
        }
        function orSeparator() {
          this.space(), this.tokenChar(124), this.space();
        }
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        var _templateLiterals = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/template-literals.js");
        Object.keys(_templateLiterals).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _templateLiterals[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _templateLiterals[key];
          } }));
        });
        var _expressions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/expressions.js");
        Object.keys(_expressions).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _expressions[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _expressions[key];
          } }));
        });
        var _statements = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/statements.js");
        Object.keys(_statements).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _statements[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _statements[key];
          } }));
        });
        var _classes = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/classes.js");
        Object.keys(_classes).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _classes[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _classes[key];
          } }));
        });
        var _methods = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/methods.js");
        Object.keys(_methods).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _methods[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _methods[key];
          } }));
        });
        var _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/modules.js");
        Object.keys(_modules).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _modules[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _modules[key];
          } }));
        });
        var _types = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/types.js");
        Object.keys(_types).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _types[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _types[key];
          } }));
        });
        var _flow = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/flow.js");
        Object.keys(_flow).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _flow[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _flow[key];
          } }));
        });
        var _base = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/base.js");
        Object.keys(_base).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _base[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _base[key];
          } }));
        });
        var _jsx = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/jsx.js");
        Object.keys(_jsx).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _jsx[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _jsx[key];
          } }));
        });
        var _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/typescript.js");
        Object.keys(_typescript).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports3 && exports3[key] === _typescript[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _typescript[key];
          } }));
        });
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/jsx.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function spaceSeparator() {
          this.space();
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.JSXAttribute = function(node) {
          this.print(node.name, node), node.value && (this.tokenChar(61), this.print(node.value, node));
        }, exports3.JSXClosingElement = function(node) {
          this.token("</"), this.print(node.name, node), this.tokenChar(62);
        }, exports3.JSXClosingFragment = function() {
          this.token("</"), this.tokenChar(62);
        }, exports3.JSXElement = function(node) {
          const open = node.openingElement;
          if (this.print(open, node), open.selfClosing) return;
          this.indent();
          for (const child of node.children) this.print(child, node);
          this.dedent(), this.print(node.closingElement, node);
        }, exports3.JSXEmptyExpression = function() {
          this.printInnerComments();
        }, exports3.JSXExpressionContainer = function(node) {
          this.tokenChar(123), this.print(node.expression, node), this.tokenChar(125);
        }, exports3.JSXFragment = function(node) {
          this.print(node.openingFragment, node), this.indent();
          for (const child of node.children) this.print(child, node);
          this.dedent(), this.print(node.closingFragment, node);
        }, exports3.JSXIdentifier = function(node) {
          this.word(node.name);
        }, exports3.JSXMemberExpression = function(node) {
          this.print(node.object, node), this.tokenChar(46), this.print(node.property, node);
        }, exports3.JSXNamespacedName = function(node) {
          this.print(node.namespace, node), this.tokenChar(58), this.print(node.name, node);
        }, exports3.JSXOpeningElement = function(node) {
          this.tokenChar(60), this.print(node.name, node), this.print(node.typeParameters, node), node.attributes.length > 0 && (this.space(), this.printJoin(node.attributes, node, { separator: spaceSeparator }));
          node.selfClosing ? (this.space(), this.token("/>")) : this.tokenChar(62);
        }, exports3.JSXOpeningFragment = function() {
          this.tokenChar(60), this.tokenChar(62);
        }, exports3.JSXSpreadAttribute = function(node) {
          this.tokenChar(123), this.token("..."), this.print(node.argument, node), this.tokenChar(125);
        }, exports3.JSXSpreadChild = function(node) {
          this.tokenChar(123), this.token("..."), this.print(node.expression, node), this.tokenChar(125);
        }, exports3.JSXText = function(node) {
          const raw = this.getPossibleRaw(node);
          void 0 !== raw ? this.token(raw, true) : this.token(node.value, true);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/methods.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ArrowFunctionExpression = function(node, parent) {
          node.async && (this.word("async", true), this.space());
          let firstParam;
          this.format.retainLines || 1 !== node.params.length || !isIdentifier(firstParam = node.params[0]) || function(node2, param) {
            var _param$leadingComment, _param$trailingCommen;
            return !!(node2.typeParameters || node2.returnType || node2.predicate || param.typeAnnotation || param.optional || null != (_param$leadingComment = param.leadingComments) && _param$leadingComment.length || null != (_param$trailingCommen = param.trailingComments) && _param$trailingCommen.length);
          }(node, firstParam) ? this._params(node, void 0, parent) : this.print(firstParam, node, true);
          this._predicate(node, true), this.space(), this.printInnerComments(), this.token("=>"), this.space(), this.print(node.body, node);
        }, exports3.FunctionDeclaration = exports3.FunctionExpression = function(node, parent) {
          this._functionHead(node, parent), this.space(), this.print(node.body, node);
        }, exports3._functionHead = function(node, parent) {
          node.async && (this.word("async"), this._endsWithInnerRaw = false, this.space());
          this.word("function"), node.generator && (this._endsWithInnerRaw = false, this.tokenChar(42));
          this.space(), node.id && this.print(node.id, node);
          this._params(node, node.id, parent), "TSDeclareFunction" !== node.type && this._predicate(node);
        }, exports3._methodHead = function(node) {
          const kind = node.kind, key = node.key;
          "get" !== kind && "set" !== kind || (this.word(kind), this.space());
          node.async && (this.word("async", true), this.space());
          "method" !== kind && "init" !== kind || node.generator && this.tokenChar(42);
          node.computed ? (this.tokenChar(91), this.print(key, node), this.tokenChar(93)) : this.print(key, node);
          node.optional && this.tokenChar(63);
          this._params(node, node.computed && "StringLiteral" !== node.key.type ? void 0 : node.key, void 0);
        }, exports3._param = function(parameter, parent) {
          this.printJoin(parameter.decorators, parameter), this.print(parameter, parent), parameter.optional && this.tokenChar(63);
          this.print(parameter.typeAnnotation, parameter);
        }, exports3._parameters = function(parameters, parent) {
          const paramLength = parameters.length;
          for (let i = 0; i < paramLength; i++) this._param(parameters[i], parent), i < parameters.length - 1 && (this.tokenChar(44), this.space());
        }, exports3._params = function(node, idNode, parentNode) {
          this.print(node.typeParameters, node);
          const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
          nameInfo && this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
          this.tokenChar(40), this._parameters(node.params, node), this.tokenChar(41);
          const noLineTerminator = "ArrowFunctionExpression" === node.type;
          this.print(node.returnType, node, noLineTerminator), this._noLineTerminator = noLineTerminator;
        }, exports3._predicate = function(node, noLineTerminatorAfter) {
          node.predicate && (node.returnType || this.tokenChar(58), this.space(), this.print(node.predicate, node, noLineTerminatorAfter));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { isIdentifier } = _t;
        function _getFuncIdName(idNode, parent) {
          let nameInfo, id = idNode;
          if (!id && parent) {
            const parentType = parent.type;
            "VariableDeclarator" === parentType ? id = parent.id : "AssignmentExpression" === parentType || "AssignmentPattern" === parentType ? id = parent.left : "ObjectProperty" === parentType || "ClassProperty" === parentType ? parent.computed && "StringLiteral" !== parent.key.type || (id = parent.key) : "ClassPrivateProperty" !== parentType && "ClassAccessorProperty" !== parentType || (id = parent.key);
          }
          if (id) {
            var _id$loc, _id$loc2;
            if ("Identifier" === id.type) nameInfo = { pos: null == (_id$loc = id.loc) ? void 0 : _id$loc.start, name: (null == (_id$loc2 = id.loc) ? void 0 : _id$loc2.identifierName) || id.name };
            else if ("PrivateName" === id.type) {
              var _id$loc3;
              nameInfo = { pos: null == (_id$loc3 = id.loc) ? void 0 : _id$loc3.start, name: "#" + id.id.name };
            } else if ("StringLiteral" === id.type) {
              var _id$loc4;
              nameInfo = { pos: null == (_id$loc4 = id.loc) ? void 0 : _id$loc4.start, name: id.value };
            }
            return nameInfo;
          }
        }
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/modules.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ExportAllDeclaration = function(node) {
          var _node$attributes, _node$assertions;
          this.word("export"), this.space(), "type" === node.exportKind && (this.word("type"), this.space());
          this.tokenChar(42), this.space(), this.word("from"), this.space(), null != (_node$attributes = node.attributes) && _node$attributes.length || null != (_node$assertions = node.assertions) && _node$assertions.length ? (this.print(node.source, node, true), this.space(), this._printAttributes(node)) : this.print(node.source, node);
          this.semicolon();
        }, exports3.ExportDefaultDeclaration = function(node) {
          maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.noIndentInnerCommentsHere(), this.space(), this.word("default"), this.space();
          const declar = node.declaration;
          this.print(declar, node), isStatement(declar) || this.semicolon();
        }, exports3.ExportDefaultSpecifier = function(node) {
          this.print(node.exported, node);
        }, exports3.ExportNamedDeclaration = function(node) {
          if (maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.space(), node.declaration) {
            const declar = node.declaration;
            this.print(declar, node), isStatement(declar) || this.semicolon();
          } else {
            "type" === node.exportKind && (this.word("type"), this.space());
            const specifiers = node.specifiers.slice(0);
            let hasSpecial = false;
            for (; ; ) {
              const first = specifiers[0];
              if (!isExportDefaultSpecifier(first) && !isExportNamespaceSpecifier(first)) break;
              hasSpecial = true, this.print(specifiers.shift(), node), specifiers.length && (this.tokenChar(44), this.space());
            }
            var _node$attributes2, _node$assertions2;
            if ((specifiers.length || !specifiers.length && !hasSpecial) && (this.tokenChar(123), specifiers.length && (this.space(), this.printList(specifiers, node), this.space()), this.tokenChar(125)), node.source) this.space(), this.word("from"), this.space(), null != (_node$attributes2 = node.attributes) && _node$attributes2.length || null != (_node$assertions2 = node.assertions) && _node$assertions2.length ? (this.print(node.source, node, true), this.space(), this._printAttributes(node)) : this.print(node.source, node);
            this.semicolon();
          }
        }, exports3.ExportNamespaceSpecifier = function(node) {
          this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.exported, node);
        }, exports3.ExportSpecifier = function(node) {
          "type" === node.exportKind && (this.word("type"), this.space());
          this.print(node.local, node), node.exported && node.local.name !== node.exported.name && (this.space(), this.word("as"), this.space(), this.print(node.exported, node));
        }, exports3.ImportAttribute = function(node) {
          this.print(node.key), this.tokenChar(58), this.space(), this.print(node.value);
        }, exports3.ImportDeclaration = function(node) {
          var _node$attributes3, _node$assertions3;
          this.word("import"), this.space();
          const isTypeKind = "type" === node.importKind || "typeof" === node.importKind;
          isTypeKind ? (this.noIndentInnerCommentsHere(), this.word(node.importKind), this.space()) : node.module ? (this.noIndentInnerCommentsHere(), this.word("module"), this.space()) : node.phase && (this.noIndentInnerCommentsHere(), this.word(node.phase), this.space());
          const specifiers = node.specifiers.slice(0), hasSpecifiers = !!specifiers.length;
          for (; hasSpecifiers; ) {
            const first = specifiers[0];
            if (!isImportDefaultSpecifier(first) && !isImportNamespaceSpecifier(first)) break;
            this.print(specifiers.shift(), node), specifiers.length && (this.tokenChar(44), this.space());
          }
          specifiers.length ? (this.tokenChar(123), this.space(), this.printList(specifiers, node), this.space(), this.tokenChar(125)) : isTypeKind && !hasSpecifiers && (this.tokenChar(123), this.tokenChar(125));
          (hasSpecifiers || isTypeKind) && (this.space(), this.word("from"), this.space());
          null != (_node$attributes3 = node.attributes) && _node$attributes3.length || null != (_node$assertions3 = node.assertions) && _node$assertions3.length ? (this.print(node.source, node, true), this.space(), this._printAttributes(node)) : this.print(node.source, node);
          this.semicolon();
        }, exports3.ImportDefaultSpecifier = function(node) {
          this.print(node.local, node);
        }, exports3.ImportExpression = function(node) {
          this.word("import"), node.phase && (this.tokenChar(46), this.word(node.phase));
          this.tokenChar(40), this.print(node.source, node), null != node.options && (this.tokenChar(44), this.space(), this.print(node.options, node));
          this.tokenChar(41);
        }, exports3.ImportNamespaceSpecifier = function(node) {
          this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.local, node);
        }, exports3.ImportSpecifier = function(node) {
          "type" !== node.importKind && "typeof" !== node.importKind || (this.word(node.importKind), this.space());
          this.print(node.imported, node), node.local && node.local.name !== node.imported.name && (this.space(), this.word("as"), this.space(), this.print(node.local, node));
        }, exports3._printAttributes = function(node) {
          const { importAttributesKeyword } = this.format, { attributes, assertions } = node;
          !attributes || importAttributesKeyword || warningShown || (warningShown = true, console.warn('You are using import attributes, without specifying the desired output syntax.\nPlease specify the "importAttributesKeyword" generator option, whose value can be one of:\n - "with"        : `import { a } from "b" with { type: "json" };`\n - "assert"      : `import { a } from "b" assert { type: "json" };`\n - "with-legacy" : `import { a } from "b" with type: "json";`\n'));
          const useAssertKeyword = "assert" === importAttributesKeyword || !importAttributesKeyword && assertions;
          if (this.word(useAssertKeyword ? "assert" : "with"), this.space(), !useAssertKeyword && "with" !== importAttributesKeyword) return void this.printList(attributes || assertions, node);
          this.tokenChar(123), this.space(), this.printList(attributes || assertions, node), this.space(), this.tokenChar(125);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { isClassDeclaration, isExportDefaultSpecifier, isExportNamespaceSpecifier, isImportDefaultSpecifier, isImportNamespaceSpecifier, isStatement } = _t;
        let warningShown = false;
        function maybePrintDecoratorsBeforeExport(printer, node) {
          isClassDeclaration(node.declaration) && printer._shouldPrintDecoratorsBeforeExport(node) && printer.printJoin(node.declaration.decorators, node);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/statements.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.BreakStatement = function(node) {
          this.word("break"), printStatementAfterKeyword(this, node.label, node, true);
        }, exports3.CatchClause = function(node) {
          this.word("catch"), this.space(), node.param && (this.tokenChar(40), this.print(node.param, node), this.print(node.param.typeAnnotation, node), this.tokenChar(41), this.space());
          this.print(node.body, node);
        }, exports3.ContinueStatement = function(node) {
          this.word("continue"), printStatementAfterKeyword(this, node.label, node, true);
        }, exports3.DebuggerStatement = function() {
          this.word("debugger"), this.semicolon();
        }, exports3.DoWhileStatement = function(node) {
          this.word("do"), this.space(), this.print(node.body, node), this.space(), this.word("while"), this.space(), this.tokenChar(40), this.print(node.test, node), this.tokenChar(41), this.semicolon();
        }, exports3.ForOfStatement = exports3.ForInStatement = void 0, exports3.ForStatement = function(node) {
          this.word("for"), this.space(), this.tokenChar(40), this.inForStatementInitCounter++, this.print(node.init, node), this.inForStatementInitCounter--, this.tokenChar(59), node.test && (this.space(), this.print(node.test, node));
          this.tokenChar(59), node.update && (this.space(), this.print(node.update, node));
          this.tokenChar(41), this.printBlock(node);
        }, exports3.IfStatement = function(node) {
          this.word("if"), this.space(), this.tokenChar(40), this.print(node.test, node), this.tokenChar(41), this.space();
          const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));
          needsBlock && (this.tokenChar(123), this.newline(), this.indent());
          this.printAndIndentOnComments(node.consequent, node), needsBlock && (this.dedent(), this.newline(), this.tokenChar(125));
          node.alternate && (this.endsWith(125) && this.space(), this.word("else"), this.space(), this.printAndIndentOnComments(node.alternate, node));
        }, exports3.LabeledStatement = function(node) {
          this.print(node.label, node), this.tokenChar(58), this.space(), this.print(node.body, node);
        }, exports3.ReturnStatement = function(node) {
          this.word("return"), printStatementAfterKeyword(this, node.argument, node, false);
        }, exports3.SwitchCase = function(node) {
          node.test ? (this.word("case"), this.space(), this.print(node.test, node), this.tokenChar(58)) : (this.word("default"), this.tokenChar(58));
          node.consequent.length && (this.newline(), this.printSequence(node.consequent, node, { indent: true }));
        }, exports3.SwitchStatement = function(node) {
          this.word("switch"), this.space(), this.tokenChar(40), this.print(node.discriminant, node), this.tokenChar(41), this.space(), this.tokenChar(123), this.printSequence(node.cases, node, { indent: true, addNewlines(leading, cas) {
            if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
          } }), this.rightBrace(node);
        }, exports3.ThrowStatement = function(node) {
          this.word("throw"), printStatementAfterKeyword(this, node.argument, node, false);
        }, exports3.TryStatement = function(node) {
          this.word("try"), this.space(), this.print(node.block, node), this.space(), node.handlers ? this.print(node.handlers[0], node) : this.print(node.handler, node);
          node.finalizer && (this.space(), this.word("finally"), this.space(), this.print(node.finalizer, node));
        }, exports3.VariableDeclaration = function(node, parent) {
          node.declare && (this.word("declare"), this.space());
          const { kind } = node;
          this.word(kind, "using" === kind || "await using" === kind), this.space();
          let hasInits = false;
          if (!isFor(parent)) for (const declar of node.declarations) declar.init && (hasInits = true);
          if (this.printList(node.declarations, node, { separator: hasInits ? function() {
            this.tokenChar(44), this.newline();
          } : void 0, indent: node.declarations.length > 1 }), isFor(parent)) {
            if (isForStatement(parent)) {
              if (parent.init === node) return;
            } else if (parent.left === node) return;
          }
          this.semicolon();
        }, exports3.VariableDeclarator = function(node) {
          this.print(node.id, node), node.definite && this.tokenChar(33);
          this.print(node.id.typeAnnotation, node), node.init && (this.space(), this.tokenChar(61), this.space(), this.print(node.init, node));
        }, exports3.WhileStatement = function(node) {
          this.word("while"), this.space(), this.tokenChar(40), this.print(node.test, node), this.tokenChar(41), this.printBlock(node);
        }, exports3.WithStatement = function(node) {
          this.word("with"), this.space(), this.tokenChar(40), this.print(node.object, node), this.tokenChar(41), this.printBlock(node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { isFor, isForStatement, isIfStatement, isStatement } = _t;
        function getLastStatement(statement) {
          const { body } = statement;
          return false === isStatement(body) ? statement : getLastStatement(body);
        }
        function ForXStatement(node) {
          this.word("for"), this.space();
          const isForOf = "ForOfStatement" === node.type;
          isForOf && node.await && (this.word("await"), this.space()), this.noIndentInnerCommentsHere(), this.tokenChar(40), this.print(node.left, node), this.space(), this.word(isForOf ? "of" : "in"), this.space(), this.print(node.right, node), this.tokenChar(41), this.printBlock(node);
        }
        const ForInStatement = ForXStatement;
        exports3.ForInStatement = ForInStatement;
        const ForOfStatement = ForXStatement;
        function printStatementAfterKeyword(printer, node, parent, isLabel) {
          node && (printer.space(), printer.printTerminatorless(node, parent, isLabel)), printer.semicolon();
        }
        exports3.ForOfStatement = ForOfStatement;
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/template-literals.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.TaggedTemplateExpression = function(node) {
          this.print(node.tag, node), this.print(node.typeParameters, node), this.print(node.quasi, node);
        }, exports3.TemplateElement = function(node, parent) {
          const isFirst = parent.quasis[0] === node, isLast = parent.quasis[parent.quasis.length - 1] === node, value2 = (isFirst ? "`" : "}") + node.value.raw + (isLast ? "`" : "${");
          this.token(value2, true);
        }, exports3.TemplateLiteral = function(node) {
          const quasis = node.quasis;
          for (let i = 0; i < quasis.length; i++) this.print(quasis[i], node), i + 1 < quasis.length && this.print(node.expressions[i], node);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/types.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ArgumentPlaceholder = function() {
          this.tokenChar(63);
        }, exports3.ArrayPattern = exports3.ArrayExpression = function(node) {
          const elems = node.elements, len = elems.length;
          this.tokenChar(91);
          for (let i = 0; i < elems.length; i++) {
            const elem = elems[i];
            elem ? (i > 0 && this.space(), this.print(elem, node), i < len - 1 && this.tokenChar(44)) : this.tokenChar(44);
          }
          this.tokenChar(93);
        }, exports3.BigIntLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw) return void this.word(raw);
          this.word(node.value + "n");
        }, exports3.BooleanLiteral = function(node) {
          this.word(node.value ? "true" : "false");
        }, exports3.DecimalLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw) return void this.word(raw);
          this.word(node.value + "m");
        }, exports3.Identifier = function(node) {
          var _node$loc;
          this.sourceIdentifierName((null == (_node$loc = node.loc) ? void 0 : _node$loc.identifierName) || node.name), this.word(node.name);
        }, exports3.NullLiteral = function() {
          this.word("null");
        }, exports3.NumericLiteral = function(node) {
          const raw = this.getPossibleRaw(node), opts = this.format.jsescOption, value2 = node.value + "";
          opts.numbers ? this.number(_jsesc(node.value, opts)) : null == raw ? this.number(value2) : this.format.minified ? this.number(raw.length < value2.length ? raw : value2) : this.number(raw);
        }, exports3.ObjectPattern = exports3.ObjectExpression = function(node) {
          const props = node.properties;
          this.tokenChar(123), props.length && (this.space(), this.printList(props, node, { indent: true, statement: true }), this.space());
          this.sourceWithOffset("end", node.loc, -1), this.tokenChar(125);
        }, exports3.ObjectMethod = function(node) {
          this.printJoin(node.decorators, node), this._methodHead(node), this.space(), this.print(node.body, node);
        }, exports3.ObjectProperty = function(node) {
          if (this.printJoin(node.decorators, node), node.computed) this.tokenChar(91), this.print(node.key, node), this.tokenChar(93);
          else {
            if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name) return void this.print(node.value, node);
            if (this.print(node.key, node), node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name) return;
          }
          this.tokenChar(58), this.space(), this.print(node.value, node);
        }, exports3.PipelineBareFunction = function(node) {
          this.print(node.callee, node);
        }, exports3.PipelinePrimaryTopicReference = function() {
          this.tokenChar(35);
        }, exports3.PipelineTopicExpression = function(node) {
          this.print(node.expression, node);
        }, exports3.RecordExpression = function(node) {
          const props = node.properties;
          let startToken, endToken;
          if ("bar" === this.format.recordAndTupleSyntaxType) startToken = "{|", endToken = "|}";
          else {
            if ("hash" !== this.format.recordAndTupleSyntaxType && null != this.format.recordAndTupleSyntaxType) throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
            startToken = "#{", endToken = "}";
          }
          this.token(startToken), props.length && (this.space(), this.printList(props, node, { indent: true, statement: true }), this.space());
          this.token(endToken);
        }, exports3.RegExpLiteral = function(node) {
          this.word(`/${node.pattern}/${node.flags}`);
        }, exports3.SpreadElement = exports3.RestElement = function(node) {
          this.token("..."), this.print(node.argument, node);
        }, exports3.StringLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw) return void this.token(raw);
          const val = _jsesc(node.value, this.format.jsescOption);
          this.token(val);
        }, exports3.TopicReference = function() {
          const { topicToken } = this.format;
          if (!validTopicTokenSet.has(topicToken)) {
            const givenTopicTokenJSON = JSON.stringify(topicToken), validTopics = Array.from(validTopicTokenSet, (v) => JSON.stringify(v));
            throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
          }
          this.token(topicToken);
        }, exports3.TupleExpression = function(node) {
          const elems = node.elements, len = elems.length;
          let startToken, endToken;
          if ("bar" === this.format.recordAndTupleSyntaxType) startToken = "[|", endToken = "|]";
          else {
            if ("hash" !== this.format.recordAndTupleSyntaxType) throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
            startToken = "#[", endToken = "]";
          }
          this.token(startToken);
          for (let i = 0; i < elems.length; i++) {
            const elem = elems[i];
            elem && (i > 0 && this.space(), this.print(elem, node), i < len - 1 && this.tokenChar(44));
          }
          this.token(endToken);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _jsesc = __webpack_require__2("./node_modules/.pnpm/jsesc@2.5.2/node_modules/jsesc/jsesc.js");
        const { isAssignmentPattern, isIdentifier } = _t;
        const validTopicTokenSet = /* @__PURE__ */ new Set(["^^", "@@", "^", "%", "#"]);
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/typescript.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function tsPrintBraced(printer, members, node) {
          if (printer.token("{"), members.length) {
            printer.indent(), printer.newline();
            for (const member of members) printer.print(member, node), printer.newline();
            printer.dedent();
          }
          printer.rightBrace(node);
        }
        function tsPrintUnionOrIntersectionType(printer, node, sep) {
          printer.printJoin(node.types, node, { separator() {
            this.space(), this.token(sep), this.space();
          } });
        }
        function tokenIfPlusMinus(self2, tok) {
          true !== tok && self2.token(tok);
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.TSAnyKeyword = function() {
          this.word("any");
        }, exports3.TSArrayType = function(node) {
          this.print(node.elementType, node, true), this.token("[]");
        }, exports3.TSSatisfiesExpression = exports3.TSAsExpression = function(node) {
          var _expression$trailingC;
          const { type, expression, typeAnnotation } = node, forceParens = !(null == (_expression$trailingC = expression.trailingComments) || !_expression$trailingC.length);
          this.print(expression, node, true, void 0, forceParens), this.space(), this.word("TSAsExpression" === type ? "as" : "satisfies"), this.space(), this.print(typeAnnotation, node);
        }, exports3.TSBigIntKeyword = function() {
          this.word("bigint");
        }, exports3.TSBooleanKeyword = function() {
          this.word("boolean");
        }, exports3.TSCallSignatureDeclaration = function(node) {
          this.tsPrintSignatureDeclarationBase(node), this.tokenChar(59);
        }, exports3.TSConditionalType = function(node) {
          this.print(node.checkType), this.space(), this.word("extends"), this.space(), this.print(node.extendsType), this.space(), this.tokenChar(63), this.space(), this.print(node.trueType), this.space(), this.tokenChar(58), this.space(), this.print(node.falseType);
        }, exports3.TSConstructSignatureDeclaration = function(node) {
          this.word("new"), this.space(), this.tsPrintSignatureDeclarationBase(node), this.tokenChar(59);
        }, exports3.TSConstructorType = function(node) {
          node.abstract && (this.word("abstract"), this.space());
          this.word("new"), this.space(), this.tsPrintFunctionOrConstructorType(node);
        }, exports3.TSDeclareFunction = function(node, parent) {
          node.declare && (this.word("declare"), this.space());
          this._functionHead(node, parent), this.tokenChar(59);
        }, exports3.TSDeclareMethod = function(node) {
          this._classMethodHead(node), this.tokenChar(59);
        }, exports3.TSEnumDeclaration = function(node) {
          const { declare, const: isConst, id, members } = node;
          declare && (this.word("declare"), this.space());
          isConst && (this.word("const"), this.space());
          this.word("enum"), this.space(), this.print(id, node), this.space(), tsPrintBraced(this, members, node);
        }, exports3.TSEnumMember = function(node) {
          const { id, initializer } = node;
          this.print(id, node), initializer && (this.space(), this.tokenChar(61), this.space(), this.print(initializer, node));
          this.tokenChar(44);
        }, exports3.TSExportAssignment = function(node) {
          this.word("export"), this.space(), this.tokenChar(61), this.space(), this.print(node.expression, node), this.tokenChar(59);
        }, exports3.TSExpressionWithTypeArguments = function(node) {
          this.print(node.expression, node), this.print(node.typeParameters, node);
        }, exports3.TSExternalModuleReference = function(node) {
          this.token("require("), this.print(node.expression, node), this.tokenChar(41);
        }, exports3.TSFunctionType = function(node) {
          this.tsPrintFunctionOrConstructorType(node);
        }, exports3.TSImportEqualsDeclaration = function(node) {
          const { isExport, id, moduleReference } = node;
          isExport && (this.word("export"), this.space());
          this.word("import"), this.space(), this.print(id, node), this.space(), this.tokenChar(61), this.space(), this.print(moduleReference, node), this.tokenChar(59);
        }, exports3.TSImportType = function(node) {
          const { argument, qualifier, typeParameters } = node;
          this.word("import"), this.tokenChar(40), this.print(argument, node), this.tokenChar(41), qualifier && (this.tokenChar(46), this.print(qualifier, node));
          typeParameters && this.print(typeParameters, node);
        }, exports3.TSIndexSignature = function(node) {
          const { readonly, static: isStatic } = node;
          isStatic && (this.word("static"), this.space());
          readonly && (this.word("readonly"), this.space());
          this.tokenChar(91), this._parameters(node.parameters, node), this.tokenChar(93), this.print(node.typeAnnotation, node), this.tokenChar(59);
        }, exports3.TSIndexedAccessType = function(node) {
          this.print(node.objectType, node, true), this.tokenChar(91), this.print(node.indexType, node), this.tokenChar(93);
        }, exports3.TSInferType = function(node) {
          this.token("infer"), this.space(), this.print(node.typeParameter);
        }, exports3.TSInstantiationExpression = function(node) {
          this.print(node.expression, node), this.print(node.typeParameters, node);
        }, exports3.TSInterfaceBody = function(node) {
          this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
        }, exports3.TSInterfaceDeclaration = function(node) {
          const { declare, id, typeParameters, extends: extendz, body } = node;
          declare && (this.word("declare"), this.space());
          this.word("interface"), this.space(), this.print(id, node), this.print(typeParameters, node), null != extendz && extendz.length && (this.space(), this.word("extends"), this.space(), this.printList(extendz, node));
          this.space(), this.print(body, node);
        }, exports3.TSIntersectionType = function(node) {
          tsPrintUnionOrIntersectionType(this, node, "&");
        }, exports3.TSIntrinsicKeyword = function() {
          this.word("intrinsic");
        }, exports3.TSLiteralType = function(node) {
          this.print(node.literal, node);
        }, exports3.TSMappedType = function(node) {
          const { nameType, optional, readonly, typeParameter } = node;
          this.tokenChar(123), this.space(), readonly && (tokenIfPlusMinus(this, readonly), this.word("readonly"), this.space());
          this.tokenChar(91), this.word(typeParameter.name), this.space(), this.word("in"), this.space(), this.print(typeParameter.constraint, typeParameter), nameType && (this.space(), this.word("as"), this.space(), this.print(nameType, node));
          this.tokenChar(93), optional && (tokenIfPlusMinus(this, optional), this.tokenChar(63));
          this.tokenChar(58), this.space(), this.print(node.typeAnnotation, node), this.space(), this.tokenChar(125);
        }, exports3.TSMethodSignature = function(node) {
          const { kind } = node;
          "set" !== kind && "get" !== kind || (this.word(kind), this.space());
          this.tsPrintPropertyOrMethodName(node), this.tsPrintSignatureDeclarationBase(node), this.tokenChar(59);
        }, exports3.TSModuleBlock = function(node) {
          tsPrintBraced(this, node.body, node);
        }, exports3.TSModuleDeclaration = function(node) {
          const { declare, id } = node;
          declare && (this.word("declare"), this.space());
          node.global || (this.word("Identifier" === id.type ? "namespace" : "module"), this.space());
          if (this.print(id, node), !node.body) return void this.tokenChar(59);
          let body = node.body;
          for (; "TSModuleDeclaration" === body.type; ) this.tokenChar(46), this.print(body.id, body), body = body.body;
          this.space(), this.print(body, node);
        }, exports3.TSNamedTupleMember = function(node) {
          this.print(node.label, node), node.optional && this.tokenChar(63);
          this.tokenChar(58), this.space(), this.print(node.elementType, node);
        }, exports3.TSNamespaceExportDeclaration = function(node) {
          this.word("export"), this.space(), this.word("as"), this.space(), this.word("namespace"), this.space(), this.print(node.id, node);
        }, exports3.TSNeverKeyword = function() {
          this.word("never");
        }, exports3.TSNonNullExpression = function(node) {
          this.print(node.expression, node), this.tokenChar(33);
        }, exports3.TSNullKeyword = function() {
          this.word("null");
        }, exports3.TSNumberKeyword = function() {
          this.word("number");
        }, exports3.TSObjectKeyword = function() {
          this.word("object");
        }, exports3.TSOptionalType = function(node) {
          this.print(node.typeAnnotation, node), this.tokenChar(63);
        }, exports3.TSParameterProperty = function(node) {
          node.accessibility && (this.word(node.accessibility), this.space());
          node.readonly && (this.word("readonly"), this.space());
          this._param(node.parameter);
        }, exports3.TSParenthesizedType = function(node) {
          this.tokenChar(40), this.print(node.typeAnnotation, node), this.tokenChar(41);
        }, exports3.TSPropertySignature = function(node) {
          const { readonly, initializer } = node;
          readonly && (this.word("readonly"), this.space());
          this.tsPrintPropertyOrMethodName(node), this.print(node.typeAnnotation, node), initializer && (this.space(), this.tokenChar(61), this.space(), this.print(initializer, node));
          this.tokenChar(59);
        }, exports3.TSQualifiedName = function(node) {
          this.print(node.left, node), this.tokenChar(46), this.print(node.right, node);
        }, exports3.TSRestType = function(node) {
          this.token("..."), this.print(node.typeAnnotation, node);
        }, exports3.TSStringKeyword = function() {
          this.word("string");
        }, exports3.TSSymbolKeyword = function() {
          this.word("symbol");
        }, exports3.TSThisType = function() {
          this.word("this");
        }, exports3.TSTupleType = function(node) {
          this.tokenChar(91), this.printList(node.elementTypes, node), this.tokenChar(93);
        }, exports3.TSTypeAliasDeclaration = function(node) {
          const { declare, id, typeParameters, typeAnnotation } = node;
          declare && (this.word("declare"), this.space());
          this.word("type"), this.space(), this.print(id, node), this.print(typeParameters, node), this.space(), this.tokenChar(61), this.space(), this.print(typeAnnotation, node), this.tokenChar(59);
        }, exports3.TSTypeAnnotation = function(node) {
          this.tokenChar(58), this.space(), node.optional && this.tokenChar(63);
          this.print(node.typeAnnotation, node);
        }, exports3.TSTypeAssertion = function(node) {
          const { typeAnnotation, expression } = node;
          this.tokenChar(60), this.print(typeAnnotation, node), this.tokenChar(62), this.space(), this.print(expression, node);
        }, exports3.TSTypeLiteral = function(node) {
          this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
        }, exports3.TSTypeOperator = function(node) {
          this.word(node.operator), this.space(), this.print(node.typeAnnotation, node);
        }, exports3.TSTypeParameter = function(node) {
          node.in && (this.word("in"), this.space());
          node.out && (this.word("out"), this.space());
          this.word(node.name), node.constraint && (this.space(), this.word("extends"), this.space(), this.print(node.constraint, node));
          node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default, node));
        }, exports3.TSTypeParameterDeclaration = exports3.TSTypeParameterInstantiation = function(node, parent) {
          this.tokenChar(60), this.printList(node.params, node, {}), "ArrowFunctionExpression" === parent.type && 1 === node.params.length && this.tokenChar(44);
          this.tokenChar(62);
        }, exports3.TSTypePredicate = function(node) {
          node.asserts && (this.word("asserts"), this.space());
          this.print(node.parameterName), node.typeAnnotation && (this.space(), this.word("is"), this.space(), this.print(node.typeAnnotation.typeAnnotation));
        }, exports3.TSTypeQuery = function(node) {
          this.word("typeof"), this.space(), this.print(node.exprName), node.typeParameters && this.print(node.typeParameters, node);
        }, exports3.TSTypeReference = function(node) {
          this.print(node.typeName, node, true), this.print(node.typeParameters, node, true);
        }, exports3.TSUndefinedKeyword = function() {
          this.word("undefined");
        }, exports3.TSUnionType = function(node) {
          tsPrintUnionOrIntersectionType(this, node, "|");
        }, exports3.TSUnknownKeyword = function() {
          this.word("unknown");
        }, exports3.TSVoidKeyword = function() {
          this.word("void");
        }, exports3.tsPrintClassMemberModifiers = function(node) {
          const isField = "ClassAccessorProperty" === node.type || "ClassProperty" === node.type;
          isField && node.declare && (this.word("declare"), this.space());
          node.accessibility && (this.word(node.accessibility), this.space());
          node.static && (this.word("static"), this.space());
          node.override && (this.word("override"), this.space());
          node.abstract && (this.word("abstract"), this.space());
          isField && node.readonly && (this.word("readonly"), this.space());
        }, exports3.tsPrintFunctionOrConstructorType = function(node) {
          const { typeParameters } = node, parameters = node.parameters;
          this.print(typeParameters, node), this.tokenChar(40), this._parameters(parameters, node), this.tokenChar(41), this.space(), this.token("=>"), this.space();
          const returnType = node.typeAnnotation;
          this.print(returnType.typeAnnotation, node);
        }, exports3.tsPrintPropertyOrMethodName = function(node) {
          node.computed && this.tokenChar(91);
          this.print(node.key, node), node.computed && this.tokenChar(93);
          node.optional && this.tokenChar(63);
        }, exports3.tsPrintSignatureDeclarationBase = function(node) {
          const { typeParameters } = node, parameters = node.parameters;
          this.print(typeParameters, node), this.tokenChar(40), this._parameters(parameters, node), this.tokenChar(41);
          const returnType = node.typeAnnotation;
          this.print(returnType, node);
        }, exports3.tsPrintTypeLiteralOrInterfaceBody = function(members, node) {
          tsPrintBraced(this, members, node);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.CodeGenerator = void 0, exports3.default = function(ast, opts, code) {
          return new Generator(ast, opts, code).generate();
        };
        var _sourceMap = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/source-map.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/printer.js");
        class Generator extends _printer.default {
          constructor(ast, opts = {}, code) {
            const format = function(code2, opts2) {
              var _opts$recordAndTupleS;
              const format2 = { auxiliaryCommentBefore: opts2.auxiliaryCommentBefore, auxiliaryCommentAfter: opts2.auxiliaryCommentAfter, shouldPrintComment: opts2.shouldPrintComment, retainLines: opts2.retainLines, retainFunctionParens: opts2.retainFunctionParens, comments: null == opts2.comments || opts2.comments, compact: opts2.compact, minified: opts2.minified, concise: opts2.concise, indent: { adjustMultilineComment: true, style: "  " }, jsescOption: Object.assign({ quotes: "double", wrap: true, minimal: false }, opts2.jsescOption), recordAndTupleSyntaxType: null != (_opts$recordAndTupleS = opts2.recordAndTupleSyntaxType) ? _opts$recordAndTupleS : "hash", topicToken: opts2.topicToken, importAttributesKeyword: opts2.importAttributesKeyword };
              format2.decoratorsBeforeExport = opts2.decoratorsBeforeExport, format2.jsescOption.json = opts2.jsonCompatibleStrings, format2.minified ? (format2.compact = true, format2.shouldPrintComment = format2.shouldPrintComment || (() => format2.comments)) : format2.shouldPrintComment = format2.shouldPrintComment || ((value2) => format2.comments || value2.includes("@license") || value2.includes("@preserve"));
              "auto" === format2.compact && (format2.compact = "string" == typeof code2 && code2.length > 5e5, format2.compact && console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts2.filename} as it exceeds the max of 500KB.`));
              format2.compact && (format2.indent.adjustMultilineComment = false);
              const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } = format2;
              auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore) && (format2.auxiliaryCommentBefore = void 0);
              auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter) && (format2.auxiliaryCommentAfter = void 0);
              return format2;
            }(code, opts);
            super(format, opts.sourceMaps ? new _sourceMap.default(opts, code) : null), this.ast = void 0, this.ast = ast;
          }
          generate() {
            return super.generate(this.ast);
          }
        }
        exports3.CodeGenerator = class {
          constructor(ast, opts, code) {
            this._generator = void 0, this._generator = new Generator(ast, opts, code);
          }
          generate() {
            return this._generator.generate();
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/node/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.needsParens = function(node, parent, printStack) {
          if (!parent) return false;
          if (isNewExpression(parent) && parent.callee === node && isOrHasCallExpression(node)) return true;
          return find(expandedParens, node, parent, printStack);
        }, exports3.needsWhitespace = needsWhitespace, exports3.needsWhitespaceAfter = function(node, parent) {
          return needsWhitespace(node, parent, 2);
        }, exports3.needsWhitespaceBefore = function(node, parent) {
          return needsWhitespace(node, parent, 1);
        };
        var whitespace = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/node/whitespace.js"), parens = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/node/parentheses.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { FLIPPED_ALIAS_KEYS, isCallExpression, isExpressionStatement, isMemberExpression, isNewExpression } = _t;
        function expandAliases(obj) {
          const newObj = {};
          function add(type, func) {
            const fn = newObj[type];
            newObj[type] = fn ? function(node, parent, stack) {
              const result = fn(node, parent, stack);
              return null == result ? func(node, parent, stack) : result;
            } : func;
          }
          for (const type of Object.keys(obj)) {
            const aliases2 = FLIPPED_ALIAS_KEYS[type];
            if (aliases2) for (const alias of aliases2) add(alias, obj[type]);
            else add(type, obj[type]);
          }
          return newObj;
        }
        const expandedParens = expandAliases(parens), expandedWhitespaceNodes = expandAliases(whitespace.nodes);
        function find(obj, node, parent, printStack) {
          const fn = obj[node.type];
          return fn ? fn(node, parent, printStack) : null;
        }
        function isOrHasCallExpression(node) {
          return !!isCallExpression(node) || isMemberExpression(node) && isOrHasCallExpression(node.object);
        }
        function needsWhitespace(node, parent, type) {
          if (!node) return false;
          isExpressionStatement(node) && (node = node.expression);
          const flag = find(expandedWhitespaceNodes, node, parent);
          return "number" == typeof flag && 0 != (flag & type);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/node/parentheses.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ArrowFunctionExpression = function(node, parent) {
          return isExportDeclaration(parent) || ConditionalExpression(node, parent);
        }, exports3.AssignmentExpression = function(node, parent) {
          return !!isObjectPattern(node.left) || ConditionalExpression(node, parent);
        }, exports3.Binary = function(node, parent) {
          if ("**" === node.operator && isBinaryExpression(parent, { operator: "**" })) return parent.left === node;
          if (isClassExtendsClause(node, parent)) return true;
          if (hasPostfixPart(node, parent) || isUnaryLike(parent) || isAwaitExpression(parent)) return true;
          if (isBinary(parent)) {
            const parentOp = parent.operator, parentPos = PRECEDENCE[parentOp], nodeOp = node.operator, nodePos = PRECEDENCE[nodeOp];
            if (parentPos === nodePos && parent.right === node && !isLogicalExpression(parent) || parentPos > nodePos) return true;
          }
        }, exports3.BinaryExpression = function(node, parent) {
          return "in" === node.operator && (isVariableDeclarator(parent) || isFor(parent));
        }, exports3.ClassExpression = function(node, parent, printStack) {
          return isFirstInContext(printStack, 5);
        }, exports3.ConditionalExpression = ConditionalExpression, exports3.DoExpression = function(node, parent, printStack) {
          return !node.async && isFirstInContext(printStack, 1);
        }, exports3.FunctionExpression = function(node, parent, printStack) {
          return isFirstInContext(printStack, 5);
        }, exports3.FunctionTypeAnnotation = function(node, parent, printStack) {
          if (printStack.length < 3) return;
          return isUnionTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isArrayTypeAnnotation(parent) || isTypeAnnotation(parent) && isArrowFunctionExpression(printStack[printStack.length - 3]);
        }, exports3.Identifier = function(node, parent, printStack) {
          var _node$extra;
          if (null != (_node$extra = node.extra) && _node$extra.parenthesized && isAssignmentExpression(parent, { left: node }) && (isFunctionExpression(parent.right) || isClassExpression(parent.right)) && null == parent.right.id) return true;
          if ("let" === node.name) {
            return isFirstInContext(printStack, isMemberExpression(parent, { object: node, computed: true }) || isOptionalMemberExpression(parent, { object: node, computed: true, optional: false }) ? 57 : 32);
          }
          return "async" === node.name && isForOfStatement(parent) && node === parent.left;
        }, exports3.LogicalExpression = function(node, parent) {
          if (isTSTypeExpression(parent)) return true;
          switch (node.operator) {
            case "||":
              return !!isLogicalExpression(parent) && ("??" === parent.operator || "&&" === parent.operator);
            case "&&":
              return isLogicalExpression(parent, { operator: "??" });
            case "??":
              return isLogicalExpression(parent) && "??" !== parent.operator;
          }
        }, exports3.NullableTypeAnnotation = function(node, parent) {
          return isArrayTypeAnnotation(parent);
        }, exports3.ObjectExpression = function(node, parent, printStack) {
          return isFirstInContext(printStack, 3);
        }, exports3.OptionalIndexedAccessType = function(node, parent) {
          return isIndexedAccessType(parent, { objectType: node });
        }, exports3.OptionalCallExpression = exports3.OptionalMemberExpression = function(node, parent) {
          return isCallExpression(parent, { callee: node }) || isMemberExpression(parent, { object: node });
        }, exports3.SequenceExpression = function(node, parent) {
          if (isForStatement(parent) || isThrowStatement(parent) || isReturnStatement(parent) || isIfStatement(parent) && parent.test === node || isWhileStatement(parent) && parent.test === node || isForInStatement(parent) && parent.right === node || isSwitchStatement(parent) && parent.discriminant === node || isExpressionStatement(parent) && parent.expression === node) return false;
          return true;
        }, exports3.TSTypeAssertion = exports3.TSSatisfiesExpression = exports3.TSAsExpression = function() {
          return true;
        }, exports3.TSInferType = function(node, parent) {
          return isTSArrayType(parent) || isTSOptionalType(parent);
        }, exports3.TSInstantiationExpression = function(node, parent) {
          return (isCallExpression(parent) || isOptionalCallExpression(parent) || isNewExpression(parent) || isTSInstantiationExpression(parent)) && !!parent.typeParameters;
        }, exports3.TSIntersectionType = exports3.TSUnionType = function(node, parent) {
          return isTSArrayType(parent) || isTSOptionalType(parent) || isTSIntersectionType(parent) || isTSUnionType(parent) || isTSRestType(parent);
        }, exports3.UnaryLike = UnaryLike, exports3.IntersectionTypeAnnotation = exports3.UnionTypeAnnotation = function(node, parent) {
          return isArrayTypeAnnotation(parent) || isNullableTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isUnionTypeAnnotation(parent);
        }, exports3.UpdateExpression = function(node, parent) {
          return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
        }, exports3.AwaitExpression = exports3.YieldExpression = function(node, parent) {
          return isBinary(parent) || isUnaryLike(parent) || hasPostfixPart(node, parent) || isAwaitExpression(parent) && isYieldExpression(node) || isConditionalExpression(parent) && node === parent.test || isClassExtendsClause(node, parent);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { isArrayTypeAnnotation, isArrowFunctionExpression, isAssignmentExpression, isAwaitExpression, isBinary, isBinaryExpression, isUpdateExpression, isCallExpression, isClass, isClassExpression, isConditional, isConditionalExpression, isExportDeclaration, isExportDefaultDeclaration, isExpressionStatement, isFor, isForInStatement, isForOfStatement, isForStatement, isFunctionExpression, isIfStatement, isIndexedAccessType, isIntersectionTypeAnnotation, isLogicalExpression, isMemberExpression, isNewExpression, isNullableTypeAnnotation, isObjectPattern, isOptionalCallExpression, isOptionalMemberExpression, isReturnStatement, isSequenceExpression, isSwitchStatement, isTSArrayType, isTSAsExpression, isTSInstantiationExpression, isTSIntersectionType, isTSNonNullExpression, isTSOptionalType, isTSRestType, isTSTypeAssertion, isTSUnionType, isTaggedTemplateExpression, isThrowStatement, isTypeAnnotation, isUnaryLike, isUnionTypeAnnotation, isVariableDeclarator, isWhileStatement, isYieldExpression, isTSSatisfiesExpression } = _t, PRECEDENCE = { "||": 0, "??": 0, "|>": 0, "&&": 1, "|": 2, "^": 3, "&": 4, "==": 5, "===": 5, "!=": 5, "!==": 5, "<": 6, ">": 6, "<=": 6, ">=": 6, in: 6, instanceof: 6, ">>": 7, "<<": 7, ">>>": 7, "+": 8, "-": 8, "*": 9, "/": 9, "%": 9, "**": 10 };
        function isTSTypeExpression(node) {
          return isTSAsExpression(node) || isTSSatisfiesExpression(node) || isTSTypeAssertion(node);
        }
        const isClassExtendsClause = (node, parent) => isClass(parent, { superClass: node }), hasPostfixPart = (node, parent) => (isMemberExpression(parent) || isOptionalMemberExpression(parent)) && parent.object === node || (isCallExpression(parent) || isOptionalCallExpression(parent) || isNewExpression(parent)) && parent.callee === node || isTaggedTemplateExpression(parent) && parent.tag === node || isTSNonNullExpression(parent);
        function UnaryLike(node, parent) {
          return hasPostfixPart(node, parent) || isBinaryExpression(parent, { operator: "**", left: node }) || isClassExtendsClause(node, parent);
        }
        function ConditionalExpression(node, parent) {
          return !!(isUnaryLike(parent) || isBinary(parent) || isConditionalExpression(parent, { test: node }) || isAwaitExpression(parent) || isTSTypeExpression(parent)) || UnaryLike(node, parent);
        }
        function isFirstInContext(printStack, checkParam) {
          const expressionStatement = 1 & checkParam, arrowBody = 2 & checkParam, exportDefault = 4 & checkParam, forHead = 8 & checkParam, forInHead = 16 & checkParam, forOfHead = 32 & checkParam;
          let i = printStack.length - 1;
          if (i <= 0) return;
          let node = printStack[i];
          i--;
          let parent = printStack[i];
          for (; i >= 0; ) {
            if (expressionStatement && isExpressionStatement(parent, { expression: node }) || exportDefault && isExportDefaultDeclaration(parent, { declaration: node }) || arrowBody && isArrowFunctionExpression(parent, { body: node }) || forHead && isForStatement(parent, { init: node }) || forInHead && isForInStatement(parent, { left: node }) || forOfHead && isForOfStatement(parent, { left: node })) return true;
            if (!(i > 0 && (hasPostfixPart(node, parent) && !isNewExpression(parent) || isSequenceExpression(parent) && parent.expressions[0] === node || isUpdateExpression(parent) && !parent.prefix || isConditional(parent, { test: node }) || isBinary(parent, { left: node }) || isAssignmentExpression(parent, { left: node })))) return false;
            node = parent, i--, parent = printStack[i];
          }
          return false;
        }
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/node/whitespace.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.nodes = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { FLIPPED_ALIAS_KEYS, isArrayExpression, isAssignmentExpression, isBinary, isBlockStatement, isCallExpression, isFunction, isIdentifier, isLiteral, isMemberExpression, isObjectExpression, isOptionalCallExpression, isOptionalMemberExpression, isStringLiteral } = _t;
        function crawlInternal(node, state) {
          return node ? (isMemberExpression(node) || isOptionalMemberExpression(node) ? (crawlInternal(node.object, state), node.computed && crawlInternal(node.property, state)) : isBinary(node) || isAssignmentExpression(node) ? (crawlInternal(node.left, state), crawlInternal(node.right, state)) : isCallExpression(node) || isOptionalCallExpression(node) ? (state.hasCall = true, crawlInternal(node.callee, state)) : isFunction(node) ? state.hasFunction = true : isIdentifier(node) && (state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee)), state) : state;
        }
        function crawl(node) {
          return crawlInternal(node, { hasCall: false, hasFunction: false, hasHelper: false });
        }
        function isHelper(node) {
          return !!node && (isMemberExpression(node) ? isHelper(node.object) || isHelper(node.property) : isIdentifier(node) ? "require" === node.name || 95 === node.name.charCodeAt(0) : isCallExpression(node) ? isHelper(node.callee) : !(!isBinary(node) && !isAssignmentExpression(node)) && (isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right)));
        }
        function isType(node) {
          return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);
        }
        const nodes = { AssignmentExpression(node) {
          const state = crawl(node.right);
          if (state.hasCall && state.hasHelper || state.hasFunction) return state.hasFunction ? 3 : 2;
        }, SwitchCase: (node, parent) => (node.consequent.length || parent.cases[0] === node ? 1 : 0) | (node.consequent.length || parent.cases[parent.cases.length - 1] !== node ? 0 : 2), LogicalExpression(node) {
          if (isFunction(node.left) || isFunction(node.right)) return 2;
        }, Literal(node) {
          if (isStringLiteral(node) && "use strict" === node.value) return 2;
        }, CallExpression(node) {
          if (isFunction(node.callee) || isHelper(node)) return 3;
        }, OptionalCallExpression(node) {
          if (isFunction(node.callee)) return 3;
        }, VariableDeclaration(node) {
          for (let i = 0; i < node.declarations.length; i++) {
            const declar = node.declarations[i];
            let enabled = isHelper(declar.id) && !isType(declar.init);
            if (!enabled && declar.init) {
              const state = crawl(declar.init);
              enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
            }
            if (enabled) return 3;
          }
        }, IfStatement(node) {
          if (isBlockStatement(node.consequent)) return 3;
        } };
        exports3.nodes = nodes, nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node, parent) {
          if (parent.properties[0] === node) return 1;
        }, nodes.ObjectTypeCallProperty = function(node, parent) {
          var _parent$properties;
          if (parent.callProperties[0] === node && (null == (_parent$properties = parent.properties) || !_parent$properties.length)) return 1;
        }, nodes.ObjectTypeIndexer = function(node, parent) {
          var _parent$properties2, _parent$callPropertie;
          if (!(parent.indexers[0] !== node || null != (_parent$properties2 = parent.properties) && _parent$properties2.length || null != (_parent$callPropertie = parent.callProperties) && _parent$callPropertie.length)) return 1;
        }, nodes.ObjectTypeInternalSlot = function(node, parent) {
          var _parent$properties3, _parent$callPropertie2, _parent$indexers;
          if (!(parent.internalSlots[0] !== node || null != (_parent$properties3 = parent.properties) && _parent$properties3.length || null != (_parent$callPropertie2 = parent.callProperties) && _parent$callPropertie2.length || null != (_parent$indexers = parent.indexers) && _parent$indexers.length)) return 1;
        }, [["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function([type, amounts]) {
          [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function(type2) {
            const ret = amounts ? 3 : 0;
            nodes[type2] = () => ret;
          });
        });
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/printer.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _buffer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/buffer.js"), n = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/node/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), generatorFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/generators/index.js");
        const { isFunction, isStatement, isClassBody, isTSInterfaceBody, isTSEnumDeclaration } = _t, SCIENTIFIC_NOTATION = /e/i, ZERO_DECIMAL_INTEGER = /\.0+$/, NON_DECIMAL_LITERAL = /^0[box]/, PURE_ANNOTATION_RE = /^\s*[@#]__PURE__\s*$/, HAS_NEWLINE = /[\n\r\u2028\u2029]/, HAS_BlOCK_COMMENT_END = /\*\//, { needsParens } = n;
        class Printer {
          constructor(format, map) {
            this.inForStatementInitCounter = 0, this._printStack = [], this._indent = 0, this._indentChar = 0, this._indentRepeat = 0, this._insideAux = false, this._parenPushNewlineState = null, this._noLineTerminator = false, this._printAuxAfterOnNextUserNode = false, this._printedComments = /* @__PURE__ */ new Set(), this._endsWithInteger = false, this._endsWithWord = false, this._lastCommentLine = 0, this._endsWithInnerRaw = false, this._indentInnerComments = true, this.format = format, this._buf = new _buffer.default(map), this._indentChar = format.indent.style.charCodeAt(0), this._indentRepeat = format.indent.style.length, this._inputMap = null == map ? void 0 : map._inputMap;
          }
          generate(ast) {
            return this.print(ast), this._maybeAddAuxComment(), this._buf.get();
          }
          indent() {
            this.format.compact || this.format.concise || this._indent++;
          }
          dedent() {
            this.format.compact || this.format.concise || this._indent--;
          }
          semicolon(force = false) {
            this._maybeAddAuxComment(), force ? this._appendChar(59) : this._queue(59), this._noLineTerminator = false;
          }
          rightBrace(node) {
            this.format.minified && this._buf.removeLastSemicolon(), this.sourceWithOffset("end", node.loc, -1), this.tokenChar(125);
          }
          rightParens(node) {
            this.sourceWithOffset("end", node.loc, -1), this.tokenChar(41);
          }
          space(force = false) {
            if (!this.format.compact) {
              if (force) this._space();
              else if (this._buf.hasContent()) {
                const lastCp = this.getLastChar();
                32 !== lastCp && 10 !== lastCp && this._space();
              }
            }
          }
          word(str, noLineTerminatorAfter = false) {
            this._maybePrintInnerComments(), (this._endsWithWord || 47 === str.charCodeAt(0) && this.endsWith(47)) && this._space(), this._maybeAddAuxComment(), this._append(str, false), this._endsWithWord = true, this._noLineTerminator = noLineTerminatorAfter;
          }
          number(str) {
            this.word(str), this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && 46 !== str.charCodeAt(str.length - 1);
          }
          token(str, maybeNewline = false) {
            this._maybePrintInnerComments();
            const lastChar = this.getLastChar(), strFirst = str.charCodeAt(0);
            (33 === lastChar && ("--" === str || 61 === strFirst) || 43 === strFirst && 43 === lastChar || 45 === strFirst && 45 === lastChar || 46 === strFirst && this._endsWithInteger) && this._space(), this._maybeAddAuxComment(), this._append(str, maybeNewline), this._noLineTerminator = false;
          }
          tokenChar(char) {
            this._maybePrintInnerComments();
            const lastChar = this.getLastChar();
            (43 === char && 43 === lastChar || 45 === char && 45 === lastChar || 46 === char && this._endsWithInteger) && this._space(), this._maybeAddAuxComment(), this._appendChar(char), this._noLineTerminator = false;
          }
          newline(i = 1, force) {
            if (!(i <= 0)) {
              if (!force) {
                if (this.format.retainLines || this.format.compact) return;
                if (this.format.concise) return void this.space();
              }
              i > 2 && (i = 2), i -= this._buf.getNewlineCount();
              for (let j = 0; j < i; j++) this._newline();
            }
          }
          endsWith(char) {
            return this.getLastChar() === char;
          }
          getLastChar() {
            return this._buf.getLastChar();
          }
          endsWithCharAndNewline() {
            return this._buf.endsWithCharAndNewline();
          }
          removeTrailingNewline() {
            this._buf.removeTrailingNewline();
          }
          exactSource(loc, cb) {
            loc ? (this._catchUp("start", loc), this._buf.exactSource(loc, cb)) : cb();
          }
          source(prop, loc) {
            loc && (this._catchUp(prop, loc), this._buf.source(prop, loc));
          }
          sourceWithOffset(prop, loc, columnOffset) {
            loc && (this._catchUp(prop, loc), this._buf.sourceWithOffset(prop, loc, columnOffset));
          }
          withSource(prop, loc, cb) {
            loc ? (this._catchUp(prop, loc), this._buf.withSource(prop, loc, cb)) : cb();
          }
          sourceIdentifierName(identifierName, pos) {
            if (!this._buf._canMarkIdName) return;
            const sourcePosition = this._buf._sourcePosition;
            sourcePosition.identifierNamePos = pos, sourcePosition.identifierName = identifierName;
          }
          _space() {
            this._queue(32);
          }
          _newline() {
            this._queue(10);
          }
          _append(str, maybeNewline) {
            this._maybeAddParen(str), this._maybeIndent(str.charCodeAt(0)), this._buf.append(str, maybeNewline), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _appendChar(char) {
            this._maybeAddParenChar(char), this._maybeIndent(char), this._buf.appendChar(char), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _queue(char) {
            this._maybeAddParenChar(char), this._maybeIndent(char), this._buf.queue(char), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _maybeIndent(firstChar) {
            this._indent && 10 !== firstChar && this.endsWith(10) && this._buf.queueIndentation(this._indentChar, this._getIndent());
          }
          _shouldIndent(firstChar) {
            if (this._indent && 10 !== firstChar && this.endsWith(10)) return true;
          }
          _maybeAddParenChar(char) {
            const parenPushNewlineState = this._parenPushNewlineState;
            parenPushNewlineState && 32 !== char && (10 === char ? (this.tokenChar(40), this.indent(), parenPushNewlineState.printed = true) : this._parenPushNewlineState = null);
          }
          _maybeAddParen(str) {
            const parenPushNewlineState = this._parenPushNewlineState;
            if (!parenPushNewlineState) return;
            const len = str.length;
            let i;
            for (i = 0; i < len && 32 === str.charCodeAt(i); i++) continue;
            if (i === len) return;
            const cha = str.charCodeAt(i);
            if (10 !== cha) {
              if (47 !== cha || i + 1 === len) return void (this._parenPushNewlineState = null);
              const chaPost = str.charCodeAt(i + 1);
              if (42 === chaPost) {
                if (PURE_ANNOTATION_RE.test(str.slice(i + 2, len - 2))) return;
              } else if (47 !== chaPost) return void (this._parenPushNewlineState = null);
            }
            this.tokenChar(40), this.indent(), parenPushNewlineState.printed = true;
          }
          catchUp(line) {
            if (!this.format.retainLines) return;
            const count = line - this._buf.getCurrentLine();
            for (let i = 0; i < count; i++) this._newline();
          }
          _catchUp(prop, loc) {
            var _loc$prop;
            if (!this.format.retainLines) return;
            const line = null == loc || null == (_loc$prop = loc[prop]) ? void 0 : _loc$prop.line;
            if (null != line) {
              const count = line - this._buf.getCurrentLine();
              for (let i = 0; i < count; i++) this._newline();
            }
          }
          _getIndent() {
            return this._indentRepeat * this._indent;
          }
          printTerminatorless(node, parent, isLabel) {
            if (isLabel) this._noLineTerminator = true, this.print(node, parent);
            else {
              const terminatorState = { printed: false };
              this._parenPushNewlineState = terminatorState, this.print(node, parent), terminatorState.printed && (this.dedent(), this.newline(), this.tokenChar(41));
            }
          }
          print(node, parent, noLineTerminatorAfter, trailingCommentsLineOffset, forceParens) {
            var _node$extra;
            if (!node) return;
            this._endsWithInnerRaw = false;
            const nodeType = node.type, format = this.format, oldConcise = format.concise;
            node._compact && (format.concise = true);
            const printMethod = this[nodeType];
            if (void 0 === printMethod) throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);
            this._printStack.push(node);
            const oldInAux = this._insideAux;
            this._insideAux = null == node.loc, this._maybeAddAuxComment(this._insideAux && !oldInAux);
            const shouldPrintParens = forceParens || format.retainFunctionParens && "FunctionExpression" === nodeType && (null == (_node$extra = node.extra) ? void 0 : _node$extra.parenthesized) || needsParens(node, parent, this._printStack);
            shouldPrintParens && (this.tokenChar(40), this._endsWithInnerRaw = false), this._lastCommentLine = 0, this._printLeadingComments(node, parent);
            const loc = "Program" === nodeType || "File" === nodeType ? null : node.loc;
            this.exactSource(loc, printMethod.bind(this, node, parent)), shouldPrintParens ? (this._printTrailingComments(node, parent), this.tokenChar(41), this._noLineTerminator = noLineTerminatorAfter) : noLineTerminatorAfter && !this._noLineTerminator ? (this._noLineTerminator = true, this._printTrailingComments(node, parent)) : this._printTrailingComments(node, parent, trailingCommentsLineOffset), this._printStack.pop(), format.concise = oldConcise, this._insideAux = oldInAux, this._endsWithInnerRaw = false;
          }
          _maybeAddAuxComment(enteredPositionlessNode) {
            enteredPositionlessNode && this._printAuxBeforeComment(), this._insideAux || this._printAuxAfterComment();
          }
          _printAuxBeforeComment() {
            if (this._printAuxAfterOnNextUserNode) return;
            this._printAuxAfterOnNextUserNode = true;
            const comment = this.format.auxiliaryCommentBefore;
            comment && this._printComment({ type: "CommentBlock", value: comment }, 0);
          }
          _printAuxAfterComment() {
            if (!this._printAuxAfterOnNextUserNode) return;
            this._printAuxAfterOnNextUserNode = false;
            const comment = this.format.auxiliaryCommentAfter;
            comment && this._printComment({ type: "CommentBlock", value: comment }, 0);
          }
          getPossibleRaw(node) {
            const extra = node.extra;
            if (null != (null == extra ? void 0 : extra.raw) && null != extra.rawValue && node.value === extra.rawValue) return extra.raw;
          }
          printJoin(nodes, parent, opts = {}) {
            if (null == nodes || !nodes.length) return;
            let { indent } = opts;
            if (null == indent && this.format.retainLines) {
              var _nodes$0$loc;
              const startLine = null == (_nodes$0$loc = nodes[0].loc) ? void 0 : _nodes$0$loc.start.line;
              null != startLine && startLine !== this._buf.getCurrentLine() && (indent = true);
            }
            indent && this.indent();
            const newlineOpts = { addNewlines: opts.addNewlines, nextNodeStartLine: 0 }, separator = opts.separator ? opts.separator.bind(this) : null, len = nodes.length;
            for (let i = 0; i < len; i++) {
              const node = nodes[i];
              if (node && (opts.statement && this._printNewline(0 === i, newlineOpts), this.print(node, parent, void 0, opts.trailingCommentsLineOffset || 0), null == opts.iterator || opts.iterator(node, i), i < len - 1 && (null == separator || separator()), opts.statement)) if (i + 1 === len) this.newline(1);
              else {
                var _nextNode$loc;
                const nextNode = nodes[i + 1];
                newlineOpts.nextNodeStartLine = (null == (_nextNode$loc = nextNode.loc) ? void 0 : _nextNode$loc.start.line) || 0, this._printNewline(true, newlineOpts);
              }
            }
            indent && this.dedent();
          }
          printAndIndentOnComments(node, parent) {
            const indent = node.leadingComments && node.leadingComments.length > 0;
            indent && this.indent(), this.print(node, parent), indent && this.dedent();
          }
          printBlock(parent) {
            const node = parent.body;
            "EmptyStatement" !== node.type && this.space(), this.print(node, parent);
          }
          _printTrailingComments(node, parent, lineOffset) {
            const { innerComments, trailingComments } = node;
            null != innerComments && innerComments.length && this._printComments(2, innerComments, node, parent, lineOffset), null != trailingComments && trailingComments.length && this._printComments(2, trailingComments, node, parent, lineOffset);
          }
          _printLeadingComments(node, parent) {
            const comments = node.leadingComments;
            null != comments && comments.length && this._printComments(0, comments, node, parent);
          }
          _maybePrintInnerComments() {
            this._endsWithInnerRaw && this.printInnerComments(), this._endsWithInnerRaw = true, this._indentInnerComments = true;
          }
          printInnerComments() {
            const node = this._printStack[this._printStack.length - 1], comments = node.innerComments;
            if (null == comments || !comments.length) return;
            const hasSpace = this.endsWith(32), indent = this._indentInnerComments, printedCommentsCount = this._printedComments.size;
            indent && this.indent(), this._printComments(1, comments, node), hasSpace && printedCommentsCount !== this._printedComments.size && this.space(), indent && this.dedent();
          }
          noIndentInnerCommentsHere() {
            this._indentInnerComments = false;
          }
          printSequence(nodes, parent, opts = {}) {
            opts.statement = true, null != opts.indent || (opts.indent = false), this.printJoin(nodes, parent, opts);
          }
          printList(items, parent, opts = {}) {
            null == opts.separator && (opts.separator = commaSeparator), this.printJoin(items, parent, opts);
          }
          _printNewline(newLine, opts) {
            const format = this.format;
            if (format.retainLines || format.compact) return;
            if (format.concise) return void this.space();
            if (!newLine) return;
            const startLine = opts.nextNodeStartLine, lastCommentLine = this._lastCommentLine;
            if (startLine > 0 && lastCommentLine > 0) {
              const offset = startLine - lastCommentLine;
              if (offset >= 0) return void this.newline(offset || 1);
            }
            this._buf.hasContent() && this.newline(1);
          }
          _shouldPrintComment(comment) {
            return comment.ignore || this._printedComments.has(comment) ? 0 : this._noLineTerminator && (HAS_NEWLINE.test(comment.value) || HAS_BlOCK_COMMENT_END.test(comment.value)) ? 2 : (this._printedComments.add(comment), this.format.shouldPrintComment(comment.value) ? 1 : 0);
          }
          _printComment(comment, skipNewLines) {
            const noLineTerminator = this._noLineTerminator, isBlockComment = "CommentBlock" === comment.type, printNewLines = isBlockComment && 1 !== skipNewLines && !this._noLineTerminator;
            printNewLines && this._buf.hasContent() && 2 !== skipNewLines && this.newline(1);
            const lastCharCode = this.getLastChar();
            let val;
            if (91 !== lastCharCode && 123 !== lastCharCode && this.space(), isBlockComment) {
              if (val = `/*${comment.value}*/`, this.format.indent.adjustMultilineComment) {
                var _comment$loc;
                const offset = null == (_comment$loc = comment.loc) ? void 0 : _comment$loc.start.column;
                if (offset) {
                  const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
                  val = val.replace(newlineRegex, "\n");
                }
                let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
                (this._shouldIndent(47) || this.format.retainLines) && (indentSize += this._getIndent()), val = val.replace(/\n(?!$)/g, `
${" ".repeat(indentSize)}`);
              }
            } else val = noLineTerminator ? `/*${comment.value}*/` : `//${comment.value}`;
            this.endsWith(47) && this._space(), this.source("start", comment.loc), this._append(val, isBlockComment), isBlockComment || noLineTerminator || this.newline(1, true), printNewLines && 3 !== skipNewLines && this.newline(1);
          }
          _printComments(type, comments, node, parent, lineOffset = 0) {
            const nodeLoc = node.loc, len = comments.length;
            let hasLoc = !!nodeLoc;
            const nodeStartLine = hasLoc ? nodeLoc.start.line : 0, nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
            let lastLine = 0, leadingCommentNewline = 0;
            const maybeNewline = this._noLineTerminator ? function() {
            } : this.newline.bind(this);
            for (let i = 0; i < len; i++) {
              const comment = comments[i], shouldPrint = this._shouldPrintComment(comment);
              if (2 === shouldPrint) {
                hasLoc = false;
                break;
              }
              if (hasLoc && comment.loc && 1 === shouldPrint) {
                const commentStartLine = comment.loc.start.line, commentEndLine = comment.loc.end.line;
                if (0 === type) {
                  let offset = 0;
                  0 === i ? !this._buf.hasContent() || "CommentLine" !== comment.type && commentStartLine == commentEndLine || (offset = leadingCommentNewline = 1) : offset = commentStartLine - lastLine, lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i + 1 === len && (maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline)), lastLine = nodeStartLine);
                } else if (1 === type) {
                  const offset = commentStartLine - (0 === i ? nodeStartLine : lastLine);
                  lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i + 1 === len && (maybeNewline(Math.min(1, nodeEndLine - lastLine)), lastLine = nodeEndLine);
                } else {
                  const offset = commentStartLine - (0 === i ? nodeEndLine - lineOffset : lastLine);
                  lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1);
                }
              } else {
                if (hasLoc = false, 1 !== shouldPrint) continue;
                if (1 === len) {
                  const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value), shouldSkipNewline = singleLine && !isStatement(node) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumDeclaration(parent);
                  0 === type ? this._printComment(comment, shouldSkipNewline && "ObjectExpression" !== node.type || singleLine && isFunction(parent, { body: node }) ? 1 : 0) : shouldSkipNewline && 2 === type ? this._printComment(comment, 1) : this._printComment(comment, 0);
                } else 1 !== type || "ObjectExpression" === node.type && node.properties.length > 1 || "ClassBody" === node.type || "TSInterfaceBody" === node.type ? this._printComment(comment, 0) : this._printComment(comment, 0 === i ? 2 : i === len - 1 ? 3 : 0);
              }
            }
            2 === type && hasLoc && lastLine && (this._lastCommentLine = lastLine);
          }
        }
        Object.assign(Printer.prototype, generatorFunctions), Printer.prototype.Noop = function() {
        };
        var _default = Printer;
        function commaSeparator() {
          this.tokenChar(44), this.space();
        }
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/source-map.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _genMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.3/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"), _traceMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.20/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js");
        exports3.default = class {
          constructor(opts, code) {
            var _opts$sourceFileName;
            this._map = void 0, this._rawMappings = void 0, this._sourceFileName = void 0, this._lastGenLine = 0, this._lastSourceLine = 0, this._lastSourceColumn = 0, this._inputMap = void 0;
            const map = this._map = new _genMapping.GenMapping({ sourceRoot: opts.sourceRoot });
            if (this._sourceFileName = null == (_opts$sourceFileName = opts.sourceFileName) ? void 0 : _opts$sourceFileName.replace(/\\/g, "/"), this._rawMappings = void 0, opts.inputSourceMap) {
              this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
              const resolvedSources = this._inputMap.resolvedSources;
              if (resolvedSources.length) for (let i = 0; i < resolvedSources.length; i++) {
                var _this$_inputMap$sourc;
                (0, _genMapping.setSourceContent)(map, resolvedSources[i], null == (_this$_inputMap$sourc = this._inputMap.sourcesContent) ? void 0 : _this$_inputMap$sourc[i]);
              }
            }
            if ("string" != typeof code || opts.inputSourceMap) {
              if ("object" == typeof code) for (const sourceFileName of Object.keys(code)) (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
            } else (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);
          }
          get() {
            return (0, _genMapping.toEncodedMap)(this._map);
          }
          getDecoded() {
            return (0, _genMapping.toDecodedMap)(this._map);
          }
          getRawMappings() {
            return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
          }
          mark(generated, line, column, identifierName, identifierNamePos, filename) {
            var _originalMapping;
            let originalMapping;
            if (this._rawMappings = void 0, null != line) if (this._inputMap) {
              if (originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, { line, column }), !originalMapping.name && identifierNamePos) {
                const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
                originalIdentifierMapping.name && (identifierName = originalIdentifierMapping.name);
              }
            } else originalMapping = { source: (null == filename ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName, line, column };
            (0, _genMapping.maybeAddMapping)(this._map, { name: identifierName, generated, source: null == (_originalMapping = originalMapping) ? void 0 : _originalMapping.source, original: originalMapping });
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.22.5/node_modules/@babel/helper-annotate-as-pure/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(pathOrNode) {
          const node = pathOrNode.node || pathOrNode;
          if (isPureAnnotated(node)) return;
          addComment(node, "leading", PURE_ANNOTATION);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { addComment } = _t, PURE_ANNOTATION = "#__PURE__", isPureAnnotated = ({ leadingComments }) => !!leadingComments && leadingComments.some((comment) => /[@#]__PURE__/.test(comment.value));
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.buildDecoratedClass = function(ref, path3, elements, file) {
          const { node, scope } = path3, initializeId = scope.generateUidIdentifier("initialize"), isDeclaration = node.id && path3.isDeclaration(), isStrict = path3.isInStrictMode(), { superClass } = node;
          node.type = "ClassDeclaration", node.id || (node.id = _core.types.cloneNode(ref));
          let superId;
          superClass && (superId = scope.generateUidIdentifierBasedOnNode(node.superClass, "super"), node.superClass = superId);
          const classDecorators = takeDecorators(node), definitions = _core.types.arrayExpression(elements.filter((element) => !element.node.abstract && "TSIndexSignature" !== element.node.type).map((path4) => function(file2, classRef, superRef, path5) {
            const isMethod = path5.isClassMethod();
            if (path5.isPrivate()) throw path5.buildCodeFrameError(`Private ${isMethod ? "methods" : "fields"} in decorated classes are not supported yet.`);
            if ("ClassAccessorProperty" === path5.node.type) throw path5.buildCodeFrameError('Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
            if ("StaticBlock" === path5.node.type) throw path5.buildCodeFrameError('Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
            const { node: node2, scope: scope2 } = path5;
            path5.isTSDeclareMethod() || new _helperReplaceSupers.default({ methodPath: path5, objectRef: classRef, superRef, file: file2, refToPreserve: classRef }).replace();
            const properties = [prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node2) ? node2.kind : "field")), prop("decorators", takeDecorators(node2)), prop("static", node2.static && _core.types.booleanLiteral(true)), prop("key", getKey(node2))].filter(Boolean);
            if (_core.types.isClassMethod(node2)) {
              const id = node2.computed ? null : node2.key, transformed = _core.types.toExpression(node2);
              properties.push(prop("value", (0, _helperFunctionName.default)({ node: transformed, id, scope: scope2 }) || transformed));
            } else _core.types.isClassProperty(node2) && node2.value ? properties.push((key = "value", body = _core.template.statements.ast`return ${node2.value}`, _core.types.objectMethod("method", _core.types.identifier(key), [], _core.types.blockStatement(body)))) : properties.push(prop("value", scope2.buildUndefinedNode()));
            var key, body;
            return path5.remove(), _core.types.objectExpression(properties);
          }(file, node.id, superId, path4))), wrapperCall = _core.template.expression.ast`
    ${function(file2) {
            return file2.addHelper("decorate");
          }(file)}(
      ${classDecorators || _core.types.nullLiteral()},
      function (${initializeId}, ${superClass ? _core.types.cloneNode(superId) : null}) {
        ${node}
        return { F: ${_core.types.cloneNode(node.id)}, d: ${definitions} };
      },
      ${superClass}
    )
  `;
          isStrict || wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
          let replacement = wrapperCall, classPathDesc = "arguments.1.body.body.0";
          isDeclaration && (replacement = _core.template.statement.ast`let ${ref} = ${wrapperCall}`, classPathDesc = "declarations.0.init." + classPathDesc);
          return { instanceNodes: [_core.template.statement.ast`${_core.types.cloneNode(initializeId)}(this)`], wrapClass: (path4) => (path4.replaceWith(replacement), path4.get(classPathDesc)) };
        }, exports3.hasDecorators = function(node) {
          return hasOwnDecorators(node) || node.body.body.some(hasOwnDecorators);
        }, exports3.hasOwnDecorators = hasOwnDecorators;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.22.20_@babel+core@7.23.2/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-function-name@7.23.0/node_modules/@babel/helper-function-name/lib/index.js");
        function hasOwnDecorators(node) {
          var _node$decorators;
          return !(null == (_node$decorators = node.decorators) || !_node$decorators.length);
        }
        function prop(key, value2) {
          return value2 ? _core.types.objectProperty(_core.types.identifier(key), value2) : null;
        }
        function takeDecorators(node) {
          let result;
          return node.decorators && node.decorators.length > 0 && (result = _core.types.arrayExpression(node.decorators.map((decorator) => decorator.expression))), node.decorators = void 0, result;
        }
        function getKey(node) {
          return node.computed ? node.key : _core.types.isIdentifier(node.key) ? _core.types.stringLiteral(node.key.name) : _core.types.stringLiteral(String(node.key.value));
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/features.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.FEATURES = void 0, exports3.enableFeature = function(file, feature, loose) {
          hasFeature(file, feature) && !canIgnoreLoose(file, feature) || (file.set(featuresKey, file.get(featuresKey) | feature), "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, true), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, false), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : setLoose(file, feature, loose));
          let resolvedLoose, higherPriorityPluginName;
          for (const [mask, name] of featuresSameLoose) {
            if (!hasFeature(file, mask)) continue;
            const loose2 = isLoose(file, mask);
            if (!canIgnoreLoose(file, mask)) {
              if (resolvedLoose === !loose2) throw new Error("'loose' mode configuration must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled).");
              resolvedLoose = loose2, higherPriorityPluginName = name;
            }
          }
          if (void 0 !== resolvedLoose) for (const [mask, name] of featuresSameLoose) hasFeature(file, mask) && isLoose(file, mask) !== resolvedLoose && (setLoose(file, mask, resolvedLoose), console.warn(`Though the "loose" option was set to "${!resolvedLoose}" in your @babel/preset-env config, it will not be used for ${name} since the "loose" mode option was set to "${resolvedLoose}" for ${higherPriorityPluginName}.
The "loose" option must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding
	["${name}", { "loose": ${resolvedLoose} }]
to the "plugins" section of your Babel config.`));
        }, exports3.isLoose = isLoose, exports3.shouldTransform = function(path3, file) {
          let decoratorPath = null, publicFieldPath = null, privateFieldPath = null, privateMethodPath = null, staticBlockPath = null;
          (0, _decorators.hasOwnDecorators)(path3.node) && (decoratorPath = path3.get("decorators.0"));
          for (const el of path3.get("body.body")) !decoratorPath && (0, _decorators.hasOwnDecorators)(el.node) && (decoratorPath = el.get("decorators.0")), !publicFieldPath && el.isClassProperty() && (publicFieldPath = el), !privateFieldPath && el.isClassPrivateProperty() && (privateFieldPath = el), !privateMethodPath && null != el.isClassPrivateMethod && el.isClassPrivateMethod() && (privateMethodPath = el), !staticBlockPath && null != el.isStaticBlock && el.isStaticBlock() && (staticBlockPath = el);
          if (decoratorPath && privateFieldPath) throw privateFieldPath.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
          if (decoratorPath && privateMethodPath) throw privateMethodPath.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
          if (decoratorPath && !hasFeature(file, FEATURES.decorators)) throw path3.buildCodeFrameError('Decorators are not enabled.\nIf you are using ["@babel/plugin-proposal-decorators", { "version": "legacy" }], make sure it comes *before* "@babel/plugin-transform-class-properties" and enable loose mode, like so:\n	["@babel/plugin-proposal-decorators", { "version": "legacy" }]\n	["@babel/plugin-transform-class-properties", { "loose": true }]');
          if (privateMethodPath && !hasFeature(file, FEATURES.privateMethods)) throw privateMethodPath.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-transform-private-methods` to your configuration.");
          if ((publicFieldPath || privateFieldPath) && !hasFeature(file, FEATURES.fields) && !hasFeature(file, FEATURES.privateMethods)) throw path3.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-transform-class-properties` to your configuration.");
          if (staticBlockPath && !hasFeature(file, FEATURES.staticBlocks)) throw path3.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-transform-class-static-block` to your configuration.");
          if (decoratorPath || privateMethodPath || staticBlockPath) return true;
          if ((publicFieldPath || privateFieldPath) && hasFeature(file, FEATURES.fields)) return true;
          return false;
        };
        var _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js");
        const FEATURES = Object.freeze({ fields: 2, privateMethods: 4, decorators: 8, privateIn: 16, staticBlocks: 32 });
        exports3.FEATURES = FEATURES;
        const featuresSameLoose = /* @__PURE__ */ new Map([[FEATURES.fields, "@babel/plugin-transform-class-properties"], [FEATURES.privateMethods, "@babel/plugin-transform-private-methods"], [FEATURES.privateIn, "@babel/plugin-transform-private-property-in-object"]]), featuresKey = "@babel/plugin-class-features/featuresKey", looseKey = "@babel/plugin-class-features/looseKey", looseLowPriorityKey = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing";
        function hasFeature(file, feature) {
          return !!(file.get(featuresKey) & feature);
        }
        function isLoose(file, feature) {
          return !!(file.get(looseKey) & feature);
        }
        function setLoose(file, feature, loose) {
          loose ? file.set(looseKey, file.get(looseKey) | feature) : file.set(looseKey, file.get(looseKey) & ~feature), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) & ~feature);
        }
        function canIgnoreLoose(file, feature) {
          return !!(file.get(looseLowPriorityKey) & feature);
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.buildCheckInRHS = buildCheckInRHS, exports3.buildFieldsInitNodes = function(ref, superRef, props, privateNamesMap, file, setPublicClassFields, privateFieldsAsProperties, constantSuper, innerBindingRef) {
          var _ref;
          let injectSuperRef, classRefFlags = 0;
          const staticNodes = [], instanceNodes = [], pureStaticNodes = [];
          let classBindingNode = null;
          const getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => (null != injectSuperRef || (injectSuperRef = props[0].scope.generateUidIdentifierBasedOnNode(superRef)), injectSuperRef), classRefForInnerBinding = null != (_ref = ref) ? _ref : props[0].scope.generateUidIdentifier("class");
          null != ref || (ref = _core.types.cloneNode(innerBindingRef));
          for (const prop of props) {
            prop.isClassProperty() && ts.assertFieldTransformed(prop);
            const isStatic = !(null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node)) && prop.node.static, isInstance = !isStatic, isPrivate = prop.isPrivate(), isPublic = !isPrivate, isField = prop.isProperty(), isMethod = !isField, isStaticBlock = null == prop.isStaticBlock ? void 0 : prop.isStaticBlock();
            if (isStatic && (classRefFlags |= 1), isStatic || isMethod && isPrivate || isStaticBlock) {
              new _helperReplaceSupers.default({ methodPath: prop, constantSuper, file, refToPreserve: innerBindingRef, getSuperRef, getObjectRef: () => (classRefFlags |= 2, isStatic || isStaticBlock ? classRefForInnerBinding : _core.types.memberExpression(classRefForInnerBinding, _core.types.identifier("prototype"))) }).replace();
              replaceThisContext(prop, classRefForInnerBinding, innerBindingRef) && (classRefFlags |= 2);
            }
            switch (true) {
              case isStaticBlock: {
                const blockBody = prop.node.body;
                1 === blockBody.length && _core.types.isExpressionStatement(blockBody[0]) ? staticNodes.push(inheritPropComments(blockBody[0], prop)) : staticNodes.push(_core.types.inheritsComments(_core.template.statement.ast`(() => { ${blockBody} })()`, prop.node));
                break;
              }
              case (isStatic && isPrivate && isField && privateFieldsAsProperties):
                staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref), prop, privateNamesMap));
                break;
              case (isStatic && isPrivate && isField && !privateFieldsAsProperties):
                staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap));
                break;
              case (isStatic && isPublic && isField && setPublicClassFields):
                if (!isNameOrLength(prop.node)) {
                  staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref), prop));
                  break;
                }
              case (isStatic && isPublic && isField && !setPublicClassFields):
                staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref), prop, file));
                break;
              case (isInstance && isPrivate && isField && privateFieldsAsProperties):
                instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
                break;
              case (isInstance && isPrivate && isField && !privateFieldsAsProperties):
                instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file));
                break;
              case (isInstance && isPrivate && isMethod && privateFieldsAsProperties):
                instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isInstance && isPrivate && isMethod && !privateFieldsAsProperties):
                instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isStatic && isPrivate && isMethod && !privateFieldsAsProperties):
                staticNodes.unshift(buildPrivateStaticFieldInitSpec(prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isStatic && isPrivate && isMethod && privateFieldsAsProperties):
                staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref), prop, file, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isInstance && isPublic && isField && setPublicClassFields):
                instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));
                break;
              case (isInstance && isPublic && isField && !setPublicClassFields):
                instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, file));
                break;
              default:
                throw new Error("Unreachable.");
            }
          }
          2 & classRefFlags && null != innerBindingRef && (classBindingNode = _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classRefForInnerBinding), _core.types.cloneNode(innerBindingRef))));
          return { staticNodes: staticNodes.filter(Boolean), instanceNodes: instanceNodes.filter(Boolean), pureStaticNodes: pureStaticNodes.filter(Boolean), classBindingNode, wrapClass(path3) {
            for (const prop of props) prop.node.leadingComments = null, prop.remove();
            return injectSuperRef && (path3.scope.push({ id: _core.types.cloneNode(injectSuperRef) }), path3.set("superClass", _core.types.assignmentExpression("=", injectSuperRef, path3.node.superClass))), 0 !== classRefFlags && (path3.isClassExpression() ? (path3.scope.push({ id: ref }), path3.replaceWith(_core.types.assignmentExpression("=", _core.types.cloneNode(ref), path3.node))) : (null == innerBindingRef && (path3.node.id = ref), null != classBindingNode && path3.scope.push({ id: classRefForInnerBinding }))), path3;
          } };
        }, exports3.buildPrivateNamesMap = function(props) {
          const privateNamesMap = /* @__PURE__ */ new Map();
          for (const prop of props) if (prop.isPrivate()) {
            const { name } = prop.node.key.id, update = privateNamesMap.has(name) ? privateNamesMap.get(name) : { id: prop.scope.generateUidIdentifier(name), static: prop.node.static, method: !prop.isProperty() };
            prop.isClassPrivateMethod() && ("get" === prop.node.kind ? update.getId = prop.scope.generateUidIdentifier(`get_${name}`) : "set" === prop.node.kind ? update.setId = prop.scope.generateUidIdentifier(`set_${name}`) : "method" === prop.node.kind && (update.methodId = prop.scope.generateUidIdentifier(name))), privateNamesMap.set(name, update);
          }
          return privateNamesMap;
        }, exports3.buildPrivateNamesNodes = function(privateNamesMap, privateFieldsAsProperties, privateFieldsAsSymbols, state) {
          const initNodes = [];
          for (const [name, value2] of privateNamesMap) {
            const { static: isStatic, method: isMethod, getId, setId } = value2, isAccessor = getId || setId, id = _core.types.cloneNode(value2.id);
            let init;
            privateFieldsAsProperties ? init = _core.types.callExpression(state.addHelper("classPrivateFieldLooseKey"), [_core.types.stringLiteral(name)]) : privateFieldsAsSymbols ? init = _core.types.callExpression(_core.types.identifier("Symbol"), [_core.types.stringLiteral(name)]) : isStatic || (init = _core.types.newExpression(_core.types.identifier(!isMethod || isAccessor ? "WeakMap" : "WeakSet"), [])), init && ((0, _helperAnnotateAsPure.default)(init), initNodes.push(_core.template.statement.ast`var ${id} = ${init}`));
          }
          return initNodes;
        }, exports3.transformPrivateNamesUsage = function(ref, path3, privateNamesMap, { privateFieldsAsProperties, noDocumentAll, innerBinding }, state) {
          if (!privateNamesMap.size) return;
          const body = path3.get("body"), handler = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;
          (0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({ privateNamesMap, classRef: ref, file: state }, handler, { noDocumentAll, innerBinding })), body.traverse(privateInVisitor, { privateNamesMap, classRef: ref, file: state, privateFieldsAsProperties, innerBinding });
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.22.20_@babel+core@7.23.2/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.22.20/node_modules/@babel/helper-environment-visitor/lib/index.js"), _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.23.0/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.22.5/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.22.5/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.22.5/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"), ts = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");
        function privateNameVisitorFactory(visitor) {
          const nestedVisitor = _core.traverse.visitors.merge([Object.assign({}, visitor), _helperEnvironmentVisitor.default]), privateNameVisitor2 = Object.assign({}, visitor, { Class(path3) {
            const { privateNamesMap } = this, body = path3.get("body.body"), visiblePrivateNames = new Map(privateNamesMap), redeclared = [];
            for (const prop of body) {
              if (!prop.isPrivate()) continue;
              const { name } = prop.node.key.id;
              visiblePrivateNames.delete(name), redeclared.push(name);
            }
            redeclared.length && (path3.get("body").traverse(nestedVisitor, Object.assign({}, this, { redeclared })), path3.traverse(privateNameVisitor2, Object.assign({}, this, { privateNamesMap: visiblePrivateNames })), path3.skipKey("body"));
          } });
          return privateNameVisitor2;
        }
        const privateNameVisitor = privateNameVisitorFactory({ PrivateName(path3, { noDocumentAll }) {
          const { privateNamesMap, redeclared } = this, { node, parentPath } = path3;
          if (!parentPath.isMemberExpression({ property: node }) && !parentPath.isOptionalMemberExpression({ property: node })) return;
          const { name } = node.id;
          privateNamesMap.has(name) && (redeclared && redeclared.includes(name) || this.handle(parentPath, noDocumentAll));
        } });
        function unshadow(name, scope, innerBinding) {
          for (; null != (_scope = scope) && _scope.hasBinding(name) && !scope.bindingIdentifierEquals(name, innerBinding); ) {
            var _scope;
            scope.rename(name), scope = scope.parent;
          }
        }
        function buildCheckInRHS(rhs, file, inRHSIsObject) {
          return inRHSIsObject || null == file.availableHelper || !file.availableHelper("checkInRHS") ? rhs : _core.types.callExpression(file.addHelper("checkInRHS"), [rhs]);
        }
        const privateInVisitor = privateNameVisitorFactory({ BinaryExpression(path3, { file }) {
          const { operator, left, right } = path3.node;
          if ("in" !== operator) return;
          if (!_core.types.isPrivateName(left)) return;
          const { privateFieldsAsProperties, privateNamesMap, redeclared } = this, { name } = left.id;
          if (!privateNamesMap.has(name)) return;
          if (redeclared && redeclared.includes(name)) return;
          if (unshadow(this.classRef.name, path3.scope, this.innerBinding), privateFieldsAsProperties) {
            const { id: id2 } = privateNamesMap.get(name);
            return void path3.replaceWith(_core.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(right, file)}, ${_core.types.cloneNode(id2)})
      `);
          }
          const { id, static: isStatic } = privateNamesMap.get(name);
          isStatic ? path3.replaceWith(_core.template.expression.ast`${buildCheckInRHS(right, file)} === ${_core.types.cloneNode(this.classRef)}`) : path3.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${buildCheckInRHS(right, file)})`);
        } }), privateNameHandlerSpec = { memoise(member, count) {
          const { scope } = member, { object } = member.node, memo = scope.maybeGenerateMemoised(object);
          memo && this.memoiser.set(object, memo, count);
        }, receiver(member) {
          const { object } = member.node;
          return this.memoiser.has(object) ? _core.types.cloneNode(this.memoiser.get(object)) : _core.types.cloneNode(object);
        }, get(member) {
          const { classRef, privateNamesMap, file, innerBinding } = this, { name } = member.node.property.id, { id, static: isStatic, method: isMethod, methodId, getId, setId } = privateNamesMap.get(name), isAccessor = getId || setId;
          if (isStatic) {
            const helperName = isMethod && !isAccessor ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
            return unshadow(classRef.name, member.scope, innerBinding), _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]);
          }
          if (isMethod) {
            if (isAccessor) {
              if (!getId && setId) {
                if (file.availableHelper("writeOnlyError")) return _core.types.sequenceExpression([this.receiver(member), _core.types.callExpression(file.addHelper("writeOnlyError"), [_core.types.stringLiteral(`#${name}`)])]);
                console.warn("@babel/helpers is outdated, update it to silence this warning.");
              }
              return _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), _core.types.cloneNode(id)]);
            }
            return _core.types.callExpression(file.addHelper("classPrivateMethodGet"), [this.receiver(member), _core.types.cloneNode(id), _core.types.cloneNode(methodId)]);
          }
          return _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), _core.types.cloneNode(id)]);
        }, boundGet(member) {
          return this.memoise(member, 1), _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [this.receiver(member)]);
        }, set(member, value2) {
          const { classRef, privateNamesMap, file } = this, { name } = member.node.property.id, { id, static: isStatic, method: isMethod, setId, getId } = privateNamesMap.get(name);
          if (isStatic) {
            const helperName = isMethod && !(getId || setId) ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
            return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id), value2]);
          }
          return isMethod ? setId ? _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), _core.types.cloneNode(id), value2]) : _core.types.sequenceExpression([this.receiver(member), value2, _core.types.callExpression(file.addHelper("readOnlyError"), [_core.types.stringLiteral(`#${name}`)])]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), _core.types.cloneNode(id), value2]);
        }, destructureSet(member) {
          const { classRef, privateNamesMap, file } = this, { name } = member.node.property.id, { id, static: isStatic } = privateNamesMap.get(name);
          if (isStatic) {
            try {
              var helper = file.addHelper("classStaticPrivateFieldDestructureSet");
            } catch (_unused) {
              throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the latest version.");
            }
            return _core.types.memberExpression(_core.types.callExpression(helper, [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]), _core.types.identifier("value"));
          }
          return _core.types.memberExpression(_core.types.callExpression(file.addHelper("classPrivateFieldDestructureSet"), [this.receiver(member), _core.types.cloneNode(id)]), _core.types.identifier("value"));
        }, call(member, args) {
          return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, false);
        }, optionalCall(member, args) {
          return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, true);
        }, delete() {
          throw new Error("Internal Babel error: deleting private elements is a parsing error.");
        } }, privateNameHandlerLoose = { get(member) {
          const { privateNamesMap, file } = this, { object } = member.node, { name } = member.node.property.id;
          return _core.template.expression`BASE(REF, PROP)[PROP]`({ BASE: file.addHelper("classPrivateFieldLooseBase"), REF: _core.types.cloneNode(object), PROP: _core.types.cloneNode(privateNamesMap.get(name).id) });
        }, set() {
          throw new Error("private name handler with loose = true don't need set()");
        }, boundGet(member) {
          return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [_core.types.cloneNode(member.node.object)]);
        }, simpleSet(member) {
          return this.get(member);
        }, destructureSet(member) {
          return this.get(member);
        }, call(member, args) {
          return _core.types.callExpression(this.get(member), args);
        }, optionalCall(member, args) {
          return _core.types.optionalCallExpression(this.get(member), args, true);
        }, delete() {
          throw new Error("Internal Babel error: deleting private elements is a parsing error.");
        } };
        function buildPrivateFieldInitLoose(ref, prop, privateNamesMap) {
          const { id } = privateNamesMap.get(prop.node.key.id.name), value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value2}
      });
    `, prop);
        }
        function buildPrivateInstanceFieldInitSpec(ref, prop, privateNamesMap, state) {
          const { id } = privateNamesMap.get(prop.node.key.id.name), value2 = prop.node.value || prop.scope.buildUndefinedNode();
          if (!state.availableHelper("classPrivateFieldInitSpec")) return inheritPropComments(_core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${value2},
        })`, prop);
          const helper = state.addHelper("classPrivateFieldInitSpec");
          return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        writable: true,
        value: ${value2}
      },
    )`, prop);
        }
        function buildPrivateStaticFieldInitSpec(prop, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, getId, setId, initAdded } = privateName, isAccessor = getId || setId;
          if (!prop.isProperty() && (initAdded || !isAccessor)) return;
          if (isAccessor) return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        var ${_core.types.cloneNode(id)} = {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        }
      `, prop);
          const value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.template.statement.ast`
      var ${_core.types.cloneNode(id)} = {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value2}
      };
    `, prop);
        }
        function buildPrivateMethodInitLoose(ref, prop, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { methodId, id, getId, setId, initAdded } = privateName;
          if (initAdded) return;
          if (methodId) return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${methodId.name}
        });
      `, prop);
          return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        });
      `, prop)) : void 0;
        }
        function buildPrivateInstanceMethodInitSpec(ref, prop, privateNamesMap, state) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { getId, setId, initAdded } = privateName;
          if (initAdded) return;
          return getId || setId ? function(ref2, prop2, privateNamesMap2, state2) {
            const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id, getId: getId2, setId: setId2 } = privateName2;
            if (privateNamesMap2.set(prop2.node.key.id.name, Object.assign({}, privateName2, { initAdded: true })), !state2.availableHelper("classPrivateFieldInitSpec")) return inheritPropComments(_core.template.statement.ast`
          ${id}.set(${ref2}, {
            get: ${getId2 ? getId2.name : prop2.scope.buildUndefinedNode()},
            set: ${setId2 ? setId2.name : prop2.scope.buildUndefinedNode()}
          });
        `, prop2);
            const helper = state2.addHelper("classPrivateFieldInitSpec");
            return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        get: ${getId2 ? getId2.name : prop2.scope.buildUndefinedNode()},
        set: ${setId2 ? setId2.name : prop2.scope.buildUndefinedNode()}
      },
    )`, prop2);
          }(ref, prop, privateNamesMap, state) : function(ref2, prop2, privateNamesMap2, state2) {
            const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id } = privateName2;
            if (!state2.availableHelper("classPrivateMethodInitSpec")) return inheritPropComments(_core.template.statement.ast`${id}.add(${ref2})`, prop2);
            const helper = state2.addHelper("classPrivateMethodInitSpec");
            return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)}
    )`, prop2);
          }(ref, prop, privateNamesMap, state);
        }
        function buildPublicFieldInitLoose(ref, prop) {
          const { key, computed } = prop.node, value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(ref, key, computed || _core.types.isLiteral(key)), value2)), prop);
        }
        function buildPublicFieldInitSpec(ref, prop, state) {
          const { key, computed } = prop.node, value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(state.addHelper("defineProperty"), [ref, computed || _core.types.isLiteral(key) ? key : _core.types.stringLiteral(key.name), value2])), prop);
        }
        function buildPrivateStaticMethodInitLoose(ref, prop, state, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, initAdded } = privateName;
          if (initAdded) return;
          return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        })
      `, prop)) : inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${methodId.name}
      });
    `, prop);
        }
        function buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties = false) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, getterDeclared, setterDeclared, static: isStatic } = privateName, { params, body, generator, async } = prop.node, isGetter = getId && !getterDeclared && 0 === params.length, isSetter = setId && !setterDeclared && params.length > 0;
          let declId = methodId;
          return isGetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { getterDeclared: true })), declId = getId) : isSetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { setterDeclared: true })), declId = setId) : isStatic && !privateFieldsAsProperties && (declId = id), inheritPropComments(_core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator, async), prop);
        }
        const thisContextVisitor = _core.traverse.visitors.merge([{ UnaryExpression(path3) {
          const { node } = path3;
          if ("delete" === node.operator) {
            const argument = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(node.argument);
            _core.types.isThisExpression(argument) && path3.replaceWith(_core.types.booleanLiteral(true));
          }
        }, ThisExpression(path3, state) {
          state.needsClassRef = true, path3.replaceWith(_core.types.cloneNode(state.classRef));
        }, MetaProperty(path3) {
          const { node, scope } = path3;
          "new" === node.meta.name && "target" === node.property.name && path3.replaceWith(scope.buildUndefinedNode());
        } }, _helperEnvironmentVisitor.default]), innerReferencesVisitor = { ReferencedIdentifier(path3, state) {
          path3.scope.bindingIdentifierEquals(path3.node.name, state.innerBinding) && (state.needsClassRef = true, path3.node.name = state.classRef.name);
        } };
        function replaceThisContext(path3, ref, innerBindingRef) {
          var _state$classRef;
          const state = { classRef: ref, needsClassRef: false, innerBinding: innerBindingRef };
          return path3.isMethod() || path3.traverse(thisContextVisitor, state), null != innerBindingRef && null != (_state$classRef = state.classRef) && _state$classRef.name && state.classRef.name !== innerBindingRef.name && path3.traverse(innerReferencesVisitor, state), state.needsClassRef;
        }
        function isNameOrLength({ key, computed }) {
          return "Identifier" === key.type ? !computed && ("name" === key.name || "length" === key.name) : "StringLiteral" === key.type && ("name" === key.value || "length" === key.value);
        }
        function inheritPropComments(node, prop) {
          return _core.types.inheritLeadingComments(node, prop.node), _core.types.inheritInnerComments(node, prop.node), node;
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "FEATURES", { enumerable: true, get: function() {
          return _features.FEATURES;
        } }), Object.defineProperty(exports3, "buildCheckInRHS", { enumerable: true, get: function() {
          return _fields.buildCheckInRHS;
        } }), exports3.createClassFeaturePlugin = function({ name, feature, loose, manipulateOptions, api, inherits }) {
          null != api || (api = { assumption: () => {
          } });
          const setPublicClassFields = api.assumption("setPublicClassFields"), privateFieldsAsSymbols = api.assumption("privateFieldsAsSymbols"), privateFieldsAsProperties = api.assumption("privateFieldsAsProperties"), constantSuper = api.assumption("constantSuper"), noDocumentAll = api.assumption("noDocumentAll");
          if (privateFieldsAsProperties && privateFieldsAsSymbols) throw new Error('Cannot enable both the "privateFieldsAsProperties" and "privateFieldsAsSymbols" assumptions as the same time.');
          const privateFieldsAsSymbolsOrProperties = privateFieldsAsProperties || privateFieldsAsSymbols;
          if (true === loose) {
            const explicit = [];
            void 0 !== setPublicClassFields && explicit.push('"setPublicClassFields"'), void 0 !== privateFieldsAsProperties && explicit.push('"privateFieldsAsProperties"'), void 0 !== privateFieldsAsSymbols && explicit.push('"privateFieldsAsSymbols"'), 0 !== explicit.length && console.warn(`[${name}]: You are using the "loose: true" option and you are explicitly setting a value for the ${explicit.join(" and ")} assumption${explicit.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class features plugins, so it's recommended that you replace it with the following top-level option:
	"assumptions": {
		"setPublicClassFields": true,
		"privateFieldsAsSymbols": true
	}`);
          }
          return { name, manipulateOptions, inherits, pre(file) {
            (0, _features.enableFeature)(file, feature, loose), "number" != typeof file.get(versionKey) && file.get(versionKey) && !_semver.lt(file.get(versionKey), "7.22.15") || file.set(versionKey, "7.22.15");
          }, visitor: { Class(path3, { file }) {
            var _ref;
            if ("7.22.15" !== file.get(versionKey)) return;
            if (!(0, _features.shouldTransform)(path3, file)) return;
            const pathIsClassDeclaration = path3.isClassDeclaration();
            pathIsClassDeclaration && (0, _typescript.assertFieldTransformed)(path3);
            const loose2 = (0, _features.isLoose)(file, feature);
            let constructor;
            const isDecorated = (0, _decorators.hasDecorators)(path3.node), props = [], elements = [], computedPaths = [], privateNames = /* @__PURE__ */ new Set(), body = path3.get("body");
            for (const path4 of body.get("body")) {
              if ((path4.isClassProperty() || path4.isClassMethod()) && path4.node.computed && computedPaths.push(path4), path4.isPrivate()) {
                const { name: name2 } = path4.node.key.id, getName = `get ${name2}`, setName = `set ${name2}`;
                if (path4.isClassPrivateMethod()) {
                  if ("get" === path4.node.kind) {
                    if (privateNames.has(getName) || privateNames.has(name2) && !privateNames.has(setName)) throw path4.buildCodeFrameError("Duplicate private field");
                    privateNames.add(getName).add(name2);
                  } else if ("set" === path4.node.kind) {
                    if (privateNames.has(setName) || privateNames.has(name2) && !privateNames.has(getName)) throw path4.buildCodeFrameError("Duplicate private field");
                    privateNames.add(setName).add(name2);
                  }
                } else {
                  if (privateNames.has(name2) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(name2) && (privateNames.has(getName) || privateNames.has(setName))) throw path4.buildCodeFrameError("Duplicate private field");
                  privateNames.add(name2);
                }
              }
              path4.isClassMethod({ kind: "constructor" }) ? constructor = path4 : (elements.push(path4), (path4.isProperty() || path4.isPrivate() || null != path4.isStaticBlock && path4.isStaticBlock()) && props.push(path4));
            }
            if (!props.length && !isDecorated) return;
            const innerBinding = path3.node.id;
            let ref;
            innerBinding && pathIsClassDeclaration || ((0, _helperFunctionName.default)(path3), ref = path3.scope.generateUidIdentifier("class"));
            const classRefForDefine = null != (_ref = ref) ? _ref : _core.types.cloneNode(innerBinding), privateNamesMap = (0, _fields.buildPrivateNamesMap)(props), privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, null != privateFieldsAsProperties ? privateFieldsAsProperties : loose2, null != privateFieldsAsSymbols && privateFieldsAsSymbols, file);
            let keysNodes, staticNodes, instanceNodes, pureStaticNodes, classBindingNode, wrapClass;
            (0, _fields.transformPrivateNamesUsage)(classRefForDefine, path3, privateNamesMap, { privateFieldsAsProperties: null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose2, noDocumentAll, innerBinding }, file), isDecorated ? (staticNodes = pureStaticNodes = keysNodes = [], { instanceNodes, wrapClass } = (0, _decorators.buildDecoratedClass)(classRefForDefine, path3, elements, file)) : (keysNodes = (0, _misc.extractComputedKeys)(path3, computedPaths, file), { staticNodes, pureStaticNodes, instanceNodes, classBindingNode, wrapClass } = (0, _fields.buildFieldsInitNodes)(ref, path3.node.superClass, props, privateNamesMap, file, null != setPublicClassFields ? setPublicClassFields : loose2, null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose2, null != constantSuper ? constantSuper : loose2, innerBinding)), instanceNodes.length > 0 && (0, _misc.injectInitialization)(path3, constructor, instanceNodes, (referenceVisitor, state) => {
              if (!isDecorated) for (const prop of props) null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node) || prop.node.static || prop.traverse(referenceVisitor, state);
            });
            const wrappedPath = wrapClass(path3);
            wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]), staticNodes.length > 0 && wrappedPath.insertAfter(staticNodes), pureStaticNodes.length > 0 && wrappedPath.find((parent) => parent.isStatement() || parent.isDeclaration()).insertAfter(pureStaticNodes), null != classBindingNode && pathIsClassDeclaration && wrappedPath.insertAfter(classBindingNode);
          }, ExportDefaultDeclaration(path3, { file }) {
            {
              if ("7.22.15" !== file.get(versionKey)) return;
              const decl = path3.get("declaration");
              decl.isClassDeclaration() && (0, _decorators.hasDecorators)(decl.node) && (decl.node.id ? (0, _helperSplitExportDeclaration.default)(path3) : decl.node.type = "ClassExpression");
            }
          } } };
        }, Object.defineProperty(exports3, "enableFeature", { enumerable: true, get: function() {
          return _features.enableFeature;
        } }), Object.defineProperty(exports3, "injectInitialization", { enumerable: true, get: function() {
          return _misc.injectInitialization;
        } });
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _helperFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-function-name@7.23.0/node_modules/@babel/helper-function-name/lib/index.js"), _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.22.6/node_modules/@babel/helper-split-export-declaration/lib/index.js"), _semver = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js"), _fields = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js"), _misc = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js"), _features = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/features.js"), _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");
        const versionKey = "@babel/plugin-class-features/version";
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.extractComputedKeys = function(path3, computedPaths, file) {
          const declarations = [], state = { classBinding: path3.node.id && path3.scope.getBinding(path3.node.id.name), file };
          for (const computedPath of computedPaths) {
            const computedKey = computedPath.get("key");
            computedKey.isReferencedIdentifier() ? handleClassTDZ(computedKey, state) : computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor, state);
            const computedNode = computedPath.node;
            if (!computedKey.isConstantExpression()) {
              const ident = path3.scope.generateUidIdentifierBasedOnNode(computedNode.key);
              path3.scope.push({ id: ident, kind: "let" }), declarations.push(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(ident), computedNode.key))), computedNode.key = _core.types.cloneNode(ident);
            }
          }
          return declarations;
        }, exports3.injectInitialization = function(path3, constructor, nodes, renamer) {
          if (!nodes.length) return;
          const isDerived = !!path3.node.superClass;
          if (!constructor) {
            const newConstructor = _core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([]));
            isDerived && (newConstructor.params = [_core.types.restElement(_core.types.identifier("args"))], newConstructor.body.body.push(_core.template.statement.ast`super(...args)`)), [constructor] = path3.get("body").unshiftContainer("body", newConstructor);
          }
          renamer && renamer(referenceVisitor, { scope: constructor.scope });
          if (isDerived) {
            const bareSupers = [];
            constructor.traverse(findBareSupers, bareSupers);
            let isFirst = true;
            for (const bareSuper of bareSupers) isFirst ? (bareSuper.insertAfter(nodes), isFirst = false) : bareSuper.insertAfter(nodes.map((n) => _core.types.cloneNode(n)));
          } else constructor.get("body").unshiftContainer("body", nodes);
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.22.20/node_modules/@babel/helper-environment-visitor/lib/index.js");
        const findBareSupers = _core.traverse.visitors.merge([{ Super(path3) {
          const { node, parentPath } = path3;
          parentPath.isCallExpression({ callee: node }) && this.push(parentPath);
        } }, _helperEnvironmentVisitor.default]), referenceVisitor = { "TSTypeAnnotation|TypeAnnotation"(path3) {
          path3.skip();
        }, ReferencedIdentifier(path3, { scope }) {
          scope.hasOwnBinding(path3.node.name) && (scope.rename(path3.node.name), path3.skip());
        } };
        function handleClassTDZ(path3, state) {
          if (state.classBinding && state.classBinding === path3.scope.getBinding(path3.node.name)) {
            const classNameTDZError = state.file.addHelper("classNameTDZError"), throwNode = _core.types.callExpression(classNameTDZError, [_core.types.stringLiteral(path3.node.name)]);
            path3.replaceWith(_core.types.sequenceExpression([throwNode, path3.node])), path3.skip();
          }
        }
        const classFieldDefinitionEvaluationTDZVisitor = { ReferencedIdentifier: handleClassTDZ };
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.assertFieldTransformed = function(path3) {
          if (path3.node.declare) throw path3.buildCodeFrameError("TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.\nIf you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional class features:\n - @babel/plugin-transform-class-properties\n - @babel/plugin-transform-private-methods\n - @babel/plugin-proposal-decorators");
        };
      }, "./node_modules/.pnpm/@babel+helper-environment-visitor@7.22.20/node_modules/@babel/helper-environment-visitor/lib/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function requeueComputedKeyAndDecorators(path3) {
          const { context, node } = path3;
          if (node.computed && context.maybeQueue(path3.get("key")), node.decorators) for (const decorator of path3.get("decorators")) context.maybeQueue(decorator);
        }
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0, exports3.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators, exports3.skipAllButComputedKey = function(path3) {
          path3.skip(), path3.node.computed && path3.context.maybeQueue(path3.get("key"));
        };
        var _default = { FunctionParent(path3) {
          path3.isArrowFunctionExpression() || (path3.skip(), path3.isMethod() && requeueComputedKeyAndDecorators(path3));
        }, Property(path3) {
          path3.isObjectProperty() || (path3.skip(), requeueComputedKeyAndDecorators(path3));
        } };
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+helper-function-name@7.23.0/node_modules/@babel/helper-function-name/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function({ node, parent, scope, id }, localBinding = false, supportUnicodeId = false) {
          if (node.id) return;
          if (!isObjectProperty(parent) && !isObjectMethod(parent, { kind: "method" }) || parent.computed && !isLiteral(parent.key)) {
            if (isVariableDeclarator(parent)) {
              if (id = parent.id, isIdentifier(id) && !localBinding) {
                const binding = scope.parent.getBinding(id.name);
                if (binding && binding.constant && scope.getBinding(id.name) === binding) return node.id = cloneNode(id), void (node.id[NOT_LOCAL_BINDING] = true);
              }
            } else if (isAssignmentExpression(parent, { operator: "=" })) id = parent.left;
            else if (!id) return;
          } else id = parent.key;
          let name;
          id && isLiteral(id) ? name = function(id2) {
            if (isNullLiteral(id2)) return "null";
            if (isRegExpLiteral(id2)) return `_${id2.pattern}_${id2.flags}`;
            if (isTemplateLiteral(id2)) return id2.quasis.map((quasi) => quasi.value.raw).join("");
            if (void 0 !== id2.value) return id2.value + "";
            return "";
          }(id) : id && isIdentifier(id) && (name = id.name);
          if (void 0 === name) return;
          if (!supportUnicodeId && isFunction(node) && /[\uD800-\uDFFF]/.test(name)) return;
          name = toBindingIdentifierName(name);
          const newId = identifier(name);
          newId[NOT_LOCAL_BINDING] = true;
          return function(state, method, id2, scope2) {
            if (state.selfReference) {
              if (!scope2.hasBinding(id2.name) || scope2.hasGlobal(id2.name)) {
                if (!isFunction(method)) return;
                let build = buildPropertyMethodAssignmentWrapper;
                method.generator && (build = buildGeneratorPropertyMethodAssignmentWrapper);
                const template = build({ FUNCTION: method, FUNCTION_ID: id2, FUNCTION_KEY: scope2.generateUidIdentifier(id2.name) }).expression, params = template.callee.body.body[0].params;
                for (let i = 0, len = function(node2) {
                  const count = node2.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
                  return -1 === count ? node2.params.length : count;
                }(method); i < len; i++) params.push(scope2.generateUidIdentifier("x"));
                return template;
              }
              scope2.rename(id2.name);
            }
            method.id = id2, scope2.getProgramParent().references[id2.name] = true;
          }(function(node2, name2, scope2) {
            const state = { selfAssignment: false, selfReference: false, outerDeclar: scope2.getBindingIdentifier(name2), name: name2 }, binding = scope2.getOwnBinding(name2);
            binding ? "param" === binding.kind && (state.selfReference = true) : (state.outerDeclar || scope2.hasGlobal(name2)) && scope2.traverse(node2, visitor, state);
            return state;
          }(node, name, scope), node, newId, scope) || node;
        };
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { NOT_LOCAL_BINDING, cloneNode, identifier, isAssignmentExpression, isAssignmentPattern, isFunction, isIdentifier, isLiteral, isNullLiteral, isObjectMethod, isObjectProperty, isRegExpLiteral, isRestElement, isTemplateLiteral, isVariableDeclarator, toBindingIdentifierName } = _t;
        const buildPropertyMethodAssignmentWrapper = _template.default.statement("\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n"), buildGeneratorPropertyMethodAssignmentWrapper = _template.default.statement("\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n"), visitor = { "ReferencedIdentifier|BindingIdentifier"(path3, state) {
          if (path3.node.name !== state.name) return;
          path3.scope.getBindingIdentifier(state.name) === state.outerDeclar && (state.selfReference = true, path3.stop());
        } };
      }, "./node_modules/.pnpm/@babel+helper-hoist-variables@7.22.5/node_modules/@babel/helper-hoist-variables/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(path3, emit, kind = "var") {
          path3.traverse(visitor, { kind, emit });
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { assignmentExpression, expressionStatement, identifier } = _t, visitor = { Scope(path3, state) {
          "let" === state.kind && path3.skip();
        }, FunctionParent(path3) {
          path3.skip();
        }, VariableDeclaration(path3, state) {
          if (state.kind && path3.node.kind !== state.kind) return;
          const nodes = [], declarations = path3.get("declarations");
          let firstId;
          for (const declar of declarations) {
            firstId = declar.node.id, declar.node.init && nodes.push(expressionStatement(assignmentExpression("=", declar.node.id, declar.node.init)));
            for (const name of Object.keys(declar.getBindingIdentifiers())) state.emit(identifier(name), name, null !== declar.node.init);
          }
          path3.parentPath.isFor({ left: path3.node }) ? path3.replaceWith(firstId) : path3.replaceWithMultiple(nodes);
        } };
      }, "./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.23.0/node_modules/@babel/helper-member-expression-to-functions/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        function _interopNamespace(e) {
          if (e && e.__esModule) return e;
          var n = /* @__PURE__ */ Object.create(null);
          return e && Object.keys(e).forEach(function(k) {
            if ("default" !== k) {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : { enumerable: true, get: function() {
                return e[k];
              } });
            }
          }), n.default = e, Object.freeze(n);
        }
        Object.defineProperty(exports3, "__esModule", { value: true });
        var _t__namespace = _interopNamespace(__webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"));
        function willPathCastToBoolean(path3) {
          const maybeWrapped = path3, { node, parentPath } = maybeWrapped;
          if (parentPath.isLogicalExpression()) {
            const { operator, right } = parentPath.node;
            if ("&&" === operator || "||" === operator || "??" === operator && node === right) return willPathCastToBoolean(parentPath);
          }
          if (parentPath.isSequenceExpression()) {
            const { expressions } = parentPath.node;
            return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
          }
          return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
        }
        const { LOGICAL_OPERATORS, arrowFunctionExpression, assignmentExpression, binaryExpression, booleanLiteral, callExpression, cloneNode, conditionalExpression, identifier, isMemberExpression, isOptionalCallExpression, isOptionalMemberExpression, isUpdateExpression, logicalExpression, memberExpression, nullLiteral, optionalCallExpression, optionalMemberExpression, sequenceExpression, updateExpression } = _t__namespace;
        class AssignmentMemoiser {
          constructor() {
            this._map = void 0, this._map = /* @__PURE__ */ new WeakMap();
          }
          has(key) {
            return this._map.has(key);
          }
          get(key) {
            if (!this.has(key)) return;
            const record = this._map.get(key), { value: value2 } = record;
            return record.count--, 0 === record.count ? assignmentExpression("=", value2, key) : value2;
          }
          set(key, value2, count) {
            return this._map.set(key, { count, value: value2 });
          }
        }
        function toNonOptional(path3, base) {
          const { node } = path3;
          if (isOptionalMemberExpression(node)) return memberExpression(base, node.property, node.computed);
          if (path3.isOptionalCallExpression()) {
            const callee = path3.get("callee");
            if (path3.node.optional && callee.isOptionalMemberExpression()) {
              const object = callee.node.object, context = path3.scope.maybeGenerateMemoised(object);
              return callee.get("object").replaceWith(assignmentExpression("=", context, object)), callExpression(memberExpression(base, identifier("call")), [context, ...path3.node.arguments]);
            }
            return callExpression(base, path3.node.arguments);
          }
          return path3.node;
        }
        const handle = { memoise() {
        }, handle(member, noDocumentAll) {
          const { node, parent, parentPath, scope } = member;
          if (member.isOptionalMemberExpression()) {
            if (function(path3) {
              for (; path3 && !path3.isProgram(); ) {
                const { parentPath: parentPath2, container, listKey } = path3, parentNode = parentPath2.node;
                if (listKey) {
                  if (container !== parentNode[listKey]) return true;
                } else if (container !== parentNode) return true;
                path3 = parentPath2;
              }
              return false;
            }(member)) return;
            const endPath = member.find(({ node: node2, parent: parent2 }) => isOptionalMemberExpression(parent2) ? parent2.optional || parent2.object !== node2 : !isOptionalCallExpression(parent2) || (node2 !== member.node && parent2.optional || parent2.callee !== node2));
            if (scope.path.isPattern()) return void endPath.replaceWith(callExpression(arrowFunctionExpression([], endPath.node), []));
            const willEndPathCastToBoolean = willPathCastToBoolean(endPath), rootParentPath = endPath.parentPath;
            if (rootParentPath.isUpdateExpression({ argument: node })) throw member.buildCodeFrameError("can't handle update expression");
            const isAssignment = rootParentPath.isAssignmentExpression({ left: endPath.node }), isDeleteOperation = rootParentPath.isUnaryExpression({ operator: "delete" });
            if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName()) throw member.buildCodeFrameError("can't delete a private class element");
            let startingOptional = member;
            for (; ; ) if (startingOptional.isOptionalMemberExpression()) {
              if (startingOptional.node.optional) break;
              startingOptional = startingOptional.get("object");
            } else {
              if (!startingOptional.isOptionalCallExpression()) throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);
              if (startingOptional.node.optional) break;
              startingOptional = startingOptional.get("callee");
            }
            const startingNode = startingOptional.isOptionalMemberExpression() ? startingOptional.node.object : startingOptional.node.callee, baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode), baseRef = null != baseNeedsMemoised ? baseNeedsMemoised : startingNode, parentIsOptionalCall = parentPath.isOptionalCallExpression({ callee: node }), isOptionalCall = (parent2) => parentIsOptionalCall, parentIsCall = parentPath.isCallExpression({ callee: node });
            startingOptional.replaceWith(toNonOptional(startingOptional, baseRef)), isOptionalCall() ? parent.optional ? parentPath.replaceWith(this.optionalCall(member, parent.arguments)) : parentPath.replaceWith(this.call(member, parent.arguments)) : parentIsCall ? member.replaceWith(this.boundGet(member)) : this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isAssignmentExpression() ? handleAssignment(this, member, parentPath) : member.replaceWith(this.get(member));
            let context, regular = member.node;
            for (let current = member; current !== endPath; ) {
              const parentPath2 = current.parentPath;
              if (parentPath2 === endPath && isOptionalCall() && parent.optional) {
                regular = parentPath2.node;
                break;
              }
              regular = toNonOptional(parentPath2, regular), current = parentPath2;
            }
            const endParentPath = endPath.parentPath;
            if (isMemberExpression(regular) && endParentPath.isOptionalCallExpression({ callee: endPath.node, optional: true })) {
              const { object } = regular;
              context = member.scope.maybeGenerateMemoised(object), context && (regular.object = assignmentExpression("=", context, object));
            }
            let replacementPath = endPath;
            (isDeleteOperation || isAssignment) && (replacementPath = endParentPath, regular = endParentPath.node);
            const baseMemoised = baseNeedsMemoised ? assignmentExpression("=", cloneNode(baseRef), cloneNode(startingNode)) : cloneNode(baseRef);
            if (willEndPathCastToBoolean) {
              let nonNullishCheck;
              nonNullishCheck = noDocumentAll ? binaryExpression("!=", baseMemoised, nullLiteral()) : logicalExpression("&&", binaryExpression("!==", baseMemoised, nullLiteral()), binaryExpression("!==", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(logicalExpression("&&", nonNullishCheck, regular));
            } else {
              let nullishCheck;
              nullishCheck = noDocumentAll ? binaryExpression("==", baseMemoised, nullLiteral()) : logicalExpression("||", binaryExpression("===", baseMemoised, nullLiteral()), binaryExpression("===", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(conditionalExpression(nullishCheck, isDeleteOperation ? booleanLiteral(true) : scope.buildUndefinedNode(), regular));
            }
            if (context) {
              const endParent = endParentPath.node;
              endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee, identifier("call"), false, true), [cloneNode(context), ...endParent.arguments], false));
            }
          } else {
            if (isUpdateExpression(parent, { argument: node })) {
              if (this.simpleSet) return void member.replaceWith(this.simpleSet(member));
              const { operator, prefix } = parent;
              this.memoise(member, 2);
              const ref = scope.generateUidIdentifierBasedOnNode(node);
              scope.push({ id: ref });
              const seq = [assignmentExpression("=", cloneNode(ref), this.get(member))];
              if (prefix) {
                seq.push(updateExpression(operator, cloneNode(ref), prefix));
                const value2 = sequenceExpression(seq);
                return void parentPath.replaceWith(this.set(member, value2));
              }
              {
                const ref2 = scope.generateUidIdentifierBasedOnNode(node);
                scope.push({ id: ref2 }), seq.push(assignmentExpression("=", cloneNode(ref2), updateExpression(operator, cloneNode(ref), prefix)), cloneNode(ref));
                const value2 = sequenceExpression(seq);
                return void parentPath.replaceWith(sequenceExpression([this.set(member, value2), cloneNode(ref2)]));
              }
            }
            if (parentPath.isAssignmentExpression({ left: node })) handleAssignment(this, member, parentPath);
            else {
              if (!parentPath.isCallExpression({ callee: node })) return parentPath.isOptionalCallExpression({ callee: node }) ? scope.path.isPattern() ? void parentPath.replaceWith(callExpression(arrowFunctionExpression([], parentPath.node), [])) : void parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments)) : void (this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isForXStatement({ left: node }) || parentPath.isObjectProperty({ value: node }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isObjectProperty({ value: parent }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement() ? member.replaceWith(this.destructureSet(member)) : parentPath.isTaggedTemplateExpression() ? member.replaceWith(this.boundGet(member)) : member.replaceWith(this.get(member)));
              parentPath.replaceWith(this.call(member, parentPath.node.arguments));
            }
          }
        } };
        function handleAssignment(state, member, parentPath) {
          if (state.simpleSet) return void member.replaceWith(state.simpleSet(member));
          const { operator, right: value2 } = parentPath.node;
          if ("=" === operator) parentPath.replaceWith(state.set(member, value2));
          else {
            const operatorTrunc = operator.slice(0, -1);
            LOGICAL_OPERATORS.includes(operatorTrunc) ? (state.memoise(member, 1), parentPath.replaceWith(logicalExpression(operatorTrunc, state.get(member), state.set(member, value2)))) : (state.memoise(member, 2), parentPath.replaceWith(state.set(member, binaryExpression(operatorTrunc, state.get(member), value2))));
          }
        }
        exports3.default = function(path3, visitor, state) {
          path3.traverse(visitor, Object.assign({}, handle, state, { memoiser: new AssignmentMemoiser() }));
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.22.15/node_modules/@babel/helper-module-imports/lib/import-builder.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { callExpression, cloneNode, expressionStatement, identifier, importDeclaration, importDefaultSpecifier, importNamespaceSpecifier, importSpecifier, memberExpression, stringLiteral, variableDeclaration, variableDeclarator } = _t;
        exports3.default = class {
          constructor(importedSource, scope, hub) {
            this._statements = [], this._resultName = null, this._importedSource = void 0, this._scope = scope, this._hub = hub, this._importedSource = importedSource;
          }
          done() {
            return { statements: this._statements, resultName: this._resultName };
          }
          import() {
            return this._statements.push(importDeclaration([], stringLiteral(this._importedSource))), this;
          }
          require() {
            return this._statements.push(expressionStatement(callExpression(identifier("require"), [stringLiteral(this._importedSource)]))), this;
          }
          namespace(name = "namespace") {
            const local = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importNamespaceSpecifier(local)], this._resultName = cloneNode(local), this;
          }
          default(name) {
            const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importDefaultSpecifier(id)], this._resultName = cloneNode(id), this;
          }
          named(name, importName) {
            if ("default" === importName) return this.default(name);
            const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importSpecifier(id, identifier(importName))], this._resultName = cloneNode(id), this;
          }
          var(name) {
            const id = this._scope.generateUidIdentifier(name);
            let statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" !== statement.type && (_assert(this._resultName), statement = expressionStatement(this._resultName), this._statements.push(statement)), this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]), this._resultName = cloneNode(id), this;
          }
          defaultInterop() {
            return this._interop(this._hub.addHelper("interopRequireDefault"));
          }
          wildcardInterop() {
            return this._interop(this._hub.addHelper("interopRequireWildcard"));
          }
          _interop(callee) {
            const statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" === statement.type ? statement.expression = callExpression(callee, [statement.expression]) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init])) : _assert.fail("Unexpected type."), this;
          }
          prop(name) {
            const statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" === statement.type ? statement.expression = memberExpression(statement.expression, identifier(name)) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name))) : _assert.fail("Unexpected type:" + statement.type), this;
          }
          read(name) {
            this._resultName = memberExpression(this._resultName, identifier(name));
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.22.15/node_modules/@babel/helper-module-imports/lib/import-injector.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _importBuilder = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.22.15/node_modules/@babel/helper-module-imports/lib/import-builder.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.22.15/node_modules/@babel/helper-module-imports/lib/is-module.js");
        const { numericLiteral, sequenceExpression } = _t;
        exports3.default = class {
          constructor(path3, importedSource, opts) {
            this._defaultOpts = { importedSource: null, importedType: "commonjs", importedInterop: "babel", importingInterop: "babel", ensureLiveReference: false, ensureNoContext: false, importPosition: "before" };
            const programPath = path3.find((p) => p.isProgram());
            this._programPath = programPath, this._programScope = programPath.scope, this._hub = programPath.hub, this._defaultOpts = this._applyDefaults(importedSource, opts, true);
          }
          addDefault(importedSourceIn, opts) {
            return this.addNamed("default", importedSourceIn, opts);
          }
          addNamed(importName, importedSourceIn, opts) {
            return _assert("string" == typeof importName), this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
          }
          addNamespace(importedSourceIn, opts) {
            return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
          }
          addSideEffect(importedSourceIn, opts) {
            return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);
          }
          _applyDefaults(importedSource, opts, isInit = false) {
            let newOpts;
            return "string" == typeof importedSource ? newOpts = Object.assign({}, this._defaultOpts, { importedSource }, opts) : (_assert(!opts, "Unexpected secondary arguments."), newOpts = Object.assign({}, this._defaultOpts, importedSource)), !isInit && opts && (void 0 !== opts.nameHint && (newOpts.nameHint = opts.nameHint), void 0 !== opts.blockHoist && (newOpts.blockHoist = opts.blockHoist)), newOpts;
          }
          _generateImport(opts, importName) {
            const isDefault = "default" === importName, isNamed = !!importName && !isDefault, isNamespace = null === importName, { importedSource, importedType, importedInterop, importingInterop, ensureLiveReference, ensureNoContext, nameHint, importPosition, blockHoist } = opts;
            let name = nameHint || importName;
            const isMod = (0, _isModule.default)(this._programPath), isModuleForNode = isMod && "node" === importingInterop, isModuleForBabel = isMod && "babel" === importingInterop;
            if ("after" === importPosition && !isMod) throw new Error('"importPosition": "after" is only supported in modules');
            const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);
            if ("es6" === importedType) {
              if (!isModuleForNode && !isModuleForBabel) throw new Error("Cannot import an ES6 module from CommonJS");
              builder.import(), isNamespace ? builder.namespace(nameHint || importedSource) : (isDefault || isNamed) && builder.named(name, importName);
            } else {
              if ("commonjs" !== importedType) throw new Error(`Unexpected interopType "${importedType}"`);
              if ("babel" === importedInterop) if (isModuleForNode) {
                name = "default" !== name ? name : importedSource;
                const es6Default = `${importedSource}$es6Default`;
                builder.import(), isNamespace ? builder.default(es6Default).var(name || importedSource).wildcardInterop() : isDefault ? ensureLiveReference ? builder.default(es6Default).var(name || importedSource).defaultInterop().read("default") : builder.default(es6Default).var(name).defaultInterop().prop(importName) : isNamed && builder.default(es6Default).read(importName);
              } else isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource).wildcardInterop() : (isDefault || isNamed) && ensureLiveReference ? isDefault ? (name = "default" !== name ? name : importedSource, builder.var(name).read(importName), builder.defaultInterop()) : builder.var(importedSource).read(importName) : isDefault ? builder.var(name).defaultInterop().prop(importName) : isNamed && builder.var(name).prop(importName));
              else if ("compiled" === importedInterop) isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : (isDefault || isNamed) && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : (isDefault || isNamed) && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.prop(importName).var(name)));
              else {
                if ("uncompiled" !== importedInterop) throw new Error(`Unknown importedInterop "${importedInterop}".`);
                if (isDefault && ensureLiveReference) throw new Error("No live reference for commonjs default");
                isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : isDefault ? builder.var(name) : isNamed && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.var(name).prop(importName)));
              }
            }
            const { statements, resultName } = builder.done();
            return this._insertStatements(statements, importPosition, blockHoist), (isDefault || isNamed) && ensureNoContext && "Identifier" !== resultName.type ? sequenceExpression([numericLiteral(0), resultName]) : resultName;
          }
          _insertStatements(statements, importPosition = "before", blockHoist = 3) {
            const body = this._programPath.get("body");
            if ("after" === importPosition) {
              for (let i = body.length - 1; i >= 0; i--) if (body[i].isImportDeclaration()) return void body[i].insertAfter(statements);
            } else {
              statements.forEach((node) => {
                node._blockHoist = blockHoist;
              });
              const targetPath = body.find((p) => {
                const val = p.node._blockHoist;
                return Number.isFinite(val) && val < 4;
              });
              if (targetPath) return void targetPath.insertBefore(statements);
            }
            this._programPath.unshiftContainer("body", statements);
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.22.15/node_modules/@babel/helper-module-imports/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "ImportInjector", { enumerable: true, get: function() {
          return _importInjector.default;
        } }), exports3.addDefault = function(path3, importedSource, opts) {
          return new _importInjector.default(path3).addDefault(importedSource, opts);
        }, exports3.addNamed = function(path3, name, importedSource, opts) {
          return new _importInjector.default(path3).addNamed(name, importedSource, opts);
        }, exports3.addNamespace = function(path3, importedSource, opts) {
          return new _importInjector.default(path3).addNamespace(importedSource, opts);
        }, exports3.addSideEffect = function(path3, importedSource, opts) {
          return new _importInjector.default(path3).addSideEffect(importedSource, opts);
        }, Object.defineProperty(exports3, "isModule", { enumerable: true, get: function() {
          return _isModule.default;
        } });
        var _importInjector = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.22.15/node_modules/@babel/helper-module-imports/lib/import-injector.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.22.15/node_modules/@babel/helper-module-imports/lib/is-module.js");
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.22.15/node_modules/@babel/helper-module-imports/lib/is-module.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(path3) {
          return "module" === path3.node.sourceType;
        };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.buildDynamicImport = function(node, deferToThen, wrapWithPromise, builder) {
          const specifier = _core.types.isCallExpression(node) ? node.arguments[0] : node.source;
          if (_core.types.isStringLiteral(specifier) || _core.types.isTemplateLiteral(specifier) && 0 === specifier.quasis.length) return deferToThen ? _core.template.expression.ast`
        Promise.resolve().then(() => ${builder(specifier)})
      ` : builder(specifier);
          const specifierToString = _core.types.isTemplateLiteral(specifier) ? _core.types.identifier("specifier") : _core.types.templateLiteral([_core.types.templateElement({ raw: "" }), _core.types.templateElement({ raw: "" })], [_core.types.identifier("specifier")]);
          return deferToThen ? _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${specifierToString}))
          .then(s => ${builder(_core.types.identifier("s"))})
      )(${specifier})
    ` : wrapWithPromise ? _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${builder(specifierToString)}))
      )(${specifier})
    ` : _core.template.expression.ast`
      (specifier => ${builder(specifierToString)})(${specifier})
    `;
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js");
        exports3.getDynamicImportSource = function(node) {
          const [source] = node.arguments;
          return _core.types.isStringLiteral(source) || _core.types.isTemplateLiteral(source) ? source : _core.template.expression.ast`\`\${${source}}\``;
        };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/get-module-name.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = getModuleName;
        {
          const originalGetModuleName = getModuleName;
          exports3.default = getModuleName = function(rootOpts, pluginOpts) {
            var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
            return originalGetModuleName(rootOpts, { moduleId: null != (_pluginOpts$moduleId = pluginOpts.moduleId) ? _pluginOpts$moduleId : rootOpts.moduleId, moduleIds: null != (_pluginOpts$moduleIds = pluginOpts.moduleIds) ? _pluginOpts$moduleIds : rootOpts.moduleIds, getModuleId: null != (_pluginOpts$getModule = pluginOpts.getModuleId) ? _pluginOpts$getModule : rootOpts.getModuleId, moduleRoot: null != (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) ? _pluginOpts$moduleRoo : rootOpts.moduleRoot });
          };
        }
        function getModuleName(rootOpts, pluginOpts) {
          const { filename, filenameRelative = filename, sourceRoot = pluginOpts.moduleRoot } = rootOpts, { moduleId, moduleIds = !!moduleId, getModuleId, moduleRoot = sourceRoot } = pluginOpts;
          if (!moduleIds) return null;
          if (null != moduleId && !getModuleId) return moduleId;
          let moduleName = null != moduleRoot ? moduleRoot + "/" : "";
          if (filenameRelative) {
            const sourceRootReplacer = null != sourceRoot ? new RegExp("^" + sourceRoot + "/?") : "";
            moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.(\w*?)$/, "");
          }
          return moduleName = moduleName.replace(/\\/g, "/"), getModuleId && getModuleId(moduleName) || moduleName;
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "buildDynamicImport", { enumerable: true, get: function() {
          return _dynamicImport.buildDynamicImport;
        } }), exports3.buildNamespaceInitStatements = function(metadata, sourceMetadata, constantReexports = false, wrapReference = Lazy.wrapReference) {
          var _wrapReference;
          const statements = [], srcNamespaceId = identifier(sourceMetadata.name);
          for (const localName of sourceMetadata.importsNamespace) localName !== sourceMetadata.name && statements.push(_core.template.statement`var NAME = SOURCE;`({ NAME: localName, SOURCE: cloneNode(srcNamespaceId) }));
          const srcNamespace = null != (_wrapReference = wrapReference(srcNamespaceId, sourceMetadata.wrap)) ? _wrapReference : srcNamespaceId;
          constantReexports && statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true, wrapReference));
          for (const exportName of sourceMetadata.reexportNamespace) statements.push((_core.types.isIdentifier(srcNamespace) ? _core.template.statement`EXPORTS.NAME = NAMESPACE;` : _core.template.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          `)({ EXPORTS: metadata.exportName, NAME: exportName, NAMESPACE: cloneNode(srcNamespace) }));
          if (sourceMetadata.reexportAll) {
            const statement = function(metadata2, namespace, constantReexports2) {
              return (constantReexports2 ? _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({ NAMESPACE: namespace, EXPORTS: metadata2.exportName, VERIFY_NAME_LIST: metadata2.exportNameListName ? _core.template`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({ EXPORTS_LIST: metadata2.exportNameListName }) : null });
            }(metadata, cloneNode(srcNamespace), constantReexports);
            statement.loc = sourceMetadata.reexportAll.loc, statements.push(statement);
          }
          return statements;
        }, exports3.ensureStatementsHoisted = function(statements) {
          statements.forEach((header) => {
            header._blockHoist = 3;
          });
        }, Object.defineProperty(exports3, "getModuleName", { enumerable: true, get: function() {
          return _getModuleName.default;
        } }), Object.defineProperty(exports3, "hasExports", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.hasExports;
        } }), Object.defineProperty(exports3, "isModule", { enumerable: true, get: function() {
          return _helperModuleImports.isModule;
        } }), Object.defineProperty(exports3, "isSideEffectImport", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.isSideEffectImport;
        } }), exports3.rewriteModuleStatementsAndPrepareHeader = function(path3, { exportName, strict, allowTopLevelThis, strictMode, noInterop, importInterop = noInterop ? "none" : "babel", lazy, getWrapperPayload = Lazy.toGetWrapperPayload(null != lazy && lazy), wrapReference = Lazy.wrapReference, esNamespaceOnly, filename, constantReexports = arguments[1].loose, enumerableModuleMeta = arguments[1].loose, noIncompleteNsImportDetection }) {
          (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop), _assert((0, _helperModuleImports.isModule)(path3), "Cannot process module statements in a script"), path3.node.sourceType = "script";
          const meta = (0, _normalizeAndLoadMetadata.default)(path3, exportName, { importInterop, initializeReexports: constantReexports, getWrapperPayload, esNamespaceOnly, filename });
          allowTopLevelThis || (0, _rewriteThis.default)(path3);
          if ((0, _rewriteLiveReferences.default)(path3, meta, wrapReference), false !== strictMode) {
            const hasStrict = path3.node.directives.some((directive2) => "use strict" === directive2.value.value);
            hasStrict || path3.unshiftContainer("directives", directive(directiveLiteral("use strict")));
          }
          const headers = [];
          (0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict && headers.push(function(metadata, enumerableModuleMeta2 = false) {
            return (enumerableModuleMeta2 ? _core.template.statement`
        EXPORTS.__esModule = true;
      ` : _core.template.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({ EXPORTS: metadata.exportName });
          }(meta, enumerableModuleMeta));
          const nameList = function(programPath, metadata) {
            const exportedVars = /* @__PURE__ */ Object.create(null);
            for (const data of metadata.local.values()) for (const name2 of data.names) exportedVars[name2] = true;
            let hasReexport = false;
            for (const data of metadata.source.values()) {
              for (const exportName2 of data.reexports.keys()) exportedVars[exportName2] = true;
              for (const exportName2 of data.reexportNamespace) exportedVars[exportName2] = true;
              hasReexport = hasReexport || !!data.reexportAll;
            }
            if (!hasReexport || 0 === Object.keys(exportedVars).length) return null;
            const name = programPath.scope.generateUidIdentifier("exportNames");
            return delete exportedVars.default, { name: name.name, statement: variableDeclaration("var", [variableDeclarator(name, valueToNode(exportedVars))]) };
          }(path3, meta);
          nameList && (meta.exportNameListName = nameList.name, headers.push(nameList.statement));
          return headers.push(...function(programPath, metadata, wrapReference2, constantReexports2 = false, noIncompleteNsImportDetection2 = false) {
            const initStatements = [];
            for (const [localName, data] of metadata.local) if ("import" === data.kind) ;
            else if ("hoisted" === data.kind) initStatements.push([data.names[0], buildInitStatement(metadata, data.names, identifier(localName))]);
            else if (!noIncompleteNsImportDetection2) for (const exportName2 of data.names) initStatements.push([exportName2, null]);
            for (const data of metadata.source.values()) {
              if (!constantReexports2) {
                const reexportsStatements = buildReexportsFromMeta(metadata, data, false, wrapReference2), reexports = [...data.reexports.keys()];
                for (let i = 0; i < reexportsStatements.length; i++) initStatements.push([reexports[i], reexportsStatements[i]]);
              }
              if (!noIncompleteNsImportDetection2) for (const exportName2 of data.reexportNamespace) initStatements.push([exportName2, null]);
            }
            initStatements.sort(([a], [b]) => a < b ? -1 : b < a ? 1 : 0);
            const results = [];
            if (noIncompleteNsImportDetection2) for (const [, initStatement] of initStatements) results.push(initStatement);
            else {
              const chunkSize = 100;
              for (let i = 0; i < initStatements.length; i += chunkSize) {
                let uninitializedExportNames = [];
                for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {
                  const [exportName2, initStatement] = initStatements[i + j];
                  null !== initStatement ? (uninitializedExportNames.length > 0 && (results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode())), uninitializedExportNames = []), results.push(initStatement)) : uninitializedExportNames.push(exportName2);
                }
                uninitializedExportNames.length > 0 && results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
              }
            }
            return results;
          }(path3, meta, wrapReference, constantReexports, noIncompleteNsImportDetection)), { meta, headers };
        }, Object.defineProperty(exports3, "rewriteThis", { enumerable: true, get: function() {
          return _rewriteThis.default;
        } }), exports3.wrapInterop = function(programPath, expr, type) {
          if ("none" === type) return null;
          if ("node-namespace" === type) return callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, booleanLiteral(true)]);
          if ("node-default" === type) return null;
          let helper;
          if ("default" === type) helper = "interopRequireDefault";
          else {
            if ("namespace" !== type) throw new Error(`Unknown interop: ${type}`);
            helper = "interopRequireWildcard";
          }
          return callExpression(programPath.hub.addHelper(helper), [expr]);
        };
        var _assert = __webpack_require__2("assert"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _helperModuleImports = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.22.15/node_modules/@babel/helper-module-imports/lib/index.js"), _rewriteThis = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js"), _rewriteLiveReferences = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js"), Lazy = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js"), _dynamicImport = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js"), _getModuleName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/get-module-name.js");
        const { booleanLiteral, callExpression, cloneNode, directive, directiveLiteral, expressionStatement, identifier, isIdentifier, memberExpression, stringLiteral, valueToNode, variableDeclaration, variableDeclarator } = _core.types;
        exports3.getDynamicImportSource = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js").getDynamicImportSource;
        const ReexportTemplate = { constant: _core.template.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`, constantComputed: _core.template.statement`EXPORTS["EXPORT_NAME"] = NAMESPACE_IMPORT;`, spec: _core.template.statement`
    Object.defineProperty(EXPORTS, "EXPORT_NAME", {
      enumerable: true,
      get: function() {
        return NAMESPACE_IMPORT;
      },
    });
    ` };
        function buildReexportsFromMeta(meta, metadata, constantReexports, wrapReference) {
          var _wrapReference2;
          let namespace = identifier(metadata.name);
          namespace = null != (_wrapReference2 = wrapReference(namespace, metadata.wrap)) ? _wrapReference2 : namespace;
          const { stringSpecifiers } = meta;
          return Array.from(metadata.reexports, ([exportName, importName]) => {
            let NAMESPACE_IMPORT = cloneNode(namespace);
            "default" === importName && "node-default" === metadata.interop || (NAMESPACE_IMPORT = stringSpecifiers.has(importName) ? memberExpression(NAMESPACE_IMPORT, stringLiteral(importName), true) : memberExpression(NAMESPACE_IMPORT, identifier(importName)));
            const astNodes = { EXPORTS: meta.exportName, EXPORT_NAME: exportName, NAMESPACE_IMPORT };
            return constantReexports || isIdentifier(NAMESPACE_IMPORT) ? stringSpecifiers.has(exportName) ? ReexportTemplate.constantComputed(astNodes) : ReexportTemplate.constant(astNodes) : ReexportTemplate.spec(astNodes);
          });
        }
        const InitTemplate = { computed: _core.template.expression`EXPORTS["NAME"] = VALUE`, default: _core.template.expression`EXPORTS.NAME = VALUE` };
        function buildInitStatement(metadata, exportNames, initExpr) {
          const { stringSpecifiers, exportName: EXPORTS } = metadata;
          return expressionStatement(exportNames.reduce((acc, exportName) => {
            const params = { EXPORTS, NAME: exportName, VALUE: acc };
            return stringSpecifiers.has(exportName) ? InitTemplate.computed(params) : InitTemplate.default(params);
          }, initExpr));
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.toGetWrapperPayload = function(lazy) {
          return (source, metadata) => {
            if (false === lazy) return null;
            if ((0, _normalizeAndLoadMetadata.isSideEffectImport)(metadata) || metadata.reexportAll) return null;
            if (true === lazy) return /\./.test(source) ? null : "lazy";
            if (Array.isArray(lazy)) return -1 === lazy.indexOf(source) ? null : "lazy";
            if ("function" == typeof lazy) return lazy(source) ? "lazy" : null;
            throw new Error(".lazy must be a boolean, string array, or function");
          };
        }, exports3.wrapReference = function(ref, payload) {
          return "lazy" === payload ? _core.types.callExpression(ref, []) : null;
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js");
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(programPath, exportName, { importInterop, initializeReexports = false, getWrapperPayload, esNamespaceOnly = false, filename }) {
          exportName || (exportName = programPath.scope.generateUidIdentifier("exports").name);
          const stringSpecifiers = /* @__PURE__ */ new Set();
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              child.isExportDefaultDeclaration() && (0, _helperSplitExportDeclaration.default)(child);
            });
          }(programPath);
          const { local, sources, hasExports } = function(programPath2, { getWrapperPayload: getWrapperPayload2, initializeReexports: initializeReexports2 }, stringSpecifiers2) {
            const localData = function(programPath3, initializeReexports3, stringSpecifiers3) {
              const bindingKindLookup = /* @__PURE__ */ new Map();
              programPath3.get("body").forEach((child) => {
                let kind;
                if (child.isImportDeclaration()) kind = "import";
                else {
                  if (child.isExportDefaultDeclaration() && (child = child.get("declaration")), child.isExportNamedDeclaration()) {
                    if (child.node.declaration) child = child.get("declaration");
                    else if (initializeReexports3 && child.node.source && child.get("source").isStringLiteral()) return void child.get("specifiers").forEach((spec) => {
                      assertExportSpecifier(spec), bindingKindLookup.set(spec.get("local").node.name, "block");
                    });
                  }
                  if (child.isFunctionDeclaration()) kind = "hoisted";
                  else if (child.isClassDeclaration()) kind = "block";
                  else if (child.isVariableDeclaration({ kind: "var" })) kind = "var";
                  else {
                    if (!child.isVariableDeclaration()) return;
                    kind = "block";
                  }
                }
                Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
                  bindingKindLookup.set(name, kind);
                });
              });
              const localMetadata = /* @__PURE__ */ new Map(), getLocalMetadata = (idPath) => {
                const localName = idPath.node.name;
                let metadata = localMetadata.get(localName);
                if (!metadata) {
                  const kind = bindingKindLookup.get(localName);
                  if (void 0 === kind) throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
                  metadata = { names: [], kind }, localMetadata.set(localName, metadata);
                }
                return metadata;
              };
              return programPath3.get("body").forEach((child) => {
                if (!child.isExportNamedDeclaration() || !initializeReexports3 && child.node.source) {
                  if (child.isExportDefaultDeclaration()) {
                    const declaration = child.get("declaration");
                    if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration()) throw declaration.buildCodeFrameError("Unexpected default expression export.");
                    getLocalMetadata(declaration.get("id")).names.push("default");
                  }
                } else if (child.node.declaration) {
                  const declaration = child.get("declaration"), ids = declaration.getOuterBindingIdentifierPaths();
                  Object.keys(ids).forEach((name) => {
                    if ("__esModule" === name) throw declaration.buildCodeFrameError('Illegal export "__esModule".');
                    getLocalMetadata(ids[name]).names.push(name);
                  });
                } else child.get("specifiers").forEach((spec) => {
                  const local2 = spec.get("local"), exported = spec.get("exported"), localMetadata2 = getLocalMetadata(local2), exportName2 = getExportSpecifierName(exported, stringSpecifiers3);
                  if ("__esModule" === exportName2) throw exported.buildCodeFrameError('Illegal export "__esModule".');
                  localMetadata2.names.push(exportName2);
                });
              }), localMetadata;
            }(programPath2, initializeReexports2, stringSpecifiers2), importNodes = /* @__PURE__ */ new Map(), sourceData = /* @__PURE__ */ new Map(), getData = (sourceNode, node) => {
              const source = sourceNode.value;
              let data = sourceData.get(source);
              return data ? importNodes.get(source).push(node) : (data = { name: programPath2.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name, interop: "none", loc: null, imports: /* @__PURE__ */ new Map(), importsNamespace: /* @__PURE__ */ new Set(), reexports: /* @__PURE__ */ new Map(), reexportNamespace: /* @__PURE__ */ new Set(), reexportAll: null, wrap: null, get lazy() {
                return "lazy" === this.wrap;
              }, referenced: false }, sourceData.set(source, data), importNodes.set(source, [node])), data;
            };
            let hasExports2 = false;
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration()) {
                const data = getData(child.node.source, child.node);
                data.loc || (data.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  if (spec.isImportDefaultSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data.imports.set(localName, "default");
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexports.set(name, "default");
                    }), data.referenced = true);
                  } else if (spec.isImportNamespaceSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data.importsNamespace.add(localName);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexportNamespace.add(name);
                    }), data.referenced = true);
                  } else if (spec.isImportSpecifier()) {
                    const importName = getExportSpecifierName(spec.get("imported"), stringSpecifiers2), localName = spec.get("local").node.name;
                    data.imports.set(localName, importName);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexports.set(name, importName);
                    }), data.referenced = true);
                  }
                });
              } else if (child.isExportAllDeclaration()) {
                hasExports2 = true;
                const data = getData(child.node.source, child.node);
                data.loc || (data.loc = child.node.loc), data.reexportAll = { loc: child.node.loc }, data.referenced = true;
              } else if (child.isExportNamedDeclaration() && child.node.source) {
                hasExports2 = true;
                const data = getData(child.node.source, child.node);
                data.loc || (data.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  assertExportSpecifier(spec);
                  const importName = getExportSpecifierName(spec.get("local"), stringSpecifiers2), exportName2 = getExportSpecifierName(spec.get("exported"), stringSpecifiers2);
                  if (data.reexports.set(exportName2, importName), data.referenced = true, "__esModule" === exportName2) throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".');
                });
              } else (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) && (hasExports2 = true);
            });
            for (const metadata of sourceData.values()) {
              let needsDefault = false, needsNamed = false;
              metadata.importsNamespace.size > 0 && (needsDefault = true, needsNamed = true), metadata.reexportAll && (needsNamed = true);
              for (const importName of metadata.imports.values()) "default" === importName ? needsDefault = true : needsNamed = true;
              for (const importName of metadata.reexports.values()) "default" === importName ? needsDefault = true : needsNamed = true;
              needsDefault && needsNamed ? metadata.interop = "namespace" : needsDefault && (metadata.interop = "default");
            }
            if (getWrapperPayload2) for (const [source, metadata] of sourceData) metadata.wrap = getWrapperPayload2(source, metadata, importNodes.get(source));
            return { hasExports: hasExports2, local: localData, sources: sourceData };
          }(programPath, { initializeReexports, getWrapperPayload }, stringSpecifiers);
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration()) child.remove();
              else if (child.isExportNamedDeclaration()) child.node.declaration ? (child.node.declaration._blockHoist = child.node._blockHoist, child.replaceWith(child.node.declaration)) : child.remove();
              else if (child.isExportDefaultDeclaration()) {
                const declaration = child.get("declaration");
                if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration()) throw declaration.buildCodeFrameError("Unexpected default expression export.");
                declaration._blockHoist = child.node._blockHoist, child.replaceWith(declaration);
              } else child.isExportAllDeclaration() && child.remove();
            });
          }(programPath);
          for (const [source, metadata] of sources) {
            const { importsNamespace, imports } = metadata;
            if (importsNamespace.size > 0 && 0 === imports.size) {
              const [nameOfnamespace] = importsNamespace;
              metadata.name = nameOfnamespace;
            }
            const resolvedInterop = resolveImportInterop(importInterop, source, filename);
            "none" === resolvedInterop ? metadata.interop = "none" : "node" === resolvedInterop && "namespace" === metadata.interop ? metadata.interop = "node-namespace" : "node" === resolvedInterop && "default" === metadata.interop ? metadata.interop = "node-default" : esNamespaceOnly && "namespace" === metadata.interop && (metadata.interop = "default");
          }
          return { exportName, exportNameListName: null, hasExports, local, source: sources, stringSpecifiers };
        }, exports3.hasExports = function(metadata) {
          return metadata.hasExports;
        }, exports3.isSideEffectImport = function(source) {
          return 0 === source.imports.size && 0 === source.importsNamespace.size && 0 === source.reexports.size && 0 === source.reexportNamespace.size && !source.reexportAll;
        }, exports3.validateImportInteropOption = validateImportInteropOption;
        var _path = __webpack_require__2("path"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.22.20/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.22.6/node_modules/@babel/helper-split-export-declaration/lib/index.js");
        function validateImportInteropOption(importInterop) {
          if ("function" != typeof importInterop && "none" !== importInterop && "babel" !== importInterop && "node" !== importInterop) throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
          return importInterop;
        }
        function resolveImportInterop(importInterop, source, filename) {
          return "function" == typeof importInterop ? validateImportInteropOption(importInterop(source, filename)) : importInterop;
        }
        function getExportSpecifierName(path3, stringSpecifiers) {
          if (path3.isIdentifier()) return path3.node.name;
          if (path3.isStringLiteral()) {
            const stringValue = path3.node.value;
            return (0, _helperValidatorIdentifier.isIdentifierName)(stringValue) || stringSpecifiers.add(stringValue), stringValue;
          }
          throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path3.node.type}`);
        }
        function assertExportSpecifier(path3) {
          if (!path3.isExportSpecifier()) throw path3.isExportNamespaceSpecifier() ? path3.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-transform-export-namespace-from`.") : path3.buildCodeFrameError("Unexpected export specifier type");
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(programPath, metadata, wrapReference) {
          const imported = /* @__PURE__ */ new Map(), exported = /* @__PURE__ */ new Map(), requeueInParent = (path3) => {
            programPath.requeue(path3);
          };
          for (const [source, data] of metadata.source) {
            for (const [localName, importName] of data.imports) imported.set(localName, [source, importName, null]);
            for (const localName of data.importsNamespace) imported.set(localName, [source, null, localName]);
          }
          for (const [local, data] of metadata.local) {
            let exportMeta = exported.get(local);
            exportMeta || (exportMeta = [], exported.set(local, exportMeta)), exportMeta.push(...data.names);
          }
          const rewriteBindingInitVisitorState = { metadata, requeueInParent, scope: programPath.scope, exported };
          programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);
          const bindingNames = /* @__PURE__ */ new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]);
          (0, _helperSimpleAccess.default)(programPath, bindingNames, false);
          const rewriteReferencesVisitorState = { seen: /* @__PURE__ */ new WeakSet(), metadata, requeueInParent, scope: programPath.scope, imported, exported, buildImportReference([source, importName, localName], identNode) {
            const meta = metadata.source.get(source);
            if (meta.referenced = true, localName) {
              var _wrapReference;
              if (meta.wrap) identNode = null != (_wrapReference = wrapReference(identNode, meta.wrap)) ? _wrapReference : identNode;
              return identNode;
            }
            let namespace = identifier(meta.name);
            var _wrapReference2;
            meta.wrap && (namespace = null != (_wrapReference2 = wrapReference(namespace, meta.wrap)) ? _wrapReference2 : namespace);
            if ("default" === importName && "node-default" === meta.interop) return namespace;
            const computed = metadata.stringSpecifiers.has(importName);
            return memberExpression(namespace, computed ? stringLiteral(importName) : identifier(importName), computed);
          } };
          programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
        };
        var _assert = __webpack_require__2("assert"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _helperSimpleAccess = __webpack_require__2("./node_modules/.pnpm/@babel+helper-simple-access@7.22.5/node_modules/@babel/helper-simple-access/lib/index.js");
        const { assignmentExpression, cloneNode, expressionStatement, getOuterBindingIdentifiers, identifier, isArrowFunctionExpression, isClassExpression, isFunctionExpression, isIdentifier, isMemberExpression, isVariableDeclaration, jsxIdentifier, jsxMemberExpression, memberExpression, numericLiteral, sequenceExpression, stringLiteral, variableDeclaration, variableDeclarator } = _core.types;
        const rewriteBindingInitVisitor = { Scope(path3) {
          path3.skip();
        }, ClassDeclaration(path3) {
          const { requeueInParent, exported, metadata } = this, { id } = path3.node;
          if (!id) throw new Error("Expected class to have a name");
          const localName = id.name, exportNames = exported.get(localName) || [];
          if (exportNames.length > 0) {
            const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName), path3.scope));
            statement._blockHoist = path3.node._blockHoist, requeueInParent(path3.insertAfter(statement)[0]);
          }
        }, VariableDeclaration(path3) {
          const { requeueInParent, exported, metadata } = this, isVar = "var" === path3.node.kind;
          for (const decl of path3.get("declarations")) {
            const { id } = decl.node;
            let { init } = decl.node;
            if (!isIdentifier(id) || !exported.has(id.name) || isArrowFunctionExpression(init) || isFunctionExpression(init) && !init.id || isClassExpression(init) && !init.id) {
              for (const localName of Object.keys(decl.getOuterBindingIdentifiers())) if (exported.has(localName)) {
                const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exported.get(localName), identifier(localName), path3.scope));
                statement._blockHoist = path3.node._blockHoist, requeueInParent(path3.insertAfter(statement)[0]);
              }
            } else {
              if (!init) {
                if (isVar) continue;
                init = path3.scope.buildUndefinedNode();
              }
              decl.node.init = buildBindingExportAssignmentExpression(metadata, exported.get(id.name), init, path3.scope), requeueInParent(decl.get("init"));
            }
          }
        } }, buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {
          const exportsObjectName = metadata.exportName;
          for (let currentScope = scope; null != currentScope; currentScope = currentScope.parent) currentScope.hasOwnBinding(exportsObjectName) && currentScope.rename(exportsObjectName);
          return (exportNames || []).reduce((expr, exportName) => {
            const { stringSpecifiers } = metadata, computed = stringSpecifiers.has(exportName);
            return assignmentExpression("=", memberExpression(identifier(exportsObjectName), computed ? stringLiteral(exportName) : identifier(exportName), computed), expr);
          }, localExpr);
        }, buildImportThrow = (localName) => _core.template.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `, rewriteReferencesVisitor = { ReferencedIdentifier(path3) {
          const { seen, buildImportReference, scope, imported, requeueInParent } = this;
          if (seen.has(path3.node)) return;
          seen.add(path3.node);
          const localName = path3.node.name, importData = imported.get(localName);
          if (importData) {
            if (function(path4) {
              do {
                switch (path4.parent.type) {
                  case "TSTypeAnnotation":
                  case "TSTypeAliasDeclaration":
                  case "TSTypeReference":
                  case "TypeAnnotation":
                  case "TypeAlias":
                    return true;
                  case "ExportSpecifier":
                    return "type" === path4.parentPath.parent.exportKind;
                  default:
                    if (path4.parentPath.isStatement() || path4.parentPath.isExpression()) return false;
                }
              } while (path4 = path4.parentPath);
            }(path3)) throw path3.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
            const localBinding = path3.scope.getBinding(localName);
            if (scope.getBinding(localName) !== localBinding) return;
            const ref = buildImportReference(importData, path3.node);
            if (ref.loc = path3.node.loc, (path3.parentPath.isCallExpression({ callee: path3.node }) || path3.parentPath.isOptionalCallExpression({ callee: path3.node }) || path3.parentPath.isTaggedTemplateExpression({ tag: path3.node })) && isMemberExpression(ref)) path3.replaceWith(sequenceExpression([numericLiteral(0), ref]));
            else if (path3.isJSXIdentifier() && isMemberExpression(ref)) {
              const { object, property } = ref;
              path3.replaceWith(jsxMemberExpression(jsxIdentifier(object.name), jsxIdentifier(property.name)));
            } else path3.replaceWith(ref);
            requeueInParent(path3), path3.skip();
          }
        }, UpdateExpression(path3) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path3.node)) return;
          seen.add(path3.node);
          const arg = path3.get("argument");
          if (arg.isMemberExpression()) return;
          const update = path3.node;
          if (arg.isIdentifier()) {
            const localName = arg.node.name;
            if (scope.getBinding(localName) !== path3.scope.getBinding(localName)) return;
            const exportedNames = exported.get(localName), importData = imported.get(localName);
            if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) if (importData) path3.replaceWith(assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
            else if (update.prefix) path3.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, cloneNode(update), path3.scope));
            else {
              const ref = scope.generateDeclaredUidIdentifier(localName);
              path3.replaceWith(sequenceExpression([assignmentExpression("=", cloneNode(ref), cloneNode(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName), path3.scope), cloneNode(ref)]));
            }
          }
          requeueInParent(path3), path3.skip();
        }, AssignmentExpression: { exit(path3) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path3.node)) return;
          seen.add(path3.node);
          const left = path3.get("left");
          if (!left.isMemberExpression()) if (left.isIdentifier()) {
            const localName = left.node.name;
            if (scope.getBinding(localName) !== path3.scope.getBinding(localName)) return;
            const exportedNames = exported.get(localName), importData = imported.get(localName);
            if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) {
              _assert("=" === path3.node.operator, "Path was not simplified");
              const assignment = path3.node;
              importData && (assignment.left = buildImportReference(importData, left.node), assignment.right = sequenceExpression([assignment.right, buildImportThrow(localName)])), path3.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment, path3.scope)), requeueInParent(path3);
            }
          } else {
            const ids = left.getOuterBindingIdentifiers(), programScopeIds = Object.keys(ids).filter((localName) => scope.getBinding(localName) === path3.scope.getBinding(localName)), id = programScopeIds.find((localName) => imported.has(localName));
            id && (path3.node.right = sequenceExpression([path3.node.right, buildImportThrow(id)]));
            const items = [];
            if (programScopeIds.forEach((localName) => {
              const exportedNames = exported.get(localName) || [];
              exportedNames.length > 0 && items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName), path3.scope));
            }), items.length > 0) {
              let node = sequenceExpression(items);
              path3.parentPath.isExpressionStatement() && (node = expressionStatement(node), node._blockHoist = path3.parentPath.node._blockHoist);
              requeueInParent(path3.insertAfter(node)[0]);
            }
          }
        } }, "ForOfStatement|ForInStatement"(path3) {
          const { scope, node } = path3, { left } = node, { exported, imported, scope: programScope } = this;
          if (!isVariableDeclaration(left)) {
            let importConstViolationName, didTransformExport = false;
            const loopBodyScope = path3.get("body").scope;
            for (const name of Object.keys(getOuterBindingIdentifiers(left))) programScope.getBinding(name) === scope.getBinding(name) && (exported.has(name) && (didTransformExport = true, loopBodyScope.hasOwnBinding(name) && loopBodyScope.rename(name)), imported.has(name) && !importConstViolationName && (importConstViolationName = name));
            if (!didTransformExport && !importConstViolationName) return;
            path3.ensureBlock();
            const bodyPath = path3.get("body"), newLoopId = scope.generateUidIdentifierBasedOnNode(left);
            path3.get("left").replaceWith(variableDeclaration("let", [variableDeclarator(cloneNode(newLoopId))])), scope.registerDeclaration(path3.get("left")), didTransformExport && bodyPath.unshiftContainer("body", expressionStatement(assignmentExpression("=", left, newLoopId))), importConstViolationName && bodyPath.unshiftContainer("body", expressionStatement(buildImportThrow(importConstViolationName)));
          }
        } };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(programPath) {
          (0, _core.traverse)(programPath.node, Object.assign({}, rewriteThisVisitor, { noScope: true }));
        };
        var _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.22.20/node_modules/@babel/helper-environment-visitor/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js");
        const { numericLiteral, unaryExpression } = _core.types, rewriteThisVisitor = _core.traverse.visitors.merge([_helperEnvironmentVisitor.default, { ThisExpression(path3) {
          path3.replaceWith(unaryExpression("void", numericLiteral(0), true));
        } }]);
      }, "./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.22.5/node_modules/@babel/helper-optimise-call-expression/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(callee, thisNode, args, optional) {
          return 1 === args.length && isSpreadElement(args[0]) && isIdentifier(args[0].argument, { name: "arguments" }) ? optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("apply"), false, true), [thisNode, args[0].argument], false) : callExpression(memberExpression(callee, identifier("apply")), [thisNode, args[0].argument]) : optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("call"), false, true), [thisNode, ...args], false) : callExpression(memberExpression(callee, identifier("call")), [thisNode, ...args]);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { callExpression, identifier, isIdentifier, isSpreadElement, memberExpression, optionalCallExpression, optionalMemberExpression } = _t;
      }, "./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.declare = declare, exports3.declarePreset = void 0;
        const apiPolyfills = { assertVersion: (api) => (range) => {
          !function(range2, version) {
            if ("number" == typeof range2) {
              if (!Number.isInteger(range2)) throw new Error("Expected string or integer value.");
              range2 = `^${range2}.0.0-0`;
            }
            if ("string" != typeof range2) throw new Error("Expected string or integer value.");
            const limit = Error.stackTraceLimit;
            "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
            let err;
            err = "7." === version.slice(0, 2) ? new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version}". You'll need to update your @babel/core version.`) : new Error(`Requires Babel "${range2}", but was loaded with "${version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
            "number" == typeof limit && (Error.stackTraceLimit = limit);
            throw Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version, range: range2 });
          }(range, api.version);
        } };
        function declare(builder) {
          return (api, options, dirname) => {
            var _clonedApi2;
            let clonedApi;
            for (const name of Object.keys(apiPolyfills)) {
              api[name] || (null != clonedApi || (clonedApi = copyApiObject(api)), clonedApi[name] = apiPolyfills[name](clonedApi));
            }
            return builder(null != (_clonedApi2 = clonedApi) ? _clonedApi2 : api, options || {}, dirname);
          };
        }
        Object.assign(apiPolyfills, { targets: () => () => ({}), assumption: () => () => {
        } });
        const declarePreset = declare;
        function copyApiObject(api) {
          let proto = null;
          return "string" == typeof api.version && /^7\./.test(api.version) && (proto = Object.getPrototypeOf(api), !proto || has(proto, "version") && has(proto, "transform") && has(proto, "template") && has(proto, "types") || (proto = null)), Object.assign({}, proto, api);
        }
        function has(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }
        exports3.declarePreset = declarePreset;
      }, "./node_modules/.pnpm/@babel+helper-replace-supers@7.22.20_@babel+core@7.23.2/node_modules/@babel/helper-replace-supers/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.22.20/node_modules/@babel/helper-environment-visitor/lib/index.js"), _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.23.0/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.22.5/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js");
        const { assignmentExpression, booleanLiteral, callExpression, cloneNode, identifier, memberExpression, sequenceExpression, stringLiteral, thisExpression } = _core.types;
        {
          const ns = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.22.20/node_modules/@babel/helper-environment-visitor/lib/index.js");
          exports3.environmentVisitor = ns.default, exports3.skipAllButComputedKey = ns.skipAllButComputedKey;
        }
        function getPrototypeOfExpression(objectRef, isStatic, file, isPrivateMethod) {
          objectRef = cloneNode(objectRef);
          const targetRef = isStatic || isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
          return callExpression(file.addHelper("getPrototypeOf"), [targetRef]);
        }
        const visitor = _core.traverse.visitors.merge([_helperEnvironmentVisitor.default, { Super(path3, state) {
          const { node, parentPath } = path3;
          parentPath.isMemberExpression({ object: node }) && state.handle(parentPath);
        } }]), unshadowSuperBindingVisitor = _core.traverse.visitors.merge([_helperEnvironmentVisitor.default, { Scopable(path3, { refName }) {
          const binding = path3.scope.getOwnBinding(refName);
          binding && binding.identifier.name === refName && path3.scope.rename(refName);
        } }]), specHandlers = { memoise(superMember, count) {
          const { scope, node } = superMember, { computed, property } = node;
          if (!computed) return;
          const memo = scope.maybeGenerateMemoised(property);
          memo && this.memoiser.set(property, memo, count);
        }, prop(superMember) {
          const { computed, property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : computed ? cloneNode(property) : stringLiteral(property.name);
        }, get(superMember) {
          return this._get(superMember, this._getThisRefs());
        }, _get(superMember, thisRefs) {
          const proto = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
          return callExpression(this.file.addHelper("get"), [thisRefs.memo ? sequenceExpression([thisRefs.memo, proto]) : proto, this.prop(superMember), thisRefs.this]);
        }, _getThisRefs() {
          if (!this.isDerivedConstructor) return { this: thisExpression() };
          const thisRef = this.scope.generateDeclaredUidIdentifier("thisSuper");
          return { memo: assignmentExpression("=", thisRef, thisExpression()), this: cloneNode(thisRef) };
        }, set(superMember, value2) {
          const thisRefs = this._getThisRefs(), proto = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
          return callExpression(this.file.addHelper("set"), [thisRefs.memo ? sequenceExpression([thisRefs.memo, proto]) : proto, this.prop(superMember), value2, thisRefs.this, booleanLiteral(superMember.isInStrictMode())]);
        }, destructureSet(superMember) {
          throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
        }, call(superMember, args) {
          const thisRefs = this._getThisRefs();
          return (0, _helperOptimiseCallExpression.default)(this._get(superMember, thisRefs), cloneNode(thisRefs.this), args, false);
        }, optionalCall(superMember, args) {
          const thisRefs = this._getThisRefs();
          return (0, _helperOptimiseCallExpression.default)(this._get(superMember, thisRefs), cloneNode(thisRefs.this), args, true);
        }, delete(superMember) {
          return superMember.node.computed ? sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
        } }, looseHandlers = Object.assign({}, specHandlers, { prop(superMember) {
          const { property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : cloneNode(property);
        }, get(superMember) {
          const { isStatic, getSuperRef } = this, { computed } = superMember.node, prop = this.prop(superMember);
          let object;
          var _getSuperRef, _getSuperRef2;
          isStatic ? object = null != (_getSuperRef = getSuperRef()) ? _getSuperRef : memberExpression(identifier("Function"), identifier("prototype")) : object = memberExpression(null != (_getSuperRef2 = getSuperRef()) ? _getSuperRef2 : identifier("Object"), identifier("prototype"));
          return memberExpression(object, prop, computed);
        }, set(superMember, value2) {
          const { computed } = superMember.node, prop = this.prop(superMember);
          return assignmentExpression("=", memberExpression(thisExpression(), prop, computed), value2);
        }, destructureSet(superMember) {
          const { computed } = superMember.node, prop = this.prop(superMember);
          return memberExpression(thisExpression(), prop, computed);
        }, call(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, false);
        }, optionalCall(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, true);
        } });
        exports3.default = class {
          constructor(opts) {
            var _opts$constantSuper;
            const path3 = opts.methodPath;
            this.methodPath = path3, this.isDerivedConstructor = path3.isClassMethod({ kind: "constructor" }) && !!opts.superRef, this.isStatic = path3.isObjectMethod() || path3.node.static || (null == path3.isStaticBlock ? void 0 : path3.isStaticBlock()), this.isPrivateMethod = path3.isPrivate() && path3.isMethod(), this.file = opts.file, this.constantSuper = null != (_opts$constantSuper = opts.constantSuper) ? _opts$constantSuper : opts.isLoose, this.opts = opts;
          }
          getObjectRef() {
            return cloneNode(this.opts.objectRef || this.opts.getObjectRef());
          }
          getSuperRef() {
            return this.opts.superRef ? cloneNode(this.opts.superRef) : this.opts.getSuperRef ? cloneNode(this.opts.getSuperRef()) : void 0;
          }
          replace() {
            this.opts.refToPreserve && this.methodPath.traverse(unshadowSuperBindingVisitor, { refName: this.opts.refToPreserve.name });
            const handler = this.constantSuper ? looseHandlers : specHandlers;
            (0, _helperMemberExpressionToFunctions.default)(this.methodPath, visitor, Object.assign({ file: this.file, scope: this.methodPath.scope, isDerivedConstructor: this.isDerivedConstructor, isStatic: this.isStatic, isPrivateMethod: this.isPrivateMethod, getObjectRef: this.getObjectRef.bind(this), getSuperRef: this.getSuperRef.bind(this), boundGet: handler.get }, handler));
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-simple-access@7.22.5/node_modules/@babel/helper-simple-access/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(path3, bindingNames) {
          var _arguments$;
          path3.traverse(simpleAssignmentVisitor, { scope: path3.scope, bindingNames, seen: /* @__PURE__ */ new WeakSet(), includeUpdateExpression: null == (_arguments$ = arguments[2]) || _arguments$ });
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { LOGICAL_OPERATORS, assignmentExpression, binaryExpression, cloneNode, identifier, logicalExpression, numericLiteral, sequenceExpression, unaryExpression } = _t, simpleAssignmentVisitor = { AssignmentExpression: { exit(path3) {
          const { scope, seen, bindingNames } = this;
          if ("=" === path3.node.operator) return;
          if (seen.has(path3.node)) return;
          seen.add(path3.node);
          const left = path3.get("left");
          if (!left.isIdentifier()) return;
          const localName = left.node.name;
          if (!bindingNames.has(localName)) return;
          if (scope.getBinding(localName) !== path3.scope.getBinding(localName)) return;
          const operator = path3.node.operator.slice(0, -1);
          LOGICAL_OPERATORS.includes(operator) ? path3.replaceWith(logicalExpression(operator, path3.node.left, assignmentExpression("=", cloneNode(path3.node.left), path3.node.right))) : (path3.node.right = binaryExpression(operator, cloneNode(path3.node.left), path3.node.right), path3.node.operator = "=");
        } } };
        simpleAssignmentVisitor.UpdateExpression = { exit(path3) {
          if (!this.includeUpdateExpression) return;
          const { scope, bindingNames } = this, arg = path3.get("argument");
          if (!arg.isIdentifier()) return;
          const localName = arg.node.name;
          if (bindingNames.has(localName) && scope.getBinding(localName) === path3.scope.getBinding(localName)) if (path3.parentPath.isExpressionStatement() && !path3.isCompletionRecord()) {
            const operator = "++" == path3.node.operator ? "+=" : "-=";
            path3.replaceWith(assignmentExpression(operator, arg.node, numericLiteral(1)));
          } else if (path3.node.prefix) path3.replaceWith(assignmentExpression("=", identifier(localName), binaryExpression(path3.node.operator[0], unaryExpression("+", arg.node), numericLiteral(1))));
          else {
            const old = path3.scope.generateUidIdentifierBasedOnNode(arg.node, "old"), varName = old.name;
            path3.scope.push({ id: old });
            const binary = binaryExpression(path3.node.operator[0], identifier(varName), numericLiteral(1));
            path3.replaceWith(sequenceExpression([assignmentExpression("=", identifier(varName), unaryExpression("+", arg.node)), assignmentExpression("=", cloneNode(arg.node), binary), identifier(varName)]));
          }
        } };
      }, "./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.22.5/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isTransparentExprWrapper = isTransparentExprWrapper, exports3.skipTransparentExprWrapperNodes = function(node) {
          for (; isTransparentExprWrapper(node); ) node = node.expression;
          return node;
        }, exports3.skipTransparentExprWrappers = function(path3) {
          for (; isTransparentExprWrapper(path3.node); ) path3 = path3.get("expression");
          return path3;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { isParenthesizedExpression, isTSAsExpression, isTSNonNullExpression, isTSSatisfiesExpression, isTSTypeAssertion, isTypeCastExpression } = _t;
        function isTransparentExprWrapper(node) {
          return isTSAsExpression(node) || isTSSatisfiesExpression(node) || isTSTypeAssertion(node) || isTSNonNullExpression(node) || isTypeCastExpression(node) || isParenthesizedExpression(node);
        }
      }, "./node_modules/.pnpm/@babel+helper-split-export-declaration@7.22.6/node_modules/@babel/helper-split-export-declaration/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(exportDeclaration) {
          if (!exportDeclaration.isExportDeclaration() || exportDeclaration.isExportAllDeclaration()) throw new Error("Only default and named export declarations can be split.");
          if (exportDeclaration.isExportDefaultDeclaration()) {
            const declaration2 = exportDeclaration.get("declaration"), standaloneDeclaration = declaration2.isFunctionDeclaration() || declaration2.isClassDeclaration(), exportExpr = declaration2.isFunctionExpression() || declaration2.isClassExpression(), scope = declaration2.isScope() ? declaration2.scope.parent : declaration2.scope;
            let id = declaration2.node.id, needBindingRegistration = false;
            id ? exportExpr && scope.hasBinding(id.name) && (needBindingRegistration = true, id = scope.generateUidIdentifier(id.name)) : (needBindingRegistration = true, id = scope.generateUidIdentifier("default"), (standaloneDeclaration || exportExpr) && (declaration2.node.id = cloneNode(id)));
            const updatedDeclaration = standaloneDeclaration ? declaration2.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), declaration2.node)]), updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);
            return exportDeclaration.insertAfter(updatedExportDeclaration), exportDeclaration.replaceWith(updatedDeclaration), needBindingRegistration && scope.registerDeclaration(exportDeclaration), exportDeclaration;
          }
          if (exportDeclaration.get("specifiers").length > 0) throw new Error("It doesn't make sense to split exported specifiers.");
          const declaration = exportDeclaration.get("declaration"), bindingIdentifiers = declaration.getOuterBindingIdentifiers(), specifiers = Object.keys(bindingIdentifiers).map((name) => exportSpecifier(identifier(name), identifier(name))), aliasDeclar = exportNamedDeclaration(null, specifiers);
          return exportDeclaration.insertAfter(aliasDeclar), exportDeclaration.replaceWith(declaration.node), exportDeclaration;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { cloneNode, exportNamedDeclaration, exportSpecifier, identifier, variableDeclaration, variableDeclarator } = _t;
      }, "./node_modules/.pnpm/@babel+helper-string-parser@7.22.5/node_modules/@babel/helper-string-parser/lib/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.readCodePoint = readCodePoint, exports3.readInt = readInt, exports3.readStringContents = function(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", firstInvalidLoc = null, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              out += input.slice(chunkStart, pos);
              const res = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors);
              null !== res.ch || firstInvalidLoc ? out += res.ch : firstInvalidLoc = { pos, lineStart, curLine }, { pos, lineStart, curLine } = res, chunkStart = pos;
            } else 8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, firstInvalidLoc, lineStart, curLine, containsInvalid: !!firstInvalidLoc };
        };
        var _isDigit = function(code) {
          return code >= 48 && code <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code;
              return { code, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code ? null : String.fromCharCode(code));
            }
            case 117: {
              let code;
              return { code, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code ? null : String.fromCodePoint(code));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate) return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = input.slice(startPos, pos + 2).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate) return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n;
          return { n, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid), null === n && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i = 0, e = null == len ? 1 / 0 : len; i < e; ++i) {
            const code = input.charCodeAt(pos);
            let val;
            if (95 !== code || "bail" === allowNumSeparator) {
              if (val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : _isDigit(code) ? code - 48 : 1 / 0, val >= radix) {
                if (val <= 9 && bailOnError) return { n: null, pos };
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) val = 0;
                else {
                  if (!forceLen) break;
                  val = 0, invalid = true;
                }
              }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              if (allowNumSeparator) {
                if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                  if (bailOnError) return { n: null, pos };
                  errors.unexpectedNumericSeparator(pos, lineStart, curLine);
                }
              } else {
                if (bailOnError) return { n: null, pos };
                errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
              }
              ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code && code > 1114111) {
              if (!throwOnInvalid) return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else ({ code, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code, pos };
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.22.20/node_modules/@babel/helper-validator-identifier/lib/identifier.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isIdentifierChar = isIdentifierChar, exports3.isIdentifierName = function(name) {
          let isFirst = true;
          for (let i = 0; i < name.length; i++) {
            let cp = name.charCodeAt(i);
            if (55296 == (64512 & cp) && i + 1 < name.length) {
              const trail = name.charCodeAt(++i);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            if (isFirst) {
              if (isFirst = false, !isIdentifierStart(cp)) return false;
            } else if (!isIdentifierChar(cp)) return false;
          }
          return !isFirst;
        }, exports3.isIdentifierStart = isIdentifierStart;
        let nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
        const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet(code, set) {
          let pos = 65536;
          for (let i = 0, length = set.length; i < length; i += 2) {
            if (pos += set[i], pos > code) return false;
            if (pos += set[i + 1], pos >= code) return true;
          }
          return false;
        }
        function isIdentifierStart(code) {
          return code < 65 ? 36 === code : code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes))));
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.22.20/node_modules/@babel/helper-validator-identifier/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "isIdentifierChar", { enumerable: true, get: function() {
          return _identifier.isIdentifierChar;
        } }), Object.defineProperty(exports3, "isIdentifierName", { enumerable: true, get: function() {
          return _identifier.isIdentifierName;
        } }), Object.defineProperty(exports3, "isIdentifierStart", { enumerable: true, get: function() {
          return _identifier.isIdentifierStart;
        } }), Object.defineProperty(exports3, "isKeyword", { enumerable: true, get: function() {
          return _keyword.isKeyword;
        } }), Object.defineProperty(exports3, "isReservedWord", { enumerable: true, get: function() {
          return _keyword.isReservedWord;
        } }), Object.defineProperty(exports3, "isStrictBindOnlyReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictBindOnlyReservedWord;
        } }), Object.defineProperty(exports3, "isStrictBindReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictBindReservedWord;
        } }), Object.defineProperty(exports3, "isStrictReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictReservedWord;
        } });
        var _identifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.22.20/node_modules/@babel/helper-validator-identifier/lib/identifier.js"), _keyword = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.22.20/node_modules/@babel/helper-validator-identifier/lib/keyword.js");
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.22.20/node_modules/@babel/helper-validator-identifier/lib/keyword.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isKeyword = function(word) {
          return keywords.has(word);
        }, exports3.isReservedWord = isReservedWord, exports3.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord, exports3.isStrictBindReservedWord = function(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }, exports3.isStrictReservedWord = isStrictReservedWord;
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.22.15/node_modules/@babel/helper-validator-option/lib/find-suggestion.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.findSuggestion = function(str, arr) {
          const distances = arr.map((el) => function(a, b) {
            let i, j, t = [], u = [];
            const m = a.length, n = b.length;
            if (!m) return n;
            if (!n) return m;
            for (j = 0; j <= n; j++) t[j] = j;
            for (i = 1; i <= m; i++) {
              for (u = [i], j = 1; j <= n; j++) u[j] = a[i - 1] === b[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u[j - 1]) + 1;
              t = u;
            }
            return u[n];
          }(el, str));
          return arr[distances.indexOf(min(...distances))];
        };
        const { min } = Math;
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.22.15/node_modules/@babel/helper-validator-option/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "OptionValidator", { enumerable: true, get: function() {
          return _validator.OptionValidator;
        } }), Object.defineProperty(exports3, "findSuggestion", { enumerable: true, get: function() {
          return _findSuggestion.findSuggestion;
        } });
        var _validator = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.22.15/node_modules/@babel/helper-validator-option/lib/validator.js"), _findSuggestion = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.22.15/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.22.15/node_modules/@babel/helper-validator-option/lib/validator.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.OptionValidator = void 0;
        var _findSuggestion = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.22.15/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
        exports3.OptionValidator = class {
          constructor(descriptor) {
            this.descriptor = descriptor;
          }
          validateTopLevelOptions(options, TopLevelOptionShape) {
            const validOptionNames = Object.keys(TopLevelOptionShape);
            for (const option of Object.keys(options)) if (!validOptionNames.includes(option)) throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.
- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));
          }
          validateBooleanOption(name, value2, defaultValue) {
            return void 0 === value2 ? defaultValue : (this.invariant("boolean" == typeof value2, `'${name}' option must be a boolean.`), value2);
          }
          validateStringOption(name, value2, defaultValue) {
            return void 0 === value2 ? defaultValue : (this.invariant("string" == typeof value2, `'${name}' option must be a string.`), value2);
          }
          invariant(condition, message) {
            if (!condition) throw new Error(this.formatMessage(message));
          }
          formatMessage(message) {
            return `${this.descriptor}: ${message}`;
          }
        };
      }, "./node_modules/.pnpm/@babel+helpers@7.23.2/node_modules/@babel/helpers/lib/helpers-generated.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/index.js");
        function helper(minVersion, source) {
          return Object.freeze({ minVersion, ast: () => _template.default.program.ast(source, { preserveComments: true }) });
        }
        var _default = Object.freeze({ AsyncGenerator: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:o).then((function(t){if(u){var i="return"===r?"return":"next";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?"return":"normal",t)}),(function(e){resume("throw",e)}))}catch(e){settle("throw",e)}}function settle(e,n){switch(e){case"return":r.resolve({value:n,done:!0});break;case"throw":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},"function"!=typeof e.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},AsyncGenerator.prototype.next=function(e){return this._invoke("next",e)},AsyncGenerator.prototype.throw=function(e){return this._invoke("throw",e)},AsyncGenerator.prototype.return=function(e){return this._invoke("return",e)};'), OverloadYield: helper("7.18.14", "export default function _OverloadYield(t,e){this.v=t,this.k=e}"), applyDecs: helper("7.17.8", 'function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,"getMetadata"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.private;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,"constructor"))return i.constructor},setMetadata:function(o,i){old_assertNotFinished(r,"setMetadata"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.public={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMapToFinal(e,t){var a=e[Symbol.metadata||Symbol.for("Symbol.metadata")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.length;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.from(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadata||Symbol.for("Symbol.metadata")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,"addInitializer"),old_assertCallable(a,"An initializer"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var d,u,f={kind:c,name:l?"#"+t:t,isStatic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v=!0}}function old_assertNotFinished(e,t){if(e.v)throw new Error("attempted to call "+t+" after decoration was finished")}function old_assertMetadataKey(e){if("symbol"!=typeof e)throw new TypeError("Metadata keys must be symbols, received: "+e)}function old_assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if("object"!==a||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&old_assertCallable(t.get,"accessor.get"),void 0!==t.set&&old_assertCallable(t.set,"accessor.set"),void 0!==t.init&&old_assertCallable(t.init,"accessor.init"),void 0!==t.initializer&&old_assertCallable(t.initializer,"accessor.initializer")}else if("function"!==a){var r;throw r=0===e?"field":10===e?"class":"method",new TypeError(r+" decorators must return a function or void 0")}}function old_getInit(e){var t;return null==(t=e.init)&&(t=e.initializer)&&"undefined"!=typeof console&&console.warn(".initializer has been renamed to .init as of March 2022"),t}function old_applyMemberDec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,h=a[0];if(n?c=0===o||1===o?{get:a[3],set:a[4]}:3===o?{get:a[3]}:4===o?{set:a[3]}:{value:a[3]}:0!==o&&(c=Object.getOwnPropertyDescriptor(t,r)),1===o?u={get:c.get,set:c.set}:2===o?u=c.value:3===o?u=c.get:4===o&&(u=c.set),"function"==typeof h)void 0!==(f=old_memberDec(h,r,c,l,s,o,i,n,u))&&(old_assertValidReturnValue(o,f),0===o?d=f:1===o?(d=old_getInit(f),p=f.get||u.get,v=f.set||u.set,u={get:p,set:v}):u=f);else for(var y=h.length-1;y>=0;y--){var b;if(void 0!==(f=old_memberDec(h[y],r,c,l,s,o,i,n,u)))old_assertValidReturnValue(o,f),0===o?b=f:1===o?(b=old_getInit(f),p=f.get||u.get,v=f.set||u.set,u={get:p,set:v}):u=f,void 0!==b&&(void 0===d?d=b:"function"==typeof d?d=[d,b]:d.push(b))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if("function"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length;r++)a=g[r].call(e,a);return a}}else{var m=d;d=function(e,t){return m.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=u.get,c.set=u.set):2===o?c.value=u:3===o?c.get=u:4===o&&(c.set=u),n?1===o?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===o?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(var i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],h=d[2],y=d.length>3,b=v>=5;if(b?(u=t,f=r,0!==(v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!y){var g=b?s:l,m=g.get(h)||0;if(!0===m||3===m&&4!==v||4===m&&3!==v)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);!m&&v>2?g.set(h,v):g.set(h,!0)}old_applyMemberDec(e,u,d,h,v,b,y,f,p)}}old_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a].call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{var c=Object.assign({kind:"class",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))}}export default function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyClassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}'), applyDecs2203: helper("7.19.0", 'function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw new Error("attempted to call "+t+" after decoration was finished")}(t,"addInitializer"),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:s?"#"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=function(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r){var a;throw a=0===e?"field":10===e?"class":"method",new TypeError(a+" decorators must return a function or void 0")}}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{get:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),"function"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;if(void 0!==(f=memberDec(h[v],a,c,o,n,i,s,u)))assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g&&(void 0===l?l=g:"function"==typeof l?l=[l,g]:l.push(g))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.push(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){var a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:"class",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;export default function applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}'), applyDecs2203R: helper("7.20.0", 'function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw new Error("attempted to call "+t+" after decoration was finished")}(t,"addInitializer"),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,n,a,i,s,o){var c;switch(a){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:s?"#"+t:t,static:i,private:s},p={v:!1};0!==a&&(f.addInitializer=createAddInitializerMethod(n,p)),0===a?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!==a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r){var n;throw n=0===e?"field":10===e?"class":"method",new TypeError(n+" decorators must return a function or void 0")}}function applyMemberDec(e,t,r,n,a,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===a||1===a?{get:r[3],set:r[4]}:3===a?{get:r[3]}:4===a?{set:r[3]}:{value:r[3]}:0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?u={get:c.get,set:c.set}:2===a?u=c.value:3===a?u=c.get:4===a&&(u=c.set),"function"==typeof h)void 0!==(f=memberDec(h,n,c,o,a,i,s,u))&&(assertValidReturnValue(a,f),0===a?l=f:1===a?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;if(void 0!==(f=memberDec(h[v],n,c,o,a,i,s,u)))assertValidReturnValue(a,f),0===a?g=f:1===a?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g&&(void 0===l?l=g:"function"==typeof l?l=[l,g]:l.push(g))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var y=l;l=function(e,t){for(var r=t,n=0;n<y.length;n++)r=y[n].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.push(l)}0!==a&&(1===a?(c.get=u.get,c.set=u.set):2===a?c.value=u:3===a?c.get=u:4===a&&(c.set=u),s?1===a?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===a?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,s=new Map,o=0;o<t.length;o++){var c=t[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!==(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,s)})}finally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}export default function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}'), applyDecs2301: helper("7.21.0", 'import checkInRHS from"checkInRHS";function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw new Error("attempted to call "+t+" after decoration was finished")}(t,"addInitializer"),assertCallable(r,"An initializer"),e.push(r)}}function assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(e,t,r,n,a,i,s,o,c){var u;switch(a){case 1:u="accessor";break;case 2:u="method";break;case 3:u="getter";break;case 4:u="setter";break;default:u="field"}var l,f,p={kind:u,name:s?"#"+t:t,static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e){return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivate(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():function(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r){var n;throw n=0===e?"field":10===e?"class":"method",new TypeError(n+" decorators must return a function or void 0")}}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,g=r[0];if(s?u=0===a||1===a?{get:(p=r[3],function(){return p(this)}),set:curryThis2(r[4])}:3===a?{get:r[3]}:4===a?{set:r[3]}:{value:r[3]}:0!==a&&(u=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:u.get,set:u.set}:2===a?f=u.value:3===a?f=u.get:4===a&&(f=u.set),"function"==typeof g)void 0!==(d=memberDec(g,n,u,o,a,i,s,f,c))&&(assertValidReturnValue(a,d),0===a?l=d:1===a?(l=d.init,h=d.get||f.get,v=d.set||f.set,f={get:h,set:v}):f=d);else for(var y=g.length-1;y>=0;y--){var m;if(void 0!==(d=memberDec(g[y],n,u,o,a,i,s,f,c)))assertValidReturnValue(a,d),0===a?m=d:1===a?(m=d.init,h=d.get||f.get,v=d.set||f.set,f={get:h,set:v}):f=d,void 0!==m&&(void 0===l?l=m:"function"==typeof l?l=[l,m]:l.push(m))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var b=l;l=function(e,t){for(var r=t,n=0;n<b.length;n++)r=b[n].call(e,r);return r}}else{var I=l;l=function(e,t){return I.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=f.get,u.set=f.set):2===a?u.value=f:3===a?u.get=f:4===a&&(u.set=f),s?1===a?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,g=d>=5,y=r;if(g?(f=e,0!==(d-=5)&&(p=a=a||[]),v&&!i&&(i=function(t){return checkInRHS(t)===e}),y=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=g?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b&&3!==d)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,g,v,p,y)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,s)})}finally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}export default function applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}'), applyDecs2305: helper("7.21.0", 'import checkInRHS from"checkInRHS";function createAddInitializerMethod(e,t){return function(r){assertNotFinished(t,"addInitializer"),assertCallable(r,"An initializer"),e.push(r)}}function assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(e,t,r,a,n,i,s,o,c,l,u){var f;switch(i){case 1:f="accessor";break;case 2:f="method";break;case 3:f="getter";break;case 4:f="setter";break;default:f="field"}var d,p,h={kind:f,name:o?"#"+r:r,static:s,private:o,metadata:u},v={v:!1};if(0!==i&&(h.addInitializer=createAddInitializerMethod(n,v)),o||0!==i&&2!==i)if(2===i)d=function(e){return assertInstanceIfPrivate(l,e),a.value};else{var y=0===i||1===i;(y||3===i)&&(d=o?function(e){return assertInstanceIfPrivate(l,e),a.get.call(e)}:function(e){return a.get.call(e)}),(y||4===i)&&(p=o?function(e,t){assertInstanceIfPrivate(l,e),a.set.call(e,t)}:function(e,t){a.set.call(e,t)})}else d=function(e){return e[r]},0===i&&(p=function(e,t){e[r]=t});var m=o?l.bind():function(e){return r in e};h.access=d&&p?{get:d,set:p,has:m}:d?{get:d,has:m}:{set:p,has:m};try{return e.call(t,c,h)}finally{v.v=!0}}function assertNotFinished(e,t){if(e.v)throw new Error("attempted to call "+t+" after decoration was finished")}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r){var a;throw a=0===e?"field":5===e?"class":"method",new TypeError(a+" decorators must return a function or void 0")}}function curryThis1(e){return function(){return e(this)}}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,a,n,i,s,o,c,l,u){var f,d,p,h,v,y,m=r[0];a||Array.isArray(m)||(m=[m]),o?f=0===i||1===i?{get:curryThis1(r[3]),set:curryThis2(r[4])}:3===i?{get:r[3]}:4===i?{set:r[3]}:{value:r[3]}:0!==i&&(f=Object.getOwnPropertyDescriptor(t,n)),1===i?p={get:f.get,set:f.set}:2===i?p=f.value:3===i?p=f.get:4===i&&(p=f.set);for(var g=a?2:1,b=m.length-1;b>=0;b-=g){var I;if(void 0!==(h=memberDec(m[b],a?m[b-1]:void 0,n,f,c,i,s,o,p,l,u)))assertValidReturnValue(i,h),0===i?I=h:1===i?(I=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==I&&(void 0===d?d=I:"function"==typeof d?d=[d,I]:d.push(I))}if(0===i||1===i){if(void 0===d)d=function(e,t){return t};else if("function"!=typeof d){var w=d;d=function(e,t){for(var r=t,a=w.length-1;a>=0;a--)r=w[a].call(e,r);return r}}else{var M=d;d=function(e,t){return M.call(e,t)}}e.push(d)}0!==i&&(1===i?(f.get=p.get,f.set=p.set):2===i?f.value=p:3===i?f.get=p:4===i&&(f.set=p),o?1===i?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===i?e.push(p):e.push((function(e,t){return p.call(e,t)})):Object.defineProperty(t,n,f))}function applyMemberDecs(e,t,r,a){for(var n,i,s,o=[],c=new Map,l=new Map,u=0;u<t.length;u++){var f=t[u];if(Array.isArray(f)){var d,p,h=f[1],v=f[2],y=f.length>3,m=16&h,g=!!(8&h),b=r;if(h&=7,g?(d=e,0!==h&&(p=i=i||[]),y&&!s&&(s=function(t){return checkInRHS(t)===e}),b=s):(d=e.prototype,0!==h&&(p=n=n||[])),0!==h&&!y){var I=g?l:c,w=I.get(v)||0;if(!0===w||3===w&&4!==h||4===w&&3!==h)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+v);I.set(v,!(!w&&h>2)||h)}applyMemberDec(o,d,f,m,v,h,g,y,p,b,a)}}return pushInitializers(o,n),pushInitializers(o,i),o}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}function applyClassDecs(e,t,r,a){if(t.length){for(var n=[],i=e,s=e.name,o=r?2:1,c=t.length-1;c>=0;c-=o){var l={v:!1};try{var u=t[c].call(r?t[c-1]:void 0,i,{kind:"class",name:s,addInitializer:createAddInitializerMethod(n,l),metadata:a})}finally{l.v=!0}void 0!==u&&(assertValidReturnValue(5,u),i=u)}return[defineMetadata(i,a),function(){for(var e=0;e<n.length;e++)n[e].call(i)}]}}function defineMetadata(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for("Symbol.metadata"),{configurable:!0,enumerable:!0,value:t})}export default function applyDecs2305(e,t,r,a,n,i){if(arguments.length>=6)var s=i[Symbol.metadata||Symbol.for("Symbol.metadata")];var o=Object.create(void 0===s?null:s),c=applyMemberDecs(e,t,n,o);return r.length||defineMetadata(e,o),{e:c,get c(){return applyClassDecs(e,r,a,o)}}}'), asyncGeneratorDelegate: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promise((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=function(){return this},e.next=function(t){return n?(n=!1,t):pump("next",t)},"function"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;return pump("throw",t)}),"function"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump("return",t)}),e}'), asyncIterator: helper("7.15.9", 'export default function _asyncIterator(r){var n,t,o,e=2;for("undefined"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.iterator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t="@@asyncIterator",o="@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var n=r.done;return Promise.resolve(r.value).then((function(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return void 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.return;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}'), awaitAsyncGenerator: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}'), checkInRHS: helper("7.20.5", `export default function _checkInRHS(e){if(Object(e)!==e)throw TypeError("right-hand side of 'in' should be an object, got "+(null!==e?typeof e:"null"));return e}`), defineAccessor: helper("7.20.7", "export default function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty(r,n,c)}"), dispose: helper("7.22.0", 'function dispose_SuppressedError(r,e){return"undefined"!=typeof SuppressedError?dispose_SuppressedError=SuppressedError:(dispose_SuppressedError=function(r,e){this.suppressed=r,this.error=e,this.stack=(new Error).stack},dispose_SuppressedError.prototype=Object.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}export default function _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(r,e):r,s=!0,next()}return next()}'), importDeferProxy: helper("7.23.0", "export default function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=function(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValue(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:constValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:constValue(!1)})}"), interopRequireWildcard: helper("7.14.0", 'function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}export default function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}'), iterableToArrayLimit: helper("7.0.0-beta.0", 'export default function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}'), iterableToArrayLimitLoose: helper("7.0.0-beta.0", 'export default function _iterableToArrayLimitLoose(e,r){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var o,l=[];for(t=t.call(e);e.length<r&&!(o=t.next()).done;)l.push(o.value);return l}}'), jsx: helper("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;export default function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:void 0}),1===n)r.children=l;else if(n>1){for(var t=new Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:""+E,ref:null,props:r,_owner:null}}'), objectSpread2: helper("7.5.0", 'import defineProperty from"defineProperty";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}export default function _objectSpread2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}'), regeneratorRuntime: helper("7.18.0", `export default function _regeneratorRuntime(){"use strict";
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}catch(t){define=function(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==typeof h&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:function(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw new Error("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(typeof e+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator"),define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}`), typeof: helper("7.0.0-beta.0", 'export default function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}'), using: helper("7.22.0", 'export default function _using(o,e,n){if(null==e)return e;if("object"!=typeof e)throw new TypeError("using declarations can only be used with objects, null, or undefined.");if(n)var r=e[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==r&&(r=e[Symbol.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof r)throw new TypeError("Property [Symbol.dispose] is not a function.");return o.push({v:e,d:r,a:n}),e}'), wrapRegExp: helper("7.19.0", 'import setPrototypeOf from"setPrototypeOf";import inherits from"inherits";export default function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=new WeakMap;function BabelRegExp(e,t,p){var o=new RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildGroups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if("number"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.prototype[Symbol.replace]=function(t,p){if("string"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\$<([^>]+)>/g,(function(e,r){var t=o[r];return"$"+(Array.isArray(t)?t.join("$"):t)})))}if("function"==typeof p){var i=this;return e[Symbol.replace].call(this,t,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}return e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}') });
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+helpers@7.23.2/node_modules/@babel/helpers/lib/helpers.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/index.js"), _helpersGenerated = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.23.2/node_modules/@babel/helpers/lib/helpers-generated.js");
        const helpers = Object.assign({ __proto__: null }, _helpersGenerated.default);
        var _default = helpers;
        exports3.default = _default;
        const helper = (minVersion) => (tpl) => ({ minVersion, ast: () => _template.default.program.ast(tpl) });
        helpers.AwaitValue = helper("7.0.0-beta.0")`
    export default function _AwaitValue(value) {
      this.wrapped = value;
    }
  `, helpers.wrapAsyncGenerator = helper("7.0.0-beta.0")`
  import AsyncGenerator from "AsyncGenerator";

  export default function _wrapAsyncGenerator(fn) {
    return function () {
      return new AsyncGenerator(fn.apply(this, arguments));
    };
  }
`, helpers.asyncToGenerator = helper("7.0.0-beta.0")`
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  export default function _asyncToGenerator(fn) {
    return function () {
      var self = this, args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }
`, helpers.classCallCheck = helper("7.0.0-beta.0")`
  export default function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
`, helpers.createClass = helper("7.0.0-beta.0")`
  import toPropertyKey from "toPropertyKey";
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i ++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
    }
  }

  export default function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
`, helpers.defineEnumerableProperties = helper("7.0.0-beta.0")`
  export default function _defineEnumerableProperties(obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ("value" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    // Symbols are not enumerated over by for-in loops. If native
    // Symbols are available, fetch all of the descs object's own
    // symbol properties and define them on our target object too.
    if (Object.getOwnPropertySymbols) {
      var objectSymbols = Object.getOwnPropertySymbols(descs);
      for (var i = 0; i < objectSymbols.length; i++) {
        var sym = objectSymbols[i];
        var desc = descs[sym];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, sym, desc);
      }
    }
    return obj;
  }
`, helpers.defaults = helper("7.0.0-beta.0")`
  export default function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);
      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }
    return obj;
  }
`, helpers.defineProperty = helper("7.0.0-beta.0")`
  import toPropertyKey from "toPropertyKey";
  export default function _defineProperty(obj, key, value) {
    key = toPropertyKey(key);
    // Shortcircuit the slow defineProperty path when possible.
    // We are trying to avoid issues where setters defined on the
    // prototype cause side effects under the fast path of simple
    // assignment. By checking for existence of the property with
    // the in operator, we can optimize most of this overhead away.
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
`, helpers.extends = helper("7.0.0-beta.0")`
  export default function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };

    return _extends.apply(this, arguments);
  }
`, helpers.objectSpread = helper("7.0.0-beta.0")`
    import defineProperty from "defineProperty";

    export default function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = (arguments[i] != null) ? Object(arguments[i]) : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') {
          ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
  `, helpers.inherits = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    // We can't use defineProperty to set the prototype in a single step because it
    // doesn't work in Chrome <= 36. https://github.com/babel/babel/issues/14056
    // V8 bug: https://bugs.chromium.org/p/v8/issues/detail?id=3334
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass) setPrototypeOf(subClass, superClass);
  }
`, helpers.inheritsLoose = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
  }
`, helpers.getPrototypeOf = helper("7.0.0-beta.0")`
  export default function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf.bind()
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }
`, helpers.setPrototypeOf = helper("7.0.0-beta.0")`
  export default function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf
      ? Object.setPrototypeOf.bind()
      : function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };
    return _setPrototypeOf(o, p);
  }
`, helpers.isNativeReflectConstruct = helper("7.9.0")`
  export default function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;

    // core-js@3
    if (Reflect.construct.sham) return false;

    // Proxy can't be polyfilled. Every browser implemented
    // proxies before or at the same time as Reflect.construct,
    // so if they support Proxy they also support Reflect.construct.
    if (typeof Proxy === "function") return true;

    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
      // If the internal slots aren't set, this throws an error similar to
      //   TypeError: this is not a Boolean object.

      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
      return true;
    } catch (e) {
      return false;
    }
  }
`, helpers.construct = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";

  export default function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct.bind();
    } else {
      // NOTE: If Parent !== Class, the correct __proto__ is set *after*
      //       calling the constructor.
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }
    // Avoid issues with Class being present but undefined when it wasn't
    // present in the original call.
    return _construct.apply(null, arguments);
  }
`, helpers.isNativeFunction = helper("7.0.0-beta.0")`
  export default function _isNativeFunction(fn) {
    // Note: This function returns "true" for core-js functions.
    try {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    } catch (e) {
      // Firefox 31 throws when "toString" is applied to an HTMLElement
      return typeof fn === "function";
    }
  }
`, helpers.wrapNativeSuper = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";
  import setPrototypeOf from "setPrototypeOf";
  import isNativeFunction from "isNativeFunction";
  import construct from "construct";

  export default function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor)
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        }
      });

      return setPrototypeOf(Wrapper, Class);
    }

    return _wrapNativeSuper(Class)
  }
`, helpers.instanceof = helper("7.0.0-beta.0")`
  export default function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
      return !!right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  }
`, helpers.interopRequireDefault = helper("7.0.0-beta.0")`
  export default function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
`, helpers.newArrowCheck = helper("7.0.0-beta.0")`
  export default function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  }
`, helpers.objectDestructuringEmpty = helper("7.0.0-beta.0")`
  export default function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure " + obj);
  }
`, helpers.objectWithoutPropertiesLoose = helper("7.0.0-beta.0")`
  export default function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }
`, helpers.objectWithoutProperties = helper("7.0.0-beta.0")`
  import objectWithoutPropertiesLoose from "objectWithoutPropertiesLoose";

  export default function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }
`, helpers.assertThisInitialized = helper("7.0.0-beta.0")`
  export default function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
`, helpers.possibleConstructorReturn = helper("7.0.0-beta.0")`
  import assertThisInitialized from "assertThisInitialized";

  export default function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return assertThisInitialized(self);
  }
`, helpers.createSuper = helper("7.9.0")`
  import getPrototypeOf from "getPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";
  import possibleConstructorReturn from "possibleConstructorReturn";

  export default function _createSuper(Derived) {
    var hasNativeReflectConstruct = isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        // NOTE: This doesn't work if this.__proto__.constructor has been modified.
        var NewTarget = getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return possibleConstructorReturn(this, result);
    }
  }
 `, helpers.superPropBase = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";

  export default function _superPropBase(object, property) {
    // Yes, this throws if object is null to being with, that's on purpose.
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }
    return object;
  }
`, helpers.get = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";

  export default function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get.bind();
    } else {
      _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);

        if (!base) return;

        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          // STEP 3. If receiver is not present, then set receiver to target.
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }
    return _get.apply(this, arguments);
  }
`, helpers.set = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";
  import defineProperty from "defineProperty";

  function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
      set = Reflect.set;
    } else {
      set = function set(target, property, value, receiver) {
        var base = superPropBase(target, property);
        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            // Both getter and non-writable fall into this.
            return false;
          }
        }

        // Without a super that defines the property, spec boils down to
        // "define on receiver" for some reason.
        desc = Object.getOwnPropertyDescriptor(receiver, property);
        if (desc) {
          if (!desc.writable) {
            // Setter, getter, and non-writable fall into this.
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          // Avoid setters that may be defined on Sub's prototype, but not on
          // the instance.
          defineProperty(receiver, property, value);
        }

        return true;
      };
    }

    return set(target, property, value, receiver);
  }

  export default function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
      throw new TypeError('failed to set property');
    }

    return value;
  }
`, helpers.taggedTemplateLiteral = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteral(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    return Object.freeze(Object.defineProperties(strings, {
        raw: { value: Object.freeze(raw) }
    }));
  }
`, helpers.taggedTemplateLiteralLoose = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    strings.raw = raw;
    return strings;
  }
`, helpers.readOnlyError = helper("7.0.0-beta.0")`
  export default function _readOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is read-only");
  }
`, helpers.writeOnlyError = helper("7.12.13")`
  export default function _writeOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is write-only");
  }
`, helpers.classNameTDZError = helper("7.0.0-beta.0")`
  export default function _classNameTDZError(name) {
    throw new ReferenceError("Class \\"" + name + "\\" cannot be referenced in computed property keys.");
  }
`, helpers.temporalUndefined = helper("7.0.0-beta.0")`
  // This function isn't mean to be called, but to be used as a reference.
  // We can't use a normal object because it isn't hoisted.
  export default function _temporalUndefined() {}
`, helpers.tdz = helper("7.5.5")`
  export default function _tdzError(name) {
    throw new ReferenceError(name + " is not defined - temporal dead zone");
  }
`, helpers.temporalRef = helper("7.0.0-beta.0")`
  import undef from "temporalUndefined";
  import err from "tdz";

  export default function _temporalRef(val, name) {
    return val === undef ? err(name) : val;
  }
`, helpers.slicedToArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimit from "iterableToArrayLimit";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArray(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimit(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`, helpers.slicedToArrayLoose = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimitLoose from "iterableToArrayLimitLoose";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArrayLoose(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimitLoose(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`, helpers.toArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _toArray(arr) {
    return (
      arrayWithHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableRest()
    );
  }
`, helpers.toConsumableArray = helper("7.0.0-beta.0")`
  import arrayWithoutHoles from "arrayWithoutHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableSpread from "nonIterableSpread";

  export default function _toConsumableArray(arr) {
    return (
      arrayWithoutHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableSpread()
    );
  }
`, helpers.arrayWithoutHoles = helper("7.0.0-beta.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }
`, helpers.arrayWithHoles = helper("7.0.0-beta.0")`
  export default function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
`, helpers.maybeArrayLike = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _maybeArrayLike(next, arr, i) {
    if (arr && !Array.isArray(arr) && typeof arr.length === "number") {
      var len = arr.length;
      return arrayLikeToArray(arr, i !== void 0 && i < len ? i : len);
    }
    return next(arr, i);
  }
`, helpers.iterableToArray = helper("7.0.0-beta.0")`
  export default function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
`, helpers.unsupportedIterableToArray = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return arrayLikeToArray(o, minLen);
  }
`, helpers.arrayLikeToArray = helper("7.9.0")`
  export default function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
`, helpers.nonIterableSpread = helper("7.0.0-beta.0")`
  export default function _nonIterableSpread() {
    throw new TypeError(
      "Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`, helpers.nonIterableRest = helper("7.0.0-beta.0")`
  export default function _nonIterableRest() {
    throw new TypeError(
      "Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`, helpers.createForOfIteratorHelper = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  // s: start (create the iterator)
  // n: next
  // e: error (called whenever something throws)
  // f: finish (always called at the end)

  export default function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      // Fallback for engines without symbol support
      if (
        Array.isArray(o) ||
        (it = unsupportedIterableToArray(o)) ||
        (allowArrayLike && o && typeof o.length === "number")
      ) {
        if (it) o = it;
        var i = 0;
        var F = function(){};
        return {
          s: F,
          n: function() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          },
          e: function(e) { throw e; },
          f: F,
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true, didErr = false, err;

    return {
      s: function() {
        it = it.call(o);
      },
      n: function() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function(e) {
        didErr = true;
        err = e;
      },
      f: function() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
`, helpers.createForOfIteratorHelperLoose = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  export default function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (it) return (it = it.call(o)).next.bind(it);

    // Fallback for engines without symbol support
    if (
      Array.isArray(o) ||
      (it = unsupportedIterableToArray(o)) ||
      (allowArrayLike && o && typeof o.length === "number")
    ) {
      if (it) o = it;
      var i = 0;
      return function() {
        if (i >= o.length) return { done: true };
        return { done: false, value: o[i++] };
      }
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
`, helpers.skipFirstGeneratorNext = helper("7.0.0-beta.0")`
  export default function _skipFirstGeneratorNext(fn) {
    return function () {
      var it = fn.apply(this, arguments);
      it.next();
      return it;
    }
  }
`, helpers.toPrimitive = helper("7.1.5")`
  export default function _toPrimitive(
    input,
    hint /*: "default" | "string" | "number" | void */
  ) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
`, helpers.toPropertyKey = helper("7.1.5")`
  import toPrimitive from "toPrimitive";

  export default function _toPropertyKey(arg) {
    var key = toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
`, helpers.initializerWarningHelper = helper("7.0.0-beta.0")`
    export default function _initializerWarningHelper(descriptor, context){
        throw new Error(
          'Decorating class property failed. Please ensure that ' +
          'transform-class-properties is enabled and runs after the decorators transform.'
        );
    }
`, helpers.initializerDefineProperty = helper("7.0.0-beta.0")`
    export default function _initializerDefineProperty(target, property, descriptor, context){
        if (!descriptor) return;

        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,
        });
    }
`, helpers.applyDecoratedDescriptor = helper("7.0.0-beta.0")`
    export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){
        var desc = {};
        Object.keys(descriptor).forEach(function(key){
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer){
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function(desc, decorator){
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0){
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0){
            Object.defineProperty(target, property, desc);
            desc = null;
        }

        return desc;
    }
`, helpers.classPrivateFieldLooseKey = helper("7.0.0-beta.0")`
  var id = 0;
  export default function _classPrivateFieldKey(name) {
    return "__private_" + (id++) + "_" + name;
  }
`, helpers.classPrivateFieldLooseBase = helper("7.0.0-beta.0")`
  export default function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }
`, helpers.classPrivateFieldGet = helper("7.0.0-beta.0")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`, helpers.classPrivateFieldSet = helper("7.0.0-beta.0")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`, helpers.classPrivateFieldDestructureSet = helper("7.4.4")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldDestructureSet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`, helpers.classExtractFieldDescriptor = helper("7.13.10")`
  export default function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
  }
`, helpers.classStaticPrivateFieldSpecGet = helper("7.0.2")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`, helpers.classStaticPrivateFieldSpecSet = helper("7.0.2")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`, helpers.classStaticPrivateMethodGet = helper("7.3.2")`
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  export default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    return method;
  }
`, helpers.classStaticPrivateMethodSet = helper("7.3.2")`
  export default function _classStaticPrivateMethodSet() {
    throw new TypeError("attempted to set read only static private field");
  }
`, helpers.classApplyDescriptorGet = helper("7.13.10")`
  export default function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
      return descriptor.get.call(receiver);
    }
    return descriptor.value;
  }
`, helpers.classApplyDescriptorSet = helper("7.13.10")`
  export default function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
      descriptor.set.call(receiver, value);
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }
      descriptor.value = value;
    }
  }
`, helpers.classApplyDescriptorDestructureSet = helper("7.13.10")`
  export default function _classApplyDescriptorDestructureSet(receiver, descriptor) {
    if (descriptor.set) {
      if (!("__destrObj" in descriptor)) {
        descriptor.__destrObj = {
          set value(v) {
            descriptor.set.call(receiver, v)
          },
        };
      }
      return descriptor.__destrObj;
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }

      return descriptor;
    }
  }
`, helpers.classStaticPrivateFieldDestructureSet = helper("7.13.10")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldDestructureSet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`, helpers.classCheckPrivateStaticAccess = helper("7.13.10")`
  export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {
    if (receiver !== classConstructor) {
      throw new TypeError("Private static access of wrong provenance");
    }
  }
`, helpers.classCheckPrivateStaticFieldDescriptor = helper("7.13.10")`
  export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {
    if (descriptor === undefined) {
      throw new TypeError("attempted to " + action + " private static field before its declaration");
    }
  }
`, helpers.decorate = helper("7.1.5")`
  import toArray from "toArray";
  import toPropertyKey from "toPropertyKey";

  // These comments are stripped by @babel/template
  /*::
  type PropertyDescriptor =
    | {
        value: any,
        writable: boolean,
        configurable: boolean,
        enumerable: boolean,
      }
    | {
        get?: () => any,
        set?: (v: any) => void,
        configurable: boolean,
        enumerable: boolean,
      };

  type FieldDescriptor ={
    writable: boolean,
    configurable: boolean,
    enumerable: boolean,
  };

  type Placement = "static" | "prototype" | "own";
  type Key = string | symbol; // PrivateName is not supported yet.

  type ElementDescriptor =
    | {
        kind: "method",
        key: Key,
        placement: Placement,
        descriptor: PropertyDescriptor
      }
    | {
        kind: "field",
        key: Key,
        placement: Placement,
        descriptor: FieldDescriptor,
        initializer?: () => any,
      };

  // This is exposed to the user code
  type ElementObjectInput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
  };

  // This is exposed to the user code
  type ElementObjectOutput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
    extras?: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  // This is exposed to the user code
  type ClassObject = {
    [@@toStringTag]?: "Descriptor",
    kind: "class",
    elements: ElementDescriptor[],
  };

  type ElementDecorator = (descriptor: ElementObjectInput) => ?ElementObjectOutput;
  type ClassDecorator = (descriptor: ClassObject) => ?ClassObject;
  type ClassFinisher = <A, B>(cl: Class<A>) => Class<B>;

  // Only used by Babel in the transform output, not part of the spec.
  type ElementDefinition =
    | {
        kind: "method",
        value: any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
      }
    | {
        kind: "field",
        value: () => any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
    };

  declare function ClassFactory<C>(initialize: (instance: C) => void): {
    F: Class<C>,
    d: ElementDefinition[]
  }

  */

  /*::
  // Various combinations with/without extras and with one or many finishers

  type ElementFinisherExtras = {
    element: ElementDescriptor,
    finisher?: ClassFinisher,
    extras?: ElementDescriptor[],
  };

  type ElementFinishersExtras = {
    element: ElementDescriptor,
    finishers: ClassFinisher[],
    extras: ElementDescriptor[],
  };

  type ElementsFinisher = {
    elements: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  type ElementsFinishers = {
    elements: ElementDescriptor[],
    finishers: ClassFinisher[],
  };

  */

  /*::

  type Placements = {
    static: Key[],
    prototype: Key[],
    own: Key[],
  };

  */

  // ClassDefinitionEvaluation (Steps 26-*)
  export default function _decorate(
    decorators /*: ClassDecorator[] */,
    factory /*: ClassFactory */,
    superClass /*: ?Class<*> */,
    mixins /*: ?Array<Function> */,
  ) /*: Class<*> */ {
    var api = _getDecoratorsApi();
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        api = mixins[i](api);
      }
    }

    var r = factory(function initialize(O) {
      api.initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = api.decorateClass(
      _coalesceClassElements(r.d.map(_createElementDescriptor)),
      decorators,
    );

    api.initializeClassElements(r.F, decorated.elements);

    return api.runClassFinishers(r.F, decorated.finishers);
  }

  function _getDecoratorsApi() {
    _getDecoratorsApi = function() {
      return api;
    };

    var api = {
      elementsDefinitionOrder: [["method"], ["field"]],

      // InitializeInstanceElements
      initializeInstanceElements: function(
        /*::<C>*/ O /*: C */,
        elements /*: ElementDescriptor[] */,
      ) {
        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            if (element.kind === kind && element.placement === "own") {
              this.defineClassElement(O, element);
            }
          }, this);
        }, this);
      },

      // InitializeClassElements
      initializeClassElements: function(
        /*::<C>*/ F /*: Class<C> */,
        elements /*: ElementDescriptor[] */,
      ) {
        var proto = F.prototype;

        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            var placement = element.placement;
            if (
              element.kind === kind &&
              (placement === "static" || placement === "prototype")
            ) {
              var receiver = placement === "static" ? F : proto;
              this.defineClassElement(receiver, element);
            }
          }, this);
        }, this);
      },

      // DefineClassElement
      defineClassElement: function(
        /*::<C>*/ receiver /*: C | Class<C> */,
        element /*: ElementDescriptor */,
      ) {
        var descriptor /*: PropertyDescriptor */ = element.descriptor;
        if (element.kind === "field") {
          var initializer = element.initializer;
          descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver),
          };
        }
        Object.defineProperty(receiver, element.key, descriptor);
      },

      // DecorateClass
      decorateClass: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var newElements /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];
        var placements /*: Placements */ = {
          static: [],
          prototype: [],
          own: [],
        };

        elements.forEach(function(element /*: ElementDescriptor */) {
          this.addElementPlacement(element, placements);
        }, this);

        elements.forEach(function(element /*: ElementDescriptor */) {
          if (!_hasDecorators(element)) return newElements.push(element);

          var elementFinishersExtras /*: ElementFinishersExtras */ = this.decorateElement(
            element,
            placements,
          );
          newElements.push(elementFinishersExtras.element);
          newElements.push.apply(newElements, elementFinishersExtras.extras);
          finishers.push.apply(finishers, elementFinishersExtras.finishers);
        }, this);

        if (!decorators) {
          return { elements: newElements, finishers: finishers };
        }

        var result /*: ElementsFinishers */ = this.decorateConstructor(
          newElements,
          decorators,
        );
        finishers.push.apply(finishers, result.finishers);
        result.finishers = finishers;

        return result;
      },

      // AddElementPlacement
      addElementPlacement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
        silent /*: boolean */,
      ) {
        var keys = placements[element.placement];
        if (!silent && keys.indexOf(element.key) !== -1) {
          throw new TypeError("Duplicated element (" + element.key + ")");
        }
        keys.push(element.key);
      },

      // DecorateElement
      decorateElement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
      ) /*: ElementFinishersExtras */ {
        var extras /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];

        for (
          var decorators = element.decorators, i = decorators.length - 1;
          i >= 0;
          i--
        ) {
          // (inlined) RemoveElementPlacement
          var keys = placements[element.placement];
          keys.splice(keys.indexOf(element.key), 1);

          var elementObject /*: ElementObjectInput */ = this.fromElementDescriptor(
            element,
          );
          var elementFinisherExtras /*: ElementFinisherExtras */ = this.toElementFinisherExtras(
            (0, decorators[i])(elementObject) /*: ElementObjectOutput */ ||
              elementObject,
          );

          element = elementFinisherExtras.element;
          this.addElementPlacement(element, placements);

          if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
          }

          var newExtras /*: ElementDescriptor[] | void */ =
            elementFinisherExtras.extras;
          if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
              this.addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
          }
        }

        return { element: element, finishers: finishers, extras: extras };
      },

      // DecorateConstructor
      decorateConstructor: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var finishers /*: ClassFinisher[] */ = [];

        for (var i = decorators.length - 1; i >= 0; i--) {
          var obj /*: ClassObject */ = this.fromClassDescriptor(elements);
          var elementsAndFinisher /*: ElementsFinisher */ = this.toClassDescriptor(
            (0, decorators[i])(obj) /*: ClassObject */ || obj,
          );

          if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
          }

          if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;

            for (var j = 0; j < elements.length - 1; j++) {
              for (var k = j + 1; k < elements.length; k++) {
                if (
                  elements[j].key === elements[k].key &&
                  elements[j].placement === elements[k].placement
                ) {
                  throw new TypeError(
                    "Duplicated element (" + elements[j].key + ")",
                  );
                }
              }
            }
          }
        }

        return { elements: elements, finishers: finishers };
      },

      // FromElementDescriptor
      fromElementDescriptor: function(
        element /*: ElementDescriptor */,
      ) /*: ElementObject */ {
        var obj /*: ElementObject */ = {
          kind: element.kind,
          key: element.key,
          placement: element.placement,
          descriptor: element.descriptor,
        };

        var desc = {
          value: "Descriptor",
          configurable: true,
        };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        if (element.kind === "field") obj.initializer = element.initializer;

        return obj;
      },

      // ToElementDescriptors
      toElementDescriptors: function(
        elementObjects /*: ElementObject[] */,
      ) /*: ElementDescriptor[] */ {
        if (elementObjects === undefined) return;
        return toArray(elementObjects).map(function(elementObject) {
          var element = this.toElementDescriptor(elementObject);
          this.disallowProperty(elementObject, "finisher", "An element descriptor");
          this.disallowProperty(elementObject, "extras", "An element descriptor");
          return element;
        }, this);
      },

      // ToElementDescriptor
      toElementDescriptor: function(
        elementObject /*: ElementObject */,
      ) /*: ElementDescriptor */ {
        var kind = String(elementObject.kind);
        if (kind !== "method" && kind !== "field") {
          throw new TypeError(
            'An element descriptor\\'s .kind property must be either "method" or' +
              ' "field", but a decorator created an element descriptor with' +
              ' .kind "' +
              kind +
              '"',
          );
        }

        var key = toPropertyKey(elementObject.key);

        var placement = String(elementObject.placement);
        if (
          placement !== "static" &&
          placement !== "prototype" &&
          placement !== "own"
        ) {
          throw new TypeError(
            'An element descriptor\\'s .placement property must be one of "static",' +
              ' "prototype" or "own", but a decorator created an element descriptor' +
              ' with .placement "' +
              placement +
              '"',
          );
        }

        var descriptor /*: PropertyDescriptor */ = elementObject.descriptor;

        this.disallowProperty(elementObject, "elements", "An element descriptor");

        var element /*: ElementDescriptor */ = {
          kind: kind,
          key: key,
          placement: placement,
          descriptor: Object.assign({}, descriptor),
        };

        if (kind !== "field") {
          this.disallowProperty(elementObject, "initializer", "A method descriptor");
        } else {
          this.disallowProperty(
            descriptor,
            "get",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "set",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "value",
            "The property descriptor of a field descriptor",
          );

          element.initializer = elementObject.initializer;
        }

        return element;
      },

      toElementFinisherExtras: function(
        elementObject /*: ElementObject */,
      ) /*: ElementFinisherExtras */ {
        var element /*: ElementDescriptor */ = this.toElementDescriptor(
          elementObject,
        );
        var finisher /*: ClassFinisher */ = _optionalCallableProperty(
          elementObject,
          "finisher",
        );
        var extras /*: ElementDescriptors[] */ = this.toElementDescriptors(
          elementObject.extras,
        );

        return { element: element, finisher: finisher, extras: extras };
      },

      // FromClassDescriptor
      fromClassDescriptor: function(
        elements /*: ElementDescriptor[] */,
      ) /*: ClassObject */ {
        var obj = {
          kind: "class",
          elements: elements.map(this.fromElementDescriptor, this),
        };

        var desc = { value: "Descriptor", configurable: true };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        return obj;
      },

      // ToClassDescriptor
      toClassDescriptor: function(
        obj /*: ClassObject */,
      ) /*: ElementsFinisher */ {
        var kind = String(obj.kind);
        if (kind !== "class") {
          throw new TypeError(
            'A class descriptor\\'s .kind property must be "class", but a decorator' +
              ' created a class descriptor with .kind "' +
              kind +
              '"',
          );
        }

        this.disallowProperty(obj, "key", "A class descriptor");
        this.disallowProperty(obj, "placement", "A class descriptor");
        this.disallowProperty(obj, "descriptor", "A class descriptor");
        this.disallowProperty(obj, "initializer", "A class descriptor");
        this.disallowProperty(obj, "extras", "A class descriptor");

        var finisher = _optionalCallableProperty(obj, "finisher");
        var elements = this.toElementDescriptors(obj.elements);

        return { elements: elements, finisher: finisher };
      },

      // RunClassFinishers
      runClassFinishers: function(
        constructor /*: Class<*> */,
        finishers /*: ClassFinisher[] */,
      ) /*: Class<*> */ {
        for (var i = 0; i < finishers.length; i++) {
          var newConstructor /*: ?Class<*> */ = (0, finishers[i])(constructor);
          if (newConstructor !== undefined) {
            // NOTE: This should check if IsConstructor(newConstructor) is false.
            if (typeof newConstructor !== "function") {
              throw new TypeError("Finishers must return a constructor.");
            }
            constructor = newConstructor;
          }
        }
        return constructor;
      },

      disallowProperty: function(obj, name, objectType) {
        if (obj[name] !== undefined) {
          throw new TypeError(objectType + " can't have a ." + name + " property.");
        }
      }
    };

    return api;
  }

  // ClassElementEvaluation
  function _createElementDescriptor(
    def /*: ElementDefinition */,
  ) /*: ElementDescriptor */ {
    var key = toPropertyKey(def.key);

    var descriptor /*: PropertyDescriptor */;
    if (def.kind === "method") {
      descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false,
      };
    } else if (def.kind === "get") {
      descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "set") {
      descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "field") {
      descriptor = { configurable: true, writable: true, enumerable: true };
    }

    var element /*: ElementDescriptor */ = {
      kind: def.kind === "field" ? "field" : "method",
      key: key,
      placement: def.static
        ? "static"
        : def.kind === "field"
        ? "own"
        : "prototype",
      descriptor: descriptor,
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;

    return element;
  }

  // CoalesceGetterSetter
  function _coalesceGetterSetter(
    element /*: ElementDescriptor */,
    other /*: ElementDescriptor */,
  ) {
    if (element.descriptor.get !== undefined) {
      other.descriptor.get = element.descriptor.get;
    } else {
      other.descriptor.set = element.descriptor.set;
    }
  }

  // CoalesceClassElements
  function _coalesceClassElements(
    elements /*: ElementDescriptor[] */,
  ) /*: ElementDescriptor[] */ {
    var newElements /*: ElementDescriptor[] */ = [];

    var isSameElement = function(
      other /*: ElementDescriptor */,
    ) /*: boolean */ {
      return (
        other.kind === "method" &&
        other.key === element.key &&
        other.placement === element.placement
      );
    };

    for (var i = 0; i < elements.length; i++) {
      var element /*: ElementDescriptor */ = elements[i];
      var other /*: ElementDescriptor */;

      if (
        element.kind === "method" &&
        (other = newElements.find(isSameElement))
      ) {
        if (
          _isDataDescriptor(element.descriptor) ||
          _isDataDescriptor(other.descriptor)
        ) {
          if (_hasDecorators(element) || _hasDecorators(other)) {
            throw new ReferenceError(
              "Duplicated methods (" + element.key + ") can't be decorated.",
            );
          }
          other.descriptor = element.descriptor;
        } else {
          if (_hasDecorators(element)) {
            if (_hasDecorators(other)) {
              throw new ReferenceError(
                "Decorators can't be placed on different accessors with for " +
                  "the same property (" +
                  element.key +
                  ").",
              );
            }
            other.decorators = element.decorators;
          }
          _coalesceGetterSetter(element, other);
        }
      } else {
        newElements.push(element);
      }
    }

    return newElements;
  }

  function _hasDecorators(element /*: ElementDescriptor */) /*: boolean */ {
    return element.decorators && element.decorators.length;
  }

  function _isDataDescriptor(desc /*: PropertyDescriptor */) /*: boolean */ {
    return (
      desc !== undefined &&
      !(desc.value === undefined && desc.writable === undefined)
    );
  }

  function _optionalCallableProperty /*::<T>*/(
    obj /*: T */,
    name /*: $Keys<T> */,
  ) /*: ?Function */ {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") {
      throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
  }

`, helpers.classPrivateMethodGet = helper("7.1.6")`
  export default function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
  }
`, helpers.checkPrivateRedeclaration = helper("7.14.1")`
  export default function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
      throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
  }
`, helpers.classPrivateFieldInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateFieldInitSpec(obj, privateMap, value) {
    checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
  }
`, helpers.classPrivateMethodInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateMethodInitSpec(obj, privateSet) {
    checkPrivateRedeclaration(obj, privateSet);
    privateSet.add(obj);
  }
`, helpers.classPrivateMethodSet = helper("7.1.6")`
    export default function _classPrivateMethodSet() {
      throw new TypeError("attempted to reassign private method");
    }
  `, helpers.identity = helper("7.17.0")`
  export default function _identity(x) {
    return x;
  }
`, helpers.nullishReceiverError = helper("7.22.6")`
  export default function _nullishReceiverError(r) {
    throw new TypeError("Cannot set property of null or undefined.");
  }
`;
      }, "./node_modules/.pnpm/@babel+helpers@7.23.2/node_modules/@babel/helpers/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0, exports3.ensure = function(name, newFileClass) {
          FileClass || (FileClass = newFileClass), loadHelper(name);
        }, exports3.get = get, exports3.getDependencies = function(name) {
          return loadHelper(name).getDependencies();
        }, exports3.list = void 0, exports3.minVersion = function(name) {
          return loadHelper(name).minVersion;
        };
        var _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _helpers = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.23.2/node_modules/@babel/helpers/lib/helpers.js");
        const { assignmentExpression, cloneNode, expressionStatement, file, identifier } = _t;
        function makePath(path3) {
          const parts = [];
          for (; path3.parentPath; path3 = path3.parentPath) parts.push(path3.key), path3.inList && parts.push(path3.listKey);
          return parts.reverse().join(".");
        }
        let FileClass;
        function getHelperMetadata(file2) {
          const globals = /* @__PURE__ */ new Set(), localBindingNames = /* @__PURE__ */ new Set(), dependencies = /* @__PURE__ */ new Map();
          let exportName, exportPath;
          const exportBindingAssignments = [], importPaths = [], importBindingsReferences = [], dependencyVisitor = { ImportDeclaration(child) {
            const name = child.node.source.value;
            if (!_helpers.default[name]) throw child.buildCodeFrameError(`Unknown helper ${name}`);
            if (1 !== child.get("specifiers").length || !child.get("specifiers.0").isImportDefaultSpecifier()) throw child.buildCodeFrameError("Helpers can only import a default value");
            const bindingIdentifier = child.node.specifiers[0].local;
            dependencies.set(bindingIdentifier, name), importPaths.push(makePath(child));
          }, ExportDefaultDeclaration(child) {
            const decl = child.get("declaration");
            if (!decl.isFunctionDeclaration() || !decl.node.id) throw decl.buildCodeFrameError("Helpers can only export named function declarations");
            exportName = decl.node.id.name, exportPath = makePath(child);
          }, ExportAllDeclaration(child) {
            throw child.buildCodeFrameError("Helpers can only export default");
          }, ExportNamedDeclaration(child) {
            throw child.buildCodeFrameError("Helpers can only export default");
          }, Statement(child) {
            child.isImportDeclaration() || child.isExportDeclaration() || child.skip();
          } }, referenceVisitor = { Program(path3) {
            const bindings = path3.scope.getAllBindings();
            Object.keys(bindings).forEach((name) => {
              name !== exportName && (dependencies.has(bindings[name].identifier) || localBindingNames.add(name));
            });
          }, ReferencedIdentifier(child) {
            const name = child.node.name, binding = child.scope.getBinding(name);
            binding ? dependencies.has(binding.identifier) && importBindingsReferences.push(makePath(child)) : globals.add(name);
          }, AssignmentExpression(child) {
            const left = child.get("left");
            if (!(exportName in left.getBindingIdentifiers())) return;
            if (!left.isIdentifier()) throw left.buildCodeFrameError("Only simple assignments to exports are allowed in helpers");
            const binding = child.scope.getBinding(exportName);
            null != binding && binding.scope.path.isProgram() && exportBindingAssignments.push(makePath(child));
          } };
          if ((0, _traverse.default)(file2.ast, dependencyVisitor, file2.scope), (0, _traverse.default)(file2.ast, referenceVisitor, file2.scope), !exportPath) throw new Error("Helpers must have a default export.");
          return exportBindingAssignments.reverse(), { globals: Array.from(globals), localBindingNames: Array.from(localBindingNames), dependencies, exportBindingAssignments, exportPath, exportName, importBindingsReferences, importPaths };
        }
        const helperData = /* @__PURE__ */ Object.create(null);
        function loadHelper(name) {
          if (!helperData[name]) {
            const helper = _helpers.default[name];
            if (!helper) throw Object.assign(new ReferenceError(`Unknown helper ${name}`), { code: "BABEL_HELPER_UNKNOWN", helper: name });
            const fn = () => {
              if (!FileClass) {
                const fakeFile = { ast: file(helper.ast()), path: null };
                return (0, _traverse.default)(fakeFile.ast, { Program: (path3) => (fakeFile.path = path3).stop() }), fakeFile;
              }
              return new FileClass({ filename: `babel-helper://${name}` }, { ast: file(helper.ast()), code: "[internal Babel helper code]", inputMap: null });
            };
            let metadata = null;
            helperData[name] = { minVersion: helper.minVersion, build(getDependency, id, localBindings) {
              const file2 = fn();
              return metadata || (metadata = getHelperMetadata(file2)), function(file3, metadata2, id2, localBindings2, getDependency2) {
                if (localBindings2 && !id2) throw new Error("Unexpected local bindings for module-based helpers.");
                if (!id2) return;
                const { localBindingNames, dependencies, exportBindingAssignments, exportPath, exportName, importBindingsReferences, importPaths } = metadata2, dependenciesRefs = {};
                dependencies.forEach((name2, id3) => {
                  dependenciesRefs[id3.name] = "function" == typeof getDependency2 && getDependency2(name2) || id3;
                });
                const toRename = {}, bindings = new Set(localBindings2 || []);
                localBindingNames.forEach((name2) => {
                  let newName = name2;
                  for (; bindings.has(newName); ) newName = "_" + newName;
                  newName !== name2 && (toRename[name2] = newName);
                }), "Identifier" === id2.type && exportName !== id2.name && (toRename[exportName] = id2.name);
                const { path: path3 } = file3, exp = path3.get(exportPath), imps = importPaths.map((p) => path3.get(p)), impsBindingRefs = importBindingsReferences.map((p) => path3.get(p)), decl = exp.get("declaration");
                if ("Identifier" === id2.type) exp.replaceWith(decl);
                else {
                  if ("MemberExpression" !== id2.type) throw new Error("Unexpected helper format.");
                  exportBindingAssignments.forEach((assignPath) => {
                    const assign = path3.get(assignPath);
                    assign.replaceWith(assignmentExpression("=", id2, assign.node));
                  }), exp.replaceWith(decl), path3.pushContainer("body", expressionStatement(assignmentExpression("=", id2, identifier(exportName))));
                }
                Object.keys(toRename).forEach((name2) => {
                  path3.scope.rename(name2, toRename[name2]);
                });
                for (const path4 of imps) path4.remove();
                for (const path4 of impsBindingRefs) {
                  const node = cloneNode(dependenciesRefs[path4.node.name]);
                  path4.replaceWith(node);
                }
              }(file2, metadata, id, localBindings, getDependency), { nodes: file2.ast.program.body, globals: metadata.globals };
            }, getDependencies: () => (metadata || (metadata = getHelperMetadata(fn())), Array.from(metadata.dependencies.values())) };
          }
          return helperData[name];
        }
        function get(name, getDependency, id, localBindings) {
          return loadHelper(name).build(getDependency, id, localBindings);
        }
        const list = Object.keys(_helpers.default).map((name) => name.replace(/^_/, ""));
        exports3.list = list;
        var _default = get;
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+parser@7.23.0/node_modules/@babel/parser/lib/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (null == source) return {};
          var key, i, target = {}, sourceKeys = Object.keys(source);
          for (i = 0; i < sourceKeys.length; i++) key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
          return target;
        }
        Object.defineProperty(exports3, "__esModule", { value: true });
        class Position {
          constructor(line, col, index) {
            this.line = void 0, this.column = void 0, this.index = void 0, this.line = line, this.column = col, this.index = index;
          }
        }
        class SourceLocation {
          constructor(start, end) {
            this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = start, this.end = end;
          }
        }
        function createPositionWithColumnOffset(position, columnOffset) {
          const { line, column, index } = position;
          return new Position(line, column + columnOffset, index + columnOffset);
        }
        const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
        var ModuleErrors = { ImportMetaOutsideModule: { message: `import.meta may appear only with 'sourceType: "module"'`, code }, ImportOutsideModule: { message: `'import' and 'export' may appear only with 'sourceType: "module"'`, code } };
        const NodeDescriptions = { ArrayPattern: "array destructuring pattern", AssignmentExpression: "assignment expression", AssignmentPattern: "assignment expression", ArrowFunctionExpression: "arrow function expression", ConditionalExpression: "conditional expression", CatchClause: "catch clause", ForOfStatement: "for-of statement", ForInStatement: "for-in statement", ForStatement: "for-loop", FormalParameters: "function parameter list", Identifier: "identifier", ImportSpecifier: "import specifier", ImportDefaultSpecifier: "import default specifier", ImportNamespaceSpecifier: "import namespace specifier", ObjectPattern: "object destructuring pattern", ParenthesizedExpression: "parenthesized expression", RestElement: "rest element", UpdateExpression: { true: "prefix operation", false: "postfix operation" }, VariableDeclarator: "variable declaration", YieldExpression: "yield expression" }, toNodeDescription = ({ type, prefix }) => "UpdateExpression" === type ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];
        var StandardErrors = { AccessorIsGenerator: ({ kind }) => `A ${kind}ter cannot be a generator.`, ArgumentsInClass: "'arguments' is only allowed in functions and class methods.", AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.", AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.", AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.", AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.", AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncFunction: "'await' is only allowed within async functions.", BadGetterArity: "A 'get' accessor must not have any formal parameters.", BadSetterArity: "A 'set' accessor must have exactly one formal parameter.", BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.", ConstructorClassField: "Classes may not have a field named 'constructor'.", ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.", ConstructorIsAccessor: "Class constructor may not be an accessor.", ConstructorIsAsync: "Constructor can't be an async function.", ConstructorIsGenerator: "Constructor can't be a generator.", DeclarationMissingInitializer: ({ kind }) => `Missing initializer in ${kind} declaration.`, DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.", DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.", DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.", DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?", DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.", DecoratorSemicolon: "Decorators must not be followed by a semicolon.", DecoratorStaticBlock: "Decorators can't be used with a static block.", DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.', DeletePrivateField: "Deleting a private field is not allowed.", DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.", DuplicateConstructor: "Duplicate constructor in the same class.", DuplicateDefaultExport: "Only one default export allowed per module.", DuplicateExport: ({ exportName }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`, DuplicateProto: "Redefinition of __proto__ property.", DuplicateRegExpFlags: "Duplicate regular expression flag.", DynamicImportPhaseRequiresImportExpressions: ({ phase }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`, ElementAfterRest: "Rest element must be last element.", EscapedCharNotAnIdentifier: "Invalid Unicode escape.", ExportBindingIsString: ({ localName, exportName }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`, ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.", ForInOfLoopInitializer: ({ type }) => `'${"ForInStatement" === type ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`, ForInUsing: "For-in loop may not start with 'using' declaration.", ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.", ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.", GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.", IllegalBreakContinue: ({ type }) => `Unsyntactic ${"BreakStatement" === type ? "break" : "continue"}.`, IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.", IllegalReturn: "'return' outside of function.", ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.", ImportBindingIsString: ({ importName }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName}" as foo }\`?`, ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.", ImportCallArity: ({ maxArgumentCount }) => `\`import()\` requires exactly ${1 === maxArgumentCount ? "one argument" : "one or two arguments"}.`, ImportCallNotNewExpression: "Cannot use new with import(...).", ImportCallSpreadArgument: "`...` is not allowed in `import()`.", ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.", ImportReflectionHasAssertion: "`import module x` cannot have assertions.", ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.', IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.", InvalidBigIntLiteral: "Invalid BigIntLiteral.", InvalidCodePoint: "Code point out of bounds.", InvalidCoverInitializedName: "Invalid shorthand property initializer.", InvalidDecimal: "Invalid decimal.", InvalidDigit: ({ radix }) => `Expected number in radix ${radix}.`, InvalidEscapeSequence: "Bad character escape sequence.", InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.", InvalidEscapedReservedWord: ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`, InvalidIdentifier: ({ identifierName }) => `Invalid identifier ${identifierName}.`, InvalidLhs: ({ ancestor }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsBinding: ({ ancestor }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsOptionalChaining: ({ ancestor }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`, InvalidNumber: "Invalid number.", InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.", InvalidOrUnexpectedToken: ({ unexpected }) => `Unexpected character '${unexpected}'.`, InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.", InvalidPrivateFieldResolution: ({ identifierName }) => `Private name #${identifierName} is not defined.`, InvalidPropertyBindingPattern: "Binding member expression.", InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.", InvalidRestAssignmentPattern: "Invalid rest operator's argument.", LabelRedeclaration: ({ labelName }) => `Label '${labelName}' is already declared.`, LetInLexicalBinding: "'let' is disallowed as a lexically bound name.", LineTerminatorBeforeArrow: "No line break is allowed before '=>'.", MalformedRegExpFlags: "Invalid regular expression flag.", MissingClassName: "A class name is required.", MissingEqInAssignment: "Only '=' operator can be used for specifying default value.", MissingSemicolon: "Missing semicolon.", MissingPlugin: ({ missingPlugin }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingOneOfPlugins: ({ missingPlugin }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.", MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.", ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.", ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.", ModuleAttributesWithDuplicateKeys: ({ key }) => `Duplicate key "${key}" is not allowed in module attributes.`, ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`, ModuleExportUndefined: ({ localName }) => `Export '${localName}' is not defined.`, MultipleDefaultsInSwitch: "Multiple default clauses.", NewlineAfterThrow: "Illegal newline after throw.", NoCatchOrFinally: "Missing catch or finally clause.", NumberIdentifier: "Identifier directly after number.", NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.", ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.", OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.", OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.", OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.", ParamDupe: "Argument name clash.", PatternHasAccessor: "Object pattern can't contain getter or setter.", PatternHasMethod: "Object pattern can't contain methods.", PrivateInExpectedIn: ({ identifierName }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`, PrivateNameRedeclaration: ({ identifierName }) => `Duplicate private name #${identifierName}.`, RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", RecordNoProto: "'__proto__' is not allowed in Record expressions.", RestTrailingComma: "Unexpected trailing comma after rest element.", SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.", SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.", SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.', StaticPrototype: "Classes may not have static property named prototype.", SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?", SuperPrivateField: "Private fields can't be accessed on super.", TrailingDecorator: "Decorators must be attached to a class element.", TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.", UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.', UnexpectedDigitAfterHash: "Unexpected digit after hash token.", UnexpectedImportExport: "'import' and 'export' may only appear at the top level.", UnexpectedKeyword: ({ keyword }) => `Unexpected keyword '${keyword}'.`, UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.", UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.", UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.", UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.", UnexpectedPrivateField: "Unexpected private name.", UnexpectedReservedWord: ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`, UnexpectedSuper: "'super' is only allowed in object methods and classes.", UnexpectedToken: ({ expected, unexpected }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`, UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.", UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.", UnsupportedBind: "Binding should be performed on object property.", UnsupportedDecoratorExport: "A decorated export must export a class declaration.", UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.", UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.", UnsupportedMetaProperty: ({ target, onlyValidPropertyName }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`, UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.", UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.", UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).", UnterminatedComment: "Unterminated comment.", UnterminatedRegExp: "Unterminated regular expression.", UnterminatedString: "Unterminated string constant.", UnterminatedTemplate: "Unterminated template.", UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.", VarRedeclaration: ({ identifierName }) => `Identifier '${identifierName}' has already been declared.`, YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.", YieldInParameter: "Yield expression is not allowed in formal parameters.", ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0." };
        const UnparenthesizedPipeBodyDescriptions = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
        var PipelineOperatorErrors = { PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.", PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.', PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.", PipeTopicUnconfiguredToken: ({ token }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`, PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.", PipeUnparenthesizedBody: ({ type }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({ type })}; please wrap it in parentheses.`, PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.', PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.", PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.", PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.", PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.", PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.' };
        const _excluded$1 = ["toMessage"], _excluded2$1 = ["message"];
        function defineHidden(obj, key, value2) {
          Object.defineProperty(obj, key, { enumerable: false, configurable: true, value: value2 });
        }
        function toParseErrorConstructor(_ref) {
          let { toMessage } = _ref, properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);
          return function constructor({ loc, details }) {
            const error = new SyntaxError();
            return Object.assign(error, properties, { loc, pos: loc.index }), "missingPlugin" in details && Object.assign(error, { missingPlugin: details.missingPlugin }), defineHidden(error, "clone", function(overrides = {}) {
              var _overrides$loc;
              const { line, column, index } = null != (_overrides$loc = overrides.loc) ? _overrides$loc : loc;
              return constructor({ loc: new Position(line, column, index), details: Object.assign({}, details, overrides.details) });
            }), defineHidden(error, "details", details), Object.defineProperty(error, "message", { configurable: true, get() {
              const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
              return this.message = message, message;
            }, set(value2) {
              Object.defineProperty(this, "message", { value: value2, writable: true });
            } }), error;
          };
        }
        function ParseErrorEnum(argument, syntaxPlugin) {
          if (Array.isArray(argument)) return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
          const ParseErrorConstructors = {};
          for (const reasonCode of Object.keys(argument)) {
            const template = argument[reasonCode], _ref2 = "string" == typeof template ? { message: () => template } : "function" == typeof template ? { message: template } : template, { message } = _ref2, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1), toMessage = "string" == typeof message ? () => message : message;
            ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({ code: "BABEL_PARSER_SYNTAX_ERROR", reasonCode, toMessage }, syntaxPlugin ? { syntaxPlugin } : {}, rest));
          }
          return ParseErrorConstructors;
        }
        const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum({ StrictDelete: "Deleting local variable in strict mode.", StrictEvalArguments: ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`, StrictEvalArgumentsBinding: ({ bindingName }) => `Binding '${bindingName}' in strict mode.`, StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.", StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.", StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.", StrictWith: "'with' in strict mode." }), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors)), { defineProperty } = Object, toUnenumerable = (object, key) => defineProperty(object, key, { enumerable: false, value: object[key] });
        function toESTreeLocation(node) {
          return node.loc.start && toUnenumerable(node.loc.start, "index"), node.loc.end && toUnenumerable(node.loc.end, "index"), node;
        }
        class TokContext {
          constructor(token, preserveSpace) {
            this.token = void 0, this.preserveSpace = void 0, this.token = token, this.preserveSpace = !!preserveSpace;
          }
        }
        const types = { brace: new TokContext("{"), j_oTag: new TokContext("<tag"), j_cTag: new TokContext("</tag"), j_expr: new TokContext("<tag>...</tag>", true) };
        types.template = new TokContext("`", true);
        class ExportedTokenType {
          constructor(label, conf = {}) {
            this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.rightAssociative = !!conf.rightAssociative, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = null != conf.binop ? conf.binop : null, this.updateContext = null;
          }
        }
        const keywords$1 = /* @__PURE__ */ new Map();
        function createKeyword(name, options = {}) {
          options.keyword = name;
          const token = createToken(name, options);
          return keywords$1.set(name, token), token;
        }
        function createBinop(name, binop) {
          return createToken(name, { beforeExpr: true, binop });
        }
        let tokenTypeCounter = -1;
        const tokenTypes = [], tokenLabels = [], tokenBinops = [], tokenBeforeExprs = [], tokenStartsExprs = [], tokenPrefixes = [];
        function createToken(name, options = {}) {
          var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
          return ++tokenTypeCounter, tokenLabels.push(name), tokenBinops.push(null != (_options$binop = options.binop) ? _options$binop : -1), tokenBeforeExprs.push(null != (_options$beforeExpr = options.beforeExpr) && _options$beforeExpr), tokenStartsExprs.push(null != (_options$startsExpr = options.startsExpr) && _options$startsExpr), tokenPrefixes.push(null != (_options$prefix = options.prefix) && _options$prefix), tokenTypes.push(new ExportedTokenType(name, options)), tokenTypeCounter;
        }
        function createKeywordLike(name, options = {}) {
          var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
          return ++tokenTypeCounter, keywords$1.set(name, tokenTypeCounter), tokenLabels.push(name), tokenBinops.push(null != (_options$binop2 = options.binop) ? _options$binop2 : -1), tokenBeforeExprs.push(null != (_options$beforeExpr2 = options.beforeExpr) && _options$beforeExpr2), tokenStartsExprs.push(null != (_options$startsExpr2 = options.startsExpr) && _options$startsExpr2), tokenPrefixes.push(null != (_options$prefix2 = options.prefix) && _options$prefix2), tokenTypes.push(new ExportedTokenType("name", options)), tokenTypeCounter;
        }
        const tt = { bracketL: createToken("[", { beforeExpr: true, startsExpr: true }), bracketHashL: createToken("#[", { beforeExpr: true, startsExpr: true }), bracketBarL: createToken("[|", { beforeExpr: true, startsExpr: true }), bracketR: createToken("]"), bracketBarR: createToken("|]"), braceL: createToken("{", { beforeExpr: true, startsExpr: true }), braceBarL: createToken("{|", { beforeExpr: true, startsExpr: true }), braceHashL: createToken("#{", { beforeExpr: true, startsExpr: true }), braceR: createToken("}"), braceBarR: createToken("|}"), parenL: createToken("(", { beforeExpr: true, startsExpr: true }), parenR: createToken(")"), comma: createToken(",", { beforeExpr: true }), semi: createToken(";", { beforeExpr: true }), colon: createToken(":", { beforeExpr: true }), doubleColon: createToken("::", { beforeExpr: true }), dot: createToken("."), question: createToken("?", { beforeExpr: true }), questionDot: createToken("?."), arrow: createToken("=>", { beforeExpr: true }), template: createToken("template"), ellipsis: createToken("...", { beforeExpr: true }), backQuote: createToken("`", { startsExpr: true }), dollarBraceL: createToken("${", { beforeExpr: true, startsExpr: true }), templateTail: createToken("...`", { startsExpr: true }), templateNonTail: createToken("...${", { beforeExpr: true, startsExpr: true }), at: createToken("@"), hash: createToken("#", { startsExpr: true }), interpreterDirective: createToken("#!..."), eq: createToken("=", { beforeExpr: true, isAssign: true }), assign: createToken("_=", { beforeExpr: true, isAssign: true }), slashAssign: createToken("_=", { beforeExpr: true, isAssign: true }), xorAssign: createToken("_=", { beforeExpr: true, isAssign: true }), moduloAssign: createToken("_=", { beforeExpr: true, isAssign: true }), incDec: createToken("++/--", { prefix: true, postfix: true, startsExpr: true }), bang: createToken("!", { beforeExpr: true, prefix: true, startsExpr: true }), tilde: createToken("~", { beforeExpr: true, prefix: true, startsExpr: true }), doubleCaret: createToken("^^", { startsExpr: true }), doubleAt: createToken("@@", { startsExpr: true }), pipeline: createBinop("|>", 0), nullishCoalescing: createBinop("??", 1), logicalOR: createBinop("||", 1), logicalAND: createBinop("&&", 2), bitwiseOR: createBinop("|", 3), bitwiseXOR: createBinop("^", 4), bitwiseAND: createBinop("&", 5), equality: createBinop("==/!=/===/!==", 6), lt: createBinop("</>/<=/>=", 7), gt: createBinop("</>/<=/>=", 7), relational: createBinop("</>/<=/>=", 7), bitShift: createBinop("<</>>/>>>", 8), bitShiftL: createBinop("<</>>/>>>", 8), bitShiftR: createBinop("<</>>/>>>", 8), plusMin: createToken("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: createToken("%", { binop: 10, startsExpr: true }), star: createToken("*", { binop: 10 }), slash: createBinop("/", 10), exponent: createToken("**", { beforeExpr: true, binop: 11, rightAssociative: true }), _in: createKeyword("in", { beforeExpr: true, binop: 7 }), _instanceof: createKeyword("instanceof", { beforeExpr: true, binop: 7 }), _break: createKeyword("break"), _case: createKeyword("case", { beforeExpr: true }), _catch: createKeyword("catch"), _continue: createKeyword("continue"), _debugger: createKeyword("debugger"), _default: createKeyword("default", { beforeExpr: true }), _else: createKeyword("else", { beforeExpr: true }), _finally: createKeyword("finally"), _function: createKeyword("function", { startsExpr: true }), _if: createKeyword("if"), _return: createKeyword("return", { beforeExpr: true }), _switch: createKeyword("switch"), _throw: createKeyword("throw", { beforeExpr: true, prefix: true, startsExpr: true }), _try: createKeyword("try"), _var: createKeyword("var"), _const: createKeyword("const"), _with: createKeyword("with"), _new: createKeyword("new", { beforeExpr: true, startsExpr: true }), _this: createKeyword("this", { startsExpr: true }), _super: createKeyword("super", { startsExpr: true }), _class: createKeyword("class", { startsExpr: true }), _extends: createKeyword("extends", { beforeExpr: true }), _export: createKeyword("export"), _import: createKeyword("import", { startsExpr: true }), _null: createKeyword("null", { startsExpr: true }), _true: createKeyword("true", { startsExpr: true }), _false: createKeyword("false", { startsExpr: true }), _typeof: createKeyword("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: createKeyword("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: createKeyword("delete", { beforeExpr: true, prefix: true, startsExpr: true }), _do: createKeyword("do", { isLoop: true, beforeExpr: true }), _for: createKeyword("for", { isLoop: true }), _while: createKeyword("while", { isLoop: true }), _as: createKeywordLike("as", { startsExpr: true }), _assert: createKeywordLike("assert", { startsExpr: true }), _async: createKeywordLike("async", { startsExpr: true }), _await: createKeywordLike("await", { startsExpr: true }), _defer: createKeywordLike("defer", { startsExpr: true }), _from: createKeywordLike("from", { startsExpr: true }), _get: createKeywordLike("get", { startsExpr: true }), _let: createKeywordLike("let", { startsExpr: true }), _meta: createKeywordLike("meta", { startsExpr: true }), _of: createKeywordLike("of", { startsExpr: true }), _sent: createKeywordLike("sent", { startsExpr: true }), _set: createKeywordLike("set", { startsExpr: true }), _source: createKeywordLike("source", { startsExpr: true }), _static: createKeywordLike("static", { startsExpr: true }), _using: createKeywordLike("using", { startsExpr: true }), _yield: createKeywordLike("yield", { startsExpr: true }), _asserts: createKeywordLike("asserts", { startsExpr: true }), _checks: createKeywordLike("checks", { startsExpr: true }), _exports: createKeywordLike("exports", { startsExpr: true }), _global: createKeywordLike("global", { startsExpr: true }), _implements: createKeywordLike("implements", { startsExpr: true }), _intrinsic: createKeywordLike("intrinsic", { startsExpr: true }), _infer: createKeywordLike("infer", { startsExpr: true }), _is: createKeywordLike("is", { startsExpr: true }), _mixins: createKeywordLike("mixins", { startsExpr: true }), _proto: createKeywordLike("proto", { startsExpr: true }), _require: createKeywordLike("require", { startsExpr: true }), _satisfies: createKeywordLike("satisfies", { startsExpr: true }), _keyof: createKeywordLike("keyof", { startsExpr: true }), _readonly: createKeywordLike("readonly", { startsExpr: true }), _unique: createKeywordLike("unique", { startsExpr: true }), _abstract: createKeywordLike("abstract", { startsExpr: true }), _declare: createKeywordLike("declare", { startsExpr: true }), _enum: createKeywordLike("enum", { startsExpr: true }), _module: createKeywordLike("module", { startsExpr: true }), _namespace: createKeywordLike("namespace", { startsExpr: true }), _interface: createKeywordLike("interface", { startsExpr: true }), _type: createKeywordLike("type", { startsExpr: true }), _opaque: createKeywordLike("opaque", { startsExpr: true }), name: createToken("name", { startsExpr: true }), string: createToken("string", { startsExpr: true }), num: createToken("num", { startsExpr: true }), bigint: createToken("bigint", { startsExpr: true }), decimal: createToken("decimal", { startsExpr: true }), regexp: createToken("regexp", { startsExpr: true }), privateName: createToken("#name", { startsExpr: true }), eof: createToken("eof"), jsxName: createToken("jsxName"), jsxText: createToken("jsxText", { beforeExpr: true }), jsxTagStart: createToken("jsxTagStart", { startsExpr: true }), jsxTagEnd: createToken("jsxTagEnd"), placeholder: createToken("%%", { startsExpr: true }) };
        function tokenIsIdentifier(token) {
          return token >= 93 && token <= 132;
        }
        function tokenIsKeywordOrIdentifier(token) {
          return token >= 58 && token <= 132;
        }
        function tokenIsLiteralPropertyName(token) {
          return token >= 58 && token <= 136;
        }
        function tokenCanStartExpression(token) {
          return tokenStartsExprs[token];
        }
        function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
          return token >= 129 && token <= 131;
        }
        function tokenIsKeyword(token) {
          return token >= 58 && token <= 92;
        }
        function tokenLabelName(token) {
          return tokenLabels[token];
        }
        function tokenOperatorPrecedence(token) {
          return tokenBinops[token];
        }
        function tokenIsTemplate(token) {
          return token >= 24 && token <= 25;
        }
        function getExportedToken(token) {
          return tokenTypes[token];
        }
        tokenTypes[8].updateContext = (context) => {
          context.pop();
        }, tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
          context.push(types.brace);
        }, tokenTypes[22].updateContext = (context) => {
          context[context.length - 1] === types.template ? context.pop() : context.push(types.template);
        }, tokenTypes[142].updateContext = (context) => {
          context.push(types.j_expr, types.j_oTag);
        };
        let nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
        const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet(code2, set) {
          let pos = 65536;
          for (let i = 0, length = set.length; i < length; i += 2) {
            if (pos += set[i], pos > code2) return false;
            if (pos += set[i + 1], pos >= code2) return true;
          }
          return false;
        }
        function isIdentifierStart(code2) {
          return code2 < 65 ? 36 === code2 : code2 <= 90 || (code2 < 97 ? 95 === code2 : code2 <= 122 || (code2 <= 65535 ? code2 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code2)) : isInAstralSet(code2, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code2) {
          return code2 < 48 ? 36 === code2 : code2 < 58 || !(code2 < 65) && (code2 <= 90 || (code2 < 97 ? 95 === code2 : code2 <= 122 || (code2 <= 65535 ? code2 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code2)) : isInAstralSet(code2, astralIdentifierStartCodes) || isInAstralSet(code2, astralIdentifierCodes))));
        }
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
        function isStrictBindReservedWord(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }
        const reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
        class Scope {
          constructor(flags) {
            this.var = /* @__PURE__ */ new Set(), this.lexical = /* @__PURE__ */ new Set(), this.functions = /* @__PURE__ */ new Set(), this.flags = flags;
          }
        }
        class ScopeHandler {
          constructor(parser, inModule) {
            this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = /* @__PURE__ */ new Map(), this.parser = parser, this.inModule = inModule;
          }
          get inTopLevel() {
            return (1 & this.currentScope().flags) > 0;
          }
          get inFunction() {
            return (2 & this.currentVarScopeFlags()) > 0;
          }
          get allowSuper() {
            return (16 & this.currentThisScopeFlags()) > 0;
          }
          get allowDirectSuper() {
            return (32 & this.currentThisScopeFlags()) > 0;
          }
          get inClass() {
            return (64 & this.currentThisScopeFlags()) > 0;
          }
          get inClassAndNotInNonArrowFunction() {
            const flags = this.currentThisScopeFlags();
            return (64 & flags) > 0 && 0 == (2 & flags);
          }
          get inStaticBlock() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (128 & flags) return true;
              if (451 & flags) return false;
            }
          }
          get inNonArrowFunction() {
            return (2 & this.currentThisScopeFlags()) > 0;
          }
          get treatFunctionsAsVar() {
            return this.treatFunctionsAsVarInScope(this.currentScope());
          }
          createScope(flags) {
            return new Scope(flags);
          }
          enter(flags) {
            this.scopeStack.push(this.createScope(flags));
          }
          exit() {
            return this.scopeStack.pop().flags;
          }
          treatFunctionsAsVarInScope(scope) {
            return !!(130 & scope.flags || !this.parser.inModule && 1 & scope.flags);
          }
          declareName(name, bindingType, loc) {
            let scope = this.currentScope();
            if (8 & bindingType || 16 & bindingType) this.checkRedeclarationInScope(scope, name, bindingType, loc), 16 & bindingType ? scope.functions.add(name) : scope.lexical.add(name), 8 & bindingType && this.maybeExportDefined(scope, name);
            else if (4 & bindingType) for (let i = this.scopeStack.length - 1; i >= 0 && (scope = this.scopeStack[i], this.checkRedeclarationInScope(scope, name, bindingType, loc), scope.var.add(name), this.maybeExportDefined(scope, name), !(387 & scope.flags)); --i) ;
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          maybeExportDefined(scope, name) {
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          checkRedeclarationInScope(scope, name, bindingType, loc) {
            this.isRedeclaredInScope(scope, name, bindingType) && this.parser.raise(Errors.VarRedeclaration, { at: loc, identifierName: name });
          }
          isRedeclaredInScope(scope, name, bindingType) {
            return !!(1 & bindingType) && (8 & bindingType ? scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name) : 16 & bindingType ? scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name) : scope.lexical.has(name) && !(8 & scope.flags && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name));
          }
          checkLocalExport(id) {
            const { name } = id, topLevelScope = this.scopeStack[0];
            topLevelScope.lexical.has(name) || topLevelScope.var.has(name) || topLevelScope.functions.has(name) || this.undefinedExports.set(name, id.loc.start);
          }
          currentScope() {
            return this.scopeStack[this.scopeStack.length - 1];
          }
          currentVarScopeFlags() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (387 & flags) return flags;
            }
          }
          currentThisScopeFlags() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (451 & flags && !(4 & flags)) return flags;
            }
          }
        }
        class FlowScope extends Scope {
          constructor(...args) {
            super(...args), this.declareFunctions = /* @__PURE__ */ new Set();
          }
        }
        class FlowScopeHandler extends ScopeHandler {
          createScope(flags) {
            return new FlowScope(flags);
          }
          declareName(name, bindingType, loc) {
            const scope = this.currentScope();
            if (2048 & bindingType) return this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name), void scope.declareFunctions.add(name);
            super.declareName(name, bindingType, loc);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            return !!super.isRedeclaredInScope(scope, name, bindingType) || !!(2048 & bindingType) && (!scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name)));
          }
          checkLocalExport(id) {
            this.scopeStack[0].declareFunctions.has(id.name) || super.checkLocalExport(id);
          }
        }
        class BaseParser {
          constructor() {
            this.sawUnambiguousESM = false, this.ambiguousScriptDifferentAst = false;
          }
          hasPlugin(pluginConfig) {
            if ("string" == typeof pluginConfig) return this.plugins.has(pluginConfig);
            {
              const [pluginName, pluginOptions] = pluginConfig;
              if (!this.hasPlugin(pluginName)) return false;
              const actualOptions = this.plugins.get(pluginName);
              for (const key of Object.keys(pluginOptions)) if ((null == actualOptions ? void 0 : actualOptions[key]) !== pluginOptions[key]) return false;
              return true;
            }
          }
          getPluginOption(plugin, name) {
            var _this$plugins$get;
            return null == (_this$plugins$get = this.plugins.get(plugin)) ? void 0 : _this$plugins$get[name];
          }
        }
        function setTrailingComments(node, comments) {
          void 0 === node.trailingComments ? node.trailingComments = comments : node.trailingComments.unshift(...comments);
        }
        function setInnerComments(node, comments) {
          void 0 === node.innerComments ? node.innerComments = comments : node.innerComments.unshift(...comments);
        }
        function adjustInnerComments(node, elements, commentWS) {
          let lastElement = null, i = elements.length;
          for (; null === lastElement && i > 0; ) lastElement = elements[--i];
          null === lastElement || lastElement.start > commentWS.start ? setInnerComments(node, commentWS.comments) : setTrailingComments(lastElement, commentWS.comments);
        }
        class CommentsParser extends BaseParser {
          addComment(comment) {
            this.filename && (comment.loc.filename = this.filename), this.state.comments.push(comment);
          }
          processComment(node) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength) return;
            let i = commentStackLength - 1;
            const lastCommentWS = commentStack[i];
            lastCommentWS.start === node.end && (lastCommentWS.leadingNode = node, i--);
            const { start: nodeStart } = node;
            for (; i >= 0; i--) {
              const commentWS = commentStack[i], commentEnd = commentWS.end;
              if (!(commentEnd > nodeStart)) {
                commentEnd === nodeStart && (commentWS.trailingNode = node);
                break;
              }
              commentWS.containingNode = node, this.finalizeComment(commentWS), commentStack.splice(i, 1);
            }
          }
          finalizeComment(commentWS) {
            const { comments } = commentWS;
            if (null !== commentWS.leadingNode || null !== commentWS.trailingNode) null !== commentWS.leadingNode && setTrailingComments(commentWS.leadingNode, comments), null !== commentWS.trailingNode && function(node, comments2) {
              void 0 === node.leadingComments ? node.leadingComments = comments2 : node.leadingComments.unshift(...comments2);
            }(commentWS.trailingNode, comments);
            else {
              const { containingNode: node, start: commentStart } = commentWS;
              if (44 === this.input.charCodeAt(commentStart - 1)) switch (node.type) {
                case "ObjectExpression":
                case "ObjectPattern":
                case "RecordExpression":
                  adjustInnerComments(node, node.properties, commentWS);
                  break;
                case "CallExpression":
                case "OptionalCallExpression":
                  adjustInnerComments(node, node.arguments, commentWS);
                  break;
                case "FunctionDeclaration":
                case "FunctionExpression":
                case "ArrowFunctionExpression":
                case "ObjectMethod":
                case "ClassMethod":
                case "ClassPrivateMethod":
                  adjustInnerComments(node, node.params, commentWS);
                  break;
                case "ArrayExpression":
                case "ArrayPattern":
                case "TupleExpression":
                  adjustInnerComments(node, node.elements, commentWS);
                  break;
                case "ExportNamedDeclaration":
                case "ImportDeclaration":
                  adjustInnerComments(node, node.specifiers, commentWS);
                  break;
                default:
                  setInnerComments(node, comments);
              }
              else setInnerComments(node, comments);
            }
          }
          finalizeRemainingComments() {
            const { commentStack } = this.state;
            for (let i = commentStack.length - 1; i >= 0; i--) this.finalizeComment(commentStack[i]);
            this.state.commentStack = [];
          }
          resetPreviousNodeTrailingComments(node) {
            const { commentStack } = this.state, { length } = commentStack;
            if (0 === length) return;
            const commentWS = commentStack[length - 1];
            commentWS.leadingNode === node && (commentWS.leadingNode = null);
          }
          resetPreviousIdentifierLeadingComments(node) {
            const { commentStack } = this.state, { length } = commentStack;
            0 !== length && (commentStack[length - 1].trailingNode === node ? commentStack[length - 1].trailingNode = null : length >= 2 && commentStack[length - 2].trailingNode === node && (commentStack[length - 2].trailingNode = null));
          }
          takeSurroundingComments(node, start, end) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength) return;
            let i = commentStackLength - 1;
            for (; i >= 0; i--) {
              const commentWS = commentStack[i], commentEnd = commentWS.end;
              if (commentWS.start === end) commentWS.leadingNode = node;
              else if (commentEnd === start) commentWS.trailingNode = node;
              else if (commentEnd < start) break;
            }
          }
        }
        const lineBreak = /\r\n?|[\n\u2028\u2029]/, lineBreakG = new RegExp(lineBreak.source, "g");
        function isNewLine(code2) {
          switch (code2) {
            case 10:
            case 13:
            case 8232:
            case 8233:
              return true;
            default:
              return false;
          }
        }
        const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g, skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
        function isWhitespace(code2) {
          switch (code2) {
            case 9:
            case 11:
            case 12:
            case 32:
            case 160:
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        }
        class State {
          constructor() {
            this.strict = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.maybeInArrowParameters = false, this.inType = false, this.noAnonFunctionType = false, this.hasFlowComment = false, this.isAmbientContext = false, this.inAbstractClass = false, this.inDisallowConditionalTypesContext = false, this.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null }, this.soloAwait = false, this.inFSharpPipelineDirectBody = false, this.labels = [], this.comments = [], this.commentStack = [], this.pos = 0, this.type = 139, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.lastTokStart = 0, this.context = [types.brace], this.canStartJSXElement = true, this.containsEsc = false, this.firstInvalidTemplateEscapePos = null, this.strictErrors = /* @__PURE__ */ new Map(), this.tokensLength = 0;
          }
          init({ strictMode, sourceType, startLine, startColumn }) {
            this.strict = false !== strictMode && (true === strictMode || "module" === sourceType), this.curLine = startLine, this.lineStart = -startColumn, this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
          }
          curPosition() {
            return new Position(this.curLine, this.pos - this.lineStart, this.pos);
          }
          clone(skipArrays) {
            const state = new State(), keys = Object.keys(this);
            for (let i = 0, length = keys.length; i < length; i++) {
              const key = keys[i];
              let val = this[key];
              !skipArrays && Array.isArray(val) && (val = val.slice()), state[key] = val;
            }
            return state;
          }
        }
        var _isDigit = function(code2) {
          return code2 >= 48 && code2 <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function readStringContents(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", firstInvalidLoc = null, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              out += input.slice(chunkStart, pos);
              const res = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors);
              null !== res.ch || firstInvalidLoc ? out += res.ch : firstInvalidLoc = { pos, lineStart, curLine }, { pos, lineStart, curLine } = res, chunkStart = pos;
            } else 8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, firstInvalidLoc, lineStart, curLine, containsInvalid: !!firstInvalidLoc };
        }
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code2;
              return { code: code2, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code2 ? null : String.fromCharCode(code2));
            }
            case 117: {
              let code2;
              return { code: code2, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code2 ? null : String.fromCodePoint(code2));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate) return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = input.slice(startPos, pos + 2).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate) return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n;
          return { n, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid), null === n && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i = 0, e = null == len ? 1 / 0 : len; i < e; ++i) {
            const code2 = input.charCodeAt(pos);
            let val;
            if (95 !== code2 || "bail" === allowNumSeparator) {
              if (val = code2 >= 97 ? code2 - 97 + 10 : code2 >= 65 ? code2 - 65 + 10 : _isDigit(code2) ? code2 - 48 : 1 / 0, val >= radix) {
                if (val <= 9 && bailOnError) return { n: null, pos };
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) val = 0;
                else {
                  if (!forceLen) break;
                  val = 0, invalid = true;
                }
              }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              if (allowNumSeparator) {
                if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                  if (bailOnError) return { n: null, pos };
                  errors.unexpectedNumericSeparator(pos, lineStart, curLine);
                }
              } else {
                if (bailOnError) return { n: null, pos };
                errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
              }
              ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code2;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code: code2, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code2 && code2 > 1114111) {
              if (!throwOnInvalid) return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else ({ code: code2, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code: code2, pos };
        }
        const _excluded = ["at"], _excluded2 = ["at"];
        function buildPosition(pos, lineStart, curLine) {
          return new Position(curLine, pos - lineStart, pos);
        }
        const VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
        class Token {
          constructor(state) {
            this.type = state.type, this.value = state.value, this.start = state.start, this.end = state.end, this.loc = new SourceLocation(state.startLoc, state.endLoc);
          }
        }
        class Tokenizer extends CommentsParser {
          constructor(options, input) {
            super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = { invalidDigit: (pos, lineStart, curLine, radix) => !!this.options.errorRecovery && (this.raise(Errors.InvalidDigit, { at: buildPosition(pos, lineStart, curLine), radix }), true), numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence), unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator) }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, { invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence), invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint) }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: (pos, lineStart, curLine) => {
              this.recordStrictModeErrors(Errors.StrictNumericEscape, { at: buildPosition(pos, lineStart, curLine) });
            }, unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedString, { at: buildPosition(pos - 1, lineStart, curLine) });
            } }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape), unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedTemplate, { at: buildPosition(pos, lineStart, curLine) });
            } }), this.state = new State(), this.state.init(options), this.input = input, this.length = input.length, this.isLookahead = false;
          }
          pushToken(token) {
            this.tokens.length = this.state.tokensLength, this.tokens.push(token), ++this.state.tokensLength;
          }
          next() {
            this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new Token(this.state)), this.state.lastTokStart = this.state.start, this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
          }
          eat(type) {
            return !!this.match(type) && (this.next(), true);
          }
          match(type) {
            return this.state.type === type;
          }
          createLookaheadState(state) {
            return { pos: state.pos, value: null, type: state.type, start: state.start, end: state.end, context: [this.curContext()], inType: state.inType, startLoc: state.startLoc, lastTokEndLoc: state.lastTokEndLoc, curLine: state.curLine, lineStart: state.lineStart, curPosition: state.curPosition };
          }
          lookahead() {
            const old = this.state;
            this.state = this.createLookaheadState(old), this.isLookahead = true, this.nextToken(), this.isLookahead = false;
            const curr = this.state;
            return this.state = old, curr;
          }
          nextTokenStart() {
            return this.nextTokenStartSince(this.state.pos);
          }
          nextTokenStartSince(pos) {
            return skipWhiteSpace.lastIndex = pos, skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
          }
          lookaheadCharCode() {
            return this.input.charCodeAt(this.nextTokenStart());
          }
          nextTokenInLineStart() {
            return this.nextTokenInLineStartSince(this.state.pos);
          }
          nextTokenInLineStartSince(pos) {
            return skipWhiteSpaceInLine.lastIndex = pos, skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
          }
          lookaheadInLineCharCode() {
            return this.input.charCodeAt(this.nextTokenInLineStart());
          }
          codePointAtPos(pos) {
            let cp = this.input.charCodeAt(pos);
            if (55296 == (64512 & cp) && ++pos < this.input.length) {
              const trail = this.input.charCodeAt(pos);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            return cp;
          }
          setStrict(strict) {
            this.state.strict = strict, strict && (this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, { at })), this.state.strictErrors.clear());
          }
          curContext() {
            return this.state.context[this.state.context.length - 1];
          }
          nextToken() {
            this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length ? this.finishToken(139) : this.getTokenFromCode(this.codePointAtPos(this.state.pos));
          }
          skipBlockComment(commentEnd) {
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            const start = this.state.pos, end = this.input.indexOf(commentEnd, start + 2);
            if (-1 === end) throw this.raise(Errors.UnterminatedComment, { at: this.state.curPosition() });
            for (this.state.pos = end + commentEnd.length, lineBreakG.lastIndex = start + 2; lineBreakG.test(this.input) && lineBreakG.lastIndex <= end; ) ++this.state.curLine, this.state.lineStart = lineBreakG.lastIndex;
            if (this.isLookahead) return;
            const comment = { type: "CommentBlock", value: this.input.slice(start + 2, end), start, end: end + commentEnd.length, loc: new SourceLocation(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipLineComment(startSkip) {
            const start = this.state.pos;
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            let ch = this.input.charCodeAt(this.state.pos += startSkip);
            if (this.state.pos < this.length) for (; !isNewLine(ch) && ++this.state.pos < this.length; ) ch = this.input.charCodeAt(this.state.pos);
            if (this.isLookahead) return;
            const end = this.state.pos, comment = { type: "CommentLine", value: this.input.slice(start + startSkip, end), start, end, loc: new SourceLocation(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipSpace() {
            const spaceStart = this.state.pos, comments = [];
            loop: for (; this.state.pos < this.length; ) {
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 32:
                case 160:
                case 9:
                  ++this.state.pos;
                  break;
                case 13:
                  10 === this.input.charCodeAt(this.state.pos + 1) && ++this.state.pos;
                case 10:
                case 8232:
                case 8233:
                  ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                  break;
                case 47:
                  switch (this.input.charCodeAt(this.state.pos + 1)) {
                    case 42: {
                      const comment = this.skipBlockComment("*/");
                      void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      break;
                    }
                    case 47: {
                      const comment = this.skipLineComment(2);
                      void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      break;
                    }
                    default:
                      break loop;
                  }
                  break;
                default:
                  if (isWhitespace(ch)) ++this.state.pos;
                  else if (45 === ch && !this.inModule && this.options.annexB) {
                    const pos = this.state.pos;
                    if (45 !== this.input.charCodeAt(pos + 1) || 62 !== this.input.charCodeAt(pos + 2) || !(0 === spaceStart || this.state.lineStart > spaceStart)) break loop;
                    {
                      const comment = this.skipLineComment(3);
                      void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                    }
                  } else {
                    if (60 !== ch || this.inModule || !this.options.annexB) break loop;
                    {
                      const pos = this.state.pos;
                      if (33 !== this.input.charCodeAt(pos + 1) || 45 !== this.input.charCodeAt(pos + 2) || 45 !== this.input.charCodeAt(pos + 3)) break loop;
                      {
                        const comment = this.skipLineComment(4);
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      }
                    }
                  }
              }
            }
            if (comments.length > 0) {
              const commentWhitespace = { start: spaceStart, end: this.state.pos, comments, leadingNode: null, trailingNode: null, containingNode: null };
              this.state.commentStack.push(commentWhitespace);
            }
          }
          finishToken(type, val) {
            this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
            const prevType = this.state.type;
            this.state.type = type, this.state.value = val, this.isLookahead || this.updateContext(prevType);
          }
          replaceToken(type) {
            this.state.type = type, this.updateContext();
          }
          readToken_numberSign() {
            if (0 === this.state.pos && this.readToken_interpreter()) return;
            const nextPos = this.state.pos + 1, next = this.codePointAtPos(nextPos);
            if (next >= 48 && next <= 57) throw this.raise(Errors.UnexpectedDigitAfterHash, { at: this.state.curPosition() });
            if (123 === next || 91 === next && this.hasPlugin("recordAndTuple")) {
              if (this.expectPlugin("recordAndTuple"), "bar" === this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(123 === next ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, { at: this.state.curPosition() });
              this.state.pos += 2, 123 === next ? this.finishToken(7) : this.finishToken(1);
            } else isIdentifierStart(next) ? (++this.state.pos, this.finishToken(138, this.readWord1(next))) : 92 === next ? (++this.state.pos, this.finishToken(138, this.readWord1())) : this.finishOp(27, 1);
          }
          readToken_dot() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next >= 48 && next <= 57 ? this.readNumber(true) : 46 === next && 46 === this.input.charCodeAt(this.state.pos + 2) ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
          }
          readToken_slash() {
            61 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(31, 2) : this.finishOp(56, 1);
          }
          readToken_interpreter() {
            if (0 !== this.state.pos || this.length < 2) return false;
            let ch = this.input.charCodeAt(this.state.pos + 1);
            if (33 !== ch) return false;
            const start = this.state.pos;
            for (this.state.pos += 1; !isNewLine(ch) && ++this.state.pos < this.length; ) ch = this.input.charCodeAt(this.state.pos);
            const value2 = this.input.slice(start + 2, this.state.pos);
            return this.finishToken(28, value2), true;
          }
          readToken_mult_modulo(code2) {
            let type = 42 === code2 ? 55 : 54, width = 1, next = this.input.charCodeAt(this.state.pos + 1);
            42 === code2 && 42 === next && (width++, next = this.input.charCodeAt(this.state.pos + 2), type = 57), 61 !== next || this.state.inType || (width++, type = 37 === code2 ? 33 : 30), this.finishOp(type, width);
          }
          readToken_pipe_amp(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (next !== code2) {
              if (124 === code2) {
                if (62 === next) return void this.finishOp(39, 2);
                if (this.hasPlugin("recordAndTuple") && 125 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, { at: this.state.curPosition() });
                  return this.state.pos += 2, void this.finishToken(9);
                }
                if (this.hasPlugin("recordAndTuple") && 93 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, { at: this.state.curPosition() });
                  return this.state.pos += 2, void this.finishToken(4);
                }
              }
              61 !== next ? this.finishOp(124 === code2 ? 43 : 45, 1) : this.finishOp(30, 2);
            } else 61 === this.input.charCodeAt(this.state.pos + 2) ? this.finishOp(30, 3) : this.finishOp(124 === code2 ? 41 : 42, 2);
          }
          readToken_caret() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next || this.state.inType) if (94 === next && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "^^" }])) {
              this.finishOp(37, 2);
              94 === this.input.codePointAt(this.state.pos) && this.unexpected();
            } else this.finishOp(44, 1);
            else this.finishOp(32, 2);
          }
          readToken_atSign() {
            64 === this.input.charCodeAt(this.state.pos + 1) && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "@@" }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
          }
          readToken_plus_min(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next !== code2 ? 61 === next ? this.finishOp(30, 2) : this.finishOp(53, 1) : this.finishOp(34, 2);
          }
          readToken_lt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (60 === next) return 61 === this.input.charCodeAt(pos + 2) ? void this.finishOp(30, 3) : void this.finishOp(51, 2);
            61 !== next ? this.finishOp(47, 1) : this.finishOp(49, 2);
          }
          readToken_gt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (62 === next) {
              const size = 62 === this.input.charCodeAt(pos + 2) ? 3 : 2;
              return 61 === this.input.charCodeAt(pos + size) ? void this.finishOp(30, size + 1) : void this.finishOp(52, size);
            }
            61 !== next ? this.finishOp(48, 1) : this.finishOp(49, 2);
          }
          readToken_eq_excl(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next) return 61 === code2 && 62 === next ? (this.state.pos += 2, void this.finishToken(19)) : void this.finishOp(61 === code2 ? 29 : 35, 1);
            this.finishOp(46, 61 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2);
          }
          readToken_question() {
            const next = this.input.charCodeAt(this.state.pos + 1), next2 = this.input.charCodeAt(this.state.pos + 2);
            63 === next ? 61 === next2 ? this.finishOp(30, 3) : this.finishOp(40, 2) : 46 !== next || next2 >= 48 && next2 <= 57 ? (++this.state.pos, this.finishToken(17)) : (this.state.pos += 2, this.finishToken(18));
          }
          getTokenFromCode(code2) {
            switch (code2) {
              case 46:
                return void this.readToken_dot();
              case 40:
                return ++this.state.pos, void this.finishToken(10);
              case 41:
                return ++this.state.pos, void this.finishToken(11);
              case 59:
                return ++this.state.pos, void this.finishToken(13);
              case 44:
                return ++this.state.pos, void this.finishToken(12);
              case 91:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, { at: this.state.curPosition() });
                  this.state.pos += 2, this.finishToken(2);
                } else ++this.state.pos, this.finishToken(0);
                return;
              case 93:
                return ++this.state.pos, void this.finishToken(3);
              case 123:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, { at: this.state.curPosition() });
                  this.state.pos += 2, this.finishToken(6);
                } else ++this.state.pos, this.finishToken(5);
                return;
              case 125:
                return ++this.state.pos, void this.finishToken(8);
              case 58:
                return void (this.hasPlugin("functionBind") && 58 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14)));
              case 63:
                return void this.readToken_question();
              case 96:
                return void this.readTemplateToken();
              case 48: {
                const next = this.input.charCodeAt(this.state.pos + 1);
                if (120 === next || 88 === next) return void this.readRadixNumber(16);
                if (111 === next || 79 === next) return void this.readRadixNumber(8);
                if (98 === next || 66 === next) return void this.readRadixNumber(2);
              }
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
                return void this.readNumber(false);
              case 34:
              case 39:
                return void this.readString(code2);
              case 47:
                return void this.readToken_slash();
              case 37:
              case 42:
                return void this.readToken_mult_modulo(code2);
              case 124:
              case 38:
                return void this.readToken_pipe_amp(code2);
              case 94:
                return void this.readToken_caret();
              case 43:
              case 45:
                return void this.readToken_plus_min(code2);
              case 60:
                return void this.readToken_lt();
              case 62:
                return void this.readToken_gt();
              case 61:
              case 33:
                return void this.readToken_eq_excl(code2);
              case 126:
                return void this.finishOp(36, 1);
              case 64:
                return void this.readToken_atSign();
              case 35:
                return void this.readToken_numberSign();
              case 92:
                return void this.readWord();
              default:
                if (isIdentifierStart(code2)) return void this.readWord(code2);
            }
            throw this.raise(Errors.InvalidOrUnexpectedToken, { at: this.state.curPosition(), unexpected: String.fromCodePoint(code2) });
          }
          finishOp(type, size) {
            const str = this.input.slice(this.state.pos, this.state.pos + size);
            this.state.pos += size, this.finishToken(type, str);
          }
          readRegexp() {
            const startLoc = this.state.startLoc, start = this.state.start + 1;
            let escaped, inClass, { pos } = this.state;
            for (; ; ++pos) {
              if (pos >= this.length) throw this.raise(Errors.UnterminatedRegExp, { at: createPositionWithColumnOffset(startLoc, 1) });
              const ch = this.input.charCodeAt(pos);
              if (isNewLine(ch)) throw this.raise(Errors.UnterminatedRegExp, { at: createPositionWithColumnOffset(startLoc, 1) });
              if (escaped) escaped = false;
              else {
                if (91 === ch) inClass = true;
                else if (93 === ch && inClass) inClass = false;
                else if (47 === ch && !inClass) break;
                escaped = 92 === ch;
              }
            }
            const content = this.input.slice(start, pos);
            ++pos;
            let mods = "";
            const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
            for (; pos < this.length; ) {
              const cp = this.codePointAtPos(pos), char = String.fromCharCode(cp);
              if (VALID_REGEX_FLAGS.has(cp)) 118 === cp ? mods.includes("u") && this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() }) : 117 === cp && mods.includes("v") && this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() }), mods.includes(char) && this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });
              else {
                if (!isIdentifierChar(cp) && 92 !== cp) break;
                this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });
              }
              ++pos, mods += char;
            }
            this.state.pos = pos, this.finishToken(137, { pattern: content, flags: mods });
          }
          readInt(radix, len, forceLen = false, allowNumSeparator = true) {
            const { n, pos } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
            return this.state.pos = pos, n;
          }
          readRadixNumber(radix) {
            const startLoc = this.state.curPosition();
            let isBigInt = false;
            this.state.pos += 2;
            const val = this.readInt(radix);
            null == val && this.raise(Errors.InvalidDigit, { at: createPositionWithColumnOffset(startLoc, 2), radix });
            const next = this.input.charCodeAt(this.state.pos);
            if (110 === next) ++this.state.pos, isBigInt = true;
            else if (109 === next) throw this.raise(Errors.InvalidDecimal, { at: startLoc });
            if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(Errors.NumberIdentifier, { at: this.state.curPosition() });
            if (isBigInt) {
              const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
              this.finishToken(135, str);
            } else this.finishToken(134, val);
          }
          readNumber(startsWithDot) {
            const start = this.state.pos, startLoc = this.state.curPosition();
            let isFloat = false, isBigInt = false, isDecimal = false, hasExponent = false, isOctal = false;
            startsWithDot || null !== this.readInt(10) || this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });
            const hasLeadingZero = this.state.pos - start >= 2 && 48 === this.input.charCodeAt(start);
            if (hasLeadingZero) {
              const integer = this.input.slice(start, this.state.pos);
              if (this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc }), !this.state.strict) {
                const underscorePos = integer.indexOf("_");
                underscorePos > 0 && this.raise(Errors.ZeroDigitNumericSeparator, { at: createPositionWithColumnOffset(startLoc, underscorePos) });
              }
              isOctal = hasLeadingZero && !/[89]/.test(integer);
            }
            let next = this.input.charCodeAt(this.state.pos);
            if (46 !== next || isOctal || (++this.state.pos, this.readInt(10), isFloat = true, next = this.input.charCodeAt(this.state.pos)), 69 !== next && 101 !== next || isOctal || (next = this.input.charCodeAt(++this.state.pos), 43 !== next && 45 !== next || ++this.state.pos, null === this.readInt(10) && this.raise(Errors.InvalidOrMissingExponent, { at: startLoc }), isFloat = true, hasExponent = true, next = this.input.charCodeAt(this.state.pos)), 110 === next && ((isFloat || hasLeadingZero) && this.raise(Errors.InvalidBigIntLiteral, { at: startLoc }), ++this.state.pos, isBigInt = true), 109 === next && (this.expectPlugin("decimal", this.state.curPosition()), (hasExponent || hasLeadingZero) && this.raise(Errors.InvalidDecimal, { at: startLoc }), ++this.state.pos, isDecimal = true), isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(Errors.NumberIdentifier, { at: this.state.curPosition() });
            const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
            if (isBigInt) return void this.finishToken(135, str);
            if (isDecimal) return void this.finishToken(136, str);
            const val = isOctal ? parseInt(str, 8) : parseFloat(str);
            this.finishToken(134, val);
          }
          readCodePoint(throwOnInvalid) {
            const { code: code2, pos } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
            return this.state.pos = pos, code2;
          }
          readString(quote) {
            const { str, pos, curLine, lineStart } = readStringContents(34 === quote ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, this.finishToken(133, str);
          }
          readTemplateContinuation() {
            this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
          }
          readTemplateToken() {
            const opening = this.input[this.state.pos], { str, firstInvalidLoc, pos, curLine, lineStart } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, firstInvalidLoc && (this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos)), 96 === this.input.codePointAt(pos) ? this.finishToken(24, firstInvalidLoc ? null : opening + str + "`") : (this.state.pos++, this.finishToken(25, firstInvalidLoc ? null : opening + str + "${"));
          }
          recordStrictModeErrors(toParseError, { at }) {
            const index = at.index;
            this.state.strict && !this.state.strictErrors.has(index) ? this.raise(toParseError, { at }) : this.state.strictErrors.set(index, [toParseError, at]);
          }
          readWord1(firstCode) {
            this.state.containsEsc = false;
            let word = "";
            const start = this.state.pos;
            let chunkStart = this.state.pos;
            for (void 0 !== firstCode && (this.state.pos += firstCode <= 65535 ? 1 : 2); this.state.pos < this.length; ) {
              const ch = this.codePointAtPos(this.state.pos);
              if (isIdentifierChar(ch)) this.state.pos += ch <= 65535 ? 1 : 2;
              else {
                if (92 !== ch) break;
                {
                  this.state.containsEsc = true, word += this.input.slice(chunkStart, this.state.pos);
                  const escStart = this.state.curPosition(), identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
                  if (117 !== this.input.charCodeAt(++this.state.pos)) {
                    this.raise(Errors.MissingUnicodeEscape, { at: this.state.curPosition() }), chunkStart = this.state.pos - 1;
                    continue;
                  }
                  ++this.state.pos;
                  const esc = this.readCodePoint(true);
                  null !== esc && (identifierCheck(esc) || this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart }), word += String.fromCodePoint(esc)), chunkStart = this.state.pos;
                }
              }
            }
            return word + this.input.slice(chunkStart, this.state.pos);
          }
          readWord(firstCode) {
            const word = this.readWord1(firstCode), type = keywords$1.get(word);
            void 0 !== type ? this.finishToken(type, tokenLabelName(type)) : this.finishToken(132, word);
          }
          checkKeywordEscapes() {
            const { type } = this.state;
            tokenIsKeyword(type) && this.state.containsEsc && this.raise(Errors.InvalidEscapedReservedWord, { at: this.state.startLoc, reservedWord: tokenLabelName(type) });
          }
          raise(toParseError, raiseProperties) {
            const { at } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded), error = toParseError({ loc: at instanceof Position ? at : at.loc.start, details });
            if (!this.options.errorRecovery) throw error;
            return this.isLookahead || this.state.errors.push(error), error;
          }
          raiseOverwrite(toParseError, raiseProperties) {
            const { at } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2), loc = at instanceof Position ? at : at.loc.start, pos = loc.index, errors = this.state.errors;
            for (let i = errors.length - 1; i >= 0; i--) {
              const error = errors[i];
              if (error.loc.index === pos) return errors[i] = toParseError({ loc, details });
              if (error.loc.index < pos) break;
            }
            return this.raise(toParseError, raiseProperties);
          }
          updateContext(prevType) {
          }
          unexpected(loc, type) {
            throw this.raise(Errors.UnexpectedToken, { expected: type ? tokenLabelName(type) : null, at: null != loc ? loc : this.state.startLoc });
          }
          expectPlugin(pluginName, loc) {
            if (this.hasPlugin(pluginName)) return true;
            throw this.raise(Errors.MissingPlugin, { at: null != loc ? loc : this.state.startLoc, missingPlugin: [pluginName] });
          }
          expectOnePlugin(pluginNames) {
            if (!pluginNames.some((name) => this.hasPlugin(name))) throw this.raise(Errors.MissingOneOfPlugins, { at: this.state.startLoc, missingPlugin: pluginNames });
          }
          errorBuilder(error) {
            return (pos, lineStart, curLine) => {
              this.raise(error, { at: buildPosition(pos, lineStart, curLine) });
            };
          }
        }
        class ClassScope {
          constructor() {
            this.privateNames = /* @__PURE__ */ new Set(), this.loneAccessors = /* @__PURE__ */ new Map(), this.undefinedPrivateNames = /* @__PURE__ */ new Map();
          }
        }
        class ClassScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [], this.undefinedPrivateNames = /* @__PURE__ */ new Map(), this.parser = parser;
          }
          current() {
            return this.stack[this.stack.length - 1];
          }
          enter() {
            this.stack.push(new ClassScope());
          }
          exit() {
            const oldClassScope = this.stack.pop(), current = this.current();
            for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) current ? current.undefinedPrivateNames.has(name) || current.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, { at: loc, identifierName: name });
          }
          declarePrivateName(name, elementType, loc) {
            const { privateNames, loneAccessors, undefinedPrivateNames } = this.current();
            let redefined = privateNames.has(name);
            if (3 & elementType) {
              const accessor = redefined && loneAccessors.get(name);
              if (accessor) {
                redefined = (3 & accessor) === (3 & elementType) || (4 & accessor) !== (4 & elementType), redefined || loneAccessors.delete(name);
              } else redefined || loneAccessors.set(name, elementType);
            }
            redefined && this.parser.raise(Errors.PrivateNameRedeclaration, { at: loc, identifierName: name }), privateNames.add(name), undefinedPrivateNames.delete(name);
          }
          usePrivateName(name, loc) {
            let classScope;
            for (classScope of this.stack) if (classScope.privateNames.has(name)) return;
            classScope ? classScope.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, { at: loc, identifierName: name });
          }
        }
        class ExpressionScope {
          constructor(type = 0) {
            this.type = type;
          }
          canBeArrowParameterDeclaration() {
            return 2 === this.type || 1 === this.type;
          }
          isCertainlyParameterDeclaration() {
            return 3 === this.type;
          }
        }
        class ArrowHeadParsingScope extends ExpressionScope {
          constructor(type) {
            super(type), this.declarationErrors = /* @__PURE__ */ new Map();
          }
          recordDeclarationError(ParsingErrorClass, { at }) {
            const index = at.index;
            this.declarationErrors.set(index, [ParsingErrorClass, at]);
          }
          clearDeclarationError(index) {
            this.declarationErrors.delete(index);
          }
          iterateErrors(iterator) {
            this.declarationErrors.forEach(iterator);
          }
        }
        class ExpressionScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [new ExpressionScope()], this.parser = parser;
          }
          enter(scope) {
            this.stack.push(scope);
          }
          exit() {
            this.stack.pop();
          }
          recordParameterInitializerError(toParseError, { at: node }) {
            const origin = { at: node.loc.start }, { stack } = this;
            let i = stack.length - 1, scope = stack[i];
            for (; !scope.isCertainlyParameterDeclaration(); ) {
              if (!scope.canBeArrowParameterDeclaration()) return;
              scope.recordDeclarationError(toParseError, origin), scope = stack[--i];
            }
            this.parser.raise(toParseError, origin);
          }
          recordArrowParameterBindingError(error, { at: node }) {
            const { stack } = this, scope = stack[stack.length - 1], origin = { at: node.loc.start };
            if (scope.isCertainlyParameterDeclaration()) this.parser.raise(error, origin);
            else {
              if (!scope.canBeArrowParameterDeclaration()) return;
              scope.recordDeclarationError(error, origin);
            }
          }
          recordAsyncArrowParametersError({ at }) {
            const { stack } = this;
            let i = stack.length - 1, scope = stack[i];
            for (; scope.canBeArrowParameterDeclaration(); ) 2 === scope.type && scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at }), scope = stack[--i];
          }
          validateAsPattern() {
            const { stack } = this, currentScope = stack[stack.length - 1];
            currentScope.canBeArrowParameterDeclaration() && currentScope.iterateErrors(([toParseError, loc]) => {
              this.parser.raise(toParseError, { at: loc });
              let i = stack.length - 2, scope = stack[i];
              for (; scope.canBeArrowParameterDeclaration(); ) scope.clearDeclarationError(loc.index), scope = stack[--i];
            });
          }
        }
        function newExpressionScope() {
          return new ExpressionScope();
        }
        class ProductionParameterHandler {
          constructor() {
            this.stacks = [];
          }
          enter(flags) {
            this.stacks.push(flags);
          }
          exit() {
            this.stacks.pop();
          }
          currentFlags() {
            return this.stacks[this.stacks.length - 1];
          }
          get hasAwait() {
            return (2 & this.currentFlags()) > 0;
          }
          get hasYield() {
            return (1 & this.currentFlags()) > 0;
          }
          get hasReturn() {
            return (4 & this.currentFlags()) > 0;
          }
          get hasIn() {
            return (8 & this.currentFlags()) > 0;
          }
        }
        function functionFlags(isAsync, isGenerator) {
          return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
        }
        class UtilParser extends Tokenizer {
          addExtra(node, key, value2, enumerable = true) {
            if (!node) return;
            const extra = node.extra = node.extra || {};
            enumerable ? extra[key] = value2 : Object.defineProperty(extra, key, { enumerable, value: value2 });
          }
          isContextual(token) {
            return this.state.type === token && !this.state.containsEsc;
          }
          isUnparsedContextual(nameStart, name) {
            const nameEnd = nameStart + name.length;
            if (this.input.slice(nameStart, nameEnd) === name) {
              const nextCh = this.input.charCodeAt(nameEnd);
              return !(isIdentifierChar(nextCh) || 55296 == (64512 & nextCh));
            }
            return false;
          }
          isLookaheadContextual(name) {
            const next = this.nextTokenStart();
            return this.isUnparsedContextual(next, name);
          }
          eatContextual(token) {
            return !!this.isContextual(token) && (this.next(), true);
          }
          expectContextual(token, toParseError) {
            if (!this.eatContextual(token)) {
              if (null != toParseError) throw this.raise(toParseError, { at: this.state.startLoc });
              this.unexpected(null, token);
            }
          }
          canInsertSemicolon() {
            return this.match(139) || this.match(8) || this.hasPrecedingLineBreak();
          }
          hasPrecedingLineBreak() {
            return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
          }
          hasFollowingLineBreak() {
            return skipWhiteSpaceToLineBreak.lastIndex = this.state.end, skipWhiteSpaceToLineBreak.test(this.input);
          }
          isLineTerminator() {
            return this.eat(13) || this.canInsertSemicolon();
          }
          semicolon(allowAsi = true) {
            (allowAsi ? this.isLineTerminator() : this.eat(13)) || this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });
          }
          expect(type, loc) {
            this.eat(type) || this.unexpected(loc, type);
          }
          tryParse(fn, oldState = this.state.clone()) {
            const abortSignal = { node: null };
            try {
              const node = fn((node2 = null) => {
                throw abortSignal.node = node2, abortSignal;
              });
              if (this.state.errors.length > oldState.errors.length) {
                const failState = this.state;
                return this.state = oldState, this.state.tokensLength = failState.tokensLength, { node, error: failState.errors[oldState.errors.length], thrown: false, aborted: false, failState };
              }
              return { node, error: null, thrown: false, aborted: false, failState: null };
            } catch (error) {
              const failState = this.state;
              if (this.state = oldState, error instanceof SyntaxError) return { node: null, error, thrown: true, aborted: false, failState };
              if (error === abortSignal) return { node: abortSignal.node, error: null, thrown: false, aborted: true, failState };
              throw error;
            }
          }
          checkExpressionErrors(refExpressionErrors, andThrow) {
            if (!refExpressionErrors) return false;
            const { shorthandAssignLoc, doubleProtoLoc, privateKeyLoc, optionalParametersLoc } = refExpressionErrors;
            if (!andThrow) return !!(shorthandAssignLoc || doubleProtoLoc || optionalParametersLoc || privateKeyLoc);
            null != shorthandAssignLoc && this.raise(Errors.InvalidCoverInitializedName, { at: shorthandAssignLoc }), null != doubleProtoLoc && this.raise(Errors.DuplicateProto, { at: doubleProtoLoc }), null != privateKeyLoc && this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc }), null != optionalParametersLoc && this.unexpected(optionalParametersLoc);
          }
          isLiteralPropertyName() {
            return tokenIsLiteralPropertyName(this.state.type);
          }
          isPrivateName(node) {
            return "PrivateName" === node.type;
          }
          getPrivateNameSV(node) {
            return node.id.name;
          }
          hasPropertyAsPrivateName(node) {
            return ("MemberExpression" === node.type || "OptionalMemberExpression" === node.type) && this.isPrivateName(node.property);
          }
          isObjectProperty(node) {
            return "ObjectProperty" === node.type;
          }
          isObjectMethod(node) {
            return "ObjectMethod" === node.type;
          }
          initializeScopes(inModule = "module" === this.options.sourceType) {
            const oldLabels = this.state.labels;
            this.state.labels = [];
            const oldExportedIdentifiers = this.exportedIdentifiers;
            this.exportedIdentifiers = /* @__PURE__ */ new Set();
            const oldInModule = this.inModule;
            this.inModule = inModule;
            const oldScope = this.scope, ScopeHandler2 = this.getScopeHandler();
            this.scope = new ScopeHandler2(this, inModule);
            const oldProdParam = this.prodParam;
            this.prodParam = new ProductionParameterHandler();
            const oldClassScope = this.classScope;
            this.classScope = new ClassScopeHandler(this);
            const oldExpressionScope = this.expressionScope;
            return this.expressionScope = new ExpressionScopeHandler(this), () => {
              this.state.labels = oldLabels, this.exportedIdentifiers = oldExportedIdentifiers, this.inModule = oldInModule, this.scope = oldScope, this.prodParam = oldProdParam, this.classScope = oldClassScope, this.expressionScope = oldExpressionScope;
            };
          }
          enterInitialScopes() {
            let paramFlags = 0;
            this.inModule && (paramFlags |= 2), this.scope.enter(1), this.prodParam.enter(paramFlags);
          }
          checkDestructuringPrivate(refExpressionErrors) {
            const { privateKeyLoc } = refExpressionErrors;
            null !== privateKeyLoc && this.expectPlugin("destructuringPrivate", privateKeyLoc);
          }
        }
        class ExpressionErrors {
          constructor() {
            this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
          }
        }
        class Node {
          constructor(parser, pos, loc) {
            this.type = "", this.start = pos, this.end = 0, this.loc = new SourceLocation(loc), null != parser && parser.options.ranges && (this.range = [pos, 0]), null != parser && parser.filename && (this.loc.filename = parser.filename);
          }
        }
        const NodePrototype = Node.prototype;
        function cloneIdentifier(node) {
          const { type, start, end, loc, range, extra, name } = node, cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, cloned.extra = extra, cloned.name = name, "Placeholder" === type && (cloned.expectedNode = node.expectedNode), cloned;
        }
        function cloneStringLiteral(node) {
          const { type, start, end, loc, range, extra } = node;
          if ("Placeholder" === type) return function(node2) {
            return cloneIdentifier(node2);
          }(node);
          const cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, void 0 !== node.raw ? cloned.raw = node.raw : cloned.extra = extra, cloned.value = node.value, cloned;
        }
        NodePrototype.__clone = function() {
          const newNode = new Node(void 0, this.start, this.loc.start), keys = Object.keys(this);
          for (let i = 0, length = keys.length; i < length; i++) {
            const key = keys[i];
            "leadingComments" !== key && "trailingComments" !== key && "innerComments" !== key && (newNode[key] = this[key]);
          }
          return newNode;
        };
        class NodeUtils extends UtilParser {
          startNode() {
            return new Node(this, this.state.start, this.state.startLoc);
          }
          startNodeAt(loc) {
            return new Node(this, loc.index, loc);
          }
          startNodeAtNode(type) {
            return this.startNodeAt(type.loc.start);
          }
          finishNode(node, type) {
            return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
          }
          finishNodeAt(node, type, endLoc) {
            return node.type = type, node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index), this.options.attachComment && this.processComment(node), node;
          }
          resetStartLocation(node, startLoc) {
            node.start = startLoc.index, node.loc.start = startLoc, this.options.ranges && (node.range[0] = startLoc.index);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index);
          }
          resetStartLocationFromNode(node, locationNode) {
            this.resetStartLocation(node, locationNode.loc.start);
          }
        }
        const reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]), FlowErrors = ParseErrorEnum`flow`({ AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.", AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.", AssignReservedType: ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`, DeclareClassElement: "The `declare` modifier can only appear on class fields.", DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.", DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.", EnumBooleanMemberNotInitialized: ({ memberName, enumName }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`, EnumDuplicateMemberName: ({ memberName, enumName }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`, EnumInconsistentMemberValues: ({ enumName }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`, EnumInvalidExplicitType: ({ invalidEnumType, enumName }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidExplicitTypeUnknownSupplied: ({ enumName }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerPrimaryType: ({ enumName, memberName, explicitType }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`, EnumInvalidMemberInitializerSymbolType: ({ enumName, memberName }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerUnknownType: ({ enumName, memberName }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`, EnumInvalidMemberName: ({ enumName, memberName, suggestion }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`, EnumNumberMemberNotInitialized: ({ enumName, memberName }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`, EnumStringMemberInconsistentlyInitialized: ({ enumName }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`, GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.", ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.", InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.", InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.", InexactVariance: "Explicit inexact syntax cannot have variance.", InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.", MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.", NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.", NestedFlowComment: "Cannot have a flow comment inside another flow comment.", PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }), SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.", SpreadVariance: "Spread properties cannot have variance.", ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.", ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.", ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.", ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.", ThisParamNoDefault: "The `this` parameter may not have a default value.", TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.", UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.", UnexpectedReservedType: ({ reservedType }) => `Unexpected reserved type ${reservedType}.`, UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.", UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.", UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.", UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".', UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.", UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.", UnsupportedDeclareExportKind: ({ unsupportedExportKind, suggestion }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`, UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.", UnterminatedFlowComment: "Unterminated flow-comment." });
        function hasTypeImportKind(node) {
          return "type" === node.importKind || "typeof" === node.importKind;
        }
        const exportSuggestions = { const: "declare export var", let: "declare export var", type: "export type", interface: "export interface" };
        const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
        const entities = { __proto__: null, quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", lang: "\u2329", rang: "\u232A", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666" }, JsxErrors = ParseErrorEnum`jsx`({ AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.", MissingClosingTagElement: ({ openingTagName }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`, MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.", UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?", UnexpectedToken: ({ unexpected, HTMLEntity }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`, UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.", UnterminatedJsxContent: "Unterminated JSX contents.", UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?" });
        function isFragment(object) {
          return !!object && ("JSXOpeningFragment" === object.type || "JSXClosingFragment" === object.type);
        }
        function getQualifiedJSXName(object) {
          if ("JSXIdentifier" === object.type) return object.name;
          if ("JSXNamespacedName" === object.type) return object.namespace.name + ":" + object.name.name;
          if ("JSXMemberExpression" === object.type) return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
          throw new Error("Node had unexpected type: " + object.type);
        }
        class TypeScriptScope extends Scope {
          constructor(...args) {
            super(...args), this.types = /* @__PURE__ */ new Set(), this.enums = /* @__PURE__ */ new Set(), this.constEnums = /* @__PURE__ */ new Set(), this.classes = /* @__PURE__ */ new Set(), this.exportOnlyBindings = /* @__PURE__ */ new Set();
          }
        }
        class TypeScriptScopeHandler extends ScopeHandler {
          constructor(...args) {
            super(...args), this.importsStack = [];
          }
          createScope(flags) {
            return this.importsStack.push(/* @__PURE__ */ new Set()), new TypeScriptScope(flags);
          }
          enter(flags) {
            256 == flags && this.importsStack.push(/* @__PURE__ */ new Set()), super.enter(flags);
          }
          exit() {
            const flags = super.exit();
            return 256 == flags && this.importsStack.pop(), flags;
          }
          hasImport(name, allowShadow) {
            const len = this.importsStack.length;
            if (this.importsStack[len - 1].has(name)) return true;
            if (!allowShadow && len > 1) {
              for (let i = 0; i < len - 1; i++) if (this.importsStack[i].has(name)) return true;
            }
            return false;
          }
          declareName(name, bindingType, loc) {
            if (4096 & bindingType) return this.hasImport(name, true) && this.parser.raise(Errors.VarRedeclaration, { at: loc, identifierName: name }), void this.importsStack[this.importsStack.length - 1].add(name);
            const scope = this.currentScope();
            if (1024 & bindingType) return this.maybeExportDefined(scope, name), void scope.exportOnlyBindings.add(name);
            super.declareName(name, bindingType, loc), 2 & bindingType && (1 & bindingType || (this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name)), scope.types.add(name)), 256 & bindingType && scope.enums.add(name), 512 & bindingType && scope.constEnums.add(name), 128 & bindingType && scope.classes.add(name);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            if (scope.enums.has(name)) {
              if (256 & bindingType) {
                return !!(512 & bindingType) !== scope.constEnums.has(name);
              }
              return true;
            }
            return 128 & bindingType && scope.classes.has(name) ? !!scope.lexical.has(name) && !!(1 & bindingType) : !!(2 & bindingType && scope.types.has(name)) || super.isRedeclaredInScope(scope, name, bindingType);
          }
          checkLocalExport(id) {
            const { name } = id;
            if (this.hasImport(name)) return;
            for (let i = this.scopeStack.length - 1; i >= 0; i--) {
              const scope = this.scopeStack[i];
              if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;
            }
            super.checkLocalExport(id);
          }
        }
        const unwrapParenthesizedExpression = (node) => "ParenthesizedExpression" === node.type ? unwrapParenthesizedExpression(node.expression) : node;
        class LValParser extends NodeUtils {
          toAssignable(node, isLHS = false) {
            var _node$extra, _node$extra3;
            let parenthesized;
            switch (("ParenthesizedExpression" === node.type || null != (_node$extra = node.extra) && _node$extra.parenthesized) && (parenthesized = unwrapParenthesizedExpression(node), isLHS ? "Identifier" === parenthesized.type ? this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, { at: node }) : "MemberExpression" === parenthesized.type || this.isOptionalMemberExpression(parenthesized) || this.raise(Errors.InvalidParenthesizedAssignment, { at: node }) : this.raise(Errors.InvalidParenthesizedAssignment, { at: node })), node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;
              case "ObjectExpression":
                node.type = "ObjectPattern";
                for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
                  var _node$extra2;
                  const prop = node.properties[i], isLast = i === last;
                  this.toAssignableObjectExpressionProp(prop, isLast, isLHS), isLast && "RestElement" === prop.type && null != (_node$extra2 = node.extra) && _node$extra2.trailingCommaLoc && this.raise(Errors.RestTrailingComma, { at: node.extra.trailingCommaLoc });
                }
                break;
              case "ObjectProperty": {
                const { key, value: value2 } = node;
                this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value2, isLHS);
                break;
              }
              case "SpreadElement":
                throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
              case "ArrayExpression":
                node.type = "ArrayPattern", this.toAssignableList(node.elements, null == (_node$extra3 = node.extra) ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
                break;
              case "AssignmentExpression":
                "=" !== node.operator && this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end }), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isLHS);
                break;
              case "ParenthesizedExpression":
                this.toAssignable(parenthesized, isLHS);
            }
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            if ("ObjectMethod" === prop.type) this.raise("get" === prop.kind || "set" === prop.kind ? Errors.PatternHasAccessor : Errors.PatternHasMethod, { at: prop.key });
            else if ("SpreadElement" === prop.type) {
              prop.type = "RestElement";
              const arg = prop.argument;
              this.checkToRestConversion(arg, false), this.toAssignable(arg, isLHS), isLast || this.raise(Errors.RestTrailingComma, { at: prop });
            } else this.toAssignable(prop, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            const end = exprList.length - 1;
            for (let i = 0; i <= end; i++) {
              const elt = exprList[i];
              if (elt) {
                if ("SpreadElement" === elt.type) {
                  elt.type = "RestElement";
                  const arg = elt.argument;
                  this.checkToRestConversion(arg, true), this.toAssignable(arg, isLHS);
                } else this.toAssignable(elt, isLHS);
                "RestElement" === elt.type && (i < end ? this.raise(Errors.RestTrailingComma, { at: elt }) : trailingCommaLoc && this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc }));
              }
            }
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                return true;
              case "ObjectExpression": {
                const last = node.properties.length - 1;
                return node.properties.every((prop, i) => "ObjectMethod" !== prop.type && (i === last || "SpreadElement" !== prop.type) && this.isAssignable(prop));
              }
              case "ObjectProperty":
                return this.isAssignable(node.value);
              case "SpreadElement":
                return this.isAssignable(node.argument);
              case "ArrayExpression":
                return node.elements.every((element) => null === element || this.isAssignable(element));
              case "AssignmentExpression":
                return "=" === node.operator;
              case "ParenthesizedExpression":
                return this.isAssignable(node.expression);
              case "MemberExpression":
              case "OptionalMemberExpression":
                return !isBinding;
              default:
                return false;
            }
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            return exprList;
          }
          toReferencedListDeep(exprList, isParenthesizedExpr) {
            this.toReferencedList(exprList, isParenthesizedExpr);
            for (const expr of exprList) "ArrayExpression" === (null == expr ? void 0 : expr.type) && this.toReferencedListDeep(expr.elements);
          }
          parseSpread(refExpressionErrors) {
            const node = this.startNode();
            return this.next(), node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0), this.finishNode(node, "SpreadElement");
          }
          parseRestBinding() {
            const node = this.startNode();
            return this.next(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
          }
          parseBindingAtom() {
            switch (this.state.type) {
              case 0: {
                const node = this.startNode();
                return this.next(), node.elements = this.parseBindingList(3, 93, 1), this.finishNode(node, "ArrayPattern");
              }
              case 5:
                return this.parseObjectLike(8, true);
            }
            return this.parseIdentifier();
          }
          parseBindingList(close, closeCharCode, flags) {
            const allowEmpty = 1 & flags, elts = [];
            let first = true;
            for (; !this.eat(close); ) if (first ? first = false : this.expect(12), allowEmpty && this.match(12)) elts.push(null);
            else {
              if (this.eat(close)) break;
              if (this.match(21)) {
                if (elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags)), !this.checkCommaAfterRest(closeCharCode)) {
                  this.expect(close);
                  break;
                }
              } else {
                const decorators = [];
                for (this.match(26) && this.hasPlugin("decorators") && this.raise(Errors.UnsupportedParameterDecorator, { at: this.state.startLoc }); this.match(26); ) decorators.push(this.parseDecorator());
                elts.push(this.parseAssignableListItem(flags, decorators));
              }
            }
            return elts;
          }
          parseBindingRestProperty(prop) {
            return this.next(), prop.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(prop, "RestElement");
          }
          parseBindingProperty() {
            const prop = this.startNode(), { type, startLoc } = this.state;
            return 21 === type ? this.parseBindingRestProperty(prop) : (138 === type ? (this.expectPlugin("destructuringPrivate", startLoc), this.classScope.usePrivateName(this.state.value, startLoc), prop.key = this.parsePrivateName()) : this.parsePropertyName(prop), prop.method = false, this.parseObjPropValue(prop, startLoc, false, false, true, false));
          }
          parseAssignableListItem(flags, decorators) {
            const left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left, flags);
            const elt = this.parseMaybeDefault(left.loc.start, left);
            return decorators.length && (left.decorators = decorators), elt;
          }
          parseAssignableListItemTypes(param, flags) {
            return param;
          }
          parseMaybeDefault(startLoc, left) {
            var _left;
            if (null != startLoc || (startLoc = this.state.startLoc), left = null != (_left = left) ? _left : this.parseBindingAtom(), !this.eat(29)) return left;
            const node = this.startNodeAt(startLoc);
            return node.left = left, node.right = this.parseMaybeAssignAllowIn(), this.finishNode(node, "AssignmentPattern");
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return object = { AssignmentPattern: "left", RestElement: "argument", ObjectProperty: "value", ParenthesizedExpression: "expression", ArrayPattern: "elements", ObjectPattern: "properties" }, key = type, Object.hasOwnProperty.call(object, key) && object[key];
            var object, key;
          }
          isOptionalMemberExpression(expression) {
            return "OptionalMemberExpression" === expression.type;
          }
          checkLVal(expression, { in: ancestor, binding = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false }) {
            var _expression$extra;
            const type = expression.type;
            if (this.isObjectMethod(expression)) return;
            const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
            if (isOptionalMemberExpression || "MemberExpression" === type) return isOptionalMemberExpression && (this.expectPlugin("optionalChainingAssign", expression.loc.start), "AssignmentExpression" !== ancestor.type && this.raise(Errors.InvalidLhsOptionalChaining, { at: expression, ancestor })), void (64 !== binding && this.raise(Errors.InvalidPropertyBindingPattern, { at: expression }));
            if ("Identifier" === type) {
              this.checkIdentifier(expression, binding, strictModeChanged);
              const { name } = expression;
              return void (checkClashes && (checkClashes.has(name) ? this.raise(Errors.ParamDupe, { at: expression }) : checkClashes.add(name)));
            }
            const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) && "AssignmentExpression" === ancestor.type, binding);
            if (true === validity) return;
            if (false === validity) {
              const ParseErrorClass = 64 === binding ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
              return void this.raise(ParseErrorClass, { at: expression, ancestor });
            }
            const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, "ParenthesizedExpression" === type], nextAncestor = "ArrayPattern" === type || "ObjectPattern" === type ? { type } : ancestor;
            for (const child of [].concat(expression[key])) child && this.checkLVal(child, { in: nextAncestor, binding, checkClashes, strictModeChanged, hasParenthesizedAncestor: isParenthesizedExpression });
          }
          checkIdentifier(at, bindingType, strictModeChanged = false) {
            this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name)) && (64 === bindingType ? this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name }) : this.raise(Errors.StrictEvalArgumentsBinding, { at, bindingName: at.name })), 8192 & bindingType && "let" === at.name && this.raise(Errors.LetInLexicalBinding, { at }), 64 & bindingType || this.declareNameFromIdentifier(at, bindingType);
          }
          declareNameFromIdentifier(identifier, binding) {
            this.scope.declareName(identifier.name, binding, identifier.loc.start);
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.checkToRestConversion(node.expression, allowPattern);
                break;
              case "Identifier":
              case "MemberExpression":
                break;
              case "ArrayExpression":
              case "ObjectExpression":
                if (allowPattern) break;
              default:
                this.raise(Errors.InvalidRestAssignmentPattern, { at: node });
            }
          }
          checkCommaAfterRest(close) {
            return !!this.match(12) && (this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, { at: this.state.startLoc }), true);
          }
        }
        function assert(x) {
          if (!x) throw new Error("Assert fail");
        }
        const TSErrors = ParseErrorEnum`typescript`({ AbstractMethodHasImplementation: ({ methodName }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`, AbstractPropertyHasInitializer: ({ propertyName }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`, AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.", AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.", AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.", ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.", ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.", ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.", ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.", DeclareAccessor: ({ kind }) => `'declare' is not allowed in ${kind}ters.`, DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.", DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.", DuplicateAccessibilityModifier: ({ modifier }) => "Accessibility modifier already seen.", DuplicateModifier: ({ modifier }) => `Duplicate modifier: '${modifier}'.`, EmptyHeritageClauseType: ({ token }) => `'${token}' list cannot be empty.`, EmptyTypeArguments: "Type argument list cannot be empty.", EmptyTypeParameters: "Type parameter list cannot be empty.", ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.", ImportAliasHasImportType: "An import alias can not use 'import type'.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier", IncompatibleModifiers: ({ modifiers }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`, IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.", IndexSignatureHasAccessibility: ({ modifier }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`, IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.", IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.", IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.", InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.", InvalidModifierOnTypeMember: ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`, InvalidModifierOnTypeParameter: ({ modifier }) => `'${modifier}' modifier cannot appear on a type parameter.`, InvalidModifierOnTypeParameterPositions: ({ modifier }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`, InvalidModifiersOrder: ({ orderedModifiers }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`, InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.", InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.", MissingInterfaceName: "'interface' declarations must be followed by an identifier.", NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.", NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.", OptionalTypeBeforeRequired: "A required element cannot follow an optional element.", OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.", PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.", PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.", PrivateElementHasAccessibility: ({ modifier }) => `Private elements cannot have an accessibility modifier ('${modifier}').`, ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.", ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.", ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.", SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.", SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.", SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.", SingleTypeParameterWithoutTrailingComma: ({ typeParameterName }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`, StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.", TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).", TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.", TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.", TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.", UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.", UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.", UnexpectedTypeAnnotation: "Did not expect a type annotation here.", UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.", UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.", UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.", UnsupportedSignatureParameterKind: ({ type }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.` });
        function tsIsAccessModifier(modifier) {
          return "private" === modifier || "public" === modifier || "protected" === modifier;
        }
        function tsIsVarianceAnnotations(modifier) {
          return "in" === modifier || "out" === modifier;
        }
        function isPossiblyLiteralEnum(expression) {
          if ("MemberExpression" !== expression.type) return false;
          const { computed, property } = expression;
          return (!computed || "StringLiteral" === property.type || !("TemplateLiteral" !== property.type || property.expressions.length > 0)) && isUncomputedMemberExpressionChain(expression.object);
        }
        function isValidAmbientConstInitializer(expression, estree) {
          var _expression$extra;
          const { type } = expression;
          if (null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) return false;
          if (estree) {
            if ("Literal" === type) {
              const { value: value2 } = expression;
              if ("string" == typeof value2 || "boolean" == typeof value2) return true;
            }
          } else if ("StringLiteral" === type || "BooleanLiteral" === type) return true;
          return !(!isNumber(expression, estree) && !function(expression2, estree2) {
            if ("UnaryExpression" === expression2.type) {
              const { operator, argument } = expression2;
              if ("-" === operator && isNumber(argument, estree2)) return true;
            }
            return false;
          }(expression, estree)) || ("TemplateLiteral" === type && 0 === expression.expressions.length || !!isPossiblyLiteralEnum(expression));
        }
        function isNumber(expression, estree) {
          return estree ? "Literal" === expression.type && ("number" == typeof expression.value || "bigint" in expression) : "NumericLiteral" === expression.type || "BigIntLiteral" === expression.type;
        }
        function isUncomputedMemberExpressionChain(expression) {
          return "Identifier" === expression.type || "MemberExpression" === expression.type && !expression.computed && isUncomputedMemberExpressionChain(expression.object);
        }
        const PlaceholderErrors = ParseErrorEnum`placeholders`({ ClassNameIsRequired: "A class name is required.", UnexpectedSpace: "Unexpected space in placeholder." });
        function hasPlugin(plugins, expectedConfig) {
          const [expectedName, expectedOptions] = "string" == typeof expectedConfig ? [expectedConfig, {}] : expectedConfig, expectedKeys = Object.keys(expectedOptions), expectedOptionsIsEmpty = 0 === expectedKeys.length;
          return plugins.some((p) => {
            if ("string" == typeof p) return expectedOptionsIsEmpty && p === expectedName;
            {
              const [pluginName, pluginOptions] = p;
              if (pluginName !== expectedName) return false;
              for (const key of expectedKeys) if (pluginOptions[key] !== expectedOptions[key]) return false;
              return true;
            }
          });
        }
        function getPluginOption(plugins, name, option) {
          const plugin = plugins.find((plugin2) => Array.isArray(plugin2) ? plugin2[0] === name : plugin2 === name);
          return plugin && Array.isArray(plugin) && plugin.length > 1 ? plugin[1][option] : null;
        }
        const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"], TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"], RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
        const mixinPlugins = { estree: (superClass) => class extends superClass {
          parse() {
            const file = toESTreeLocation(super.parse());
            return this.options.tokens && (file.tokens = file.tokens.map(toESTreeLocation)), file;
          }
          parseRegExpLiteral({ pattern, flags }) {
            let regex = null;
            try {
              regex = new RegExp(pattern, flags);
            } catch (e) {
            }
            const node = this.estreeParseLiteral(regex);
            return node.regex = { pattern, flags }, node;
          }
          parseBigIntLiteral(value2) {
            let bigInt;
            try {
              bigInt = BigInt(value2);
            } catch (_unused) {
              bigInt = null;
            }
            const node = this.estreeParseLiteral(bigInt);
            return node.bigint = String(node.value || value2), node;
          }
          parseDecimalLiteral(value2) {
            const node = this.estreeParseLiteral(null);
            return node.decimal = String(node.value || value2), node;
          }
          estreeParseLiteral(value2) {
            return this.parseLiteral(value2, "Literal");
          }
          parseStringLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          parseNumericLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          parseNullLiteral() {
            return this.estreeParseLiteral(null);
          }
          parseBooleanLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          directiveToStmt(directive) {
            const expression = directive.value;
            delete directive.value, expression.type = "Literal", expression.raw = expression.extra.raw, expression.value = expression.extra.expressionValue;
            const stmt = directive;
            return stmt.type = "ExpressionStatement", stmt.expression = expression, stmt.directive = expression.extra.rawValue, delete expression.extra, stmt;
          }
          initFunction(node, isAsync) {
            super.initFunction(node, isAsync), node.expression = false;
          }
          checkDeclaration(node) {
            null != node && this.isObjectProperty(node) ? this.checkDeclaration(node.value) : super.checkDeclaration(node);
          }
          getObjectOrClassMethodParams(method) {
            return method.value.params;
          }
          isValidDirective(stmt) {
            var _stmt$expression$extr;
            return "ExpressionStatement" === stmt.type && "Literal" === stmt.expression.type && "string" == typeof stmt.expression.value && !(null != (_stmt$expression$extr = stmt.expression.extra) && _stmt$expression$extr.parenthesized);
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
            const directiveStatements = node.directives.map((d) => this.directiveToStmt(d));
            node.body = directiveStatements.concat(node.body), delete node.directives;
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true), method.typeParameters && (method.value.typeParameters = method.typeParameters, delete method.typeParameters), classBody.body.push(method);
          }
          parsePrivateName() {
            const node = super.parsePrivateName();
            return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(node) : node;
          }
          convertPrivateNameToPrivateIdentifier(node) {
            const name = super.getPrivateNameSV(node);
            return delete node.id, node.name = name, node.type = "PrivateIdentifier", node;
          }
          isPrivateName(node) {
            return this.getPluginOption("estree", "classFeatures") ? "PrivateIdentifier" === node.type : super.isPrivateName(node);
          }
          getPrivateNameSV(node) {
            return this.getPluginOption("estree", "classFeatures") ? node.name : super.getPrivateNameSV(node);
          }
          parseLiteral(value2, type) {
            const node = super.parseLiteral(value2, type);
            return node.raw = node.extra.raw, delete node.extra, node;
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            super.parseFunctionBody(node, allowExpression, isMethod), node.expression = "BlockStatement" !== node.body.type;
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            let funcNode = this.startNode();
            return funcNode.kind = node.kind, funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope), funcNode.type = "FunctionExpression", delete funcNode.kind, node.value = funcNode, "ClassPrivateMethod" === type && (node.computed = false), this.finishNode(node, "MethodDefinition");
          }
          parseClassProperty(...args) {
            const propertyNode = super.parseClassProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode) : propertyNode;
          }
          parseClassPrivateProperty(...args) {
            const propertyNode = super.parseClassPrivateProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode.computed = false, propertyNode) : propertyNode;
          }
          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
            return node && (node.type = "Property", "method" === node.kind && (node.kind = "init"), node.shorthand = false), node;
          }
          parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
            const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
            return node && (node.kind = "init", node.type = "Property"), node;
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return "Property" === type ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
          }
          isAssignable(node, isBinding) {
            return null != node && this.isObjectProperty(node) ? this.isAssignable(node.value, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            if (null != node && this.isObjectProperty(node)) {
              const { key, value: value2 } = node;
              this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value2, isLHS);
            } else super.toAssignable(node, isLHS);
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            "get" === prop.kind || "set" === prop.kind ? this.raise(Errors.PatternHasAccessor, { at: prop.key }) : prop.method ? this.raise(Errors.PatternHasMethod, { at: prop.key }) : super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
          }
          finishCallExpression(unfinished, optional) {
            const node = super.finishCallExpression(unfinished, optional);
            if ("Import" === node.callee.type) {
              var _node$arguments$, _node$arguments$2;
              if (node.type = "ImportExpression", node.source = node.arguments[0], this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) node.options = null != (_node$arguments$ = node.arguments[1]) ? _node$arguments$ : null, node.attributes = null != (_node$arguments$2 = node.arguments[1]) ? _node$arguments$2 : null;
              delete node.arguments, delete node.callee;
            }
            return node;
          }
          toReferencedArguments(node) {
            "ImportExpression" !== node.type && super.toReferencedArguments(node);
          }
          parseExport(unfinished, decorators) {
            const exportStartLoc = this.state.lastTokStartLoc, node = super.parseExport(unfinished, decorators);
            switch (node.type) {
              case "ExportAllDeclaration":
                node.exported = null;
                break;
              case "ExportNamedDeclaration":
                1 === node.specifiers.length && "ExportNamespaceSpecifier" === node.specifiers[0].type && (node.type = "ExportAllDeclaration", node.exported = node.specifiers[0].exported, delete node.specifiers);
              case "ExportDefaultDeclaration": {
                var _declaration$decorato;
                const { declaration } = node;
                "ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && (null == (_declaration$decorato = declaration.decorators) ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start && this.resetStartLocation(node, exportStartLoc);
              }
            }
            return node;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            const node = super.parseSubscript(base, startLoc, noCalls, state);
            if (state.optionalChainMember) {
              if ("OptionalMemberExpression" !== node.type && "OptionalCallExpression" !== node.type || (node.type = node.type.substring(8)), state.stop) {
                const chain = this.startNodeAtNode(node);
                return chain.expression = node, this.finishNode(chain, "ChainExpression");
              }
            } else "MemberExpression" !== node.type && "CallExpression" !== node.type || (node.optional = false);
            return node;
          }
          isOptionalMemberExpression(node) {
            return "ChainExpression" === node.type ? "MemberExpression" === node.expression.type : super.isOptionalMemberExpression(node);
          }
          hasPropertyAsPrivateName(node) {
            return "ChainExpression" === node.type && (node = node.expression), super.hasPropertyAsPrivateName(node);
          }
          isObjectProperty(node) {
            return "Property" === node.type && "init" === node.kind && !node.method;
          }
          isObjectMethod(node) {
            return node.method || "get" === node.kind || "set" === node.kind;
          }
          finishNodeAt(node, type, endLoc) {
            return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
          }
          resetStartLocation(node, startLoc) {
            super.resetStartLocation(node, startLoc), toESTreeLocation(node);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            super.resetEndLocation(node, endLoc), toESTreeLocation(node);
          }
        }, jsx: (superClass) => class extends superClass {
          jsxReadToken() {
            let out = "", chunkStart = this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length) throw this.raise(JsxErrors.UnterminatedJsxContent, { at: this.state.startLoc });
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 60:
                case 123:
                  return this.state.pos === this.state.start ? void (60 === ch && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(142)) : super.getTokenFromCode(ch)) : (out += this.input.slice(chunkStart, this.state.pos), void this.finishToken(141, out));
                case 38:
                  out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos;
                  break;
                default:
                  isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(true), chunkStart = this.state.pos) : ++this.state.pos;
              }
            }
          }
          jsxReadNewLine(normalizeCRLF) {
            const ch = this.input.charCodeAt(this.state.pos);
            let out;
            return ++this.state.pos, 13 === ch && 10 === this.input.charCodeAt(this.state.pos) ? (++this.state.pos, out = normalizeCRLF ? "\n" : "\r\n") : out = String.fromCharCode(ch), ++this.state.curLine, this.state.lineStart = this.state.pos, out;
          }
          jsxReadString(quote) {
            let out = "", chunkStart = ++this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length) throw this.raise(Errors.UnterminatedString, { at: this.state.startLoc });
              const ch = this.input.charCodeAt(this.state.pos);
              if (ch === quote) break;
              38 === ch ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos) : isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(false), chunkStart = this.state.pos) : ++this.state.pos;
            }
            out += this.input.slice(chunkStart, this.state.pos++), this.finishToken(133, out);
          }
          jsxReadEntity() {
            const startPos = ++this.state.pos;
            if (35 === this.codePointAtPos(this.state.pos)) {
              ++this.state.pos;
              let radix = 10;
              120 === this.codePointAtPos(this.state.pos) && (radix = 16, ++this.state.pos);
              const codePoint = this.readInt(radix, void 0, false, "bail");
              if (null !== codePoint && 59 === this.codePointAtPos(this.state.pos)) return ++this.state.pos, String.fromCodePoint(codePoint);
            } else {
              let count = 0, semi = false;
              for (; count++ < 10 && this.state.pos < this.length && !(semi = 59 == this.codePointAtPos(this.state.pos)); ) ++this.state.pos;
              if (semi) {
                const desc = this.input.slice(startPos, this.state.pos), entity = entities[desc];
                if (++this.state.pos, entity) return entity;
              }
            }
            return this.state.pos = startPos, "&";
          }
          jsxReadWord() {
            let ch;
            const start = this.state.pos;
            do {
              ch = this.input.charCodeAt(++this.state.pos);
            } while (isIdentifierChar(ch) || 45 === ch);
            this.finishToken(140, this.input.slice(start, this.state.pos));
          }
          jsxParseIdentifier() {
            const node = this.startNode();
            return this.match(140) ? node.name = this.state.value : tokenIsKeyword(this.state.type) ? node.name = tokenLabelName(this.state.type) : this.unexpected(), this.next(), this.finishNode(node, "JSXIdentifier");
          }
          jsxParseNamespacedName() {
            const startLoc = this.state.startLoc, name = this.jsxParseIdentifier();
            if (!this.eat(14)) return name;
            const node = this.startNodeAt(startLoc);
            return node.namespace = name, node.name = this.jsxParseIdentifier(), this.finishNode(node, "JSXNamespacedName");
          }
          jsxParseElementName() {
            const startLoc = this.state.startLoc;
            let node = this.jsxParseNamespacedName();
            if ("JSXNamespacedName" === node.type) return node;
            for (; this.eat(16); ) {
              const newNode = this.startNodeAt(startLoc);
              newNode.object = node, newNode.property = this.jsxParseIdentifier(), node = this.finishNode(newNode, "JSXMemberExpression");
            }
            return node;
          }
          jsxParseAttributeValue() {
            let node;
            switch (this.state.type) {
              case 5:
                return node = this.startNode(), this.setContext(types.brace), this.next(), node = this.jsxParseExpressionContainer(node, types.j_oTag), "JSXEmptyExpression" === node.expression.type && this.raise(JsxErrors.AttributeIsEmpty, { at: node }), node;
              case 142:
              case 133:
                return this.parseExprAtom();
              default:
                throw this.raise(JsxErrors.UnsupportedJsxValue, { at: this.state.startLoc });
            }
          }
          jsxParseEmptyExpression() {
            const node = this.startNodeAt(this.state.lastTokEndLoc);
            return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
          }
          jsxParseSpreadChild(node) {
            return this.next(), node.expression = this.parseExpression(), this.setContext(types.j_expr), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadChild");
          }
          jsxParseExpressionContainer(node, previousContext) {
            if (this.match(8)) node.expression = this.jsxParseEmptyExpression();
            else {
              const expression = this.parseExpression();
              node.expression = expression;
            }
            return this.setContext(previousContext), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXExpressionContainer");
          }
          jsxParseAttribute() {
            const node = this.startNode();
            return this.match(5) ? (this.setContext(types.brace), this.next(), this.expect(21), node.argument = this.parseMaybeAssignAllowIn(), this.setContext(types.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadAttribute")) : (node.name = this.jsxParseNamespacedName(), node.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(node, "JSXAttribute"));
          }
          jsxParseOpeningElementAt(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.eat(143) ? this.finishNode(node, "JSXOpeningFragment") : (node.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(node));
          }
          jsxParseOpeningElementAfterName(node) {
            const attributes = [];
            for (; !this.match(56) && !this.match(143); ) attributes.push(this.jsxParseAttribute());
            return node.attributes = attributes, node.selfClosing = this.eat(56), this.expect(143), this.finishNode(node, "JSXOpeningElement");
          }
          jsxParseClosingElementAt(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.eat(143) ? this.finishNode(node, "JSXClosingFragment") : (node.name = this.jsxParseElementName(), this.expect(143), this.finishNode(node, "JSXClosingElement"));
          }
          jsxParseElementAt(startLoc) {
            const node = this.startNodeAt(startLoc), children = [], openingElement = this.jsxParseOpeningElementAt(startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
              contents: for (; ; ) switch (this.state.type) {
                case 142:
                  if (startLoc = this.state.startLoc, this.next(), this.eat(56)) {
                    closingElement = this.jsxParseClosingElementAt(startLoc);
                    break contents;
                  }
                  children.push(this.jsxParseElementAt(startLoc));
                  break;
                case 141:
                  children.push(this.parseExprAtom());
                  break;
                case 5: {
                  const node2 = this.startNode();
                  this.setContext(types.brace), this.next(), this.match(21) ? children.push(this.jsxParseSpreadChild(node2)) : children.push(this.jsxParseExpressionContainer(node2, types.j_expr));
                  break;
                }
                default:
                  this.unexpected();
              }
              isFragment(openingElement) && !isFragment(closingElement) && null !== closingElement ? this.raise(JsxErrors.MissingClosingTagFragment, { at: closingElement }) : !isFragment(openingElement) && isFragment(closingElement) ? this.raise(JsxErrors.MissingClosingTagElement, { at: closingElement, openingTagName: getQualifiedJSXName(openingElement.name) }) : isFragment(openingElement) || isFragment(closingElement) || getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name) && this.raise(JsxErrors.MissingClosingTagElement, { at: closingElement, openingTagName: getQualifiedJSXName(openingElement.name) });
            }
            if (isFragment(openingElement) ? (node.openingFragment = openingElement, node.closingFragment = closingElement) : (node.openingElement = openingElement, node.closingElement = closingElement), node.children = children, this.match(47)) throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, { at: this.state.startLoc });
            return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
          }
          jsxParseElement() {
            const startLoc = this.state.startLoc;
            return this.next(), this.jsxParseElementAt(startLoc);
          }
          setContext(newContext) {
            const { context } = this.state;
            context[context.length - 1] = newContext;
          }
          parseExprAtom(refExpressionErrors) {
            return this.match(141) ? this.parseLiteral(this.state.value, "JSXText") : this.match(142) ? this.jsxParseElement() : this.match(47) && 33 !== this.input.charCodeAt(this.state.pos) ? (this.replaceToken(142), this.jsxParseElement()) : super.parseExprAtom(refExpressionErrors);
          }
          skipSpace() {
            this.curContext().preserveSpace || super.skipSpace();
          }
          getTokenFromCode(code2) {
            const context = this.curContext();
            if (context !== types.j_expr) {
              if (context === types.j_oTag || context === types.j_cTag) {
                if (isIdentifierStart(code2)) return void this.jsxReadWord();
                if (62 === code2) return ++this.state.pos, void this.finishToken(143);
                if ((34 === code2 || 39 === code2) && context === types.j_oTag) return void this.jsxReadString(code2);
              }
              if (60 === code2 && this.state.canStartJSXElement && 33 !== this.input.charCodeAt(this.state.pos + 1)) return ++this.state.pos, void this.finishToken(142);
              super.getTokenFromCode(code2);
            } else this.jsxReadToken();
          }
          updateContext(prevType) {
            const { context, type } = this.state;
            if (56 === type && 142 === prevType) context.splice(-2, 2, types.j_cTag), this.state.canStartJSXElement = false;
            else if (142 === type) context.push(types.j_oTag);
            else if (143 === type) {
              const out = context[context.length - 1];
              out === types.j_oTag && 56 === prevType || out === types.j_cTag ? (context.pop(), this.state.canStartJSXElement = context[context.length - 1] === types.j_expr) : (this.setContext(types.j_expr), this.state.canStartJSXElement = true);
            } else this.state.canStartJSXElement = tokenBeforeExprs[type];
          }
        }, flow: (superClass) => class extends superClass {
          constructor(...args) {
            super(...args), this.flowPragma = void 0;
          }
          getScopeHandler() {
            return FlowScopeHandler;
          }
          shouldParseTypes() {
            return this.getPluginOption("flow", "all") || "flow" === this.flowPragma;
          }
          shouldParseEnums() {
            return !!this.getPluginOption("flow", "enums");
          }
          finishToken(type, val) {
            133 !== type && 13 !== type && 28 !== type && void 0 === this.flowPragma && (this.flowPragma = null), super.finishToken(type, val);
          }
          addComment(comment) {
            if (void 0 === this.flowPragma) {
              const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
              if (matches) if ("flow" === matches[1]) this.flowPragma = "flow";
              else {
                if ("noflow" !== matches[1]) throw new Error("Unexpected flow pragma");
                this.flowPragma = "noflow";
              }
              else ;
            }
            super.addComment(comment);
          }
          flowParseTypeInitialiser(tok) {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(tok || 14);
            const type = this.flowParseType();
            return this.state.inType = oldInType, type;
          }
          flowParsePredicate() {
            const node = this.startNode(), moduloLoc = this.state.startLoc;
            return this.next(), this.expectContextual(110), this.state.lastTokStart > moduloLoc.index + 1 && this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, { at: moduloLoc }), this.eat(10) ? (node.value = super.parseExpression(), this.expect(11), this.finishNode(node, "DeclaredPredicate")) : this.finishNode(node, "InferredPredicate");
          }
          flowParseTypeAndPredicateInitialiser() {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(14);
            let type = null, predicate = null;
            return this.match(54) ? (this.state.inType = oldInType, predicate = this.flowParsePredicate()) : (type = this.flowParseType(), this.state.inType = oldInType, this.match(54) && (predicate = this.flowParsePredicate())), [type, predicate];
          }
          flowParseDeclareClass(node) {
            return this.next(), this.flowParseInterfaceish(node, true), this.finishNode(node, "DeclareClass");
          }
          flowParseDeclareFunction(node) {
            this.next();
            const id = node.id = this.parseIdentifier(), typeNode = this.startNode(), typeContainer = this.startNode();
            this.match(47) ? typeNode.typeParameters = this.flowParseTypeParameterDeclaration() : typeNode.typeParameters = null, this.expect(10);
            const tmp = this.flowParseFunctionTypeParams();
            return typeNode.params = tmp.params, typeNode.rest = tmp.rest, typeNode.this = tmp._this, this.expect(11), [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation"), id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation"), this.resetEndLocation(id), this.semicolon(), this.scope.declareName(node.id.name, 2048, node.id.loc.start), this.finishNode(node, "DeclareFunction");
          }
          flowParseDeclare(node, insideModule) {
            return this.match(80) ? this.flowParseDeclareClass(node) : this.match(68) ? this.flowParseDeclareFunction(node) : this.match(74) ? this.flowParseDeclareVariable(node) : this.eatContextual(127) ? this.match(16) ? this.flowParseDeclareModuleExports(node) : (insideModule && this.raise(FlowErrors.NestedDeclareModule, { at: this.state.lastTokStartLoc }), this.flowParseDeclareModule(node)) : this.isContextual(130) ? this.flowParseDeclareTypeAlias(node) : this.isContextual(131) ? this.flowParseDeclareOpaqueType(node) : this.isContextual(129) ? this.flowParseDeclareInterface(node) : this.match(82) ? this.flowParseDeclareExportDeclaration(node, insideModule) : void this.unexpected();
          }
          flowParseDeclareVariable(node) {
            return this.next(), node.id = this.flowParseTypeAnnotatableIdentifier(true), this.scope.declareName(node.id.name, 5, node.id.loc.start), this.semicolon(), this.finishNode(node, "DeclareVariable");
          }
          flowParseDeclareModule(node) {
            this.scope.enter(0), this.match(133) ? node.id = super.parseExprAtom() : node.id = this.parseIdentifier();
            const bodyNode = node.body = this.startNode(), body = bodyNode.body = [];
            for (this.expect(5); !this.match(8); ) {
              let bodyNode2 = this.startNode();
              this.match(83) ? (this.next(), this.isContextual(130) || this.match(87) || this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, { at: this.state.lastTokStartLoc }), super.parseImport(bodyNode2)) : (this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule), bodyNode2 = this.flowParseDeclare(bodyNode2, true)), body.push(bodyNode2);
            }
            this.scope.exit(), this.expect(8), this.finishNode(bodyNode, "BlockStatement");
            let kind = null, hasModuleExport = false;
            return body.forEach((bodyElement) => {
              !function(bodyElement2) {
                return "DeclareExportAllDeclaration" === bodyElement2.type || "DeclareExportDeclaration" === bodyElement2.type && (!bodyElement2.declaration || "TypeAlias" !== bodyElement2.declaration.type && "InterfaceDeclaration" !== bodyElement2.declaration.type);
              }(bodyElement) ? "DeclareModuleExports" === bodyElement.type && (hasModuleExport && this.raise(FlowErrors.DuplicateDeclareModuleExports, { at: bodyElement }), "ES" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, { at: bodyElement }), kind = "CommonJS", hasModuleExport = true) : ("CommonJS" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, { at: bodyElement }), kind = "ES");
            }), node.kind = kind || "CommonJS", this.finishNode(node, "DeclareModule");
          }
          flowParseDeclareExportDeclaration(node, insideModule) {
            if (this.expect(82), this.eat(65)) return this.match(68) || this.match(80) ? node.declaration = this.flowParseDeclare(this.startNode()) : (node.declaration = this.flowParseType(), this.semicolon()), node.default = true, this.finishNode(node, "DeclareExportDeclaration");
            if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
              const label = this.state.value;
              throw this.raise(FlowErrors.UnsupportedDeclareExportKind, { at: this.state.startLoc, unsupportedExportKind: label, suggestion: exportSuggestions[label] });
            }
            return this.match(74) || this.match(68) || this.match(80) || this.isContextual(131) ? (node.declaration = this.flowParseDeclare(this.startNode()), node.default = false, this.finishNode(node, "DeclareExportDeclaration")) : this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131) ? ("ExportNamedDeclaration" === (node = this.parseExport(node, null)).type && (node.type = "ExportDeclaration", node.default = false, delete node.exportKind), node.type = "Declare" + node.type, node) : void this.unexpected();
          }
          flowParseDeclareModuleExports(node) {
            return this.next(), this.expectContextual(111), node.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(node, "DeclareModuleExports");
          }
          flowParseDeclareTypeAlias(node) {
            this.next();
            const finished = this.flowParseTypeAlias(node);
            return finished.type = "DeclareTypeAlias", finished;
          }
          flowParseDeclareOpaqueType(node) {
            this.next();
            const finished = this.flowParseOpaqueType(node, true);
            return finished.type = "DeclareOpaqueType", finished;
          }
          flowParseDeclareInterface(node) {
            return this.next(), this.flowParseInterfaceish(node, false), this.finishNode(node, "DeclareInterface");
          }
          flowParseInterfaceish(node, isClass) {
            if (node.id = this.flowParseRestrictedIdentifier(!isClass, true), this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.extends = [], this.eat(81)) do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (!isClass && this.eat(12));
            if (isClass) {
              if (node.implements = [], node.mixins = [], this.eatContextual(117)) do {
                node.mixins.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
              if (this.eatContextual(113)) do {
                node.implements.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
            node.body = this.flowParseObjectType({ allowStatic: isClass, allowExact: false, allowSpread: false, allowProto: isClass, allowInexact: false });
          }
          flowParseInterfaceExtends() {
            const node = this.startNode();
            return node.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? node.typeParameters = this.flowParseTypeParameterInstantiation() : node.typeParameters = null, this.finishNode(node, "InterfaceExtends");
          }
          flowParseInterface(node) {
            return this.flowParseInterfaceish(node, false), this.finishNode(node, "InterfaceDeclaration");
          }
          checkNotUnderscore(word) {
            "_" === word && this.raise(FlowErrors.UnexpectedReservedUnderscore, { at: this.state.startLoc });
          }
          checkReservedType(word, startLoc, declaration) {
            reservedTypes.has(word) && this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, { at: startLoc, reservedType: word });
          }
          flowParseRestrictedIdentifier(liberal, declaration) {
            return this.checkReservedType(this.state.value, this.state.startLoc, declaration), this.parseIdentifier(liberal);
          }
          flowParseTypeAlias(node) {
            return node.id = this.flowParseRestrictedIdentifier(false, true), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(node, "TypeAlias");
          }
          flowParseOpaqueType(node, declare) {
            return this.expectContextual(130), node.id = this.flowParseRestrictedIdentifier(true, true), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.supertype = null, this.match(14) && (node.supertype = this.flowParseTypeInitialiser(14)), node.impltype = null, declare || (node.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(node, "OpaqueType");
          }
          flowParseTypeParameter(requireDefault = false) {
            const nodeStartLoc = this.state.startLoc, node = this.startNode(), variance = this.flowParseVariance(), ident = this.flowParseTypeAnnotatableIdentifier();
            return node.name = ident.name, node.variance = variance, node.bound = ident.typeAnnotation, this.match(29) ? (this.eat(29), node.default = this.flowParseType()) : requireDefault && this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc }), this.finishNode(node, "TypeParameter");
          }
          flowParseTypeParameterDeclaration() {
            const oldInType = this.state.inType, node = this.startNode();
            node.params = [], this.state.inType = true, this.match(47) || this.match(142) ? this.next() : this.unexpected();
            let defaultRequired = false;
            do {
              const typeParameter = this.flowParseTypeParameter(defaultRequired);
              node.params.push(typeParameter), typeParameter.default && (defaultRequired = true), this.match(48) || this.expect(12);
            } while (!this.match(48));
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterDeclaration");
          }
          flowParseTypeParameterInstantiation() {
            const node = this.startNode(), oldInType = this.state.inType;
            node.params = [], this.state.inType = true, this.expect(47);
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            for (this.state.noAnonFunctionType = false; !this.match(48); ) node.params.push(this.flowParseType()), this.match(48) || this.expect(12);
            return this.state.noAnonFunctionType = oldNoAnonFunctionType, this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseTypeParameterInstantiationCallOrNew() {
            const node = this.startNode(), oldInType = this.state.inType;
            for (node.params = [], this.state.inType = true, this.expect(47); !this.match(48); ) node.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseInterfaceType() {
            const node = this.startNode();
            if (this.expectContextual(129), node.extends = [], this.eat(81)) do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (this.eat(12));
            return node.body = this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: false, allowProto: false, allowInexact: false }), this.finishNode(node, "InterfaceTypeAnnotation");
          }
          flowParseObjectPropertyKey() {
            return this.match(134) || this.match(133) ? super.parseExprAtom() : this.parseIdentifier(true);
          }
          flowParseObjectTypeIndexer(node, isStatic, variance) {
            return node.static = isStatic, 14 === this.lookahead().type ? (node.id = this.flowParseObjectPropertyKey(), node.key = this.flowParseTypeInitialiser()) : (node.id = null, node.key = this.flowParseType()), this.expect(3), node.value = this.flowParseTypeInitialiser(), node.variance = variance, this.finishNode(node, "ObjectTypeIndexer");
          }
          flowParseObjectTypeInternalSlot(node, isStatic) {
            return node.static = isStatic, node.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (node.method = true, node.optional = false, node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start))) : (node.method = false, this.eat(17) && (node.optional = true), node.value = this.flowParseTypeInitialiser()), this.finishNode(node, "ObjectTypeInternalSlot");
          }
          flowParseObjectTypeMethodish(node) {
            for (node.params = [], node.rest = null, node.typeParameters = null, node.this = null, this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (node.this = this.flowParseFunctionTypeParam(true), node.this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); ) node.params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (node.rest = this.flowParseFunctionTypeParam(false)), this.expect(11), node.returnType = this.flowParseTypeInitialiser(), this.finishNode(node, "FunctionTypeAnnotation");
          }
          flowParseObjectTypeCallProperty(node, isStatic) {
            const valueNode = this.startNode();
            return node.static = isStatic, node.value = this.flowParseObjectTypeMethodish(valueNode), this.finishNode(node, "ObjectTypeCallProperty");
          }
          flowParseObjectType({ allowStatic, allowExact, allowSpread, allowProto, allowInexact }) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const nodeStart = this.startNode();
            let endDelim, exact;
            nodeStart.callProperties = [], nodeStart.properties = [], nodeStart.indexers = [], nodeStart.internalSlots = [];
            let inexact = false;
            for (allowExact && this.match(6) ? (this.expect(6), endDelim = 9, exact = true) : (this.expect(5), endDelim = 8, exact = false), nodeStart.exact = exact; !this.match(endDelim); ) {
              let isStatic = false, protoStartLoc = null, inexactStartLoc = null;
              const node = this.startNode();
              if (allowProto && this.isContextual(118)) {
                const lookahead = this.lookahead();
                14 !== lookahead.type && 17 !== lookahead.type && (this.next(), protoStartLoc = this.state.startLoc, allowStatic = false);
              }
              if (allowStatic && this.isContextual(106)) {
                const lookahead = this.lookahead();
                14 !== lookahead.type && 17 !== lookahead.type && (this.next(), isStatic = true);
              }
              const variance = this.flowParseVariance();
              if (this.eat(0)) null != protoStartLoc && this.unexpected(protoStartLoc), this.eat(0) ? (variance && this.unexpected(variance.loc.start), nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic))) : nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
              else if (this.match(10) || this.match(47)) null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
              else {
                let kind = "init";
                if (this.isContextual(99) || this.isContextual(104)) {
                  tokenIsLiteralPropertyName(this.lookahead().type) && (kind = this.state.value, this.next());
                }
                const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, null != allowInexact ? allowInexact : !exact);
                null === propOrInexact ? (inexact = true, inexactStartLoc = this.state.lastTokStartLoc) : nodeStart.properties.push(propOrInexact);
              }
              this.flowObjectTypeSemicolon(), !inexactStartLoc || this.match(8) || this.match(9) || this.raise(FlowErrors.UnexpectedExplicitInexactInObject, { at: inexactStartLoc });
            }
            this.expect(endDelim), allowSpread && (nodeStart.inexact = inexact);
            const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
            return this.state.inType = oldInType, out;
          }
          flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
            if (this.eat(21)) {
              return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (allowSpread ? allowInexact || this.raise(FlowErrors.InexactInsideExact, { at: this.state.lastTokStartLoc }) : this.raise(FlowErrors.InexactInsideNonObject, { at: this.state.lastTokStartLoc }), variance && this.raise(FlowErrors.InexactVariance, { at: variance }), null) : (allowSpread || this.raise(FlowErrors.UnexpectedSpreadType, { at: this.state.lastTokStartLoc }), null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.raise(FlowErrors.SpreadVariance, { at: variance }), node.argument = this.flowParseType(), this.finishNode(node, "ObjectTypeSpreadProperty"));
            }
            {
              node.key = this.flowParseObjectPropertyKey(), node.static = isStatic, node.proto = null != protoStartLoc, node.kind = kind;
              let optional = false;
              return this.match(47) || this.match(10) ? (node.method = true, null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start)), "get" !== kind && "set" !== kind || this.flowCheckGetterSetterParams(node), !allowSpread && "constructor" === node.key.name && node.value.this && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: node.value.this })) : ("init" !== kind && this.unexpected(), node.method = false, this.eat(17) && (optional = true), node.value = this.flowParseTypeInitialiser(), node.variance = variance), node.optional = optional, this.finishNode(node, "ObjectTypeProperty");
            }
          }
          flowCheckGetterSetterParams(property) {
            const paramCount = "get" === property.kind ? 0 : 1, length = property.value.params.length + (property.value.rest ? 1 : 0);
            property.value.this && this.raise("get" === property.kind ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, { at: property.value.this }), length !== paramCount && this.raise("get" === property.kind ? Errors.BadGetterArity : Errors.BadSetterArity, { at: property }), "set" === property.kind && property.value.rest && this.raise(Errors.BadSetterRestParameter, { at: property });
          }
          flowObjectTypeSemicolon() {
            this.eat(13) || this.eat(12) || this.match(8) || this.match(9) || this.unexpected();
          }
          flowParseQualifiedTypeIdentifier(startLoc, id) {
            null != startLoc || (startLoc = this.state.startLoc);
            let node = id || this.flowParseRestrictedIdentifier(true);
            for (; this.eat(16); ) {
              const node2 = this.startNodeAt(startLoc);
              node2.qualification = node, node2.id = this.flowParseRestrictedIdentifier(true), node = this.finishNode(node2, "QualifiedTypeIdentifier");
            }
            return node;
          }
          flowParseGenericType(startLoc, id) {
            const node = this.startNodeAt(startLoc);
            return node.typeParameters = null, node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id), this.match(47) && (node.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(node, "GenericTypeAnnotation");
          }
          flowParseTypeofType() {
            const node = this.startNode();
            return this.expect(87), node.argument = this.flowParsePrimaryType(), this.finishNode(node, "TypeofTypeAnnotation");
          }
          flowParseTupleType() {
            const node = this.startNode();
            for (node.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (node.types.push(this.flowParseType()), !this.match(3)); ) this.expect(12);
            return this.expect(3), this.finishNode(node, "TupleTypeAnnotation");
          }
          flowParseFunctionTypeParam(first) {
            let name = null, optional = false, typeAnnotation = null;
            const node = this.startNode(), lh = this.lookahead(), isThis = 78 === this.state.type;
            return 14 === lh.type || 17 === lh.type ? (isThis && !first && this.raise(FlowErrors.ThisParamMustBeFirst, { at: node }), name = this.parseIdentifier(isThis), this.eat(17) && (optional = true, isThis && this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node })), typeAnnotation = this.flowParseTypeInitialiser()) : typeAnnotation = this.flowParseType(), node.name = name, node.optional = optional, node.typeAnnotation = typeAnnotation, this.finishNode(node, "FunctionTypeParam");
          }
          reinterpretTypeAsFunctionTypeParam(type) {
            const node = this.startNodeAt(type.loc.start);
            return node.name = null, node.optional = false, node.typeAnnotation = type, this.finishNode(node, "FunctionTypeParam");
          }
          flowParseFunctionTypeParams(params = []) {
            let rest = null, _this = null;
            for (this.match(78) && (_this = this.flowParseFunctionTypeParam(true), _this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); ) params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (rest = this.flowParseFunctionTypeParam(false)), { params, rest, _this };
          }
          flowIdentToTypeAnnotation(startLoc, node, id) {
            switch (id.name) {
              case "any":
                return this.finishNode(node, "AnyTypeAnnotation");
              case "bool":
              case "boolean":
                return this.finishNode(node, "BooleanTypeAnnotation");
              case "mixed":
                return this.finishNode(node, "MixedTypeAnnotation");
              case "empty":
                return this.finishNode(node, "EmptyTypeAnnotation");
              case "number":
                return this.finishNode(node, "NumberTypeAnnotation");
              case "string":
                return this.finishNode(node, "StringTypeAnnotation");
              case "symbol":
                return this.finishNode(node, "SymbolTypeAnnotation");
              default:
                return this.checkNotUnderscore(id.name), this.flowParseGenericType(startLoc, id);
            }
          }
          flowParsePrimaryType() {
            const startLoc = this.state.startLoc, node = this.startNode();
            let tmp, type, isGroupedType = false;
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            switch (this.state.type) {
              case 5:
                return this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: true, allowProto: false, allowInexact: true });
              case 6:
                return this.flowParseObjectType({ allowStatic: false, allowExact: true, allowSpread: true, allowProto: false, allowInexact: false });
              case 0:
                return this.state.noAnonFunctionType = false, type = this.flowParseTupleType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, type;
              case 47:
                return node.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), tmp = this.flowParseFunctionTypeParams(), node.params = tmp.params, node.rest = tmp.rest, node.this = tmp._this, this.expect(11), this.expect(19), node.returnType = this.flowParseType(), this.finishNode(node, "FunctionTypeAnnotation");
              case 10:
                if (this.next(), !this.match(11) && !this.match(21)) if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                  const token = this.lookahead().type;
                  isGroupedType = 17 !== token && 14 !== token;
                } else isGroupedType = true;
                if (isGroupedType) {
                  if (this.state.noAnonFunctionType = false, type = this.flowParseType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && 19 === this.lookahead().type)) return this.expect(11), type;
                  this.eat(12);
                }
                return tmp = type ? this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]) : this.flowParseFunctionTypeParams(), node.params = tmp.params, node.rest = tmp.rest, node.this = tmp._this, this.expect(11), this.expect(19), node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
              case 133:
                return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
              case 85:
              case 86:
                return node.value = this.match(85), this.next(), this.finishNode(node, "BooleanLiteralTypeAnnotation");
              case 53:
                if ("-" === this.state.value) {
                  if (this.next(), this.match(134)) return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                  if (this.match(135)) return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                  throw this.raise(FlowErrors.UnexpectedSubtractionOperand, { at: this.state.startLoc });
                }
                return void this.unexpected();
              case 134:
                return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
              case 135:
                return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
              case 88:
                return this.next(), this.finishNode(node, "VoidTypeAnnotation");
              case 84:
                return this.next(), this.finishNode(node, "NullLiteralTypeAnnotation");
              case 78:
                return this.next(), this.finishNode(node, "ThisTypeAnnotation");
              case 55:
                return this.next(), this.finishNode(node, "ExistsTypeAnnotation");
              case 87:
                return this.flowParseTypeofType();
              default:
                if (tokenIsKeyword(this.state.type)) {
                  const label = tokenLabelName(this.state.type);
                  return this.next(), super.createIdentifier(node, label);
                }
                if (tokenIsIdentifier(this.state.type)) return this.isContextual(129) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
            }
            this.unexpected();
          }
          flowParsePostfixType() {
            const startLoc = this.state.startLoc;
            let type = this.flowParsePrimaryType(), seenOptionalIndexedAccess = false;
            for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
              const node = this.startNodeAt(startLoc), optional = this.eat(18);
              seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional, this.expect(0), !optional && this.match(3) ? (node.elementType = type, this.next(), type = this.finishNode(node, "ArrayTypeAnnotation")) : (node.objectType = type, node.indexType = this.flowParseType(), this.expect(3), seenOptionalIndexedAccess ? (node.optional = optional, type = this.finishNode(node, "OptionalIndexedAccessType")) : type = this.finishNode(node, "IndexedAccessType"));
            }
            return type;
          }
          flowParsePrefixType() {
            const node = this.startNode();
            return this.eat(17) ? (node.typeAnnotation = this.flowParsePrefixType(), this.finishNode(node, "NullableTypeAnnotation")) : this.flowParsePostfixType();
          }
          flowParseAnonFunctionWithoutParens() {
            const param = this.flowParsePrefixType();
            if (!this.state.noAnonFunctionType && this.eat(19)) {
              const node = this.startNodeAt(param.loc.start);
              return node.params = [this.reinterpretTypeAsFunctionTypeParam(param)], node.rest = null, node.this = null, node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
            }
            return param;
          }
          flowParseIntersectionType() {
            const node = this.startNode();
            this.eat(45);
            const type = this.flowParseAnonFunctionWithoutParens();
            for (node.types = [type]; this.eat(45); ) node.types.push(this.flowParseAnonFunctionWithoutParens());
            return 1 === node.types.length ? type : this.finishNode(node, "IntersectionTypeAnnotation");
          }
          flowParseUnionType() {
            const node = this.startNode();
            this.eat(43);
            const type = this.flowParseIntersectionType();
            for (node.types = [type]; this.eat(43); ) node.types.push(this.flowParseIntersectionType());
            return 1 === node.types.length ? type : this.finishNode(node, "UnionTypeAnnotation");
          }
          flowParseType() {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const type = this.flowParseUnionType();
            return this.state.inType = oldInType, type;
          }
          flowParseTypeOrImplicitInstantiation() {
            if (132 === this.state.type && "_" === this.state.value) {
              const startLoc = this.state.startLoc, node = this.parseIdentifier();
              return this.flowParseGenericType(startLoc, node);
            }
            return this.flowParseType();
          }
          flowParseTypeAnnotation() {
            const node = this.startNode();
            return node.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(node, "TypeAnnotation");
          }
          flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
            const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
            return this.match(14) && (ident.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(ident)), ident;
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          flowParseVariance() {
            let variance = null;
            return this.match(53) ? (variance = this.startNode(), "+" === this.state.value ? variance.kind = "plus" : variance.kind = "minus", this.next(), this.finishNode(variance, "Variance")) : variance;
          }
          parseFunctionBody(node, allowExpressionBody, isMethod = false) {
            allowExpressionBody ? this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod)) : super.parseFunctionBody(node, false, isMethod);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            if (this.match(14)) {
              const typeNode = this.startNode();
              [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
            }
            return super.parseFunctionBodyAndFinish(node, type, isMethod);
          }
          parseStatementLike(flags) {
            if (this.state.strict && this.isContextual(129)) {
              if (tokenIsKeywordOrIdentifier(this.lookahead().type)) {
                const node = this.startNode();
                return this.next(), this.flowParseInterface(node);
              }
            } else if (this.shouldParseEnums() && this.isContextual(126)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            const stmt = super.parseStatementLike(flags);
            return void 0 !== this.flowPragma || this.isValidDirective(stmt) || (this.flowPragma = null), stmt;
          }
          parseExpressionStatement(node, expr, decorators) {
            if ("Identifier" === expr.type) {
              if ("declare" === expr.name) {
                if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) return this.flowParseDeclare(node);
              } else if (tokenIsIdentifier(this.state.type)) {
                if ("interface" === expr.name) return this.flowParseInterface(node);
                if ("type" === expr.name) return this.flowParseTypeAlias(node);
                if ("opaque" === expr.name) return this.flowParseOpaqueType(node, false);
              }
            }
            return super.parseExpressionStatement(node, expr, decorators);
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            return tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && 126 === type ? !this.state.containsEsc : super.shouldParseExportDeclaration();
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            return tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && 126 === type ? this.state.containsEsc : super.isExportDefaultSpecifier();
          }
          parseExportDefaultExpression() {
            if (this.shouldParseEnums() && this.isContextual(126)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            return super.parseExportDefaultExpression();
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (!this.match(17)) return expr;
            if (this.state.maybeInArrowParameters) {
              const nextCh = this.lookaheadCharCode();
              if (44 === nextCh || 61 === nextCh || 58 === nextCh || 41 === nextCh) return this.setOptionalParametersError(refExpressionErrors), expr;
            }
            this.expect(17);
            const state = this.state.clone(), originalNoArrowAt = this.state.noArrowAt, node = this.startNodeAt(startLoc);
            let { consequent, failed } = this.tryParseConditionalConsequent(), [valid, invalid] = this.getArrowLikeExpressions(consequent);
            if (failed || invalid.length > 0) {
              const noArrowAt = [...originalNoArrowAt];
              if (invalid.length > 0) {
                this.state = state, this.state.noArrowAt = noArrowAt;
                for (let i = 0; i < invalid.length; i++) noArrowAt.push(invalid[i].start);
                ({ consequent, failed } = this.tryParseConditionalConsequent()), [valid, invalid] = this.getArrowLikeExpressions(consequent);
              }
              failed && valid.length > 1 && this.raise(FlowErrors.AmbiguousConditionalArrow, { at: state.startLoc }), failed && 1 === valid.length && (this.state = state, noArrowAt.push(valid[0].start), this.state.noArrowAt = noArrowAt, { consequent, failed } = this.tryParseConditionalConsequent());
            }
            return this.getArrowLikeExpressions(consequent, true), this.state.noArrowAt = originalNoArrowAt, this.expect(14), node.test = expr, node.consequent = consequent, node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(node, "ConditionalExpression");
          }
          tryParseConditionalConsequent() {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            const consequent = this.parseMaybeAssignAllowIn(), failed = !this.match(14);
            return this.state.noArrowParamsConversionAt.pop(), { consequent, failed };
          }
          getArrowLikeExpressions(node, disallowInvalid) {
            const stack = [node], arrows = [];
            for (; 0 !== stack.length; ) {
              const node2 = stack.pop();
              "ArrowFunctionExpression" === node2.type ? (node2.typeParameters || !node2.returnType ? this.finishArrowValidation(node2) : arrows.push(node2), stack.push(node2.body)) : "ConditionalExpression" === node2.type && (stack.push(node2.consequent), stack.push(node2.alternate));
            }
            return disallowInvalid ? (arrows.forEach((node2) => this.finishArrowValidation(node2)), [arrows, []]) : function(list, test) {
              const list1 = [], list2 = [];
              for (let i = 0; i < list.length; i++) (test(list[i], i, list) ? list1 : list2).push(list[i]);
              return [list1, list2];
            }(arrows, (node2) => node2.params.every((param) => this.isAssignable(param, true)));
          }
          finishArrowValidation(node) {
            var _node$extra;
            this.toAssignableList(node.params, null == (_node$extra = node.extra) ? void 0 : _node$extra.trailingCommaLoc, false), this.scope.enter(6), super.checkParams(node, false, true), this.scope.exit();
          }
          forwardNoArrowParamsConversionAt(node, parse) {
            let result;
            return -1 !== this.state.noArrowParamsConversionAt.indexOf(node.start) ? (this.state.noArrowParamsConversionAt.push(this.state.start), result = parse(), this.state.noArrowParamsConversionAt.pop()) : result = parse(), result;
          }
          parseParenItem(node, startLoc) {
            if (node = super.parseParenItem(node, startLoc), this.eat(17) && (node.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startLoc);
              return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(typeCastNode, "TypeCastExpression");
            }
            return node;
          }
          assertModuleNodeAllowed(node) {
            "ImportDeclaration" === node.type && ("type" === node.importKind || "typeof" === node.importKind) || "ExportNamedDeclaration" === node.type && "type" === node.exportKind || "ExportAllDeclaration" === node.type && "type" === node.exportKind || super.assertModuleNodeAllowed(node);
          }
          parseExportDeclaration(node) {
            if (this.isContextual(130)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.match(5) ? (node.specifiers = this.parseExportSpecifiers(true), super.parseExportFrom(node), null) : this.flowParseTypeAlias(declarationNode);
            }
            if (this.isContextual(131)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseOpaqueType(declarationNode, false);
            }
            if (this.isContextual(129)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseInterface(declarationNode);
            }
            if (this.shouldParseEnums() && this.isContextual(126)) {
              node.exportKind = "value";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(declarationNode);
            }
            return super.parseExportDeclaration(node);
          }
          eatExportStar(node) {
            return !!super.eatExportStar(node) || !(!this.isContextual(130) || 55 !== this.lookahead().type) && (node.exportKind = "type", this.next(), this.next(), true);
          }
          maybeParseExportNamespaceSpecifier(node) {
            const { startLoc } = this.state, hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
            return hasNamespace && "type" === node.exportKind && this.unexpected(startLoc), hasNamespace;
          }
          parseClassId(node, isStatement, optionalId) {
            super.parseClassId(node, isStatement, optionalId), this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration());
          }
          parseClassMember(classBody, member, state) {
            const { startLoc } = this.state;
            if (this.isContextual(125)) {
              if (super.parseClassMemberFromModifier(classBody, member)) return;
              member.declare = true;
            }
            super.parseClassMember(classBody, member, state), member.declare && ("ClassProperty" !== member.type && "ClassPrivateProperty" !== member.type && "PropertyDefinition" !== member.type ? this.raise(FlowErrors.DeclareClassElement, { at: startLoc }) : member.value && this.raise(FlowErrors.DeclareClassFieldInitializer, { at: member.value }));
          }
          isIterator(word) {
            return "iterator" === word || "asyncIterator" === word;
          }
          readIterator() {
            const word = super.readWord1(), fullWord = "@@" + word;
            this.isIterator(word) && this.state.inType || this.raise(Errors.InvalidIdentifier, { at: this.state.curPosition(), identifierName: fullWord }), this.finishToken(132, fullWord);
          }
          getTokenFromCode(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            123 === code2 && 124 === next ? this.finishOp(6, 2) : !this.state.inType || 62 !== code2 && 60 !== code2 ? this.state.inType && 63 === code2 ? 46 === next ? this.finishOp(18, 2) : this.finishOp(17, 1) : !function(current, next2, next22) {
              return 64 === current && 64 === next2 && isIdentifierStart(next22);
            }(code2, next, this.input.charCodeAt(this.state.pos + 2)) ? super.getTokenFromCode(code2) : (this.state.pos += 2, this.readIterator()) : this.finishOp(62 === code2 ? 48 : 47, 1);
          }
          isAssignable(node, isBinding) {
            return "TypeCastExpression" === node.type ? this.isAssignable(node.expression, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            isLHS || "AssignmentExpression" !== node.type || "TypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left)), super.toAssignable(node, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i = 0; i < exprList.length; i++) {
              const expr = exprList[i];
              "TypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            for (let i = 0; i < exprList.length; i++) {
              var _expr$extra;
              const expr = exprList[i];
              !expr || "TypeCastExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized || !(exprList.length > 1) && isParenthesizedExpr || this.raise(FlowErrors.TypeCastInPattern, { at: expr.typeAnnotation });
            }
            return exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return canBePattern && !this.state.maybeInArrowParameters && this.toReferencedList(node.elements), node;
          }
          isValidLVal(type, isParenthesized, binding) {
            return "TypeCastExpression" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          parseClassProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(node);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(14) || super.isClassProperty();
          }
          isNonstaticConstructor(method) {
            return !this.match(14) && super.isNonstaticConstructor(method);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            if (method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper), method.params && isConstructor) {
              const params = method.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });
            } else if ("MethodDefinition" === method.type && isConstructor && method.value.params) {
              const params = method.value.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });
            }
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
          }
          parseClassSuper(node) {
            if (super.parseClassSuper(node), node.superClass && this.match(47) && (node.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(113)) {
              this.next();
              const implemented = node.implements = [];
              do {
                const node2 = this.startNode();
                node2.id = this.flowParseRestrictedIdentifier(true), this.match(47) ? node2.typeParameters = this.flowParseTypeParameterInstantiation() : node2.typeParameters = null, implemented.push(this.finishNode(node2, "ClassImplements"));
              } while (this.eat(12));
            }
          }
          checkGetterSetterParams(method) {
            super.checkGetterSetterParams(method);
            const params = this.getObjectOrClassMethodParams(method);
            if (params.length > 0) {
              const param = params[0];
              this.isThisParam(param) && "get" === method.kind ? this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param }) : this.isThisParam(param) && this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });
            }
          }
          parsePropertyNamePrefixOperator(node) {
            node.variance = this.flowParseVariance();
          }
          parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            let typeParameters;
            prop.variance && this.unexpected(prop.variance.loc.start), delete prop.variance, this.match(47) && !isAccessor && (typeParameters = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
            const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
            return typeParameters && ((result.value || result).typeParameters = typeParameters), result;
          }
          parseAssignableListItemTypes(param) {
            return this.eat(17) && ("Identifier" !== param.type && this.raise(FlowErrors.PatternIsOptional, { at: param }), this.isThisParam(param) && this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param }), param.optional = true), this.match(14) ? param.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(param) && this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param }), this.match(29) && this.isThisParam(param) && this.raise(FlowErrors.ThisParamNoDefault, { at: param }), this.resetEndLocation(param), param;
          }
          parseMaybeDefault(startLoc, left) {
            const node = super.parseMaybeDefault(startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(FlowErrors.TypeBeforeInitializer, { at: node.typeAnnotation }), node;
          }
          checkImportReflection(node) {
            super.checkImportReflection(node), node.module && "value" !== node.importKind && this.raise(FlowErrors.ImportReflectionHasImportType, { at: node.specifiers[0].loc.start });
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          isPotentialImportPhase(isExport) {
            if (super.isPotentialImportPhase(isExport)) return true;
            if (this.isContextual(130)) {
              if (!isExport) return true;
              const ch = this.lookaheadCharCode();
              return 123 === ch || 42 === ch;
            }
            return !isExport && this.isContextual(87);
          }
          applyImportPhase(node, isExport, phase, loc) {
            if (super.applyImportPhase(node, isExport, phase, loc), isExport) {
              if (!phase && this.match(65)) return;
              node.exportKind = "type" === phase ? phase : "value";
            } else "type" === phase && this.match(55) && this.unexpected(), node.importKind = "type" === phase || "typeof" === phase ? phase : "value";
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            const firstIdent = specifier.imported;
            let specifierTypeKind = null;
            "Identifier" === firstIdent.type && ("type" === firstIdent.name ? specifierTypeKind = "type" : "typeof" === firstIdent.name && (specifierTypeKind = "typeof"));
            let isBinding = false;
            if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
              const as_ident = this.parseIdentifier(true);
              null === specifierTypeKind || tokenIsKeywordOrIdentifier(this.state.type) ? (specifier.imported = firstIdent, specifier.importKind = null, specifier.local = this.parseIdentifier()) : (specifier.imported = as_ident, specifier.importKind = specifierTypeKind, specifier.local = cloneIdentifier(as_ident));
            } else {
              if (null !== specifierTypeKind && tokenIsKeywordOrIdentifier(this.state.type)) specifier.imported = this.parseIdentifier(true), specifier.importKind = specifierTypeKind;
              else {
                if (importedIsString) throw this.raise(Errors.ImportBindingIsString, { at: specifier, importName: firstIdent.value });
                specifier.imported = firstIdent, specifier.importKind = null;
              }
              this.eatContextual(93) ? specifier.local = this.parseIdentifier() : (isBinding = true, specifier.local = cloneIdentifier(specifier.imported));
            }
            const specifierIsTypeImport = hasTypeImportKind(specifier);
            return isInTypeOnlyImport && specifierIsTypeImport && this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, { at: specifier }), (isInTypeOnlyImport || specifierIsTypeImport) && this.checkReservedType(specifier.local.name, specifier.local.loc.start, true), !isBinding || isInTypeOnlyImport || specifierIsTypeImport || this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true), this.finishImportSpecifier(specifier, "ImportSpecifier");
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseFunctionParams(node, isConstructor) {
            const kind = node.kind;
            "get" !== kind && "set" !== kind && this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(node, isConstructor);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), this.match(14) && (decl.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            if (this.match(14)) {
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = true, node.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = oldNoAnonFunctionType;
            }
            return super.parseAsyncArrowFromCallExpression(node, call);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx;
            let jsx, state = null;
            if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error) return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types.j_oTag && currentContext !== types.j_expr || context.pop();
            }
            if (null != (_jsx = jsx) && _jsx.error || this.match(47)) {
              var _jsx2, _jsx3;
              let typeParameters;
              state = state || this.state.clone();
              const arrow = this.tryParse((abort) => {
                var _arrowExpression$extr;
                typeParameters = this.flowParseTypeParameterDeclaration();
                const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
                  const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
                  return this.resetStartLocationFromNode(result, typeParameters), result;
                });
                null != (_arrowExpression$extr = arrowExpression2.extra) && _arrowExpression$extr.parenthesized && abort();
                const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
                return "ArrowFunctionExpression" !== expr.type && abort(), expr.typeParameters = typeParameters, this.resetStartLocationFromNode(expr, typeParameters), arrowExpression2;
              }, state);
              let arrowExpression = null;
              if (arrow.node && "ArrowFunctionExpression" === this.maybeUnwrapTypeCastExpression(arrow.node).type) {
                if (!arrow.error && !arrow.aborted) return arrow.node.async && this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, { at: typeParameters }), arrow.node;
                arrowExpression = arrow.node;
              }
              if (null != (_jsx2 = jsx) && _jsx2.node) return this.state = jsx.failState, jsx.node;
              if (arrowExpression) return this.state = arrow.failState, arrowExpression;
              if (null != (_jsx3 = jsx) && _jsx3.thrown) throw jsx.error;
              if (arrow.thrown) throw arrow.error;
              throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, { at: typeParameters });
            }
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse(() => {
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                const typeNode = this.startNode();
                return [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.canInsertSemicolon() && this.unexpected(), this.match(19) || this.unexpected(), typeNode;
              });
              if (result.thrown) return null;
              result.error && (this.state = result.failState), node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
            }
            return super.parseArrow(node);
          }
          shouldParseArrow(params) {
            return this.match(14) || super.shouldParseArrow(params);
          }
          setArrowFunctionParameters(node, params) {
            -1 !== this.state.noArrowParamsConversionAt.indexOf(node.start) ? node.params = params : super.setArrowFunctionParameters(node, params);
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            if (!isArrowFunction || -1 === this.state.noArrowParamsConversionAt.indexOf(node.start)) {
              for (let i = 0; i < node.params.length; i++) this.isThisParam(node.params[i]) && i > 0 && this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });
              super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
            }
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            return super.parseParenAndDistinguishExpression(canBeArrow && -1 === this.state.noArrowAt.indexOf(this.state.start));
          }
          parseSubscripts(base, startLoc, noCalls) {
            if ("Identifier" === base.type && "async" === base.name && -1 !== this.state.noArrowAt.indexOf(startLoc.index)) {
              this.next();
              const node = this.startNodeAt(startLoc);
              node.callee = base, node.arguments = super.parseCallExpressionArguments(11, false), base = this.finishNode(node, "CallExpression");
            } else if ("Identifier" === base.type && "async" === base.name && this.match(47)) {
              const state = this.state.clone(), arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
              if (!arrow.error && !arrow.aborted) return arrow.node;
              const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
              if (result.node && !result.error) return result.node;
              if (arrow.node) return this.state = arrow.failState, arrow.node;
              if (result.node) return this.state = result.failState, result.node;
              throw arrow.error || result.error;
            }
            return super.parseSubscripts(base, startLoc, noCalls);
          }
          parseSubscript(base, startLoc, noCalls, subscriptState) {
            if (this.match(18) && this.isLookaheadToken_lt()) {
              if (subscriptState.optionalChainMember = true, noCalls) return subscriptState.stop = true, base;
              this.next();
              const node = this.startNodeAt(startLoc);
              return node.callee = base, node.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), node.arguments = this.parseCallExpressionArguments(11, false), node.optional = true, this.finishCallExpression(node, true);
            }
            if (!noCalls && this.shouldParseTypes() && this.match(47)) {
              const node = this.startNodeAt(startLoc);
              node.callee = base;
              const result = this.tryParse(() => (node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), node.arguments = super.parseCallExpressionArguments(11, false), subscriptState.optionalChainMember && (node.optional = false), this.finishCallExpression(node, subscriptState.optionalChainMember)));
              if (result.node) return result.error && (this.state = result.failState), result.node;
            }
            return super.parseSubscript(base, startLoc, noCalls, subscriptState);
          }
          parseNewCallee(node) {
            super.parseNewCallee(node);
            let targs = null;
            this.shouldParseTypes() && this.match(47) && (targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), node.typeArguments = targs;
          }
          parseAsyncArrowWithTypeParameters(startLoc) {
            const node = this.startNodeAt(startLoc);
            if (this.parseFunctionParams(node, false), this.parseArrow(node)) return super.parseArrowExpression(node, void 0, true);
          }
          readToken_mult_modulo(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (42 === code2 && 47 === next && this.state.hasFlowComment) return this.state.hasFlowComment = false, this.state.pos += 2, void this.nextToken();
            super.readToken_mult_modulo(code2);
          }
          readToken_pipe_amp(code2) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            124 !== code2 || 125 !== next ? super.readToken_pipe_amp(code2) : this.finishOp(9, 2);
          }
          parseTopLevel(file, program) {
            const fileNode = super.parseTopLevel(file, program);
            return this.state.hasFlowComment && this.raise(FlowErrors.UnterminatedFlowComment, { at: this.state.curPosition() }), fileNode;
          }
          skipBlockComment() {
            if (!this.hasPlugin("flowComments") || !this.skipFlowComment()) return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
            {
              if (this.state.hasFlowComment) throw this.raise(FlowErrors.NestedFlowComment, { at: this.state.startLoc });
              this.hasFlowCommentCompletion();
              const commentSkip = this.skipFlowComment();
              commentSkip && (this.state.pos += commentSkip, this.state.hasFlowComment = true);
            }
          }
          skipFlowComment() {
            const { pos } = this.state;
            let shiftToFirstNonWhiteSpace = 2;
            for (; [32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace)); ) shiftToFirstNonWhiteSpace++;
            const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos), ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
            return 58 === ch2 && 58 === ch3 ? shiftToFirstNonWhiteSpace + 2 : "flow-include" === this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) ? shiftToFirstNonWhiteSpace + 12 : 58 === ch2 && 58 !== ch3 && shiftToFirstNonWhiteSpace;
          }
          hasFlowCommentCompletion() {
            if (-1 === this.input.indexOf("*/", this.state.pos)) throw this.raise(Errors.UnterminatedComment, { at: this.state.curPosition() });
          }
          flowEnumErrorBooleanMemberNotInitialized(loc, { enumName, memberName }) {
            this.raise(FlowErrors.EnumBooleanMemberNotInitialized, { at: loc, memberName, enumName });
          }
          flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
            return this.raise(enumContext.explicitType ? "symbol" === enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType : FlowErrors.EnumInvalidMemberInitializerUnknownType, Object.assign({ at: loc }, enumContext));
          }
          flowEnumErrorNumberMemberNotInitialized(loc, { enumName, memberName }) {
            this.raise(FlowErrors.EnumNumberMemberNotInitialized, { at: loc, enumName, memberName });
          }
          flowEnumErrorStringMemberInconsistentlyInitialized(node, { enumName }) {
            this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, { at: node, enumName });
          }
          flowEnumMemberInit() {
            const startLoc = this.state.startLoc, endOfInit = () => this.match(12) || this.match(8);
            switch (this.state.type) {
              case 134: {
                const literal = this.parseNumericLiteral(this.state.value);
                return endOfInit() ? { type: "number", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              case 133: {
                const literal = this.parseStringLiteral(this.state.value);
                return endOfInit() ? { type: "string", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              case 85:
              case 86: {
                const literal = this.parseBooleanLiteral(this.match(85));
                return endOfInit() ? { type: "boolean", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              default:
                return { type: "invalid", loc: startLoc };
            }
          }
          flowEnumMemberRaw() {
            const loc = this.state.startLoc;
            return { id: this.parseIdentifier(true), init: this.eat(29) ? this.flowEnumMemberInit() : { type: "none", loc } };
          }
          flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
            const { explicitType } = context;
            null !== explicitType && explicitType !== expectedType && this.flowEnumErrorInvalidMemberInitializer(loc, context);
          }
          flowEnumMembers({ enumName, explicitType }) {
            const seenNames = /* @__PURE__ */ new Set(), members = { booleanMembers: [], numberMembers: [], stringMembers: [], defaultedMembers: [] };
            let hasUnknownMembers = false;
            for (; !this.match(8); ) {
              if (this.eat(21)) {
                hasUnknownMembers = true;
                break;
              }
              const memberNode = this.startNode(), { id, init } = this.flowEnumMemberRaw(), memberName = id.name;
              if ("" === memberName) continue;
              /^[a-z]/.test(memberName) && this.raise(FlowErrors.EnumInvalidMemberName, { at: id, memberName, suggestion: memberName[0].toUpperCase() + memberName.slice(1), enumName }), seenNames.has(memberName) && this.raise(FlowErrors.EnumDuplicateMemberName, { at: id, memberName, enumName }), seenNames.add(memberName);
              const context = { enumName, explicitType, memberName };
              switch (memberNode.id = id, init.type) {
                case "boolean":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean"), memberNode.init = init.value, members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                  break;
                case "number":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number"), memberNode.init = init.value, members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                  break;
                case "string":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string"), memberNode.init = init.value, members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                  break;
                case "invalid":
                  throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
                case "none":
                  switch (explicitType) {
                    case "boolean":
                      this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                      break;
                    case "number":
                      this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                      break;
                    default:
                      members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                  }
              }
              this.match(8) || this.expect(12);
            }
            return { members, hasUnknownMembers };
          }
          flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName }) {
            if (0 === initializedMembers.length) return defaultedMembers;
            if (0 === defaultedMembers.length) return initializedMembers;
            if (defaultedMembers.length > initializedMembers.length) {
              for (const member of initializedMembers) this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
              return defaultedMembers;
            }
            for (const member of defaultedMembers) this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
            return initializedMembers;
          }
          flowEnumParseExplicitType({ enumName }) {
            if (!this.eatContextual(102)) return null;
            if (!tokenIsIdentifier(this.state.type)) throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, { at: this.state.startLoc, enumName });
            const { value: value2 } = this.state;
            return this.next(), "boolean" !== value2 && "number" !== value2 && "string" !== value2 && "symbol" !== value2 && this.raise(FlowErrors.EnumInvalidExplicitType, { at: this.state.startLoc, enumName, invalidEnumType: value2 }), value2;
          }
          flowEnumBody(node, id) {
            const enumName = id.name, nameLoc = id.loc.start, explicitType = this.flowEnumParseExplicitType({ enumName });
            this.expect(5);
            const { members, hasUnknownMembers } = this.flowEnumMembers({ enumName, explicitType });
            switch (node.hasUnknownMembers = hasUnknownMembers, explicitType) {
              case "boolean":
                return node.explicitType = true, node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
              case "number":
                return node.explicitType = true, node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
              case "string":
                return node.explicitType = true, node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
              case "symbol":
                return node.members = members.defaultedMembers, this.expect(8), this.finishNode(node, "EnumSymbolBody");
              default: {
                const empty = () => (node.members = [], this.expect(8), this.finishNode(node, "EnumStringBody"));
                node.explicitType = false;
                const boolsLen = members.booleanMembers.length, numsLen = members.numberMembers.length, strsLen = members.stringMembers.length, defaultedLen = members.defaultedMembers.length;
                if (boolsLen || numsLen || strsLen || defaultedLen) {
                  if (boolsLen || numsLen) {
                    if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers) this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
                    }
                    if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers) this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
                    }
                    return this.raise(FlowErrors.EnumInconsistentMemberValues, { at: nameLoc, enumName }), empty();
                  }
                  return node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
                }
                return empty();
              }
            }
          }
          flowParseEnumDeclaration(node) {
            const id = this.parseIdentifier();
            return node.id = id, node.body = this.flowEnumBody(this.startNode(), id), this.finishNode(node, "EnumDeclaration");
          }
          isLookaheadToken_lt() {
            const next = this.nextTokenStart();
            if (60 === this.input.charCodeAt(next)) {
              const afterNext = this.input.charCodeAt(next + 1);
              return 60 !== afterNext && 61 !== afterNext;
            }
            return false;
          }
          maybeUnwrapTypeCastExpression(node) {
            return "TypeCastExpression" === node.type ? node.expression : node;
          }
        }, typescript: (superClass) => class extends superClass {
          constructor(...args) {
            super(...args), this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out"], disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter }), this.tsParseConstModifier = this.tsParseModifiers.bind(this, { allowedModifiers: ["const"], disallowedModifiers: ["in", "out"], errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions }), this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out", "const"], disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter });
          }
          getScopeHandler() {
            return TypeScriptScopeHandler;
          }
          tsIsIdentifier() {
            return tokenIsIdentifier(this.state.type);
          }
          tsTokenCanFollowModifier() {
            return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(138) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
          }
          tsNextTokenCanFollowModifier() {
            return this.next(), this.tsTokenCanFollowModifier();
          }
          tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
            if (!tokenIsIdentifier(this.state.type) && 58 !== this.state.type && 75 !== this.state.type) return;
            const modifier = this.state.value;
            if (-1 !== allowedModifiers.indexOf(modifier)) {
              if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) return;
              if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) return modifier;
            }
          }
          tsParseModifiers({ allowedModifiers, disallowedModifiers, stopOnStartOfClassStaticBlock, errorTemplate = TSErrors.InvalidModifierOnTypeMember }, modified) {
            const enforceOrder = (loc, modifier, before, after) => {
              modifier === before && modified[after] && this.raise(TSErrors.InvalidModifiersOrder, { at: loc, orderedModifiers: [before, after] });
            }, incompatible = (loc, modifier, mod1, mod2) => {
              (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) && this.raise(TSErrors.IncompatibleModifiers, { at: loc, modifiers: [mod1, mod2] });
            };
            for (; ; ) {
              const { startLoc } = this.state, modifier = this.tsParseModifier(allowedModifiers.concat(null != disallowedModifiers ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
              if (!modifier) break;
              tsIsAccessModifier(modifier) ? modified.accessibility ? this.raise(TSErrors.DuplicateAccessibilityModifier, { at: startLoc, modifier }) : (enforceOrder(startLoc, modifier, modifier, "override"), enforceOrder(startLoc, modifier, modifier, "static"), enforceOrder(startLoc, modifier, modifier, "readonly"), modified.accessibility = modifier) : tsIsVarianceAnnotations(modifier) ? (modified[modifier] && this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier }), modified[modifier] = true, enforceOrder(startLoc, modifier, "in", "out")) : (Object.hasOwnProperty.call(modified, modifier) ? this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier }) : (enforceOrder(startLoc, modifier, "static", "readonly"), enforceOrder(startLoc, modifier, "static", "override"), enforceOrder(startLoc, modifier, "override", "readonly"), enforceOrder(startLoc, modifier, "abstract", "override"), incompatible(startLoc, modifier, "declare", "override"), incompatible(startLoc, modifier, "static", "abstract")), modified[modifier] = true), null != disallowedModifiers && disallowedModifiers.includes(modifier) && this.raise(errorTemplate, { at: startLoc, modifier });
            }
          }
          tsIsListTerminator(kind) {
            switch (kind) {
              case "EnumMembers":
              case "TypeMembers":
                return this.match(8);
              case "HeritageClauseElement":
                return this.match(5);
              case "TupleElementTypes":
                return this.match(3);
              case "TypeParametersOrArguments":
                return this.match(48);
            }
          }
          tsParseList(kind, parseElement) {
            const result = [];
            for (; !this.tsIsListTerminator(kind); ) result.push(parseElement());
            return result;
          }
          tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
            return function(x) {
              if (null == x) throw new Error(`Unexpected ${x} value.`);
              return x;
            }(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
          }
          tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
            const result = [];
            let trailingCommaPos = -1;
            for (; !this.tsIsListTerminator(kind); ) {
              trailingCommaPos = -1;
              const element = parseElement();
              if (null == element) return;
              if (result.push(element), !this.eat(12)) {
                if (this.tsIsListTerminator(kind)) break;
                return void (expectSuccess && this.expect(12));
              }
              trailingCommaPos = this.state.lastTokStart;
            }
            return refTrailingCommaPos && (refTrailingCommaPos.value = trailingCommaPos), result;
          }
          tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
            skipFirstToken || (bracket ? this.expect(0) : this.expect(47));
            const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
            return bracket ? this.expect(3) : this.expect(48), result;
          }
          tsParseImportType() {
            const node = this.startNode();
            return this.expect(83), this.expect(10), this.match(133) || this.raise(TSErrors.UnsupportedImportTypeArgument, { at: this.state.startLoc }), node.argument = super.parseExprAtom(), this.expect(11), this.eat(16) && (node.qualifier = this.tsParseEntityName()), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSImportType");
          }
          tsParseEntityName(allowReservedWords = true) {
            let entity = this.parseIdentifier(allowReservedWords);
            for (; this.eat(16); ) {
              const node = this.startNodeAtNode(entity);
              node.left = entity, node.right = this.parseIdentifier(allowReservedWords), entity = this.finishNode(node, "TSQualifiedName");
            }
            return entity;
          }
          tsParseTypeReference() {
            const node = this.startNode();
            return node.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeReference");
          }
          tsParseThisTypePredicate(lhs) {
            this.next();
            const node = this.startNodeAtNode(lhs);
            return node.parameterName = lhs, node.typeAnnotation = this.tsParseTypeAnnotation(false), node.asserts = false, this.finishNode(node, "TSTypePredicate");
          }
          tsParseThisTypeNode() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "TSThisType");
          }
          tsParseTypeQuery() {
            const node = this.startNode();
            return this.expect(87), this.match(83) ? node.exprName = this.tsParseImportType() : node.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeQuery");
          }
          tsParseTypeParameter(parseModifiers) {
            const node = this.startNode();
            return parseModifiers(node), node.name = this.tsParseTypeParameterName(), node.constraint = this.tsEatThenParseType(81), node.default = this.tsEatThenParseType(29), this.finishNode(node, "TSTypeParameter");
          }
          tsTryParseTypeParameters(parseModifiers) {
            if (this.match(47)) return this.tsParseTypeParameters(parseModifiers);
          }
          tsParseTypeParameters(parseModifiers) {
            const node = this.startNode();
            this.match(47) || this.match(142) ? this.next() : this.unexpected();
            const refTrailingCommaPos = { value: -1 };
            return node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos), 0 === node.params.length && this.raise(TSErrors.EmptyTypeParameters, { at: node }), -1 !== refTrailingCommaPos.value && this.addExtra(node, "trailingComma", refTrailingCommaPos.value), this.finishNode(node, "TSTypeParameterDeclaration");
          }
          tsFillSignature(returnToken, signature) {
            const returnTokenRequired = 19 === returnToken;
            signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier), this.expect(10), signature.parameters = this.tsParseBindingListForSignature(), (returnTokenRequired || this.match(returnToken)) && (signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken));
          }
          tsParseBindingListForSignature() {
            const list = super.parseBindingList(11, 41, 2);
            for (const pattern of list) {
              const { type } = pattern;
              "AssignmentPattern" !== type && "TSParameterProperty" !== type || this.raise(TSErrors.UnsupportedSignatureParameterKind, { at: pattern, type });
            }
            return list;
          }
          tsParseTypeMemberSemicolon() {
            this.eat(12) || this.isLineTerminator() || this.expect(13);
          }
          tsParseSignatureMember(kind, node) {
            return this.tsFillSignature(14, node), this.tsParseTypeMemberSemicolon(), this.finishNode(node, kind);
          }
          tsIsUnambiguouslyIndexSignature() {
            return this.next(), !!tokenIsIdentifier(this.state.type) && (this.next(), this.match(14));
          }
          tsTryParseIndexSignature(node) {
            if (!this.match(0) || !this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))) return;
            this.expect(0);
            const id = this.parseIdentifier();
            id.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(id), this.expect(3), node.parameters = [id];
            const type = this.tsTryParseTypeAnnotation();
            return type && (node.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(node, "TSIndexSignature");
          }
          tsParsePropertyOrMethodSignature(node, readonly) {
            this.eat(17) && (node.optional = true);
            const nodeAny = node;
            if (this.match(10) || this.match(47)) {
              readonly && this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });
              const method = nodeAny;
              method.kind && this.match(47) && this.raise(TSErrors.AccesorCannotHaveTypeParameters, { at: this.state.curPosition() }), this.tsFillSignature(14, method), this.tsParseTypeMemberSemicolon();
              const paramsKey = "parameters", returnTypeKey = "typeAnnotation";
              if ("get" === method.kind) method[paramsKey].length > 0 && (this.raise(Errors.BadGetterArity, { at: this.state.curPosition() }), this.isThisParam(method[paramsKey][0]) && this.raise(TSErrors.AccesorCannotDeclareThisParameter, { at: this.state.curPosition() }));
              else if ("set" === method.kind) {
                if (1 !== method[paramsKey].length) this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });
                else {
                  const firstParameter = method[paramsKey][0];
                  this.isThisParam(firstParameter) && this.raise(TSErrors.AccesorCannotDeclareThisParameter, { at: this.state.curPosition() }), "Identifier" === firstParameter.type && firstParameter.optional && this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, { at: this.state.curPosition() }), "RestElement" === firstParameter.type && this.raise(TSErrors.SetAccesorCannotHaveRestParameter, { at: this.state.curPosition() });
                }
                method[returnTypeKey] && this.raise(TSErrors.SetAccesorCannotHaveReturnType, { at: method[returnTypeKey] });
              } else method.kind = "method";
              return this.finishNode(method, "TSMethodSignature");
            }
            {
              const property = nodeAny;
              readonly && (property.readonly = true);
              const type = this.tsTryParseTypeAnnotation();
              return type && (property.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(property, "TSPropertySignature");
            }
          }
          tsParseTypeMember() {
            const node = this.startNode();
            if (this.match(10) || this.match(47)) return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
            if (this.match(77)) {
              const id = this.startNode();
              return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", node) : (node.key = this.createIdentifier(id, "new"), this.tsParsePropertyOrMethodSignature(node, false));
            }
            this.tsParseModifiers({ allowedModifiers: ["readonly"], disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"] }, node);
            const idx = this.tsTryParseIndexSignature(node);
            return idx || (super.parsePropertyName(node), node.computed || "Identifier" !== node.key.type || "get" !== node.key.name && "set" !== node.key.name || !this.tsTokenCanFollowModifier() || (node.kind = node.key.name, super.parsePropertyName(node)), this.tsParsePropertyOrMethodSignature(node, !!node.readonly));
          }
          tsParseTypeLiteral() {
            const node = this.startNode();
            return node.members = this.tsParseObjectTypeMembers(), this.finishNode(node, "TSTypeLiteral");
          }
          tsParseObjectTypeMembers() {
            this.expect(5);
            const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
            return this.expect(8), members;
          }
          tsIsStartOfMappedType() {
            return this.next(), this.eat(53) ? this.isContextual(122) : (this.isContextual(122) && this.next(), !!this.match(0) && (this.next(), !!this.tsIsIdentifier() && (this.next(), this.match(58))));
          }
          tsParseMappedTypeParameter() {
            const node = this.startNode();
            return node.name = this.tsParseTypeParameterName(), node.constraint = this.tsExpectThenParseType(58), this.finishNode(node, "TSTypeParameter");
          }
          tsParseMappedType() {
            const node = this.startNode();
            return this.expect(5), this.match(53) ? (node.readonly = this.state.value, this.next(), this.expectContextual(122)) : this.eatContextual(122) && (node.readonly = true), this.expect(0), node.typeParameter = this.tsParseMappedTypeParameter(), node.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (node.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (node.optional = true), node.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(node, "TSMappedType");
          }
          tsParseTupleType() {
            const node = this.startNode();
            node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
            let seenOptionalElement = false;
            return node.elementTypes.forEach((elementNode) => {
              const { type } = elementNode;
              !seenOptionalElement || "TSRestType" === type || "TSOptionalType" === type || "TSNamedTupleMember" === type && elementNode.optional || this.raise(TSErrors.OptionalTypeBeforeRequired, { at: elementNode }), seenOptionalElement || (seenOptionalElement = "TSNamedTupleMember" === type && elementNode.optional || "TSOptionalType" === type);
            }), this.finishNode(node, "TSTupleType");
          }
          tsParseTupleElementType() {
            const { startLoc } = this.state, rest = this.eat(21);
            let labeled, label, optional, type;
            const chAfterWord = tokenIsKeywordOrIdentifier(this.state.type) ? this.lookaheadCharCode() : null;
            if (58 === chAfterWord) labeled = true, optional = false, label = this.parseIdentifier(true), this.expect(14), type = this.tsParseType();
            else if (63 === chAfterWord) {
              optional = true;
              const startLoc2 = this.state.startLoc, wordName = this.state.value, typeOrLabel = this.tsParseNonArrayType();
              58 === this.lookaheadCharCode() ? (labeled = true, label = this.createIdentifier(this.startNodeAt(startLoc2), wordName), this.expect(17), this.expect(14), type = this.tsParseType()) : (labeled = false, type = typeOrLabel, this.expect(17));
            } else type = this.tsParseType(), optional = this.eat(17), labeled = this.eat(14);
            if (labeled) {
              let labeledNode;
              label ? (labeledNode = this.startNodeAtNode(label), labeledNode.optional = optional, labeledNode.label = label, labeledNode.elementType = type, this.eat(17) && (labeledNode.optional = true, this.raise(TSErrors.TupleOptionalAfterType, { at: this.state.lastTokStartLoc }))) : (labeledNode = this.startNodeAtNode(type), labeledNode.optional = optional, this.raise(TSErrors.InvalidTupleMemberLabel, { at: type }), labeledNode.label = type, labeledNode.elementType = this.tsParseType()), type = this.finishNode(labeledNode, "TSNamedTupleMember");
            } else if (optional) {
              const optionalTypeNode = this.startNodeAtNode(type);
              optionalTypeNode.typeAnnotation = type, type = this.finishNode(optionalTypeNode, "TSOptionalType");
            }
            if (rest) {
              const restNode = this.startNodeAt(startLoc);
              restNode.typeAnnotation = type, type = this.finishNode(restNode, "TSRestType");
            }
            return type;
          }
          tsParseParenthesizedType() {
            const node = this.startNode();
            return this.expect(10), node.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(node, "TSParenthesizedType");
          }
          tsParseFunctionOrConstructorType(type, abstract) {
            const node = this.startNode();
            return "TSConstructorType" === type && (node.abstract = !!abstract, abstract && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node)), this.finishNode(node, type);
          }
          tsParseLiteralTypeNode() {
            const node = this.startNode();
            switch (this.state.type) {
              case 134:
              case 135:
              case 133:
              case 85:
              case 86:
                node.literal = super.parseExprAtom();
                break;
              default:
                this.unexpected();
            }
            return this.finishNode(node, "TSLiteralType");
          }
          tsParseTemplateLiteralType() {
            const node = this.startNode();
            return node.literal = super.parseTemplate(false), this.finishNode(node, "TSLiteralType");
          }
          parseTemplateSubstitution() {
            return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
          }
          tsParseThisTypeOrThisTypePredicate() {
            const thisKeyword = this.tsParseThisTypeNode();
            return this.isContextual(116) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(thisKeyword) : thisKeyword;
          }
          tsParseNonArrayType() {
            switch (this.state.type) {
              case 133:
              case 134:
              case 135:
              case 85:
              case 86:
                return this.tsParseLiteralTypeNode();
              case 53:
                if ("-" === this.state.value) {
                  const node = this.startNode(), nextToken = this.lookahead();
                  return 134 !== nextToken.type && 135 !== nextToken.type && this.unexpected(), node.literal = this.parseMaybeUnary(), this.finishNode(node, "TSLiteralType");
                }
                break;
              case 78:
                return this.tsParseThisTypeOrThisTypePredicate();
              case 87:
                return this.tsParseTypeQuery();
              case 83:
                return this.tsParseImportType();
              case 5:
                return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
              case 0:
                return this.tsParseTupleType();
              case 10:
                return this.tsParseParenthesizedType();
              case 25:
              case 24:
                return this.tsParseTemplateLiteralType();
              default: {
                const { type } = this.state;
                if (tokenIsIdentifier(type) || 88 === type || 84 === type) {
                  const nodeType = 88 === type ? "TSVoidKeyword" : 84 === type ? "TSNullKeyword" : function(value2) {
                    switch (value2) {
                      case "any":
                        return "TSAnyKeyword";
                      case "boolean":
                        return "TSBooleanKeyword";
                      case "bigint":
                        return "TSBigIntKeyword";
                      case "never":
                        return "TSNeverKeyword";
                      case "number":
                        return "TSNumberKeyword";
                      case "object":
                        return "TSObjectKeyword";
                      case "string":
                        return "TSStringKeyword";
                      case "symbol":
                        return "TSSymbolKeyword";
                      case "undefined":
                        return "TSUndefinedKeyword";
                      case "unknown":
                        return "TSUnknownKeyword";
                      default:
                        return;
                    }
                  }(this.state.value);
                  if (void 0 !== nodeType && 46 !== this.lookaheadCharCode()) {
                    const node = this.startNode();
                    return this.next(), this.finishNode(node, nodeType);
                  }
                  return this.tsParseTypeReference();
                }
              }
            }
            this.unexpected();
          }
          tsParseArrayTypeOrHigher() {
            let type = this.tsParseNonArrayType();
            for (; !this.hasPrecedingLineBreak() && this.eat(0); ) if (this.match(3)) {
              const node = this.startNodeAtNode(type);
              node.elementType = type, this.expect(3), type = this.finishNode(node, "TSArrayType");
            } else {
              const node = this.startNodeAtNode(type);
              node.objectType = type, node.indexType = this.tsParseType(), this.expect(3), type = this.finishNode(node, "TSIndexedAccessType");
            }
            return type;
          }
          tsParseTypeOperator() {
            const node = this.startNode(), operator = this.state.value;
            return this.next(), node.operator = operator, node.typeAnnotation = this.tsParseTypeOperatorOrHigher(), "readonly" === operator && this.tsCheckTypeAnnotationForReadOnly(node), this.finishNode(node, "TSTypeOperator");
          }
          tsCheckTypeAnnotationForReadOnly(node) {
            switch (node.typeAnnotation.type) {
              case "TSTupleType":
              case "TSArrayType":
                return;
              default:
                this.raise(TSErrors.UnexpectedReadonly, { at: node });
            }
          }
          tsParseInferType() {
            const node = this.startNode();
            this.expectContextual(115);
            const typeParameter = this.startNode();
            return typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter"), this.finishNode(node, "TSInferType");
          }
          tsParseConstraintForInferType() {
            if (this.eat(81)) {
              const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
              if (this.state.inDisallowConditionalTypesContext || !this.match(17)) return constraint;
            }
          }
          tsParseTypeOperatorOrHigher() {
            var token;
            return (token = this.state.type) >= 121 && token <= 123 && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
          }
          tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
            const node = this.startNode(), hasLeadingOperator = this.eat(operator), types2 = [];
            do {
              types2.push(parseConstituentType());
            } while (this.eat(operator));
            return 1 !== types2.length || hasLeadingOperator ? (node.types = types2, this.finishNode(node, kind)) : types2[0];
          }
          tsParseIntersectionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
          }
          tsParseUnionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
          }
          tsIsStartOfFunctionType() {
            return !!this.match(47) || this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
          }
          tsSkipParameterStart() {
            if (tokenIsIdentifier(this.state.type) || this.match(78)) return this.next(), true;
            if (this.match(5)) {
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return this.parseObjectLike(8, true), errors.length === previousErrorCount;
              } catch (_unused) {
                return false;
              }
            }
            if (this.match(0)) {
              this.next();
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return super.parseBindingList(3, 93, 1), errors.length === previousErrorCount;
              } catch (_unused2) {
                return false;
              }
            }
            return false;
          }
          tsIsUnambiguouslyStartOfFunctionType() {
            if (this.next(), this.match(11) || this.match(21)) return true;
            if (this.tsSkipParameterStart()) {
              if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) return true;
              if (this.match(11) && (this.next(), this.match(19))) return true;
            }
            return false;
          }
          tsParseTypeOrTypePredicateAnnotation(returnToken) {
            return this.tsInType(() => {
              const t = this.startNode();
              this.expect(returnToken);
              const node = this.startNode(), asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
              if (asserts && this.match(78)) {
                let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
                return "TSThisType" === thisTypePredicate.type ? (node.parameterName = thisTypePredicate, node.asserts = true, node.typeAnnotation = null, thisTypePredicate = this.finishNode(node, "TSTypePredicate")) : (this.resetStartLocationFromNode(thisTypePredicate, node), thisTypePredicate.asserts = true), t.typeAnnotation = thisTypePredicate, this.finishNode(t, "TSTypeAnnotation");
              }
              const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
              if (!typePredicateVariable) return asserts ? (node.parameterName = this.parseIdentifier(), node.asserts = asserts, node.typeAnnotation = null, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(false, t);
              const type = this.tsParseTypeAnnotation(false);
              return node.parameterName = typePredicateVariable, node.typeAnnotation = type, node.asserts = asserts, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation");
            });
          }
          tsTryParseTypeOrTypePredicateAnnotation() {
            if (this.match(14)) return this.tsParseTypeOrTypePredicateAnnotation(14);
          }
          tsTryParseTypeAnnotation() {
            if (this.match(14)) return this.tsParseTypeAnnotation();
          }
          tsTryParseType() {
            return this.tsEatThenParseType(14);
          }
          tsParseTypePredicatePrefix() {
            const id = this.parseIdentifier();
            if (this.isContextual(116) && !this.hasPrecedingLineBreak()) return this.next(), id;
          }
          tsParseTypePredicateAsserts() {
            if (109 !== this.state.type) return false;
            const containsEsc = this.state.containsEsc;
            return this.next(), !(!tokenIsIdentifier(this.state.type) && !this.match(78)) && (containsEsc && this.raise(Errors.InvalidEscapedReservedWord, { at: this.state.lastTokStartLoc, reservedWord: "asserts" }), true);
          }
          tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
            return this.tsInType(() => {
              eatColon && this.expect(14), t.typeAnnotation = this.tsParseType();
            }), this.finishNode(t, "TSTypeAnnotation");
          }
          tsParseType() {
            assert(this.state.inType);
            const type = this.tsParseNonConditionalType();
            if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) return type;
            const node = this.startNodeAtNode(type);
            return node.checkType = type, node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(17), node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.finishNode(node, "TSConditionalType");
          }
          isAbstractConstructorSignature() {
            return this.isContextual(124) && 77 === this.lookahead().type;
          }
          tsParseNonConditionalType() {
            return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
          }
          tsParseTypeAssertion() {
            this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });
            const node = this.startNode();
            return node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? this.tsParseTypeReference() : this.tsParseType())), this.expect(48), node.expression = this.parseMaybeUnary(), this.finishNode(node, "TSTypeAssertion");
          }
          tsParseHeritageClause(token) {
            const originalStartLoc = this.state.startLoc, delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
              const node = this.startNode();
              return node.expression = this.tsParseEntityName(), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSExpressionWithTypeArguments");
            });
            return delimitedList.length || this.raise(TSErrors.EmptyHeritageClauseType, { at: originalStartLoc, token }), delimitedList;
          }
          tsParseInterfaceDeclaration(node, properties = {}) {
            if (this.hasFollowingLineBreak()) return null;
            this.expectContextual(129), properties.declare && (node.declare = true), tokenIsIdentifier(this.state.type) ? (node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 130)) : (node.id = null, this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc })), node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers), this.eat(81) && (node.extends = this.tsParseHeritageClause("extends"));
            const body = this.startNode();
            return body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), node.body = this.finishNode(body, "TSInterfaceBody"), this.finishNode(node, "TSInterfaceDeclaration");
          }
          tsParseTypeAliasDeclaration(node) {
            return node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 2), node.typeAnnotation = this.tsInType(() => {
              if (node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers), this.expect(29), this.isContextual(114) && 16 !== this.lookahead().type) {
                const node2 = this.startNode();
                return this.next(), this.finishNode(node2, "TSIntrinsicKeyword");
              }
              return this.tsParseType();
            }), this.semicolon(), this.finishNode(node, "TSTypeAliasDeclaration");
          }
          tsInNoContext(cb) {
            const oldContext = this.state.context;
            this.state.context = [oldContext[0]];
            try {
              return cb();
            } finally {
              this.state.context = oldContext;
            }
          }
          tsInType(cb) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            try {
              return cb();
            } finally {
              this.state.inType = oldInType;
            }
          }
          tsInDisallowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = true;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsInAllowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = false;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsEatThenParseType(token) {
            if (this.match(token)) return this.tsNextThenParseType();
          }
          tsExpectThenParseType(token) {
            return this.tsInType(() => (this.expect(token), this.tsParseType()));
          }
          tsNextThenParseType() {
            return this.tsInType(() => (this.next(), this.tsParseType()));
          }
          tsParseEnumMember() {
            const node = this.startNode();
            return node.id = this.match(133) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true), this.eat(29) && (node.initializer = super.parseMaybeAssignAllowIn()), this.finishNode(node, "TSEnumMember");
          }
          tsParseEnumDeclaration(node, properties = {}) {
            return properties.const && (node.const = true), properties.declare && (node.declare = true), this.expectContextual(126), node.id = this.parseIdentifier(), this.checkIdentifier(node.id, node.const ? 8971 : 8459), this.expect(5), node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(node, "TSEnumDeclaration");
          }
          tsParseModuleBlock() {
            const node = this.startNode();
            return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8), this.scope.exit(), this.finishNode(node, "TSModuleBlock");
          }
          tsParseModuleOrNamespaceDeclaration(node, nested = false) {
            if (node.id = this.parseIdentifier(), nested || this.checkIdentifier(node.id, 1024), this.eat(16)) {
              const inner = this.startNode();
              this.tsParseModuleOrNamespaceDeclaration(inner, true), node.body = inner;
            } else this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
            return this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseAmbientExternalModuleDeclaration(node) {
            return this.isContextual(112) ? (node.global = true, node.id = this.parseIdentifier()) : this.match(133) ? node.id = super.parseStringLiteral(this.state.value) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
            node.isExport = isExport || false, node.id = maybeDefaultIdentifier || this.parseIdentifier(), this.checkIdentifier(node.id, 4096), this.expect(29);
            const moduleReference = this.tsParseModuleReference();
            return "type" === node.importKind && "TSExternalModuleReference" !== moduleReference.type && this.raise(TSErrors.ImportAliasHasImportType, { at: moduleReference }), node.moduleReference = moduleReference, this.semicolon(), this.finishNode(node, "TSImportEqualsDeclaration");
          }
          tsIsExternalModuleReference() {
            return this.isContextual(119) && 40 === this.lookaheadCharCode();
          }
          tsParseModuleReference() {
            return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
          }
          tsParseExternalModuleReference() {
            const node = this.startNode();
            return this.expectContextual(119), this.expect(10), this.match(133) || this.unexpected(), node.expression = super.parseExprAtom(), this.expect(11), this.sawUnambiguousESM = true, this.finishNode(node, "TSExternalModuleReference");
          }
          tsLookAhead(f) {
            const state = this.state.clone(), res = f();
            return this.state = state, res;
          }
          tsTryParseAndCatch(f) {
            const result = this.tryParse((abort) => f() || abort());
            if (!result.aborted && result.node) return result.error && (this.state = result.failState), result.node;
          }
          tsTryParse(f) {
            const state = this.state.clone(), result = f();
            if (void 0 !== result && false !== result) return result;
            this.state = state;
          }
          tsTryParseDeclare(nany) {
            if (this.isLineTerminator()) return;
            let kind, startType = this.state.type;
            return this.isContextual(100) && (startType = 74, kind = "let"), this.tsInAmbientContext(() => {
              switch (startType) {
                case 68:
                  return nany.declare = true, super.parseFunctionStatement(nany, false, false);
                case 80:
                  return nany.declare = true, this.parseClass(nany, true, false);
                case 126:
                  return this.tsParseEnumDeclaration(nany, { declare: true });
                case 112:
                  return this.tsParseAmbientExternalModuleDeclaration(nany);
                case 75:
                case 74:
                  return this.match(75) && this.isLookaheadContextual("enum") ? (this.expect(75), this.tsParseEnumDeclaration(nany, { const: true, declare: true })) : (nany.declare = true, this.parseVarStatement(nany, kind || this.state.value, true));
                case 129: {
                  const result = this.tsParseInterfaceDeclaration(nany, { declare: true });
                  if (result) return result;
                }
                default:
                  if (tokenIsIdentifier(startType)) return this.tsParseDeclaration(nany, this.state.value, true, null);
              }
            });
          }
          tsTryParseExportDeclaration() {
            return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
          }
          tsParseExpressionStatement(node, expr, decorators) {
            switch (expr.name) {
              case "declare": {
                const declaration = this.tsTryParseDeclare(node);
                return declaration && (declaration.declare = true), declaration;
              }
              case "global":
                if (this.match(5)) {
                  this.scope.enter(256), this.prodParam.enter(0);
                  const mod = node;
                  return mod.global = true, mod.id = expr, mod.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(mod, "TSModuleDeclaration");
                }
                break;
              default:
                return this.tsParseDeclaration(node, expr.name, false, decorators);
            }
          }
          tsParseDeclaration(node, value2, next, decorators) {
            switch (value2) {
              case "abstract":
                if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) return this.tsParseAbstractDeclaration(node, decorators);
                break;
              case "module":
                if (this.tsCheckLineTerminator(next)) {
                  if (this.match(133)) return this.tsParseAmbientExternalModuleDeclaration(node);
                  if (tokenIsIdentifier(this.state.type)) return this.tsParseModuleOrNamespaceDeclaration(node);
                }
                break;
              case "namespace":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) return this.tsParseModuleOrNamespaceDeclaration(node);
                break;
              case "type":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) return this.tsParseTypeAliasDeclaration(node);
            }
          }
          tsCheckLineTerminator(next) {
            return next ? !this.hasFollowingLineBreak() && (this.next(), true) : !this.isLineTerminator();
          }
          tsTryParseGenericAsyncArrowFunction(startLoc) {
            if (!this.match(47)) return;
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            this.state.maybeInArrowParameters = true;
            const res = this.tsTryParseAndCatch(() => {
              const node = this.startNodeAt(startLoc);
              return node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier), super.parseFunctionParams(node), node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(19), node;
            });
            return this.state.maybeInArrowParameters = oldMaybeInArrowParameters, res ? super.parseArrowExpression(res, null, true) : void 0;
          }
          tsParseTypeArgumentsInExpression() {
            if (47 === this.reScan_lt()) return this.tsParseTypeArguments();
          }
          tsParseTypeArguments() {
            const node = this.startNode();
            return node.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), 0 === node.params.length ? this.raise(TSErrors.EmptyTypeArguments, { at: node }) : this.state.inType || this.curContext() !== types.brace || this.reScan_lt_gt(), this.expect(48), this.finishNode(node, "TSTypeParameterInstantiation");
          }
          tsIsDeclarationStart() {
            return (token = this.state.type) >= 124 && token <= 130;
            var token;
          }
          isExportDefaultSpecifier() {
            return !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier();
          }
          parseAssignableListItem(flags, decorators) {
            const startLoc = this.state.startLoc, modified = {};
            this.tsParseModifiers({ allowedModifiers: ["public", "private", "protected", "override", "readonly"] }, modified);
            const accessibility = modified.accessibility, override = modified.override, readonly = modified.readonly;
            4 & flags || !(accessibility || readonly || override) || this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });
            const left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left, flags);
            const elt = this.parseMaybeDefault(left.loc.start, left);
            if (accessibility || readonly || override) {
              const pp = this.startNodeAt(startLoc);
              return decorators.length && (pp.decorators = decorators), accessibility && (pp.accessibility = accessibility), readonly && (pp.readonly = readonly), override && (pp.override = override), "Identifier" !== elt.type && "AssignmentPattern" !== elt.type && this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp }), pp.parameter = elt, this.finishNode(pp, "TSParameterProperty");
            }
            return decorators.length && (left.decorators = decorators), elt;
          }
          isSimpleParameter(node) {
            return "TSParameterProperty" === node.type && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
          }
          tsDisallowOptionalPattern(node) {
            for (const param of node.params) "Identifier" !== param.type && param.optional && !this.state.isAmbientContext && this.raise(TSErrors.PatternIsOptional, { at: param });
          }
          setArrowFunctionParameters(node, params, trailingCommaLoc) {
            super.setArrowFunctionParameters(node, params, trailingCommaLoc), this.tsDisallowOptionalPattern(node);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            this.match(14) && (node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
            const bodilessType = "FunctionDeclaration" === type ? "TSDeclareFunction" : "ClassMethod" === type || "ClassPrivateMethod" === type ? "TSDeclareMethod" : void 0;
            return bodilessType && !this.match(5) && this.isLineTerminator() ? this.finishNode(node, bodilessType) : "TSDeclareFunction" === bodilessType && this.state.isAmbientContext && (this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node }), node.declare) ? super.parseFunctionBodyAndFinish(node, bodilessType, isMethod) : (this.tsDisallowOptionalPattern(node), super.parseFunctionBodyAndFinish(node, type, isMethod));
          }
          registerFunctionStatementId(node) {
            !node.body && node.id ? this.checkIdentifier(node.id, 1024) : super.registerFunctionStatementId(node);
          }
          tsCheckForInvalidTypeCasts(items) {
            items.forEach((node) => {
              "TSTypeCastExpression" === (null == node ? void 0 : node.type) && this.raise(TSErrors.UnexpectedTypeAnnotation, { at: node.typeAnnotation });
            });
          }
          toReferencedList(exprList, isInParens) {
            return this.tsCheckForInvalidTypeCasts(exprList), exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return "ArrayExpression" === node.type && this.tsCheckForInvalidTypeCasts(node.elements), node;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            if (!this.hasPrecedingLineBreak() && this.match(35)) {
              this.state.canStartJSXElement = false, this.next();
              const nonNullExpression = this.startNodeAt(startLoc);
              return nonNullExpression.expression = base, this.finishNode(nonNullExpression, "TSNonNullExpression");
            }
            let isOptionalCall = false;
            if (this.match(18) && 60 === this.lookaheadCharCode()) {
              if (noCalls) return state.stop = true, base;
              state.optionalChainMember = isOptionalCall = true, this.next();
            }
            if (this.match(47) || this.match(51)) {
              let missingParenErrorLoc;
              const result = this.tsTryParseAndCatch(() => {
                if (!noCalls && this.atPossibleAsyncArrow(base)) {
                  const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
                  if (asyncArrowFn) return asyncArrowFn;
                }
                const typeArguments = this.tsParseTypeArgumentsInExpression();
                if (!typeArguments) return;
                if (isOptionalCall && !this.match(10)) return void (missingParenErrorLoc = this.state.curPosition());
                if (tokenIsTemplate(this.state.type)) {
                  const result2 = super.parseTaggedTemplateExpression(base, startLoc, state);
                  return result2.typeParameters = typeArguments, result2;
                }
                if (!noCalls && this.eat(10)) {
                  const node2 = this.startNodeAt(startLoc);
                  return node2.callee = base, node2.arguments = this.parseCallExpressionArguments(11, false), this.tsCheckForInvalidTypeCasts(node2.arguments), node2.typeParameters = typeArguments, state.optionalChainMember && (node2.optional = isOptionalCall), this.finishCallExpression(node2, state.optionalChainMember);
                }
                const tokenType = this.state.type;
                if (48 === tokenType || 52 === tokenType || 10 !== tokenType && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) return;
                const node = this.startNodeAt(startLoc);
                return node.expression = base, node.typeParameters = typeArguments, this.finishNode(node, "TSInstantiationExpression");
              });
              if (missingParenErrorLoc && this.unexpected(missingParenErrorLoc, 10), result) return "TSInstantiationExpression" === result.type && (this.match(16) || this.match(18) && 40 !== this.lookaheadCharCode()) && this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, { at: this.state.startLoc }), result;
            }
            return super.parseSubscript(base, startLoc, noCalls, state);
          }
          parseNewCallee(node) {
            var _callee$extra;
            super.parseNewCallee(node);
            const { callee } = node;
            "TSInstantiationExpression" !== callee.type || null != (_callee$extra = callee.extra) && _callee$extra.parenthesized || (node.typeParameters = callee.typeParameters, node.callee = callee.expression);
          }
          parseExprOp(left, leftStartLoc, minPrec) {
            let isSatisfies;
            if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
              const node = this.startNodeAt(leftStartLoc);
              return node.expression = left, node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? (isSatisfies && this.raise(Errors.UnexpectedKeyword, { at: this.state.startLoc, keyword: "const" }), this.tsParseTypeReference()) : this.tsParseType())), this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(node, leftStartLoc, minPrec);
            }
            return super.parseExprOp(left, leftStartLoc, minPrec);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            this.state.isAmbientContext || super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          checkImportReflection(node) {
            super.checkImportReflection(node), node.module && "value" !== node.importKind && this.raise(TSErrors.ImportReflectionHasImportType, { at: node.specifiers[0].loc.start });
          }
          checkDuplicateExports() {
          }
          isPotentialImportPhase(isExport) {
            if (super.isPotentialImportPhase(isExport)) return true;
            if (this.isContextual(130)) {
              const ch = this.lookaheadCharCode();
              return isExport ? 123 === ch || 42 === ch : 61 !== ch;
            }
            return !isExport && this.isContextual(87);
          }
          applyImportPhase(node, isExport, phase, loc) {
            super.applyImportPhase(node, isExport, phase, loc), isExport ? node.exportKind = "type" === phase ? "type" : "value" : node.importKind = "type" === phase || "typeof" === phase ? phase : "value";
          }
          parseImport(node) {
            if (this.match(133)) return node.importKind = "value", super.parseImport(node);
            let importNode;
            if (tokenIsIdentifier(this.state.type) && 61 === this.lookaheadCharCode()) return node.importKind = "value", this.tsParseImportEqualsDeclaration(node);
            if (this.isContextual(130)) {
              const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
              if (61 === this.lookaheadCharCode()) return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
              importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
            } else importNode = super.parseImport(node);
            return "type" === importNode.importKind && importNode.specifiers.length > 1 && "ImportDefaultSpecifier" === importNode.specifiers[0].type && this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, { at: importNode }), importNode;
          }
          parseExport(node, decorators) {
            if (this.match(83)) {
              this.next();
              let maybeDefaultIdentifier = null;
              return this.isContextual(130) && this.isPotentialImportPhase(false) ? maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false) : node.importKind = "value", this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, true);
            }
            if (this.eat(29)) {
              const assign = node;
              return assign.expression = super.parseExpression(), this.semicolon(), this.sawUnambiguousESM = true, this.finishNode(assign, "TSExportAssignment");
            }
            if (this.eatContextual(93)) {
              const decl = node;
              return this.expectContextual(128), decl.id = this.parseIdentifier(), this.semicolon(), this.finishNode(decl, "TSNamespaceExportDeclaration");
            }
            return super.parseExport(node, decorators);
          }
          isAbstractClass() {
            return this.isContextual(124) && 80 === this.lookahead().type;
          }
          parseExportDefaultExpression() {
            if (this.isAbstractClass()) {
              const cls = this.startNode();
              return this.next(), cls.abstract = true, this.parseClass(cls, true, true);
            }
            if (this.match(129)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result) return result;
            }
            return super.parseExportDefaultExpression();
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            const { isAmbientContext } = this.state, declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
            if (!isAmbientContext) return declaration;
            for (const { id, init } of declaration.declarations) init && ("const" !== kind || id.typeAnnotation ? this.raise(TSErrors.InitializerNotAllowedInAmbientContext, { at: init }) : isValidAmbientConstInitializer(init, this.hasPlugin("estree")) || this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, { at: init }));
            return declaration;
          }
          parseStatementContent(flags, decorators) {
            if (this.match(75) && this.isLookaheadContextual("enum")) {
              const node = this.startNode();
              return this.expect(75), this.tsParseEnumDeclaration(node, { const: true });
            }
            if (this.isContextual(126)) return this.tsParseEnumDeclaration(this.startNode());
            if (this.isContextual(129)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result) return result;
            }
            return super.parseStatementContent(flags, decorators);
          }
          parseAccessModifier() {
            return this.tsParseModifier(["public", "protected", "private"]);
          }
          tsHasSomeModifiers(member, modifiers) {
            return modifiers.some((modifier) => tsIsAccessModifier(modifier) ? member.accessibility === modifier : !!member[modifier]);
          }
          tsIsStartOfStaticBlocks() {
            return this.isContextual(106) && 123 === this.lookaheadCharCode();
          }
          parseClassMember(classBody, member, state) {
            const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
            this.tsParseModifiers({ allowedModifiers: modifiers, disallowedModifiers: ["in", "out"], stopOnStartOfClassStaticBlock: true, errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions }, member);
            const callParseClassMemberWithIsStatic = () => {
              this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(member, modifiers) && this.raise(TSErrors.StaticBlockCannotHaveModifier, { at: this.state.curPosition() }), super.parseClassStaticBlock(classBody, member)) : this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
            };
            member.declare ? this.tsInAmbientContext(callParseClassMemberWithIsStatic) : callParseClassMemberWithIsStatic();
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const idx = this.tsTryParseIndexSignature(member);
            if (idx) return classBody.body.push(idx), member.abstract && this.raise(TSErrors.IndexSignatureHasAbstract, { at: member }), member.accessibility && this.raise(TSErrors.IndexSignatureHasAccessibility, { at: member, modifier: member.accessibility }), member.declare && this.raise(TSErrors.IndexSignatureHasDeclare, { at: member }), void (member.override && this.raise(TSErrors.IndexSignatureHasOverride, { at: member }));
            !this.state.inAbstractClass && member.abstract && this.raise(TSErrors.NonAbstractClassHasAbstractMethod, { at: member }), member.override && (state.hadSuperClass || this.raise(TSErrors.OverrideNotInSubClass, { at: member })), super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parsePostMemberNameModifiers(methodOrProp) {
            this.eat(17) && (methodOrProp.optional = true), methodOrProp.readonly && this.match(10) && this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp }), methodOrProp.declare && this.match(10) && this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });
          }
          parseExpressionStatement(node, expr, decorators) {
            return ("Identifier" === expr.type ? this.tsParseExpressionStatement(node, expr, decorators) : void 0) || super.parseExpressionStatement(node, expr, decorators);
          }
          shouldParseExportDeclaration() {
            return !!this.tsIsDeclarationStart() || super.shouldParseExportDeclaration();
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (!this.state.maybeInArrowParameters || !this.match(17)) return super.parseConditional(expr, startLoc, refExpressionErrors);
            const result = this.tryParse(() => super.parseConditional(expr, startLoc));
            return result.node ? (result.error && (this.state = result.failState), result.node) : (result.error && super.setOptionalParametersError(refExpressionErrors, result.error), expr);
          }
          parseParenItem(node, startLoc) {
            if (node = super.parseParenItem(node, startLoc), this.eat(17) && (node.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startLoc);
              return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(typeCastNode, "TSTypeCastExpression");
            }
            return node;
          }
          parseExportDeclaration(node) {
            if (!this.state.isAmbientContext && this.isContextual(125)) return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
            const startLoc = this.state.startLoc, isDeclare = this.eatContextual(125);
            if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, { at: this.state.startLoc });
            const declaration = tokenIsIdentifier(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
            return declaration ? (("TSInterfaceDeclaration" === declaration.type || "TSTypeAliasDeclaration" === declaration.type || isDeclare) && (node.exportKind = "type"), isDeclare && (this.resetStartLocation(declaration, startLoc), declaration.declare = true), declaration) : null;
          }
          parseClassId(node, isStatement, optionalId, bindingType) {
            if ((!isStatement || optionalId) && this.isContextual(113)) return;
            super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
            typeParameters && (node.typeParameters = typeParameters);
          }
          parseClassPropertyAnnotation(node) {
            node.optional || (this.eat(35) ? node.definite = true : this.eat(17) && (node.optional = true));
            const type = this.tsTryParseTypeAnnotation();
            type && (node.typeAnnotation = type);
          }
          parseClassProperty(node) {
            if (this.parseClassPropertyAnnotation(node), this.state.isAmbientContext && (!node.readonly || node.typeAnnotation) && this.match(29) && this.raise(TSErrors.DeclareClassFieldHasInitializer, { at: this.state.startLoc }), node.abstract && this.match(29)) {
              const { key } = node;
              this.raise(TSErrors.AbstractPropertyHasInitializer, { at: this.state.startLoc, propertyName: "Identifier" !== key.type || node.computed ? `[${this.input.slice(key.start, key.end)}]` : key.name });
            }
            return super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return node.abstract && this.raise(TSErrors.PrivateElementHasAbstract, { at: node }), node.accessibility && this.raise(TSErrors.PrivateElementHasAccessibility, { at: node, modifier: node.accessibility }), this.parseClassPropertyAnnotation(node), super.parseClassPrivateProperty(node);
          }
          parseClassAccessorProperty(node) {
            return this.parseClassPropertyAnnotation(node), node.optional && this.raise(TSErrors.AccessorCannotBeOptional, { at: node }), super.parseClassAccessorProperty(node);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && isConstructor && this.raise(TSErrors.ConstructorHasTypeParameters, { at: typeParameters });
            const { declare = false, kind } = method;
            !declare || "get" !== kind && "set" !== kind || this.raise(TSErrors.DeclareAccessor, { at: method, kind }), typeParameters && (method.typeParameters = typeParameters), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && (method.typeParameters = typeParameters), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
          }
          declareClassPrivateMethodInScope(node, kind) {
            "TSDeclareMethod" !== node.type && ("MethodDefinition" !== node.type || node.value.body) && super.declareClassPrivateMethodInScope(node, kind);
          }
          parseClassSuper(node) {
            super.parseClassSuper(node), node.superClass && (this.match(47) || this.match(51)) && (node.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(113) && (node.implements = this.tsParseHeritageClause("implements"));
          }
          parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            return typeParameters && (prop.typeParameters = typeParameters), super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
          }
          parseFunctionParams(node, isConstructor) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && (node.typeParameters = typeParameters), super.parseFunctionParams(node, isConstructor);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), "Identifier" === decl.id.type && !this.hasPrecedingLineBreak() && this.eat(35) && (decl.definite = true);
            const type = this.tsTryParseTypeAnnotation();
            type && (decl.id.typeAnnotation = type, this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            return this.match(14) && (node.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(node, call);
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
            let state, jsx, typeCast, typeParameters;
            if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error) return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types.j_oTag && currentContext !== types.j_expr || context.pop();
            }
            if (!(null != (_jsx = jsx) && _jsx.error || this.match(47))) return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            state && state !== this.state || (state = this.state.clone());
            const arrow = this.tryParse((abort) => {
              var _expr$extra, _typeParameters;
              typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
              const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
              return ("ArrowFunctionExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) && abort(), 0 !== (null == (_typeParameters = typeParameters) ? void 0 : _typeParameters.params.length) && this.resetStartLocationFromNode(expr, typeParameters), expr.typeParameters = typeParameters, expr;
            }, state);
            if (!arrow.error && !arrow.aborted) return typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (!jsx && (assert(!this.hasPlugin("jsx")), typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !typeCast.error)) return typeCast.node;
            if (null != (_jsx2 = jsx) && _jsx2.node) return this.state = jsx.failState, jsx.node;
            if (arrow.node) return this.state = arrow.failState, typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (null != (_typeCast = typeCast) && _typeCast.node) return this.state = typeCast.failState, typeCast.node;
            throw (null == (_jsx3 = jsx) ? void 0 : _jsx3.error) || arrow.error || (null == (_typeCast2 = typeCast) ? void 0 : _typeCast2.error);
          }
          reportReservedArrowTypeParam(node) {
            var _node$extra;
            1 !== node.params.length || node.params[0].constraint || null != (_node$extra = node.extra) && _node$extra.trailingComma || !this.getPluginOption("typescript", "disallowAmbiguousJSXLike") || this.raise(TSErrors.ReservedArrowTypeParam, { at: node });
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(refExpressionErrors, sawUnary);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse((abort) => {
                const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
                return !this.canInsertSemicolon() && this.match(19) || abort(), returnType;
              });
              if (result.aborted) return;
              result.thrown || (result.error && (this.state = result.failState), node.returnType = result.node);
            }
            return super.parseArrow(node);
          }
          parseAssignableListItemTypes(param, flags) {
            if (!(2 & flags)) return param;
            this.eat(17) && (param.optional = true);
            const type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type), this.resetEndLocation(param), param;
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "TSTypeCastExpression":
                return this.isAssignable(node.expression, isBinding);
              case "TSParameterProperty":
                return true;
              default:
                return super.isAssignable(node, isBinding);
            }
          }
          toAssignable(node, isLHS = false) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.toAssignableParenthesizedExpression(node, isLHS);
                break;
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
                isLHS ? this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, { at: node }) : this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node }), this.toAssignable(node.expression, isLHS);
                break;
              case "AssignmentExpression":
                isLHS || "TSTypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left));
              default:
                super.toAssignable(node, isLHS);
            }
          }
          toAssignableParenthesizedExpression(node, isLHS) {
            switch (node.expression.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isLHS);
                break;
              default:
                super.toAssignable(node, isLHS);
            }
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSTypeAssertion":
              case "TSNonNullExpression":
                this.checkToRestConversion(node.expression, false);
                break;
              default:
                super.checkToRestConversion(node, allowPattern);
            }
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return object = { TSTypeCastExpression: true, TSParameterProperty: "parameter", TSNonNullExpression: "expression", TSAsExpression: (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true], TSSatisfiesExpression: (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true], TSTypeAssertion: (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true] }, key = type, Object.hasOwnProperty.call(object, key) && object[key] || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
            var object, key;
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsParseTypeArgumentsInExpression();
              if (this.match(10)) {
                const call = super.parseMaybeDecoratorArguments(expr);
                return call.typeParameters = typeArguments, call;
              }
              this.unexpected(null, 10);
            }
            return super.parseMaybeDecoratorArguments(expr);
          }
          checkCommaAfterRest(close) {
            return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close ? (this.next(), false) : super.checkCommaAfterRest(close);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(35) || this.match(14) || super.isClassProperty();
          }
          parseMaybeDefault(startLoc, left) {
            const node = super.parseMaybeDefault(startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(TSErrors.TypeAnnotationAfterAssign, { at: node.typeAnnotation }), node;
          }
          getTokenFromCode(code2) {
            if (this.state.inType) {
              if (62 === code2) return void this.finishOp(48, 1);
              if (60 === code2) return void this.finishOp(47, 1);
            }
            super.getTokenFromCode(code2);
          }
          reScan_lt_gt() {
            const { type } = this.state;
            47 === type ? (this.state.pos -= 1, this.readToken_lt()) : 48 === type && (this.state.pos -= 1, this.readToken_gt());
          }
          reScan_lt() {
            const { type } = this.state;
            return 51 === type ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : type;
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i = 0; i < exprList.length; i++) {
              const expr = exprList[i];
              "TSTypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          shouldParseArrow(params) {
            return this.match(14) ? params.every((expr) => this.isAssignable(expr, true)) : super.shouldParseArrow(params);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          canHaveLeadingDecorator() {
            return super.canHaveLeadingDecorator() || this.isAbstractClass();
          }
          jsxParseOpeningElementAfterName(node) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
              typeArguments && (node.typeParameters = typeArguments);
            }
            return super.jsxParseOpeningElementAfterName(node);
          }
          getGetterSetterExpectedParamCount(method) {
            const baseCount = super.getGetterSetterExpectedParamCount(method), firstParam = this.getObjectOrClassMethodParams(method)[0];
            return firstParam && this.isThisParam(firstParam) ? baseCount + 1 : baseCount;
          }
          parseCatchClauseParam() {
            const param = super.parseCatchClauseParam(), type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type, this.resetEndLocation(param)), param;
          }
          tsInAmbientContext(cb) {
            const oldIsAmbientContext = this.state.isAmbientContext;
            this.state.isAmbientContext = true;
            try {
              return cb();
            } finally {
              this.state.isAmbientContext = oldIsAmbientContext;
            }
          }
          parseClass(node, isStatement, optionalId) {
            const oldInAbstractClass = this.state.inAbstractClass;
            this.state.inAbstractClass = !!node.abstract;
            try {
              return super.parseClass(node, isStatement, optionalId);
            } finally {
              this.state.inAbstractClass = oldInAbstractClass;
            }
          }
          tsParseAbstractDeclaration(node, decorators) {
            if (this.match(80)) return node.abstract = true, this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
            if (this.isContextual(129)) {
              if (!this.hasFollowingLineBreak()) return node.abstract = true, this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, { at: node }), this.tsParseInterfaceDeclaration(node);
            } else this.unexpected(null, 80);
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
            const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
            if (method.abstract) {
              if (this.hasPlugin("estree") ? !!method.value.body : !!method.body) {
                const { key } = method;
                this.raise(TSErrors.AbstractMethodHasImplementation, { at: method, methodName: "Identifier" !== key.type || method.computed ? `[${this.input.slice(key.start, key.end)}]` : key.name });
              }
            }
            return method;
          }
          tsParseTypeParameterName() {
            return this.parseIdentifier().name;
          }
          shouldParseAsAmbientContext() {
            return !!this.getPluginOption("typescript", "dts");
          }
          parse() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.parse();
          }
          getExpression() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.getExpression();
          }
          parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
            return !isString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport), this.finishNode(node, "ExportSpecifier")) : (node.exportKind = "value", super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            return !importedIsString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport), this.finishNode(specifier, "ImportSpecifier")) : (specifier.importKind = "value", super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096));
          }
          parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
            const leftOfAsKey = isImport ? "imported" : "local", rightOfAsKey = isImport ? "local" : "exported";
            let rightOfAs, leftOfAs = node[leftOfAsKey], hasTypeSpecifier = false, canParseAsKeyword = true;
            const loc = leftOfAs.loc.start;
            if (this.isContextual(93)) {
              const firstAs = this.parseIdentifier();
              if (this.isContextual(93)) {
                const secondAs = this.parseIdentifier();
                tokenIsKeywordOrIdentifier(this.state.type) ? (hasTypeSpecifier = true, leftOfAs = firstAs, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName(), canParseAsKeyword = false) : (rightOfAs = secondAs, canParseAsKeyword = false);
              } else tokenIsKeywordOrIdentifier(this.state.type) ? (canParseAsKeyword = false, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName()) : (hasTypeSpecifier = true, leftOfAs = firstAs);
            } else tokenIsKeywordOrIdentifier(this.state.type) && (hasTypeSpecifier = true, isImport ? (leftOfAs = this.parseIdentifier(true), this.isContextual(93) || this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true)) : leftOfAs = this.parseModuleExportName());
            hasTypeSpecifier && isInTypeOnlyImportExport && this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, { at: loc }), node[leftOfAsKey] = leftOfAs, node[rightOfAsKey] = rightOfAs;
            node[isImport ? "importKind" : "exportKind"] = hasTypeSpecifier ? "type" : "value", canParseAsKeyword && this.eatContextual(93) && (node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName()), node[rightOfAsKey] || (node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey])), isImport && this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
          }
        }, v8intrinsic: (superClass) => class extends superClass {
          parseV8Intrinsic() {
            if (this.match(54)) {
              const v8IntrinsicStartLoc = this.state.startLoc, node = this.startNode();
              if (this.next(), tokenIsIdentifier(this.state.type)) {
                const name = this.parseIdentifierName(), identifier = this.createIdentifier(node, name);
                if (identifier.type = "V8IntrinsicIdentifier", this.match(10)) return identifier;
              }
              this.unexpected(v8IntrinsicStartLoc);
            }
          }
          parseExprAtom(refExpressionErrors) {
            return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
          }
        }, placeholders: (superClass) => class extends superClass {
          parsePlaceholder(expectedNode) {
            if (this.match(144)) {
              const node = this.startNode();
              return this.next(), this.assertNoSpace(), node.name = super.parseIdentifier(true), this.assertNoSpace(), this.expect(144), this.finishPlaceholder(node, expectedNode);
            }
          }
          finishPlaceholder(node, expectedNode) {
            const isFinished = !(!node.expectedNode || "Placeholder" !== node.type);
            return node.expectedNode = expectedNode, isFinished ? node : this.finishNode(node, "Placeholder");
          }
          getTokenFromCode(code2) {
            37 === code2 && 37 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(144, 2) : super.getTokenFromCode(code2);
          }
          parseExprAtom(refExpressionErrors) {
            return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
          }
          parseIdentifier(liberal) {
            return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            void 0 !== word && super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          parseBindingAtom() {
            return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
          }
          isValidLVal(type, isParenthesized, binding) {
            return "Placeholder" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          toAssignable(node, isLHS) {
            node && "Placeholder" === node.type && "Expression" === node.expectedNode ? node.expectedNode = "Pattern" : super.toAssignable(node, isLHS);
          }
          chStartsBindingIdentifier(ch, pos) {
            if (super.chStartsBindingIdentifier(ch, pos)) return true;
            return 144 === this.lookahead().type;
          }
          verifyBreakContinue(node, isBreak) {
            node.label && "Placeholder" === node.label.type || super.verifyBreakContinue(node, isBreak);
          }
          parseExpressionStatement(node, expr) {
            var _expr$extra;
            if ("Placeholder" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) return super.parseExpressionStatement(node, expr);
            if (this.match(14)) {
              const stmt = node;
              return stmt.label = this.finishPlaceholder(expr, "Identifier"), this.next(), stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration(), this.finishNode(stmt, "LabeledStatement");
            }
            return this.semicolon(), node.name = expr.name, this.finishPlaceholder(node, "Statement");
          }
          parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
            return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
          }
          parseFunctionId(requireId) {
            return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
          }
          parseClass(node, isStatement, optionalId) {
            const type = isStatement ? "ClassDeclaration" : "ClassExpression";
            this.next();
            const oldStrict = this.state.strict, placeholder = this.parsePlaceholder("Identifier");
            if (placeholder) {
              if (!(this.match(81) || this.match(144) || this.match(5))) {
                if (optionalId || !isStatement) return node.id = null, node.body = this.finishPlaceholder(placeholder, "ClassBody"), this.finishNode(node, type);
                throw this.raise(PlaceholderErrors.ClassNameIsRequired, { at: this.state.startLoc });
              }
              node.id = placeholder;
            } else this.parseClassId(node, isStatement, optionalId);
            return super.parseClassSuper(node), node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, type);
          }
          parseExport(node, decorators) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder) return super.parseExport(node, decorators);
            if (!this.isContextual(98) && !this.match(12)) return node.specifiers = [], node.source = null, node.declaration = this.finishPlaceholder(placeholder, "Declaration"), this.finishNode(node, "ExportNamedDeclaration");
            this.expectPlugin("exportDefaultFrom");
            const specifier = this.startNode();
            return specifier.exported = placeholder, node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], super.parseExport(node, decorators);
          }
          isExportDefaultSpecifier() {
            if (this.match(65)) {
              const next = this.nextTokenStart();
              if (this.isUnparsedContextual(next, "from") && this.input.startsWith(tokenLabelName(144), this.nextTokenStartSince(next + 4))) return true;
            }
            return super.isExportDefaultSpecifier();
          }
          maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
            var _specifiers;
            return !(null == (_specifiers = node.specifiers) || !_specifiers.length) || super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
          }
          checkExport(node) {
            const { specifiers } = node;
            null != specifiers && specifiers.length && (node.specifiers = specifiers.filter((node2) => "Placeholder" === node2.exported.type)), super.checkExport(node), node.specifiers = specifiers;
          }
          parseImport(node) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder) return super.parseImport(node);
            if (node.specifiers = [], !this.isContextual(98) && !this.match(12)) return node.source = this.finishPlaceholder(placeholder, "StringLiteral"), this.semicolon(), this.finishNode(node, "ImportDeclaration");
            const specifier = this.startNodeAtNode(placeholder);
            if (specifier.local = placeholder, node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier")), this.eat(12)) {
              this.maybeParseStarImportSpecifier(node) || this.parseNamedImportSpecifiers(node);
            }
            return this.expectContextual(98), node.source = this.parseImportSource(), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
          }
          assertNoSpace() {
            this.state.start > this.state.lastTokEndLoc.index && this.raise(PlaceholderErrors.UnexpectedSpace, { at: this.state.lastTokEndLoc });
          }
        } }, mixinPluginNames = Object.keys(mixinPlugins), defaultOptions = { sourceType: "script", sourceFilename: void 0, startColumn: 0, startLine: 1, allowAwaitOutsideFunction: false, allowReturnOutsideFunction: false, allowNewTargetOutsideFunction: false, allowImportExportEverywhere: false, allowSuperOutsideMethod: false, allowUndeclaredExports: false, plugins: [], strictMode: null, ranges: false, tokens: false, createImportExpressions: false, createParenthesizedExpressions: false, errorRecovery: false, attachComment: true, annexB: true };
        class ExpressionParser extends LValParser {
          checkProto(prop, isRecord, protoRef, refExpressionErrors) {
            if ("SpreadElement" === prop.type || this.isObjectMethod(prop) || prop.computed || prop.shorthand) return;
            const key = prop.key;
            if ("__proto__" === ("Identifier" === key.type ? key.name : key.value)) {
              if (isRecord) return void this.raise(Errors.RecordNoProto, { at: key });
              protoRef.used && (refExpressionErrors ? null === refExpressionErrors.doubleProtoLoc && (refExpressionErrors.doubleProtoLoc = key.loc.start) : this.raise(Errors.DuplicateProto, { at: key })), protoRef.used = true;
            }
          }
          shouldExitDescending(expr, potentialArrowAt) {
            return "ArrowFunctionExpression" === expr.type && expr.start === potentialArrowAt;
          }
          getExpression() {
            this.enterInitialScopes(), this.nextToken();
            const expr = this.parseExpression();
            return this.match(139) || this.unexpected(), this.finalizeRemainingComments(), expr.comments = this.state.comments, expr.errors = this.state.errors, this.options.tokens && (expr.tokens = this.tokens), expr;
          }
          parseExpression(disallowIn, refExpressionErrors) {
            return disallowIn ? this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors)) : this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
          }
          parseExpressionBase(refExpressionErrors) {
            const startLoc = this.state.startLoc, expr = this.parseMaybeAssign(refExpressionErrors);
            if (this.match(12)) {
              const node = this.startNodeAt(startLoc);
              for (node.expressions = [expr]; this.eat(12); ) node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
              return this.toReferencedList(node.expressions), this.finishNode(node, "SequenceExpression");
            }
            return expr;
          }
          parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
            return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
            return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          setOptionalParametersError(refExpressionErrors, resultError) {
            var _resultError$loc;
            refExpressionErrors.optionalParametersLoc = null != (_resultError$loc = null == resultError ? void 0 : resultError.loc) ? _resultError$loc : this.state.startLoc;
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            const startLoc = this.state.startLoc;
            if (this.isContextual(108) && this.prodParam.hasYield) {
              let left2 = this.parseYield();
              return afterLeftParse && (left2 = afterLeftParse.call(this, left2, startLoc)), left2;
            }
            let ownExpressionErrors;
            refExpressionErrors ? ownExpressionErrors = false : (refExpressionErrors = new ExpressionErrors(), ownExpressionErrors = true);
            const { type } = this.state;
            (10 === type || tokenIsIdentifier(type)) && (this.state.potentialArrowAt = this.state.start);
            let left = this.parseMaybeConditional(refExpressionErrors);
            if (afterLeftParse && (left = afterLeftParse.call(this, left, startLoc)), (token = this.state.type) >= 29 && token <= 33) {
              const node = this.startNodeAt(startLoc), operator = this.state.value;
              if (node.operator = operator, this.match(29)) {
                this.toAssignable(left, true), node.left = left;
                const startIndex = startLoc.index;
                null != refExpressionErrors.doubleProtoLoc && refExpressionErrors.doubleProtoLoc.index >= startIndex && (refExpressionErrors.doubleProtoLoc = null), null != refExpressionErrors.shorthandAssignLoc && refExpressionErrors.shorthandAssignLoc.index >= startIndex && (refExpressionErrors.shorthandAssignLoc = null), null != refExpressionErrors.privateKeyLoc && refExpressionErrors.privateKeyLoc.index >= startIndex && (this.checkDestructuringPrivate(refExpressionErrors), refExpressionErrors.privateKeyLoc = null);
              } else node.left = left;
              return this.next(), node.right = this.parseMaybeAssign(), this.checkLVal(left, { in: this.finishNode(node, "AssignmentExpression") }), node;
            }
            var token;
            return ownExpressionErrors && this.checkExpressionErrors(refExpressionErrors, true), left;
          }
          parseMaybeConditional(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprOps(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseConditional(expr, startLoc, refExpressionErrors);
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (this.eat(17)) {
              const node = this.startNodeAt(startLoc);
              return node.test = expr, node.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), node.alternate = this.parseMaybeAssign(), this.finishNode(node, "ConditionalExpression");
            }
            return expr;
          }
          parseMaybeUnaryOrPrivate(refExpressionErrors) {
            return this.match(138) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
          }
          parseExprOps(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseExprOp(expr, startLoc, -1);
          }
          parseExprOp(left, leftStartLoc, minPrec) {
            if (this.isPrivateName(left)) {
              const value2 = this.getPrivateNameSV(left);
              (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(Errors.PrivateInExpectedIn, { at: left, identifierName: value2 }), this.classScope.usePrivateName(value2, left.loc.start);
            }
            const op = this.state.type;
            if ((token = op) >= 39 && token <= 59 && (this.prodParam.hasIn || !this.match(58))) {
              let prec = tokenOperatorPrecedence(op);
              if (prec > minPrec) {
                if (39 === op) {
                  if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody) return left;
                  this.checkPipelineAtInfixOperator(left, leftStartLoc);
                }
                const node = this.startNodeAt(leftStartLoc);
                node.left = left, node.operator = this.state.value;
                const logical = 41 === op || 42 === op, coalesce = 40 === op;
                if (coalesce && (prec = tokenOperatorPrecedence(42)), this.next(), 39 === op && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }]) && 96 === this.state.type && this.prodParam.hasAwait) throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, { at: this.state.startLoc });
                node.right = this.parseExprOpRightExpr(op, prec);
                const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression"), nextOp = this.state.type;
                if (coalesce && (41 === nextOp || 42 === nextOp) || logical && 40 === nextOp) throw this.raise(Errors.MixingCoalesceWithLogical, { at: this.state.startLoc });
                return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
              }
            }
            var token;
            return left;
          }
          parseExprOpRightExpr(op, prec) {
            const startLoc = this.state.startLoc;
            if (39 === op) switch (this.getPluginOption("pipelineOperator", "proposal")) {
              case "hack":
                return this.withTopicBindingContext(() => this.parseHackPipeBody());
              case "smart":
                return this.withTopicBindingContext(() => {
                  if (this.prodParam.hasYield && this.isContextual(108)) throw this.raise(Errors.PipeBodyIsTighter, { at: this.state.startLoc });
                  return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
                });
              case "fsharp":
                return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(prec));
            }
            return this.parseExprOpBaseRightExpr(op, prec);
          }
          parseExprOpBaseRightExpr(op, prec) {
            const startLoc = this.state.startLoc;
            return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, 57 === op ? prec - 1 : prec);
          }
          parseHackPipeBody() {
            var _body$extra;
            const { startLoc } = this.state, body = this.parseMaybeAssign();
            return !UnparenthesizedPipeBodyDescriptions.has(body.type) || null != (_body$extra = body.extra) && _body$extra.parenthesized || this.raise(Errors.PipeUnparenthesizedBody, { at: startLoc, type: body.type }), this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipeTopicUnused, { at: startLoc }), body;
          }
          checkExponentialAfterUnary(node) {
            this.match(57) && this.raise(Errors.UnexpectedTokenUnaryExponentiation, { at: node.argument });
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            const startLoc = this.state.startLoc, isAwait = this.isContextual(96);
            if (isAwait && this.isAwaitAllowed()) {
              this.next();
              const expr2 = this.parseAwait(startLoc);
              return sawUnary || this.checkExponentialAfterUnary(expr2), expr2;
            }
            const update = this.match(34), node = this.startNode();
            if (token = this.state.type, tokenPrefixes[token]) {
              node.operator = this.state.value, node.prefix = true, this.match(72) && this.expectPlugin("throwExpressions");
              const isDelete = this.match(89);
              if (this.next(), node.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(refExpressionErrors, true), this.state.strict && isDelete) {
                const arg = node.argument;
                "Identifier" === arg.type ? this.raise(Errors.StrictDelete, { at: node }) : this.hasPropertyAsPrivateName(arg) && this.raise(Errors.DeletePrivateField, { at: node });
              }
              if (!update) return sawUnary || this.checkExponentialAfterUnary(node), this.finishNode(node, "UnaryExpression");
            }
            var token;
            const expr = this.parseUpdate(node, update, refExpressionErrors);
            if (isAwait) {
              const { type } = this.state;
              if ((this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54)) && !this.isAmbiguousAwait()) return this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc }), this.parseAwait(startLoc);
            }
            return expr;
          }
          parseUpdate(node, update, refExpressionErrors) {
            if (update) {
              const updateExpressionNode = node;
              return this.checkLVal(updateExpressionNode.argument, { in: this.finishNode(updateExpressionNode, "UpdateExpression") }), node;
            }
            const startLoc = this.state.startLoc;
            let expr = this.parseExprSubscripts(refExpressionErrors);
            if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;
            for (; 34 === this.state.type && !this.canInsertSemicolon(); ) {
              const node2 = this.startNodeAt(startLoc);
              node2.operator = this.state.value, node2.prefix = false, node2.argument = expr, this.next(), this.checkLVal(expr, { in: expr = this.finishNode(node2, "UpdateExpression") });
            }
            return expr;
          }
          parseExprSubscripts(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprAtom(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseSubscripts(expr, startLoc);
          }
          parseSubscripts(base, startLoc, noCalls) {
            const state = { optionalChainMember: false, maybeAsyncArrow: this.atPossibleAsyncArrow(base), stop: false };
            do {
              base = this.parseSubscript(base, startLoc, noCalls, state), state.maybeAsyncArrow = false;
            } while (!state.stop);
            return base;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            const { type } = this.state;
            if (!noCalls && 15 === type) return this.parseBind(base, startLoc, noCalls, state);
            if (tokenIsTemplate(type)) return this.parseTaggedTemplateExpression(base, startLoc, state);
            let optional = false;
            if (18 === type) {
              if (noCalls && (this.raise(Errors.OptionalChainingNoNew, { at: this.state.startLoc }), 40 === this.lookaheadCharCode())) return state.stop = true, base;
              state.optionalChainMember = optional = true, this.next();
            }
            if (!noCalls && this.match(10)) return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
            {
              const computed = this.eat(0);
              return computed || optional || this.eat(16) ? this.parseMember(base, startLoc, state, computed, optional) : (state.stop = true, base);
            }
          }
          parseMember(base, startLoc, state, computed, optional) {
            const node = this.startNodeAt(startLoc);
            return node.object = base, node.computed = computed, computed ? (node.property = this.parseExpression(), this.expect(3)) : this.match(138) ? ("Super" === base.type && this.raise(Errors.SuperPrivateField, { at: startLoc }), this.classScope.usePrivateName(this.state.value, this.state.startLoc), node.property = this.parsePrivateName()) : node.property = this.parseIdentifier(true), state.optionalChainMember ? (node.optional = optional, this.finishNode(node, "OptionalMemberExpression")) : this.finishNode(node, "MemberExpression");
          }
          parseBind(base, startLoc, noCalls, state) {
            const node = this.startNodeAt(startLoc);
            return node.object = base, this.next(), node.callee = this.parseNoCallExpr(), state.stop = true, this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
          }
          parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            let refExpressionErrors = null;
            this.state.maybeInArrowParameters = true, this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            const { maybeAsyncArrow, optionalChainMember } = state;
            maybeAsyncArrow && (this.expressionScope.enter(new ArrowHeadParsingScope(2)), refExpressionErrors = new ExpressionErrors()), optionalChainMember && (node.optional = optional), node.arguments = optional ? this.parseCallExpressionArguments(11) : this.parseCallExpressionArguments(11, "Import" === base.type, "Super" !== base.type, node, refExpressionErrors);
            let finishedNode = this.finishCallExpression(node, optionalChainMember);
            return maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional ? (state.stop = true, this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode)) : (maybeAsyncArrow && (this.checkExpressionErrors(refExpressionErrors, true), this.expressionScope.exit()), this.toReferencedArguments(finishedNode)), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, finishedNode;
          }
          toReferencedArguments(node, isParenthesizedExpr) {
            this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
          }
          parseTaggedTemplateExpression(base, startLoc, state) {
            const node = this.startNodeAt(startLoc);
            return node.tag = base, node.quasi = this.parseTemplate(true), state.optionalChainMember && this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc }), this.finishNode(node, "TaggedTemplateExpression");
          }
          atPossibleAsyncArrow(base) {
            return "Identifier" === base.type && "async" === base.name && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && base.start === this.state.potentialArrowAt;
          }
          expectImportAttributesPlugin() {
            this.hasPlugin("importAssertions") || this.expectPlugin("importAttributes");
          }
          finishCallExpression(node, optional) {
            if ("Import" === node.callee.type) if (2 === node.arguments.length && (this.hasPlugin("moduleAttributes") || this.expectImportAttributesPlugin()), 0 === node.arguments.length || node.arguments.length > 2) this.raise(Errors.ImportCallArity, { at: node, maxArgumentCount: this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1 });
            else for (const arg of node.arguments) "SpreadElement" === arg.type && this.raise(Errors.ImportCallSpreadArgument, { at: arg });
            return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
          }
          parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
            const elts = [];
            let first = true;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            for (this.state.inFSharpPipelineDirectBody = false; !this.eat(close); ) {
              if (first) first = false;
              else if (this.expect(12), this.match(close)) {
                !dynamicImport || this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") || this.raise(Errors.ImportCallArgumentTrailingComma, { at: this.state.lastTokStartLoc }), nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
            }
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, elts;
          }
          shouldParseAsyncArrow() {
            return this.match(19) && !this.canInsertSemicolon();
          }
          parseAsyncArrowFromCallExpression(node, call) {
            var _call$extra;
            return this.resetPreviousNodeTrailingComments(call), this.expect(19), this.parseArrowExpression(node, call.arguments, true, null == (_call$extra = call.extra) ? void 0 : _call$extra.trailingCommaLoc), call.innerComments && setInnerComments(node, call.innerComments), call.callee.trailingComments && setInnerComments(node, call.callee.trailingComments), node;
          }
          parseNoCallExpr() {
            const startLoc = this.state.startLoc;
            return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
          }
          parseExprAtom(refExpressionErrors) {
            let node, decorators = null;
            const { type } = this.state;
            switch (type) {
              case 79:
                return this.parseSuper();
              case 83:
                return node = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(node) : this.match(10) ? this.options.createImportExpressions ? this.parseImportCall(node) : this.finishNode(node, "Import") : (this.raise(Errors.UnsupportedImport, { at: this.state.lastTokStartLoc }), this.finishNode(node, "Import"));
              case 78:
                return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
              case 90:
                return this.parseDo(this.startNode(), false);
              case 56:
              case 31:
                return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
              case 134:
                return this.parseNumericLiteral(this.state.value);
              case 135:
                return this.parseBigIntLiteral(this.state.value);
              case 136:
                return this.parseDecimalLiteral(this.state.value);
              case 133:
                return this.parseStringLiteral(this.state.value);
              case 84:
                return this.parseNullLiteral();
              case 85:
                return this.parseBooleanLiteral(true);
              case 86:
                return this.parseBooleanLiteral(false);
              case 10: {
                const canBeArrow = this.state.potentialArrowAt === this.state.start;
                return this.parseParenAndDistinguishExpression(canBeArrow);
              }
              case 2:
              case 1:
                return this.parseArrayLike(2 === this.state.type ? 4 : 3, false, true);
              case 0:
                return this.parseArrayLike(3, true, false, refExpressionErrors);
              case 6:
              case 7:
                return this.parseObjectLike(6 === this.state.type ? 9 : 8, false, true);
              case 5:
                return this.parseObjectLike(8, false, false, refExpressionErrors);
              case 68:
                return this.parseFunctionOrFunctionSent();
              case 26:
                decorators = this.parseDecorators();
              case 80:
                return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
              case 77:
                return this.parseNewOrNewTarget();
              case 25:
              case 24:
                return this.parseTemplate(false);
              case 15: {
                node = this.startNode(), this.next(), node.object = null;
                const callee = node.callee = this.parseNoCallExpr();
                if ("MemberExpression" === callee.type) return this.finishNode(node, "BindExpression");
                throw this.raise(Errors.UnsupportedBind, { at: callee });
              }
              case 138:
                return this.raise(Errors.PrivateInExpectedIn, { at: this.state.startLoc, identifierName: this.state.value }), this.parsePrivateName();
              case 33:
                return this.parseTopicReferenceThenEqualsSign(54, "%");
              case 32:
                return this.parseTopicReferenceThenEqualsSign(44, "^");
              case 37:
              case 38:
                return this.parseTopicReference("hack");
              case 44:
              case 54:
              case 27: {
                const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
                if (pipeProposal) return this.parseTopicReference(pipeProposal);
                this.unexpected();
                break;
              }
              case 47: {
                const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
                isIdentifierStart(lookaheadCh) || 62 === lookaheadCh ? this.expectOnePlugin(["jsx", "flow", "typescript"]) : this.unexpected();
                break;
              }
              default:
                if (tokenIsIdentifier(type)) {
                  if (this.isContextual(127) && 123 === this.lookaheadInLineCharCode()) return this.parseModuleExpression();
                  const canBeArrow = this.state.potentialArrowAt === this.state.start, containsEsc = this.state.containsEsc, id = this.parseIdentifier();
                  if (!containsEsc && "async" === id.name && !this.canInsertSemicolon()) {
                    const { type: type2 } = this.state;
                    if (68 === type2) return this.resetPreviousNodeTrailingComments(id), this.next(), this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
                    if (tokenIsIdentifier(type2)) return 61 === this.lookaheadCharCode() ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id)) : id;
                    if (90 === type2) return this.resetPreviousNodeTrailingComments(id), this.parseDo(this.startNodeAtNode(id), true);
                  }
                  return canBeArrow && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(id), [id], false)) : id;
                }
                this.unexpected();
            }
          }
          parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
            const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
            if (pipeProposal) return this.state.type = topicTokenType, this.state.value = topicTokenValue, this.state.pos--, this.state.end--, this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1), this.parseTopicReference(pipeProposal);
            this.unexpected();
          }
          parseTopicReference(pipeProposal) {
            const node = this.startNode(), startLoc = this.state.startLoc, tokenType = this.state.type;
            return this.next(), this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
          }
          finishTopicReference(node, startLoc, pipeProposal, tokenType) {
            if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
              const nodeType = "smart" === pipeProposal ? "PipelinePrimaryTopicReference" : "TopicReference";
              return this.topicReferenceIsAllowedInCurrentContext() || this.raise("smart" === pipeProposal ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, { at: startLoc }), this.registerTopicReference(), this.finishNode(node, nodeType);
            }
            throw this.raise(Errors.PipeTopicUnconfiguredToken, { at: startLoc, token: tokenLabelName(tokenType) });
          }
          testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
            switch (pipeProposal) {
              case "hack":
                return this.hasPlugin(["pipelineOperator", { topicToken: tokenLabelName(tokenType) }]);
              case "smart":
                return 27 === tokenType;
              default:
                throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });
            }
          }
          parseAsyncArrowUnaryFunction(node) {
            this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
            const params = [this.parseIdentifier()];
            return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(Errors.LineTerminatorBeforeArrow, { at: this.state.curPosition() }), this.expect(19), this.parseArrowExpression(node, params, true);
          }
          parseDo(node, isAsync) {
            this.expectPlugin("doExpressions"), isAsync && this.expectPlugin("asyncDoExpressions"), node.async = isAsync, this.next();
            const oldLabels = this.state.labels;
            return this.state.labels = [], isAsync ? (this.prodParam.enter(2), node.body = this.parseBlock(), this.prodParam.exit()) : node.body = this.parseBlock(), this.state.labels = oldLabels, this.finishNode(node, "DoExpression");
          }
          parseSuper() {
            const node = this.startNode();
            return this.next(), !this.match(10) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(Errors.UnexpectedSuper, { at: node }) : this.raise(Errors.SuperNotAllowed, { at: node }), this.match(10) || this.match(0) || this.match(16) || this.raise(Errors.UnsupportedSuper, { at: node }), this.finishNode(node, "Super");
          }
          parsePrivateName() {
            const node = this.startNode(), id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1)), name = this.state.value;
            return this.next(), node.id = this.createIdentifier(id, name), this.finishNode(node, "PrivateName");
          }
          parseFunctionOrFunctionSent() {
            const node = this.startNode();
            if (this.next(), this.prodParam.hasYield && this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
              return this.next(), this.match(103) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(node, meta, "sent");
            }
            return this.parseFunction(node);
          }
          parseMetaProperty(node, meta, propertyName) {
            node.meta = meta;
            const containsEsc = this.state.containsEsc;
            return node.property = this.parseIdentifier(true), (node.property.name !== propertyName || containsEsc) && this.raise(Errors.UnsupportedMetaProperty, { at: node.property, target: meta.name, onlyValidPropertyName: propertyName }), this.finishNode(node, "MetaProperty");
          }
          parseImportMetaProperty(node) {
            const id = this.createIdentifier(this.startNodeAtNode(node), "import");
            if (this.next(), this.isContextual(101)) this.inModule || this.raise(Errors.ImportMetaOutsideModule, { at: id }), this.sawUnambiguousESM = true;
            else if (this.isContextual(105) || this.isContextual(97)) {
              const isSource = this.isContextual(105);
              if (isSource || this.unexpected(), this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation"), !this.options.createImportExpressions) throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, { at: this.state.startLoc, phase: this.state.value });
              return this.next(), node.phase = isSource ? "source" : "defer", this.parseImportCall(node);
            }
            return this.parseMetaProperty(node, id, "meta");
          }
          parseLiteralAtNode(value2, type, node) {
            return this.addExtra(node, "rawValue", value2), this.addExtra(node, "raw", this.input.slice(node.start, this.state.end)), node.value = value2, this.next(), this.finishNode(node, type);
          }
          parseLiteral(value2, type) {
            const node = this.startNode();
            return this.parseLiteralAtNode(value2, type, node);
          }
          parseStringLiteral(value2) {
            return this.parseLiteral(value2, "StringLiteral");
          }
          parseNumericLiteral(value2) {
            return this.parseLiteral(value2, "NumericLiteral");
          }
          parseBigIntLiteral(value2) {
            return this.parseLiteral(value2, "BigIntLiteral");
          }
          parseDecimalLiteral(value2) {
            return this.parseLiteral(value2, "DecimalLiteral");
          }
          parseRegExpLiteral(value2) {
            const node = this.parseLiteral(value2.value, "RegExpLiteral");
            return node.pattern = value2.pattern, node.flags = value2.flags, node;
          }
          parseBooleanLiteral(value2) {
            const node = this.startNode();
            return node.value = value2, this.next(), this.finishNode(node, "BooleanLiteral");
          }
          parseNullLiteral() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "NullLiteral");
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            const startLoc = this.state.startLoc;
            let val;
            this.next(), this.expressionScope.enter(new ArrowHeadParsingScope(1));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters, oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.maybeInArrowParameters = true, this.state.inFSharpPipelineDirectBody = false;
            const innerStartLoc = this.state.startLoc, exprList = [], refExpressionErrors = new ExpressionErrors();
            let spreadStartLoc, optionalCommaStartLoc, first = true;
            for (; !this.match(11); ) {
              if (first) first = false;
              else if (this.expect(12, null === refExpressionErrors.optionalParametersLoc ? null : refExpressionErrors.optionalParametersLoc), this.match(11)) {
                optionalCommaStartLoc = this.state.startLoc;
                break;
              }
              if (this.match(21)) {
                const spreadNodeStartLoc = this.state.startLoc;
                if (spreadStartLoc = this.state.startLoc, exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc)), !this.checkCommaAfterRest(41)) break;
              } else exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
            }
            const innerEndLoc = this.state.lastTokEndLoc;
            this.expect(11), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let arrowNode = this.startNodeAt(startLoc);
            return canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode)) ? (this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(arrowNode, exprList, false), arrowNode) : (this.expressionScope.exit(), exprList.length || this.unexpected(this.state.lastTokStartLoc), optionalCommaStartLoc && this.unexpected(optionalCommaStartLoc), spreadStartLoc && this.unexpected(spreadStartLoc), this.checkExpressionErrors(refExpressionErrors, true), this.toReferencedListDeep(exprList, true), exprList.length > 1 ? (val = this.startNodeAt(innerStartLoc), val.expressions = exprList, this.finishNode(val, "SequenceExpression"), this.resetEndLocation(val, innerEndLoc)) : val = exprList[0], this.wrapParenthesis(startLoc, val));
          }
          wrapParenthesis(startLoc, expression) {
            if (!this.options.createParenthesizedExpressions) return this.addExtra(expression, "parenthesized", true), this.addExtra(expression, "parenStart", startLoc.index), this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index), expression;
            const parenExpression = this.startNodeAt(startLoc);
            return parenExpression.expression = expression, this.finishNode(parenExpression, "ParenthesizedExpression");
          }
          shouldParseArrow(params) {
            return !this.canInsertSemicolon();
          }
          parseArrow(node) {
            if (this.eat(19)) return node;
          }
          parseParenItem(node, startLoc) {
            return node;
          }
          parseNewOrNewTarget() {
            const node = this.startNode();
            if (this.next(), this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
              this.next();
              const metaProp = this.parseMetaProperty(node, meta, "target");
              return this.scope.inNonArrowFunction || this.scope.inClass || this.options.allowNewTargetOutsideFunction || this.raise(Errors.UnexpectedNewTarget, { at: metaProp }), metaProp;
            }
            return this.parseNew(node);
          }
          parseNew(node) {
            if (this.parseNewCallee(node), this.eat(10)) {
              const args = this.parseExprList(11);
              this.toReferencedList(args), node.arguments = args;
            } else node.arguments = [];
            return this.finishNode(node, "NewExpression");
          }
          parseNewCallee(node) {
            const isImport = this.match(83), callee = this.parseNoCallExpr();
            node.callee = callee, !isImport || "Import" !== callee.type && "ImportExpression" !== callee.type || this.raise(Errors.ImportCallNotNewExpression, { at: callee });
          }
          parseTemplateElement(isTagged) {
            const { start, startLoc, end, value: value2 } = this.state, elemStart = start + 1, elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
            null === value2 && (isTagged || this.raise(Errors.InvalidEscapeSequenceTemplate, { at: createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1) }));
            const isTail = this.match(24), endOffset = isTail ? -1 : -2, elemEnd = end + endOffset;
            elem.value = { raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"), cooked: null === value2 ? null : value2.slice(1, endOffset) }, elem.tail = isTail, this.next();
            const finishedNode = this.finishNode(elem, "TemplateElement");
            return this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset)), finishedNode;
          }
          parseTemplate(isTagged) {
            const node = this.startNode();
            node.expressions = [];
            let curElt = this.parseTemplateElement(isTagged);
            for (node.quasis = [curElt]; !curElt.tail; ) node.expressions.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), node.quasis.push(curElt = this.parseTemplateElement(isTagged));
            return this.finishNode(node, "TemplateLiteral");
          }
          parseTemplateSubstitution() {
            return this.parseExpression();
          }
          parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
            isRecord && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const propHash = /* @__PURE__ */ Object.create(null);
            let first = true;
            const node = this.startNode();
            for (node.properties = [], this.next(); !this.match(close); ) {
              if (first) first = false;
              else if (this.expect(12), this.match(close)) {
                this.addTrailingCommaExtraToNode(node);
                break;
              }
              let prop;
              isPattern ? prop = this.parseBindingProperty() : (prop = this.parsePropertyDefinition(refExpressionErrors), this.checkProto(prop, isRecord, propHash, refExpressionErrors)), isRecord && !this.isObjectProperty(prop) && "SpreadElement" !== prop.type && this.raise(Errors.InvalidRecordProperty, { at: prop }), prop.shorthand && this.addExtra(prop, "shorthand", true), node.properties.push(prop);
            }
            this.next(), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let type = "ObjectExpression";
            return isPattern ? type = "ObjectPattern" : isRecord && (type = "RecordExpression"), this.finishNode(node, type);
          }
          addTrailingCommaExtraToNode(node) {
            this.addExtra(node, "trailingComma", this.state.lastTokStart), this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
          }
          maybeAsyncOrAccessorProp(prop) {
            return !prop.computed && "Identifier" === prop.key.type && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
          }
          parsePropertyDefinition(refExpressionErrors) {
            let decorators = [];
            if (this.match(26)) for (this.hasPlugin("decorators") && this.raise(Errors.UnsupportedPropertyDecorator, { at: this.state.startLoc }); this.match(26); ) decorators.push(this.parseDecorator());
            const prop = this.startNode();
            let startLoc, isAsync = false, isAccessor = false;
            if (this.match(21)) return decorators.length && this.unexpected(), this.parseSpread();
            decorators.length && (prop.decorators = decorators, decorators = []), prop.method = false, refExpressionErrors && (startLoc = this.state.startLoc);
            let isGenerator = this.eat(55);
            this.parsePropertyNamePrefixOperator(prop);
            const containsEsc = this.state.containsEsc, key = this.parsePropertyName(prop, refExpressionErrors);
            if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
              const keyName = key.name;
              "async" !== keyName || this.hasPrecedingLineBreak() || (isAsync = true, this.resetPreviousNodeTrailingComments(key), isGenerator = this.eat(55), this.parsePropertyName(prop)), "get" !== keyName && "set" !== keyName || (isAccessor = true, this.resetPreviousNodeTrailingComments(key), prop.kind = keyName, this.match(55) && (isGenerator = true, this.raise(Errors.AccessorIsGenerator, { at: this.state.curPosition(), kind: keyName }), this.next()), this.parsePropertyName(prop));
            }
            return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
          }
          getGetterSetterExpectedParamCount(method) {
            return "get" === method.kind ? 0 : 1;
          }
          getObjectOrClassMethodParams(method) {
            return method.params;
          }
          checkGetterSetterParams(method) {
            var _params;
            const paramCount = this.getGetterSetterExpectedParamCount(method), params = this.getObjectOrClassMethodParams(method);
            params.length !== paramCount && this.raise("get" === method.kind ? Errors.BadGetterArity : Errors.BadSetterArity, { at: method }), "set" === method.kind && "RestElement" === (null == (_params = params[params.length - 1]) ? void 0 : _params.type) && this.raise(Errors.BadSetterRestParameter, { at: method });
          }
          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            if (isAccessor) {
              const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
              return this.checkGetterSetterParams(finishedProp), finishedProp;
            }
            if (isAsync || isGenerator || this.match(10)) return isPattern && this.unexpected(), prop.kind = "method", prop.method = true, this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
          }
          parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
            if (prop.shorthand = false, this.eat(14)) return prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors), this.finishNode(prop, "ObjectProperty");
            if (!prop.computed && "Identifier" === prop.key.type) {
              if (this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false), isPattern) prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
              else if (this.match(29)) {
                const shorthandAssignLoc = this.state.startLoc;
                null != refExpressionErrors ? null === refExpressionErrors.shorthandAssignLoc && (refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc) : this.raise(Errors.InvalidCoverInitializedName, { at: shorthandAssignLoc }), prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
              } else prop.value = cloneIdentifier(prop.key);
              return prop.shorthand = true, this.finishNode(prop, "ObjectProperty");
            }
          }
          parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
            return node || this.unexpected(), node;
          }
          parsePropertyName(prop, refExpressionErrors) {
            if (this.eat(0)) prop.computed = true, prop.key = this.parseMaybeAssignAllowIn(), this.expect(3);
            else {
              const { type, value: value2 } = this.state;
              let key;
              if (tokenIsKeywordOrIdentifier(type)) key = this.parseIdentifier(true);
              else switch (type) {
                case 134:
                  key = this.parseNumericLiteral(value2);
                  break;
                case 133:
                  key = this.parseStringLiteral(value2);
                  break;
                case 135:
                  key = this.parseBigIntLiteral(value2);
                  break;
                case 136:
                  key = this.parseDecimalLiteral(value2);
                  break;
                case 138: {
                  const privateKeyLoc = this.state.startLoc;
                  null != refExpressionErrors ? null === refExpressionErrors.privateKeyLoc && (refExpressionErrors.privateKeyLoc = privateKeyLoc) : this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc }), key = this.parsePrivateName();
                  break;
                }
                default:
                  this.unexpected();
              }
              prop.key = key, 138 !== type && (prop.computed = false);
            }
            return prop.key;
          }
          initFunction(node, isAsync) {
            node.id = null, node.generator = false, node.async = isAsync;
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            this.initFunction(node, isAsync), node.generator = isGenerator, this.scope.enter(18 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0)), this.prodParam.enter(functionFlags(isAsync, node.generator)), this.parseFunctionParams(node, isConstructor);
            const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
            return this.prodParam.exit(), this.scope.exit(), finishedNode;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            isTuple && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const node = this.startNode();
            return this.next(), node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
          }
          parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
            this.scope.enter(6);
            let flags = functionFlags(isAsync, false);
            !this.match(5) && this.prodParam.hasIn && (flags |= 8), this.prodParam.enter(flags), this.initFunction(node, isAsync);
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return params && (this.state.maybeInArrowParameters = true, this.setArrowFunctionParameters(node, params, trailingCommaLoc)), this.state.maybeInArrowParameters = false, this.parseFunctionBody(node, true), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.finishNode(node, "ArrowFunctionExpression");
          }
          setArrowFunctionParameters(node, params, trailingCommaLoc) {
            this.toAssignableList(params, trailingCommaLoc, false), node.params = params;
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            return this.parseFunctionBody(node, false, isMethod), this.finishNode(node, type);
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            const isExpression = allowExpression && !this.match(5);
            if (this.expressionScope.enter(newExpressionScope()), isExpression) node.body = this.parseMaybeAssign(), this.checkParams(node, false, allowExpression, false);
            else {
              const oldStrict = this.state.strict, oldLabels = this.state.labels;
              this.state.labels = [], this.prodParam.enter(4 | this.prodParam.currentFlags()), node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
                const nonSimple = !this.isSimpleParamList(node.params);
                hasStrictModeDirective && nonSimple && this.raise(Errors.IllegalLanguageModeDirective, { at: "method" !== node.kind && "constructor" !== node.kind || !node.key ? node : node.key.loc.end });
                const strictModeChanged = !oldStrict && this.state.strict;
                this.checkParams(node, !(this.state.strict || allowExpression || isMethod || nonSimple), allowExpression, strictModeChanged), this.state.strict && node.id && this.checkIdentifier(node.id, 65, strictModeChanged);
              }), this.prodParam.exit(), this.state.labels = oldLabels;
            }
            this.expressionScope.exit();
          }
          isSimpleParameter(node) {
            return "Identifier" === node.type;
          }
          isSimpleParamList(params) {
            for (let i = 0, len = params.length; i < len; i++) if (!this.isSimpleParameter(params[i])) return false;
            return true;
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            const checkClashes = !allowDuplicates && /* @__PURE__ */ new Set(), formalParameters = { type: "FormalParameters" };
            for (const param of node.params) this.checkLVal(param, { in: formalParameters, binding: 5, checkClashes, strictModeChanged });
          }
          parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
            const elts = [];
            let first = true;
            for (; !this.eat(close); ) {
              if (first) first = false;
              else if (this.expect(12), this.match(close)) {
                nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
            }
            return elts;
          }
          parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
            let elt;
            if (this.match(12)) allowEmpty || this.raise(Errors.UnexpectedToken, { at: this.state.curPosition(), unexpected: "," }), elt = null;
            else if (this.match(21)) {
              const spreadNodeStartLoc = this.state.startLoc;
              elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
            } else if (this.match(17)) {
              this.expectPlugin("partialApplication"), allowPlaceholder || this.raise(Errors.UnexpectedArgumentPlaceholder, { at: this.state.startLoc });
              const node = this.startNode();
              this.next(), elt = this.finishNode(node, "ArgumentPlaceholder");
            } else elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
            return elt;
          }
          parseIdentifier(liberal) {
            const node = this.startNode(), name = this.parseIdentifierName(liberal);
            return this.createIdentifier(node, name);
          }
          createIdentifier(node, name) {
            return node.name = name, node.loc.identifierName = name, this.finishNode(node, "Identifier");
          }
          parseIdentifierName(liberal) {
            let name;
            const { startLoc, type } = this.state;
            tokenIsKeywordOrIdentifier(type) ? name = this.state.value : this.unexpected();
            const tokenIsKeyword2 = type <= 92;
            return liberal ? tokenIsKeyword2 && this.replaceToken(132) : this.checkReservedWord(name, startLoc, tokenIsKeyword2, false), this.next(), name;
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            if (word.length > 10) return;
            if (!function(word2) {
              return reservedWordLikeSet.has(word2);
            }(word)) return;
            if (checkKeywords && function(word2) {
              return keywords.has(word2);
            }(word)) return void this.raise(Errors.UnexpectedKeyword, { at: startLoc, keyword: word });
            if ((this.state.strict ? isBinding ? isStrictBindReservedWord : isStrictReservedWord : isReservedWord)(word, this.inModule)) this.raise(Errors.UnexpectedReservedWord, { at: startLoc, reservedWord: word });
            else if ("yield" === word) {
              if (this.prodParam.hasYield) return void this.raise(Errors.YieldBindingIdentifier, { at: startLoc });
            } else if ("await" === word) {
              if (this.prodParam.hasAwait) return void this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });
              if (this.scope.inStaticBlock) return void this.raise(Errors.AwaitBindingIdentifierInStaticBlock, { at: startLoc });
              this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });
            } else if ("arguments" === word && this.scope.inClassAndNotInNonArrowFunction) return void this.raise(Errors.ArgumentsInClass, { at: startLoc });
          }
          isAwaitAllowed() {
            return !!this.prodParam.hasAwait || !(!this.options.allowAwaitOutsideFunction || this.scope.inFunction);
          }
          parseAwait(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, { at: node }), this.eat(55) && this.raise(Errors.ObsoleteAwaitStar, { at: node }), this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true), this.state.soloAwait || (node.argument = this.parseMaybeUnary(null, true)), this.finishNode(node, "AwaitExpression");
          }
          isAmbiguousAwait() {
            if (this.hasPrecedingLineBreak()) return true;
            const { type } = this.state;
            return 53 === type || 10 === type || 0 === type || tokenIsTemplate(type) || 102 === type && !this.state.containsEsc || 137 === type || 56 === type || this.hasPlugin("v8intrinsic") && 54 === type;
          }
          parseYield() {
            const node = this.startNode();
            this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, { at: node }), this.next();
            let delegating = false, argument = null;
            if (!this.hasPrecedingLineBreak()) switch (delegating = this.eat(55), this.state.type) {
              case 13:
              case 139:
              case 8:
              case 11:
              case 3:
              case 9:
              case 14:
              case 12:
                if (!delegating) break;
              default:
                argument = this.parseMaybeAssign();
            }
            return node.delegate = delegating, node.argument = argument, this.finishNode(node, "YieldExpression");
          }
          parseImportCall(node) {
            return this.next(), node.source = this.parseMaybeAssignAllowIn(), (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) && (node.options = null), this.eat(12) && (this.expectImportAttributesPlugin(), this.match(11) || (node.options = this.parseMaybeAssignAllowIn(), this.eat(12))), this.expect(11), this.finishNode(node, "ImportExpression");
          }
          checkPipelineAtInfixOperator(left, leftStartLoc) {
            this.hasPlugin(["pipelineOperator", { proposal: "smart" }]) && "SequenceExpression" === left.type && this.raise(Errors.PipelineHeadSequenceExpression, { at: leftStartLoc });
          }
          parseSmartPipelineBodyInStyle(childExpr, startLoc) {
            if (this.isSimpleReference(childExpr)) {
              const bodyNode = this.startNodeAt(startLoc);
              return bodyNode.callee = childExpr, this.finishNode(bodyNode, "PipelineBareFunction");
            }
            {
              const bodyNode = this.startNodeAt(startLoc);
              return this.checkSmartPipeTopicBodyEarlyErrors(startLoc), bodyNode.expression = childExpr, this.finishNode(bodyNode, "PipelineTopicExpression");
            }
          }
          isSimpleReference(expression) {
            switch (expression.type) {
              case "MemberExpression":
                return !expression.computed && this.isSimpleReference(expression.object);
              case "Identifier":
                return true;
              default:
                return false;
            }
          }
          checkSmartPipeTopicBodyEarlyErrors(startLoc) {
            if (this.match(19)) throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });
            this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipelineTopicUnused, { at: startLoc });
          }
          withTopicBindingContext(callback) {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = { maxNumOfResolvableTopics: 1, maxTopicIndex: null };
            try {
              return callback();
            } finally {
              this.state.topicContext = outerContextTopicState;
            }
          }
          withSmartMixTopicForbiddingContext(callback) {
            if (!this.hasPlugin(["pipelineOperator", { proposal: "smart" }])) return callback();
            {
              const outerContextTopicState = this.state.topicContext;
              this.state.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null };
              try {
                return callback();
              } finally {
                this.state.topicContext = outerContextTopicState;
              }
            }
          }
          withSoloAwaitPermittingContext(callback) {
            const outerContextSoloAwaitState = this.state.soloAwait;
            this.state.soloAwait = true;
            try {
              return callback();
            } finally {
              this.state.soloAwait = outerContextSoloAwaitState;
            }
          }
          allowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & ~flags) {
              this.prodParam.enter(8 | flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          disallowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & flags) {
              this.prodParam.enter(-9 & flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          registerTopicReference() {
            this.state.topicContext.maxTopicIndex = 0;
          }
          topicReferenceIsAllowedInCurrentContext() {
            return this.state.topicContext.maxNumOfResolvableTopics >= 1;
          }
          topicReferenceWasUsedInCurrentContext() {
            return null != this.state.topicContext.maxTopicIndex && this.state.topicContext.maxTopicIndex >= 0;
          }
          parseFSharpPipelineBody(prec) {
            const startLoc = this.state.startLoc;
            this.state.potentialArrowAt = this.state.start;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = true;
            const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, ret;
          }
          parseModuleExpression() {
            this.expectPlugin("moduleBlocks");
            const node = this.startNode();
            this.next(), this.match(5) || this.unexpected(null, 5);
            const program = this.startNodeAt(this.state.endLoc);
            this.next();
            const revertScopes = this.initializeScopes(true);
            this.enterInitialScopes();
            try {
              node.body = this.parseProgram(program, 8, "module");
            } finally {
              revertScopes();
            }
            return this.finishNode(node, "ModuleExpression");
          }
          parsePropertyNamePrefixOperator(prop) {
          }
        }
        const loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" }, loneSurrogate = /[\uD800-\uDFFF]/u, keywordRelationalOperator = /in(?:stanceof)?/y;
        class StatementParser extends ExpressionParser {
          parseTopLevel(file, program) {
            return file.program = this.parseProgram(program), file.comments = this.state.comments, this.options.tokens && (file.tokens = function(tokens, input) {
              for (let i = 0; i < tokens.length; i++) {
                const token = tokens[i], { type } = token;
                if ("number" == typeof type) {
                  if (138 === type) {
                    const { loc, start, value: value2, end } = token, hashEndPos = start + 1, hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    tokens.splice(i, 1, new Token({ type: getExportedToken(27), value: "#", start, end: hashEndPos, startLoc: loc.start, endLoc: hashEndLoc }), new Token({ type: getExportedToken(132), value: value2, start: hashEndPos, end, startLoc: hashEndLoc, endLoc: loc.end })), i++;
                    continue;
                  }
                  if (tokenIsTemplate(type)) {
                    const { loc, start, value: value2, end } = token, backquoteEnd = start + 1, backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    let startToken, templateValue, templateElementEnd, templateElementEndLoc, endToken;
                    startToken = 96 === input.charCodeAt(start) ? new Token({ type: getExportedToken(22), value: "`", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }) : new Token({ type: getExportedToken(8), value: "}", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }), 24 === type ? (templateElementEnd = end - 1, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1), templateValue = null === value2 ? null : value2.slice(1, -1), endToken = new Token({ type: getExportedToken(22), value: "`", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })) : (templateElementEnd = end - 2, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2), templateValue = null === value2 ? null : value2.slice(1, -2), endToken = new Token({ type: getExportedToken(23), value: "${", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })), tokens.splice(i, 1, startToken, new Token({ type: getExportedToken(20), value: templateValue, start: backquoteEnd, end: templateElementEnd, startLoc: backquoteEndLoc, endLoc: templateElementEndLoc }), endToken), i += 2;
                    continue;
                  }
                  token.type = getExportedToken(type);
                }
              }
              return tokens;
            }(this.tokens, this.input)), this.finishNode(file, "File");
          }
          parseProgram(program, end = 139, sourceType = this.options.sourceType) {
            if (program.sourceType = sourceType, program.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(program, true, true, end), this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) for (const [localName, at] of Array.from(this.scope.undefinedExports)) this.raise(Errors.ModuleExportUndefined, { at, localName });
            let finishedProgram;
            return finishedProgram = 139 === end ? this.finishNode(program, "Program") : this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1)), finishedProgram;
          }
          stmtToDirective(stmt) {
            const directive = stmt;
            directive.type = "Directive", directive.value = directive.expression, delete directive.expression;
            const directiveLiteral = directive.value, expressionValue = directiveLiteral.value, raw = this.input.slice(directiveLiteral.start, directiveLiteral.end), val = directiveLiteral.value = raw.slice(1, -1);
            return this.addExtra(directiveLiteral, "raw", raw), this.addExtra(directiveLiteral, "rawValue", val), this.addExtra(directiveLiteral, "expressionValue", expressionValue), directiveLiteral.type = "DirectiveLiteral", directive;
          }
          parseInterpreterDirective() {
            if (!this.match(28)) return null;
            const node = this.startNode();
            return node.value = this.state.value, this.next(), this.finishNode(node, "InterpreterDirective");
          }
          isLet() {
            return !!this.isContextual(100) && this.hasFollowingBindingAtom();
          }
          chStartsBindingIdentifier(ch, pos) {
            if (isIdentifierStart(ch)) {
              if (keywordRelationalOperator.lastIndex = pos, keywordRelationalOperator.test(this.input)) {
                const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
                if (!isIdentifierChar(endCh) && 92 !== endCh) return false;
              }
              return true;
            }
            return 92 === ch;
          }
          chStartsBindingPattern(ch) {
            return 91 === ch || 123 === ch;
          }
          hasFollowingBindingAtom() {
            const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
            return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
          }
          hasInLineFollowingBindingIdentifier() {
            const next = this.nextTokenInLineStart(), nextCh = this.codePointAtPos(next);
            return this.chStartsBindingIdentifier(nextCh, next);
          }
          startsUsingForOf() {
            const { type, containsEsc } = this.lookahead();
            return !(102 === type && !containsEsc) && (tokenIsIdentifier(type) && !this.hasFollowingLineBreak() ? (this.expectPlugin("explicitResourceManagement"), true) : void 0);
          }
          startsAwaitUsing() {
            let next = this.nextTokenInLineStart();
            if (this.isUnparsedContextual(next, "using")) {
              next = this.nextTokenInLineStartSince(next + 5);
              const nextCh = this.codePointAtPos(next);
              if (this.chStartsBindingIdentifier(nextCh, next)) return this.expectPlugin("explicitResourceManagement"), true;
            }
            return false;
          }
          parseModuleItem() {
            return this.parseStatementLike(15);
          }
          parseStatementListItem() {
            return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
          }
          parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
            let flags = 0;
            return this.options.annexB && !this.state.strict && (flags |= 4, allowLabeledFunction && (flags |= 8)), this.parseStatementLike(flags);
          }
          parseStatement() {
            return this.parseStatementLike(0);
          }
          parseStatementLike(flags) {
            let decorators = null;
            return this.match(26) && (decorators = this.parseDecorators(true)), this.parseStatementContent(flags, decorators);
          }
          parseStatementContent(flags, decorators) {
            const starttype = this.state.type, node = this.startNode(), allowDeclaration = !!(2 & flags), allowFunctionDeclaration = !!(4 & flags), topLevel = 1 & flags;
            switch (starttype) {
              case 60:
                return this.parseBreakContinueStatement(node, true);
              case 63:
                return this.parseBreakContinueStatement(node, false);
              case 64:
                return this.parseDebuggerStatement(node);
              case 90:
                return this.parseDoWhileStatement(node);
              case 91:
                return this.parseForStatement(node);
              case 68:
                if (46 === this.lookaheadCharCode()) break;
                return allowFunctionDeclaration || this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, { at: this.state.startLoc }), this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
              case 80:
                return allowDeclaration || this.unexpected(), this.parseClass(this.maybeTakeDecorators(decorators, node), true);
              case 69:
                return this.parseIfStatement(node);
              case 70:
                return this.parseReturnStatement(node);
              case 71:
                return this.parseSwitchStatement(node);
              case 72:
                return this.parseThrowStatement(node);
              case 73:
                return this.parseTryStatement(node);
              case 96:
                if (!this.state.containsEsc && this.startsAwaitUsing()) return this.isAwaitAllowed() ? allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, { at: node }) : this.raise(Errors.AwaitUsingNotInAsyncContext, { at: node }), this.next(), this.parseVarStatement(node, "await using");
                break;
              case 107:
                if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifier()) break;
                return this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel ? this.raise(Errors.UnexpectedUsingDeclaration, { at: this.state.startLoc }) : allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, { at: this.state.startLoc }), this.parseVarStatement(node, "using");
              case 100: {
                if (this.state.containsEsc) break;
                const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
                if (91 !== nextCh) {
                  if (!allowDeclaration && this.hasFollowingLineBreak()) break;
                  if (!this.chStartsBindingIdentifier(nextCh, next) && 123 !== nextCh) break;
                }
              }
              case 75:
                allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, { at: this.state.startLoc });
              case 74: {
                const kind = this.state.value;
                return this.parseVarStatement(node, kind);
              }
              case 92:
                return this.parseWhileStatement(node);
              case 76:
                return this.parseWithStatement(node);
              case 5:
                return this.parseBlock();
              case 13:
                return this.parseEmptyStatement(node);
              case 83: {
                const nextTokenCharCode = this.lookaheadCharCode();
                if (40 === nextTokenCharCode || 46 === nextTokenCharCode) break;
              }
              case 82: {
                let result;
                return this.options.allowImportExportEverywhere || topLevel || this.raise(Errors.UnexpectedImportExport, { at: this.state.startLoc }), this.next(), 83 === starttype ? (result = this.parseImport(node), "ImportDeclaration" !== result.type || result.importKind && "value" !== result.importKind || (this.sawUnambiguousESM = true)) : (result = this.parseExport(node, decorators), ("ExportNamedDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && ("ExportAllDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && "ExportDefaultDeclaration" !== result.type || (this.sawUnambiguousESM = true)), this.assertModuleNodeAllowed(result), result;
              }
              default:
                if (this.isAsyncFunction()) return allowDeclaration || this.raise(Errors.AsyncFunctionInSingleStatementContext, { at: this.state.startLoc }), this.next(), this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
            }
            const maybeName = this.state.value, expr = this.parseExpression();
            return tokenIsIdentifier(starttype) && "Identifier" === expr.type && this.eat(14) ? this.parseLabeledStatement(node, maybeName, expr, flags) : this.parseExpressionStatement(node, expr, decorators);
          }
          assertModuleNodeAllowed(node) {
            this.options.allowImportExportEverywhere || this.inModule || this.raise(Errors.ImportOutsideModule, { at: node });
          }
          decoratorsEnabledBeforeExport() {
            return !!this.hasPlugin("decorators-legacy") || this.hasPlugin("decorators") && false !== this.getPluginOption("decorators", "decoratorsBeforeExport");
          }
          maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
            return maybeDecorators && (classNode.decorators && classNode.decorators.length > 0 ? ("boolean" != typeof this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorsBeforeAfterExport, { at: classNode.decorators[0] }), classNode.decorators.unshift(...maybeDecorators)) : classNode.decorators = maybeDecorators, this.resetStartLocationFromNode(classNode, maybeDecorators[0]), exportNode && this.resetStartLocationFromNode(exportNode, classNode)), classNode;
          }
          canHaveLeadingDecorator() {
            return this.match(80);
          }
          parseDecorators(allowExport) {
            const decorators = [];
            do {
              decorators.push(this.parseDecorator());
            } while (this.match(26));
            if (this.match(82)) allowExport || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });
            else if (!this.canHaveLeadingDecorator()) throw this.raise(Errors.UnexpectedLeadingDecorator, { at: this.state.startLoc });
            return decorators;
          }
          parseDecorator() {
            this.expectOnePlugin(["decorators", "decorators-legacy"]);
            const node = this.startNode();
            if (this.next(), this.hasPlugin("decorators")) {
              const startLoc = this.state.startLoc;
              let expr;
              if (this.match(10)) {
                const startLoc2 = this.state.startLoc;
                this.next(), expr = this.parseExpression(), this.expect(11), expr = this.wrapParenthesis(startLoc2, expr);
                const paramsStartLoc = this.state.startLoc;
                node.expression = this.parseMaybeDecoratorArguments(expr), false === this.getPluginOption("decorators", "allowCallParenthesized") && node.expression !== expr && this.raise(Errors.DecoratorArgumentsOutsideParentheses, { at: paramsStartLoc });
              } else {
                for (expr = this.parseIdentifier(false); this.eat(16); ) {
                  const node2 = this.startNodeAt(startLoc);
                  node2.object = expr, this.match(138) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), node2.property = this.parsePrivateName()) : node2.property = this.parseIdentifier(true), node2.computed = false, expr = this.finishNode(node2, "MemberExpression");
                }
                node.expression = this.parseMaybeDecoratorArguments(expr);
              }
            } else node.expression = this.parseExprSubscripts();
            return this.finishNode(node, "Decorator");
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.eat(10)) {
              const node = this.startNodeAtNode(expr);
              return node.callee = expr, node.arguments = this.parseCallExpressionArguments(11, false), this.toReferencedList(node.arguments), this.finishNode(node, "CallExpression");
            }
            return expr;
          }
          parseBreakContinueStatement(node, isBreak) {
            return this.next(), this.isLineTerminator() ? node.label = null : (node.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(node, isBreak), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
          }
          verifyBreakContinue(node, isBreak) {
            let i;
            for (i = 0; i < this.state.labels.length; ++i) {
              const lab = this.state.labels[i];
              if (null == node.label || lab.name === node.label.name) {
                if (null != lab.kind && (isBreak || "loop" === lab.kind)) break;
                if (node.label && isBreak) break;
              }
            }
            if (i === this.state.labels.length) {
              const type = isBreak ? "BreakStatement" : "ContinueStatement";
              this.raise(Errors.IllegalBreakContinue, { at: node, type });
            }
          }
          parseDebuggerStatement(node) {
            return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
          }
          parseHeaderExpression() {
            this.expect(10);
            const val = this.parseExpression();
            return this.expect(11), val;
          }
          parseDoWhileStatement(node) {
            return this.next(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.expect(92), node.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(node, "DoWhileStatement");
          }
          parseForStatement(node) {
            this.next(), this.state.labels.push(loopLabel);
            let awaitAt = null;
            if (this.isAwaitAllowed() && this.eatContextual(96) && (awaitAt = this.state.lastTokStartLoc), this.scope.enter(0), this.expect(10), this.match(13)) return null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, null);
            const startsWithLet = this.isContextual(100);
            {
              const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing(), starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf(), isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
              if (this.match(74) || this.match(75) || isLetOrUsing) {
                const initNode = this.startNode();
                let kind;
                startsWithAwaitUsing ? (kind = "await using", this.isAwaitAllowed() || this.raise(Errors.AwaitUsingNotInAsyncContext, { at: this.state.startLoc }), this.next()) : kind = this.state.value, this.next(), this.parseVar(initNode, true, kind);
                const init2 = this.finishNode(initNode, "VariableDeclaration"), isForIn = this.match(58);
                return isForIn && starsWithUsingDeclaration && this.raise(Errors.ForInUsing, { at: init2 }), (isForIn || this.isContextual(102)) && 1 === init2.declarations.length ? this.parseForIn(node, init2, awaitAt) : (null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init2));
              }
            }
            const startsWithAsync = this.isContextual(95), refExpressionErrors = new ExpressionErrors(), init = this.parseExpression(true, refExpressionErrors), isForOf = this.isContextual(102);
            if (isForOf && (startsWithLet && this.raise(Errors.ForOfLet, { at: init }), null === awaitAt && startsWithAsync && "Identifier" === init.type && this.raise(Errors.ForOfAsync, { at: init })), isForOf || this.match(58)) {
              this.checkDestructuringPrivate(refExpressionErrors), this.toAssignable(init, true);
              const type = isForOf ? "ForOfStatement" : "ForInStatement";
              return this.checkLVal(init, { in: { type } }), this.parseForIn(node, init, awaitAt);
            }
            return this.checkExpressionErrors(refExpressionErrors, true), null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init);
          }
          parseFunctionStatement(node, isAsync, isHangingDeclaration) {
            return this.next(), this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
          }
          parseIfStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration(), node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null, this.finishNode(node, "IfStatement");
          }
          parseReturnStatement(node) {
            return this.prodParam.hasReturn || this.options.allowReturnOutsideFunction || this.raise(Errors.IllegalReturn, { at: this.state.startLoc }), this.next(), this.isLineTerminator() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
          }
          parseSwitchStatement(node) {
            this.next(), node.discriminant = this.parseHeaderExpression();
            const cases = node.cases = [];
            let cur;
            this.expect(5), this.state.labels.push(switchLabel), this.scope.enter(0);
            for (let sawDefault; !this.match(8); ) if (this.match(61) || this.match(65)) {
              const isCase = this.match(61);
              cur && this.finishNode(cur, "SwitchCase"), cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raise(Errors.MultipleDefaultsInSwitch, { at: this.state.lastTokStartLoc }), sawDefault = true, cur.test = null), this.expect(14);
            } else cur ? cur.consequent.push(this.parseStatementListItem()) : this.unexpected();
            return this.scope.exit(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(node, "SwitchStatement");
          }
          parseThrowStatement(node) {
            return this.next(), this.hasPrecedingLineBreak() && this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc }), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
          }
          parseCatchClauseParam() {
            const param = this.parseBindingAtom();
            return this.scope.enter(this.options.annexB && "Identifier" === param.type ? 8 : 0), this.checkLVal(param, { in: { type: "CatchClause" }, binding: 9 }), param;
          }
          parseTryStatement(node) {
            if (this.next(), node.block = this.parseBlock(), node.handler = null, this.match(62)) {
              const clause = this.startNode();
              this.next(), this.match(10) ? (this.expect(10), clause.param = this.parseCatchClauseParam(), this.expect(11)) : (clause.param = null, this.scope.enter(0)), clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false)), this.scope.exit(), node.handler = this.finishNode(clause, "CatchClause");
            }
            return node.finalizer = this.eat(67) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(Errors.NoCatchOrFinally, { at: node }), this.finishNode(node, "TryStatement");
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
          }
          parseWhileStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.finishNode(node, "WhileStatement");
          }
          parseWithStatement(node) {
            return this.state.strict && this.raise(Errors.StrictWith, { at: this.state.startLoc }), this.next(), node.object = this.parseHeaderExpression(), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.finishNode(node, "WithStatement");
          }
          parseEmptyStatement(node) {
            return this.next(), this.finishNode(node, "EmptyStatement");
          }
          parseLabeledStatement(node, maybeName, expr, flags) {
            for (const label of this.state.labels) label.name === maybeName && this.raise(Errors.LabelRedeclaration, { at: expr, labelName: maybeName });
            const kind = (token = this.state.type) >= 90 && token <= 92 ? "loop" : this.match(71) ? "switch" : null;
            var token;
            for (let i = this.state.labels.length - 1; i >= 0; i--) {
              const label = this.state.labels[i];
              if (label.statementStart !== node.start) break;
              label.statementStart = this.state.start, label.kind = kind;
            }
            return this.state.labels.push({ name: maybeName, kind, statementStart: this.state.start }), node.body = 8 & flags ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement(), this.state.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
          }
          parseExpressionStatement(node, expr, decorators) {
            return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
          }
          parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
            const node = this.startNode();
            return allowDirectives && this.state.strictErrors.clear(), this.expect(5), createNewLexicalScope && this.scope.enter(0), this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse), createNewLexicalScope && this.scope.exit(), this.finishNode(node, "BlockStatement");
          }
          isValidDirective(stmt) {
            return "ExpressionStatement" === stmt.type && "StringLiteral" === stmt.expression.type && !stmt.expression.extra.parenthesized;
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            const body = node.body = [], directives = node.directives = [];
            this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
          }
          parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
            const oldStrict = this.state.strict;
            let hasStrictModeDirective = false, parsedNonDirective = false;
            for (; !this.match(end); ) {
              const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
              if (directives && !parsedNonDirective) {
                if (this.isValidDirective(stmt)) {
                  const directive = this.stmtToDirective(stmt);
                  directives.push(directive), hasStrictModeDirective || "use strict" !== directive.value.value || (hasStrictModeDirective = true, this.setStrict(true));
                  continue;
                }
                parsedNonDirective = true, this.state.strictErrors.clear();
              }
              body.push(stmt);
            }
            null == afterBlockParse || afterBlockParse.call(this, hasStrictModeDirective), oldStrict || this.setStrict(false), this.next();
          }
          parseFor(node, init) {
            return node.init = init, this.semicolon(false), node.test = this.match(13) ? null : this.parseExpression(), this.semicolon(false), node.update = this.match(11) ? null : this.parseExpression(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, "ForStatement");
          }
          parseForIn(node, init, awaitAt) {
            const isForIn = this.match(58);
            return this.next(), isForIn ? null !== awaitAt && this.unexpected(awaitAt) : node.await = null !== awaitAt, "VariableDeclaration" !== init.type || null == init.declarations[0].init || isForIn && this.options.annexB && !this.state.strict && "var" === init.kind && "Identifier" === init.declarations[0].id.type || this.raise(Errors.ForInOfLoopInitializer, { at: init, type: isForIn ? "ForInStatement" : "ForOfStatement" }), "AssignmentPattern" === init.type && this.raise(Errors.InvalidLhs, { at: init, ancestor: { type: "ForStatement" } }), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
          }
          parseVar(node, isFor, kind, allowMissingInitializer = false) {
            const declarations = node.declarations = [];
            for (node.kind = kind; ; ) {
              const decl = this.startNode();
              if (this.parseVarId(decl, kind), decl.init = this.eat(29) ? isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, null !== decl.init || allowMissingInitializer || ("Identifier" === decl.id.type || isFor && (this.match(58) || this.isContextual(102)) ? "const" !== kind || this.match(58) || this.isContextual(102) || this.raise(Errors.DeclarationMissingInitializer, { at: this.state.lastTokEndLoc, kind: "const" }) : this.raise(Errors.DeclarationMissingInitializer, { at: this.state.lastTokEndLoc, kind: "destructuring" })), declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(12)) break;
            }
            return node;
          }
          parseVarId(decl, kind) {
            const id = this.parseBindingAtom();
            this.checkLVal(id, { in: { type: "VariableDeclarator" }, binding: "var" === kind ? 5 : 8201 }), decl.id = id;
          }
          parseAsyncFunctionExpression(node) {
            return this.parseFunction(node, 8);
          }
          parseFunction(node, flags = 0) {
            const hangingDeclaration = 2 & flags, isDeclaration = !!(1 & flags), requireId = isDeclaration && !(4 & flags), isAsync = !!(8 & flags);
            this.initFunction(node, isAsync), this.match(55) && (hangingDeclaration && this.raise(Errors.GeneratorInSingleStatementContext, { at: this.state.startLoc }), this.next(), node.generator = true), isDeclaration && (node.id = this.parseFunctionId(requireId));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return this.state.maybeInArrowParameters = false, this.scope.enter(2), this.prodParam.enter(functionFlags(isAsync, node.generator)), isDeclaration || (node.id = this.parseFunctionId()), this.parseFunctionParams(node, false), this.withSmartMixTopicForbiddingContext(() => {
              this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
            }), this.prodParam.exit(), this.scope.exit(), isDeclaration && !hangingDeclaration && this.registerFunctionStatementId(node), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, node;
          }
          parseFunctionId(requireId) {
            return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
          }
          parseFunctionParams(node, isConstructor) {
            this.expect(10), this.expressionScope.enter(new ExpressionScope(3)), node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0)), this.expressionScope.exit();
          }
          registerFunctionStatementId(node) {
            node.id && this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
          }
          parseClass(node, isStatement, optionalId) {
            this.next();
            const oldStrict = this.state.strict;
            return this.state.strict = true, this.parseClassId(node, isStatement, optionalId), this.parseClassSuper(node), node.body = this.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
          }
          isClassProperty() {
            return this.match(29) || this.match(13) || this.match(8);
          }
          isClassMethod() {
            return this.match(10);
          }
          isNonstaticConstructor(method) {
            return !(method.computed || method.static || "constructor" !== method.key.name && "constructor" !== method.key.value);
          }
          parseClassBody(hadSuperClass, oldStrict) {
            this.classScope.enter();
            const state = { hadConstructor: false, hadSuperClass };
            let decorators = [];
            const classBody = this.startNode();
            if (classBody.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
              for (; !this.match(8); ) {
                if (this.eat(13)) {
                  if (decorators.length > 0) throw this.raise(Errors.DecoratorSemicolon, { at: this.state.lastTokEndLoc });
                  continue;
                }
                if (this.match(26)) {
                  decorators.push(this.parseDecorator());
                  continue;
                }
                const member = this.startNode();
                decorators.length && (member.decorators = decorators, this.resetStartLocationFromNode(member, decorators[0]), decorators = []), this.parseClassMember(classBody, member, state), "constructor" === member.kind && member.decorators && member.decorators.length > 0 && this.raise(Errors.DecoratorConstructor, { at: member });
              }
            }), this.state.strict = oldStrict, this.next(), decorators.length) throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });
            return this.classScope.exit(), this.finishNode(classBody, "ClassBody");
          }
          parseClassMemberFromModifier(classBody, member) {
            const key = this.parseIdentifier(true);
            if (this.isClassMethod()) {
              const method = member;
              return method.kind = "method", method.computed = false, method.key = key, method.static = false, this.pushClassMethod(classBody, method, false, false, false, false), true;
            }
            if (this.isClassProperty()) {
              const prop = member;
              return prop.computed = false, prop.key = key, prop.static = false, classBody.body.push(this.parseClassProperty(prop)), true;
            }
            return this.resetPreviousNodeTrailingComments(key), false;
          }
          parseClassMember(classBody, member, state) {
            const isStatic = this.isContextual(106);
            if (isStatic) {
              if (this.parseClassMemberFromModifier(classBody, member)) return;
              if (this.eat(5)) return void this.parseClassStaticBlock(classBody, member);
            }
            this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const publicMethod = member, privateMethod = member, publicProp = member, privateProp = member, accessorProp = member, method = publicMethod, publicMember = publicMethod;
            if (member.static = isStatic, this.parsePropertyNamePrefixOperator(member), this.eat(55)) {
              method.kind = "method";
              const isPrivateName = this.match(138);
              return this.parseClassElementName(method), isPrivateName ? void this.pushClassPrivateMethod(classBody, privateMethod, true, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsGenerator, { at: publicMethod.key }), void this.pushClassMethod(classBody, publicMethod, true, false, false, false));
            }
            const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc, isPrivate = this.match(138), key = this.parseClassElementName(member), maybeQuestionTokenStartLoc = this.state.startLoc;
            if (this.parsePostMemberNameModifiers(publicMember), this.isClassMethod()) {
              if (method.kind = "method", isPrivate) return void this.pushClassPrivateMethod(classBody, privateMethod, false, false);
              const isConstructor = this.isNonstaticConstructor(publicMethod);
              let allowsDirectSuper = false;
              isConstructor && (publicMethod.kind = "constructor", state.hadConstructor && !this.hasPlugin("typescript") && this.raise(Errors.DuplicateConstructor, { at: key }), isConstructor && this.hasPlugin("typescript") && member.override && this.raise(Errors.OverrideOnConstructor, { at: key }), state.hadConstructor = true, allowsDirectSuper = state.hadSuperClass), this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
            } else if (this.isClassProperty()) isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp);
            else if (isContextual && "async" === key.name && !this.isLineTerminator()) {
              this.resetPreviousNodeTrailingComments(key);
              const isGenerator = this.eat(55);
              publicMember.optional && this.unexpected(maybeQuestionTokenStartLoc), method.kind = "method";
              const isPrivate2 = this.match(138);
              this.parseClassElementName(method), this.parsePostMemberNameModifiers(publicMember), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key }), this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false));
            } else if (!isContextual || "get" !== key.name && "set" !== key.name || this.match(55) && this.isLineTerminator()) if (isContextual && "accessor" === key.name && !this.isLineTerminator()) {
              this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(key);
              const isPrivate2 = this.match(138);
              this.parseClassElementName(publicProp), this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
            } else this.isLineTerminator() ? isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp) : this.unexpected();
            else {
              this.resetPreviousNodeTrailingComments(key), method.kind = key.name;
              const isPrivate2 = this.match(138);
              this.parseClassElementName(publicMethod), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, false, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key }), this.pushClassMethod(classBody, publicMethod, false, false, false, false)), this.checkGetterSetterParams(publicMethod);
            }
          }
          parseClassElementName(member) {
            const { type, value: value2 } = this.state;
            if (132 !== type && 133 !== type || !member.static || "prototype" !== value2 || this.raise(Errors.StaticPrototype, { at: this.state.startLoc }), 138 === type) {
              "constructor" === value2 && this.raise(Errors.ConstructorClassPrivateField, { at: this.state.startLoc });
              const key = this.parsePrivateName();
              return member.key = key, key;
            }
            return this.parsePropertyName(member);
          }
          parseClassStaticBlock(classBody, member) {
            var _member$decorators;
            this.scope.enter(208);
            const oldLabels = this.state.labels;
            this.state.labels = [], this.prodParam.enter(0);
            const body = member.body = [];
            this.parseBlockOrModuleBlockBody(body, void 0, false, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = oldLabels, classBody.body.push(this.finishNode(member, "StaticBlock")), null != (_member$decorators = member.decorators) && _member$decorators.length && this.raise(Errors.DecoratorStaticBlock, { at: member });
          }
          pushClassProperty(classBody, prop) {
            prop.computed || "constructor" !== prop.key.name && "constructor" !== prop.key.value || this.raise(Errors.ConstructorClassField, { at: prop.key }), classBody.body.push(this.parseClassProperty(prop));
          }
          pushClassPrivateProperty(classBody, prop) {
            const node = this.parseClassPrivateProperty(prop);
            classBody.body.push(node), this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassAccessorProperty(classBody, prop, isPrivate) {
            if (!isPrivate && !prop.computed) {
              const key = prop.key;
              "constructor" !== key.name && "constructor" !== key.value || this.raise(Errors.ConstructorClassField, { at: key });
            }
            const node = this.parseClassAccessorProperty(prop);
            classBody.body.push(node), isPrivate && this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
            classBody.body.push(node);
            const kind = "get" === node.kind ? node.static ? 6 : 2 : "set" === node.kind ? node.static ? 5 : 1 : 0;
            this.declareClassPrivateMethodInScope(node, kind);
          }
          declareClassPrivateMethodInScope(node, kind) {
            this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
          }
          parsePostMemberNameModifiers(methodOrProp) {
          }
          parseClassPrivateProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassPrivateProperty");
          }
          parseClassProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassProperty");
          }
          parseClassAccessorProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassAccessorProperty");
          }
          parseInitializer(node) {
            this.scope.enter(80), this.expressionScope.enter(newExpressionScope()), this.prodParam.enter(0), node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
          }
          parseClassId(node, isStatement, optionalId, bindingType = 8331) {
            if (tokenIsIdentifier(this.state.type)) node.id = this.parseIdentifier(), isStatement && this.declareNameFromIdentifier(node.id, bindingType);
            else {
              if (!optionalId && isStatement) throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });
              node.id = null;
            }
          }
          parseClassSuper(node) {
            node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
          }
          parseExport(node, decorators) {
            const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true), hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier), parseAfterDefault = !hasDefault || this.eat(12), hasStar = parseAfterDefault && this.eatExportStar(node), hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node), parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12)), isFromRequired = hasDefault || hasStar;
            if (hasStar && !hasNamespace) {
              if (hasDefault && this.unexpected(), decorators) throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });
              return this.parseExportFrom(node, true), this.finishNode(node, "ExportAllDeclaration");
            }
            const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
            let hasDeclaration;
            if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers && this.unexpected(null, 5), hasNamespace && parseAfterNamespace && this.unexpected(null, 98), isFromRequired || hasSpecifiers) {
              if (hasDeclaration = false, decorators) throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });
              this.parseExportFrom(node, isFromRequired);
            } else hasDeclaration = this.maybeParseExportDeclaration(node);
            if (isFromRequired || hasSpecifiers || hasDeclaration) {
              var _node2$declaration;
              const node2 = node;
              if (this.checkExport(node2, true, false, !!node2.source), "ClassDeclaration" === (null == (_node2$declaration = node2.declaration) ? void 0 : _node2$declaration.type)) this.maybeTakeDecorators(decorators, node2.declaration, node2);
              else if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });
              return this.finishNode(node2, "ExportNamedDeclaration");
            }
            if (this.eat(65)) {
              const node2 = node, decl = this.parseExportDefaultExpression();
              if (node2.declaration = decl, "ClassDeclaration" === decl.type) this.maybeTakeDecorators(decorators, decl, node2);
              else if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });
              return this.checkExport(node2, true, true), this.finishNode(node2, "ExportDefaultDeclaration");
            }
            this.unexpected(null, 5);
          }
          eatExportStar(node) {
            return this.eat(55);
          }
          maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
            if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
              this.expectPlugin("exportDefaultFrom", null == maybeDefaultIdentifier ? void 0 : maybeDefaultIdentifier.loc.start);
              const id = maybeDefaultIdentifier || this.parseIdentifier(true), specifier = this.startNodeAtNode(id);
              return specifier.exported = id, node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], true;
            }
            return false;
          }
          maybeParseExportNamespaceSpecifier(node) {
            if (this.isContextual(93)) {
              node.specifiers || (node.specifiers = []);
              const specifier = this.startNodeAt(this.state.lastTokStartLoc);
              return this.next(), specifier.exported = this.parseModuleExportName(), node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier")), true;
            }
            return false;
          }
          maybeParseExportNamedSpecifiers(node) {
            if (this.match(5)) {
              node.specifiers || (node.specifiers = []);
              const isTypeExport = "type" === node.exportKind;
              return node.specifiers.push(...this.parseExportSpecifiers(isTypeExport)), node.source = null, node.declaration = null, this.hasPlugin("importAssertions") && (node.assertions = []), true;
            }
            return false;
          }
          maybeParseExportDeclaration(node) {
            return !!this.shouldParseExportDeclaration() && (node.specifiers = [], node.source = null, this.hasPlugin("importAssertions") && (node.assertions = []), node.declaration = this.parseExportDeclaration(node), true);
          }
          isAsyncFunction() {
            if (!this.isContextual(95)) return false;
            const next = this.nextTokenInLineStart();
            return this.isUnparsedContextual(next, "function");
          }
          parseExportDefaultExpression() {
            const expr = this.startNode();
            if (this.match(68)) return this.next(), this.parseFunction(expr, 5);
            if (this.isAsyncFunction()) return this.next(), this.next(), this.parseFunction(expr, 13);
            if (this.match(80)) return this.parseClass(expr, true, true);
            if (this.match(26)) return this.hasPlugin("decorators") && true === this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc }), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
            if (this.match(75) || this.match(74) || this.isLet()) throw this.raise(Errors.UnsupportedDefaultExport, { at: this.state.startLoc });
            const res = this.parseMaybeAssignAllowIn();
            return this.semicolon(), res;
          }
          parseExportDeclaration(node) {
            if (this.match(80)) {
              return this.parseClass(this.startNode(), true, false);
            }
            return this.parseStatementListItem();
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            if (tokenIsIdentifier(type)) {
              if (95 === type && !this.state.containsEsc || 100 === type) return false;
              if ((130 === type || 129 === type) && !this.state.containsEsc) {
                const { type: nextType } = this.lookahead();
                if (tokenIsIdentifier(nextType) && 98 !== nextType || 5 === nextType) return this.expectOnePlugin(["flow", "typescript"]), false;
              }
            } else if (!this.match(65)) return false;
            const next = this.nextTokenStart(), hasFrom = this.isUnparsedContextual(next, "from");
            if (44 === this.input.charCodeAt(next) || tokenIsIdentifier(this.state.type) && hasFrom) return true;
            if (this.match(65) && hasFrom) {
              const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
              return 34 === nextAfterFrom || 39 === nextAfterFrom;
            }
            return false;
          }
          parseExportFrom(node, expect) {
            this.eatContextual(98) ? (node.source = this.parseImportSource(), this.checkExport(node), this.maybeParseImportAttributes(node), this.checkJSONModuleImport(node)) : expect && this.unexpected(), this.semicolon();
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            return 26 === type && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators")) ? (true === this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc }), true) : 74 === type || 75 === type || 68 === type || 80 === type || this.isLet() || this.isAsyncFunction();
          }
          checkExport(node, checkNames, isDefault, isFrom) {
            var _node$specifiers;
            if (checkNames) {
              if (isDefault) {
                if (this.checkDuplicateExports(node, "default"), this.hasPlugin("exportDefaultFrom")) {
                  var _declaration$extra;
                  const declaration = node.declaration;
                  "Identifier" !== declaration.type || "from" !== declaration.name || declaration.end - declaration.start != 4 || null != (_declaration$extra = declaration.extra) && _declaration$extra.parenthesized || this.raise(Errors.ExportDefaultFromAsIdentifier, { at: declaration });
                }
              } else if (null != (_node$specifiers = node.specifiers) && _node$specifiers.length) for (const specifier of node.specifiers) {
                const { exported } = specifier, exportName = "Identifier" === exported.type ? exported.name : exported.value;
                if (this.checkDuplicateExports(specifier, exportName), !isFrom && specifier.local) {
                  const { local } = specifier;
                  "Identifier" !== local.type ? this.raise(Errors.ExportBindingIsString, { at: specifier, localName: local.value, exportName }) : (this.checkReservedWord(local.name, local.loc.start, true, false), this.scope.checkLocalExport(local));
                }
              }
              else if (node.declaration) {
                if ("FunctionDeclaration" === node.declaration.type || "ClassDeclaration" === node.declaration.type) {
                  const id = node.declaration.id;
                  if (!id) throw new Error("Assertion failure");
                  this.checkDuplicateExports(node, id.name);
                } else if ("VariableDeclaration" === node.declaration.type) for (const declaration of node.declaration.declarations) this.checkDeclaration(declaration.id);
              }
            }
          }
          checkDeclaration(node) {
            if ("Identifier" === node.type) this.checkDuplicateExports(node, node.name);
            else if ("ObjectPattern" === node.type) for (const prop of node.properties) this.checkDeclaration(prop);
            else if ("ArrayPattern" === node.type) for (const elem of node.elements) elem && this.checkDeclaration(elem);
            else "ObjectProperty" === node.type ? this.checkDeclaration(node.value) : "RestElement" === node.type ? this.checkDeclaration(node.argument) : "AssignmentPattern" === node.type && this.checkDeclaration(node.left);
          }
          checkDuplicateExports(node, exportName) {
            this.exportedIdentifiers.has(exportName) && ("default" === exportName ? this.raise(Errors.DuplicateDefaultExport, { at: node }) : this.raise(Errors.DuplicateExport, { at: node, exportName })), this.exportedIdentifiers.add(exportName);
          }
          parseExportSpecifiers(isInTypeExport) {
            const nodes = [];
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first) first = false;
              else if (this.expect(12), this.eat(8)) break;
              const isMaybeTypeOnly = this.isContextual(130), isString = this.match(133), node = this.startNode();
              node.local = this.parseModuleExportName(), nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
            }
            return nodes;
          }
          parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
            return this.eatContextual(93) ? node.exported = this.parseModuleExportName() : isString ? node.exported = cloneStringLiteral(node.local) : node.exported || (node.exported = cloneIdentifier(node.local)), this.finishNode(node, "ExportSpecifier");
          }
          parseModuleExportName() {
            if (this.match(133)) {
              const result = this.parseStringLiteral(this.state.value), surrogate = result.value.match(loneSurrogate);
              return surrogate && this.raise(Errors.ModuleExportNameHasLoneSurrogate, { at: result, surrogateCharCode: surrogate[0].charCodeAt(0) }), result;
            }
            return this.parseIdentifier(true);
          }
          isJSONModuleImport(node) {
            return null != node.assertions && node.assertions.some(({ key, value: value2 }) => "json" === value2.value && ("Identifier" === key.type ? "type" === key.name : "type" === key.value));
          }
          checkImportReflection(node) {
            const { specifiers } = node, singleBindingType = 1 === specifiers.length ? specifiers[0].type : null;
            if ("source" === node.phase) "ImportDefaultSpecifier" !== singleBindingType && this.raise(Errors.SourcePhaseImportRequiresDefault, { at: specifiers[0].loc.start });
            else if ("defer" === node.phase) "ImportNamespaceSpecifier" !== singleBindingType && this.raise(Errors.DeferImportRequiresNamespace, { at: specifiers[0].loc.start });
            else if (node.module) {
              var _node$assertions;
              "ImportDefaultSpecifier" !== singleBindingType && this.raise(Errors.ImportReflectionNotBinding, { at: specifiers[0].loc.start }), (null == (_node$assertions = node.assertions) ? void 0 : _node$assertions.length) > 0 && this.raise(Errors.ImportReflectionHasAssertion, { at: node.specifiers[0].loc.start });
            }
          }
          checkJSONModuleImport(node) {
            if (this.isJSONModuleImport(node) && "ExportAllDeclaration" !== node.type) {
              const { specifiers } = node;
              if (null != specifiers) {
                const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
                  let imported;
                  if ("ExportSpecifier" === specifier.type ? imported = specifier.local : "ImportSpecifier" === specifier.type && (imported = specifier.imported), void 0 !== imported) return "Identifier" === imported.type ? "default" !== imported.name : "default" !== imported.value;
                });
                void 0 !== nonDefaultNamedSpecifier && this.raise(Errors.ImportJSONBindingNotDefault, { at: nonDefaultNamedSpecifier.loc.start });
              }
            }
          }
          isPotentialImportPhase(isExport) {
            return !isExport && (this.isContextual(105) || this.isContextual(97) || this.isContextual(127));
          }
          applyImportPhase(node, isExport, phase, loc) {
            isExport || ("module" === phase ? (this.expectPlugin("importReflection", loc), node.module = true) : this.hasPlugin("importReflection") && (node.module = false), "source" === phase ? (this.expectPlugin("sourcePhaseImports", loc), node.phase = "source") : "defer" === phase ? (this.expectPlugin("deferredImportEvaluation", loc), node.phase = "defer") : this.hasPlugin("sourcePhaseImports") && (node.phase = null));
          }
          parseMaybeImportPhase(node, isExport) {
            if (!this.isPotentialImportPhase(isExport)) return this.applyImportPhase(node, isExport, null), null;
            const phaseIdentifier = this.parseIdentifier(true), { type } = this.state;
            return (tokenIsKeywordOrIdentifier(type) ? 98 !== type || 102 === this.lookaheadCharCode() : 12 !== type) ? (this.resetPreviousIdentifierLeadingComments(phaseIdentifier), this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start), null) : (this.applyImportPhase(node, isExport, null), phaseIdentifier);
          }
          isPrecedingIdImportPhase(phase) {
            const { type } = this.state;
            return tokenIsIdentifier(type) ? 98 !== type || 102 === this.lookaheadCharCode() : 12 !== type;
          }
          parseImport(node) {
            return this.match(133) ? this.parseImportSourceAndAttributes(node) : this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
          }
          parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
            node.specifiers = [];
            const parseNext = !this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) || this.eat(12), hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
            return parseNext && !hasStar && this.parseNamedImportSpecifiers(node), this.expectContextual(98), this.parseImportSourceAndAttributes(node);
          }
          parseImportSourceAndAttributes(node) {
            return null != node.specifiers || (node.specifiers = []), node.source = this.parseImportSource(), this.maybeParseImportAttributes(node), this.checkImportReflection(node), this.checkJSONModuleImport(node), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.match(133) || this.unexpected(), this.parseExprAtom();
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          finishImportSpecifier(specifier, type, bindingType = 8201) {
            return this.checkLVal(specifier.local, { in: { type }, binding: bindingType }), this.finishNode(specifier, type);
          }
          parseImportAttributes() {
            this.expect(5);
            const attrs = [], attrNames = /* @__PURE__ */ new Set();
            do {
              if (this.match(8)) break;
              const node = this.startNode(), keyName = this.state.value;
              if (attrNames.has(keyName) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, { at: this.state.startLoc, key: keyName }), attrNames.add(keyName), this.match(133) ? node.key = this.parseStringLiteral(keyName) : node.key = this.parseIdentifier(true), this.expect(14), !this.match(133)) throw this.raise(Errors.ModuleAttributeInvalidValue, { at: this.state.startLoc });
              node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
            } while (this.eat(12));
            return this.expect(8), attrs;
          }
          parseModuleAttributes() {
            const attrs = [], attributes = /* @__PURE__ */ new Set();
            do {
              const node = this.startNode();
              if (node.key = this.parseIdentifier(true), "type" !== node.key.name && this.raise(Errors.ModuleAttributeDifferentFromType, { at: node.key }), attributes.has(node.key.name) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, { at: node.key, key: node.key.name }), attributes.add(node.key.name), this.expect(14), !this.match(133)) throw this.raise(Errors.ModuleAttributeInvalidValue, { at: this.state.startLoc });
              node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
            } while (this.eat(12));
            return attrs;
          }
          maybeParseImportAttributes(node) {
            let attributes, useWith = false;
            if (this.match(76)) {
              if (this.hasPrecedingLineBreak() && 40 === this.lookaheadCharCode()) return;
              this.next(), this.hasPlugin("moduleAttributes") ? attributes = this.parseModuleAttributes() : (this.expectImportAttributesPlugin(), attributes = this.parseImportAttributes()), useWith = true;
            } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) this.hasPlugin("importAttributes") ? (true !== this.getPluginOption("importAttributes", "deprecatedAssertSyntax") && this.raise(Errors.ImportAttributesUseAssert, { at: this.state.startLoc }), this.addExtra(node, "deprecatedAssertSyntax", true)) : this.expectOnePlugin(["importAttributes", "importAssertions"]), this.next(), attributes = this.parseImportAttributes();
            else if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) attributes = [];
            else {
              if (!this.hasPlugin("moduleAttributes")) return;
              attributes = [];
            }
            !useWith && this.hasPlugin("importAssertions") ? node.assertions = attributes : node.attributes = attributes;
          }
          maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
            if (maybeDefaultIdentifier) {
              const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
              return specifier.local = maybeDefaultIdentifier, node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier")), true;
            }
            return !!tokenIsKeywordOrIdentifier(this.state.type) && (this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier"), true);
          }
          maybeParseStarImportSpecifier(node) {
            if (this.match(55)) {
              const specifier = this.startNode();
              return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier"), true;
            }
            return false;
          }
          parseNamedImportSpecifiers(node) {
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first) first = false;
              else {
                if (this.eat(14)) throw this.raise(Errors.DestructureNamedImport, { at: this.state.startLoc });
                if (this.expect(12), this.eat(8)) break;
              }
              const specifier = this.startNode(), importedIsString = this.match(133), isMaybeTypeOnly = this.isContextual(130);
              specifier.imported = this.parseModuleExportName();
              const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, "type" === node.importKind || "typeof" === node.importKind, isMaybeTypeOnly, void 0);
              node.specifiers.push(importSpecifier);
            }
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            if (this.eatContextual(93)) specifier.local = this.parseIdentifier();
            else {
              const { imported } = specifier;
              if (importedIsString) throw this.raise(Errors.ImportBindingIsString, { at: specifier, importName: imported.value });
              this.checkReservedWord(imported.name, specifier.loc.start, true, true), specifier.local || (specifier.local = cloneIdentifier(imported));
            }
            return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
          }
          isThisParam(param) {
            return "Identifier" === param.type && "this" === param.name;
          }
        }
        class Parser extends StatementParser {
          constructor(options, input) {
            super(options = function(opts) {
              if (null == opts) return Object.assign({}, defaultOptions);
              if (null != opts.annexB && false !== opts.annexB) throw new Error("The `annexB` option can only be set to `false`.");
              const options2 = {};
              for (const key of Object.keys(defaultOptions)) {
                var _opts$key;
                options2[key] = null != (_opts$key = opts[key]) ? _opts$key : defaultOptions[key];
              }
              return options2;
            }(options), input), this.options = options, this.initializeScopes(), this.plugins = function(plugins) {
              const pluginMap = /* @__PURE__ */ new Map();
              for (const plugin of plugins) {
                const [name, options2] = Array.isArray(plugin) ? plugin : [plugin, {}];
                pluginMap.has(name) || pluginMap.set(name, options2 || {});
              }
              return pluginMap;
            }(this.options.plugins), this.filename = options.sourceFilename;
          }
          getScopeHandler() {
            return ScopeHandler;
          }
          parse() {
            this.enterInitialScopes();
            const file = this.startNode(), program = this.startNode();
            return this.nextToken(), file.errors = null, this.parseTopLevel(file, program), file.errors = this.state.errors, file;
          }
        }
        const tokTypes = function(internalTokenTypes) {
          const tokenTypes2 = {};
          for (const typeName of Object.keys(internalTokenTypes)) tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
          return tokenTypes2;
        }(tt);
        function getParser(options, input) {
          let cls = Parser;
          return null != options && options.plugins && (!function(plugins) {
            if (hasPlugin(plugins, "decorators")) {
              if (hasPlugin(plugins, "decorators-legacy")) throw new Error("Cannot use the decorators and decorators-legacy plugin together");
              const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
              if (null != decoratorsBeforeExport && "boolean" != typeof decoratorsBeforeExport) throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
              const allowCallParenthesized = getPluginOption(plugins, "decorators", "allowCallParenthesized");
              if (null != allowCallParenthesized && "boolean" != typeof allowCallParenthesized) throw new Error("'allowCallParenthesized' must be a boolean.");
            }
            if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) throw new Error("Cannot combine flow and typescript plugins.");
            if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
            if (hasPlugin(plugins, "pipelineOperator")) {
              const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");
              if (!PIPELINE_PROPOSALS.includes(proposal)) {
                const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
                throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
              }
              const tupleSyntaxIsHash = hasPlugin(plugins, ["recordAndTuple", { syntaxType: "hash" }]);
              if ("hack" === proposal) {
                if (hasPlugin(plugins, "placeholders")) throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
                if (hasPlugin(plugins, "v8intrinsic")) throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
                const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");
                if (!TOPIC_TOKENS.includes(topicToken)) {
                  const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
                  throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
                }
                if ("#" === topicToken && tupleSyntaxIsHash) throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
              } else if ("smart" === proposal && tupleSyntaxIsHash) throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
            }
            if (hasPlugin(plugins, "moduleAttributes")) {
              if (hasPlugin(plugins, "importAssertions") || hasPlugin(plugins, "importAttributes")) throw new Error("Cannot combine importAssertions, importAttributes and moduleAttributes plugins.");
              if ("may-2020" !== getPluginOption(plugins, "moduleAttributes", "version")) throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
            }
            if (hasPlugin(plugins, "importAssertions") && hasPlugin(plugins, "importAttributes")) throw new Error("Cannot combine importAssertions and importAttributes plugins.");
            if (hasPlugin(plugins, "recordAndTuple") && null != getPluginOption(plugins, "recordAndTuple", "syntaxType") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
            if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
              const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
              throw error.missingPlugins = "doExpressions", error;
            }
            if (hasPlugin(plugins, "optionalChainingAssign") && "2023-07" !== getPluginOption(plugins, "optionalChainingAssign", "version")) throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.");
          }(options.plugins), cls = function(pluginsFromOptions) {
            const pluginList = mixinPluginNames.filter((name) => hasPlugin(pluginsFromOptions, name)), key = pluginList.join("/");
            let cls2 = parserClassCache[key];
            if (!cls2) {
              cls2 = Parser;
              for (const plugin of pluginList) cls2 = mixinPlugins[plugin](cls2);
              parserClassCache[key] = cls2;
            }
            return cls2;
          }(options.plugins)), new cls(options, input);
        }
        const parserClassCache = {};
        exports3.parse = function(input, options) {
          var _options;
          if ("unambiguous" !== (null == (_options = options) ? void 0 : _options.sourceType)) return getParser(options, input).parse();
          options = Object.assign({}, options);
          try {
            options.sourceType = "module";
            const parser = getParser(options, input), ast = parser.parse();
            if (parser.sawUnambiguousESM) return ast;
            if (parser.ambiguousScriptDifferentAst) try {
              return options.sourceType = "script", getParser(options, input).parse();
            } catch (_unused) {
            }
            else ast.program.sourceType = "script";
            return ast;
          } catch (moduleError) {
            try {
              return options.sourceType = "script", getParser(options, input).parse();
            } catch (_unused2) {
            }
            throw moduleError;
          }
        }, exports3.parseExpression = function(input, options) {
          const parser = getParser(options, input);
          return parser.options.strictMode && (parser.state.strict = true), parser.getExpression();
        }, exports3.tokTypes = tokTypes;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.23.2_@babel+core@7.23.2/node_modules/@babel/plugin-proposal-decorators/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxDecorators = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.22.10_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-decorators/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _transformerLegacy = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.23.2_@babel+core@7.23.2/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js"), _transformer = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.23.2_@babel+core@7.23.2/node_modules/@babel/plugin-proposal-decorators/lib/transformer-2023-05.js"), _default = (0, _helperPluginUtils.declare)((api, options) => {
          api.assertVersion(7);
          var { legacy } = options;
          const { version } = options;
          return legacy || "legacy" === version ? { name: "proposal-decorators", inherits: _pluginSyntaxDecorators.default, visitor: _transformerLegacy.default } : "2021-12" === version || "2022-03" === version || "2023-01" === version || "2023-05" === version ? (0, _transformer.default)(api, options, version) : (api.assertVersion("^7.0.2"), (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({ name: "proposal-decorators", api, feature: _helperCreateClassFeaturesPlugin.FEATURES.decorators, inherits: _pluginSyntaxDecorators.default }));
        });
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.23.2_@babel+core@7.23.2/node_modules/@babel/plugin-proposal-decorators/lib/transformer-2023-05.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function({ assertVersion, assumption }, { loose }, version) {
          var _assumption;
          assertVersion("2023-05" === version || "2023-01" === version ? "^7.21.0" : "2021-12" === version ? "^7.16.0" : "^7.19.0");
          const VISITED = /* @__PURE__ */ new WeakSet(), constantSuper = null != (_assumption = assumption("constantSuper")) ? _assumption : loose;
          return { name: "proposal-decorators", inherits: _pluginSyntaxDecorators.default, visitor: { "ExportNamedDeclaration|ExportDefaultDeclaration"(path3) {
            var _declaration$decorato;
            const { declaration } = path3.node;
            "ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && (null == (_declaration$decorato = declaration.decorators) ? void 0 : _declaration$decorato.length) > 0 && (0, _helperSplitExportDeclaration.default)(path3);
          }, Class(path3, state) {
            if (VISITED.has(path3)) return;
            const newPath = function(path4, state2, constantSuper2, version2) {
              const body = path4.get("body.body"), classDecorators = path4.node.decorators;
              let hasElementDecorators = false;
              const generateClassPrivateUid = /* @__PURE__ */ function(classPath) {
                let generator;
                return () => (generator || (generator = function(classPath2) {
                  const currentPrivateId = [], privateNames = /* @__PURE__ */ new Set();
                  return classPath2.traverse({ PrivateName(path5) {
                    privateNames.add(path5.node.id.name);
                  } }), () => {
                    let reifiedId;
                    do {
                      incrementId(currentPrivateId), reifiedId = String.fromCharCode(...currentPrivateId);
                    } while (privateNames.has(reifiedId));
                    return _core.types.privateName(_core.types.identifier(reifiedId));
                  };
                }(classPath)), generator());
              }(path4);
              for (const element of body) if (isClassDecoratableElementPath(element)) {
                if (element.node.decorators && element.node.decorators.length > 0) hasElementDecorators = true;
                else if ("ClassAccessorProperty" === element.node.type) {
                  const { key, value: value2, static: isStatic, computed } = element.node, newId = generateClassPrivateUid(), newField = generateClassProperty(newId, value2 ? _core.types.cloneNode(value2) : void 0, isStatic), [newPath2] = element.replaceWith(newField);
                  addProxyAccessorsFor(path4.node.id, newPath2, key, newId, version2, computed);
                }
              }
              if (!classDecorators && !hasElementDecorators) return;
              const elementDecoratorInfo = [];
              let firstFieldPath, constructorPath, requiresProtoInit = false, requiresStaticInit = false;
              const decoratedPrivateMethods = /* @__PURE__ */ new Set();
              let protoInitLocal, staticInitLocal, classInitLocal, classIdLocal;
              const assignments = [], scopeParent = path4.scope.parent, memoiseExpression = (expression, hint) => {
                const localEvaluatedId = scopeParent.generateDeclaredUidIdentifier(hint);
                return assignments.push(_core.types.assignmentExpression("=", localEvaluatedId, expression)), _core.types.cloneNode(localEvaluatedId);
              }, decoratorsThis = /* @__PURE__ */ new Map(), maybeExtractDecorator = (decorator) => {
                const { expression } = decorator;
                if ("2023-05" === version2 && _core.types.isMemberExpression(expression)) {
                  let object;
                  _core.types.isSuper(expression.object) || _core.types.isThisExpression(expression.object) ? object = memoiseExpression(_core.types.thisExpression(), "obj") : scopeParent.isStatic(expression.object) ? object = expression.object : (object = memoiseExpression(expression.object, "obj"), expression.object = object), decoratorsThis.set(decorator, _core.types.cloneNode(object));
                }
                scopeParent.isStatic(expression) || (decorator.expression = memoiseExpression(expression, "dec"));
              };
              if (classDecorators) {
                classInitLocal = scopeParent.generateDeclaredUidIdentifier("initClass");
                const [classId, classPath] = function(path5) {
                  if ("ClassDeclaration" === path5.type) {
                    const varId = path5.scope.generateUidIdentifierBasedOnNode(path5.node.id), classId2 = _core.types.identifier(path5.node.id.name);
                    return path5.scope.rename(classId2.name, varId.name), path5.insertBefore(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(varId)])), path5.get("id").replaceWith(classId2), [_core.types.cloneNode(varId), path5];
                  }
                  {
                    let className, varId;
                    path5.node.id ? (className = path5.node.id.name, varId = path5.scope.parent.generateDeclaredUidIdentifier(className), path5.scope.rename(className, varId.name)) : "VariableDeclarator" === path5.parentPath.node.type && "Identifier" === path5.parentPath.node.id.type ? (className = path5.parentPath.node.id.name, varId = path5.scope.parent.generateDeclaredUidIdentifier(className)) : varId = path5.scope.parent.generateDeclaredUidIdentifier("decorated_class");
                    const newClassExpr = _core.types.classExpression(className && _core.types.identifier(className), path5.node.superClass, path5.node.body), [newPath2] = path5.replaceWith(_core.types.sequenceExpression([newClassExpr, varId]));
                    return [_core.types.cloneNode(varId), newPath2.get("expressions.0")];
                  }
                }(path4);
                classIdLocal = classId, (path4 = classPath).node.decorators = null;
                for (const classDecorator of classDecorators) maybeExtractDecorator(classDecorator);
              } else path4.node.id || (path4.node.id = path4.scope.generateUidIdentifier("Class")), classIdLocal = _core.types.cloneNode(path4.node.id);
              let lastInstancePrivateName, needsInstancePrivateBrandCheck = false;
              if (hasElementDecorators) for (const element of body) {
                if (!isClassDecoratableElementPath(element)) continue;
                const { node } = element, decorators = element.get("decorators"), hasDecorators = Array.isArray(decorators) && decorators.length > 0;
                if (hasDecorators) for (const decoratorPath of decorators) maybeExtractDecorator(decoratorPath.node);
                const isComputed = "computed" in element.node && true === element.node.computed;
                isComputed && (scopeParent.isStatic(node.key) || (node.key = memoiseExpression(node.key, "computedKey")));
                const kind = getElementKind(element), { key } = node, isPrivate = "PrivateName" === key.type, isStatic = !!element.node.static;
                let name = "computedKey";
                if (isPrivate ? name = key.id.name : isComputed || "Identifier" !== key.type || (name = key.name), isPrivate && !isStatic && (hasDecorators && (needsInstancePrivateBrandCheck = true), !_core.types.isClassPrivateProperty(node) && lastInstancePrivateName || (lastInstancePrivateName = key)), element.isClassMethod({ kind: "constructor" }) && (constructorPath = element), hasDecorators) {
                  let locals, privateMethods, nameExpr;
                  if (kind === ACCESSOR) {
                    const { value: value2 } = element.node, params = [_core.types.thisExpression()];
                    value2 && params.push(_core.types.cloneNode(value2));
                    const newId = generateClassPrivateUid(), newFieldInitId = element.scope.parent.generateDeclaredUidIdentifier(`init_${name}`), newField = generateClassProperty(newId, _core.types.callExpression(_core.types.cloneNode(newFieldInitId), params), isStatic), [newPath2] = element.replaceWith(newField);
                    if (isPrivate) {
                      privateMethods = extractProxyAccessorsFor(newId, version2);
                      const getId = newPath2.scope.parent.generateDeclaredUidIdentifier(`get_${name}`), setId = newPath2.scope.parent.generateDeclaredUidIdentifier(`set_${name}`);
                      addCallAccessorsFor(newPath2, key, getId, setId), locals = [newFieldInitId, getId, setId];
                    } else addProxyAccessorsFor(path4.node.id, newPath2, key, newId, version2, isComputed), locals = newFieldInitId;
                  } else if (kind === FIELD) {
                    const initId = element.scope.parent.generateDeclaredUidIdentifier(`init_${name}`), valuePath = element.get("value");
                    valuePath.replaceWith(_core.types.callExpression(_core.types.cloneNode(initId), [_core.types.thisExpression(), valuePath.node].filter((v) => v))), locals = initId, isPrivate && (privateMethods = extractProxyAccessorsFor(key, version2));
                  } else if (isPrivate) {
                    locals = element.scope.parent.generateDeclaredUidIdentifier(`call_${name}`);
                    new _helperReplaceSupers.default({ constantSuper: constantSuper2, methodPath: element, objectRef: classIdLocal, superRef: path4.node.superClass, file: state2.file, refToPreserve: classIdLocal }).replace();
                    const { params, body: body2, async: isAsync } = element.node;
                    if (privateMethods = [_core.types.functionExpression(void 0, params.filter(isNotTsParameter), body2, isAsync)], kind === GETTER || kind === SETTER) movePrivateAccessor(element, _core.types.cloneNode(key), _core.types.cloneNode(locals), isStatic);
                    else {
                      const node2 = element.node;
                      path4.node.body.body.unshift(_core.types.classPrivateProperty(key, _core.types.cloneNode(locals), [], node2.static)), decoratedPrivateMethods.add(key.id.name), element.remove();
                    }
                  }
                  nameExpr = isComputed ? _core.types.cloneNode(key) : "PrivateName" === key.type ? _core.types.stringLiteral(key.id.name) : "Identifier" === key.type ? _core.types.stringLiteral(key.name) : _core.types.cloneNode(key), elementDecoratorInfo.push({ kind, decorators: decorators.map((d) => d.node.expression), decoratorsThis: decorators.map((d) => decoratorsThis.get(d.node)), name: nameExpr, isStatic, privateMethods, locals }), kind !== FIELD && (isStatic ? requiresStaticInit = true : requiresProtoInit = true), element.node && (element.node.decorators = null), firstFieldPath || isStatic || kind !== FIELD && kind !== ACCESSOR || (firstFieldPath = element);
                }
              }
              const elementDecorations = function(info, version3) {
                return _core.types.arrayExpression(filteredOrderedDecoratorInfo(info).map((el) => {
                  const { decs, hasThis } = generateDecorationList(el.decorators, el.decoratorsThis, version3);
                  let flag = el.kind;
                  return el.isStatic && (flag += "2023-05" === version3 ? STATIC : STATIC_OLD_VERSION), hasThis && (flag += DECORATORS_HAVE_THIS), _core.types.arrayExpression([1 === decs.length ? decs[0] : _core.types.arrayExpression(decs), _core.types.numericLiteral(flag), el.name, ...el.privateMethods || []]);
                }));
              }(elementDecoratorInfo, version2);
              let classDecorationsFlag = 0, classDecorations = [];
              if (classDecorators) {
                const { hasThis, decs } = generateDecorationList(classDecorators.map((el) => el.expression), classDecorators.map((dec) => decoratorsThis.get(dec)), version2);
                classDecorationsFlag = hasThis ? 1 : 0, classDecorations = decs;
              }
              const elementLocals = function(decorationInfo) {
                const localIds = [];
                for (const el of filteredOrderedDecoratorInfo(decorationInfo)) {
                  const { locals } = el;
                  Array.isArray(locals) ? localIds.push(...locals) : void 0 !== locals && localIds.push(locals);
                }
                return localIds;
              }(elementDecoratorInfo);
              if (requiresProtoInit) {
                protoInitLocal = scopeParent.generateDeclaredUidIdentifier("initProto"), elementLocals.push(protoInitLocal);
                const protoInitCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [_core.types.thisExpression()]);
                if (firstFieldPath) {
                  const value2 = firstFieldPath.get("value"), body2 = [protoInitCall];
                  value2.node && body2.push(value2.node), value2.replaceWith(_core.types.sequenceExpression(body2));
                } else if (constructorPath) path4.node.superClass ? path4.traverse({ CallExpression: { exit(path5) {
                  path5.get("callee").isSuper() && (path5.replaceWith(_core.types.callExpression(_core.types.cloneNode(protoInitLocal), [path5.node])), path5.skip());
                } } }) : constructorPath.node.body.body.unshift(_core.types.expressionStatement(protoInitCall));
                else {
                  const body2 = [_core.types.expressionStatement(protoInitCall)];
                  path4.node.superClass && body2.unshift(_core.types.expressionStatement(_core.types.callExpression(_core.types.super(), [_core.types.spreadElement(_core.types.identifier("args"))]))), path4.node.body.body.unshift(_core.types.classMethod("constructor", _core.types.identifier("constructor"), [_core.types.restElement(_core.types.identifier("args"))], _core.types.blockStatement(body2)));
                }
              }
              requiresStaticInit && (staticInitLocal = scopeParent.generateDeclaredUidIdentifier("initStatic"), elementLocals.push(staticInitLocal));
              decoratedPrivateMethods.size > 0 && path4.traverse({ PrivateName(path5) {
                if (!decoratedPrivateMethods.has(path5.node.id.name)) return;
                const parentPath = path5.parentPath, parentParentPath = parentPath.parentPath;
                if ("AssignmentExpression" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node || "UpdateExpression" === parentParentPath.node.type || "RestElement" === parentParentPath.node.type || "ArrayPattern" === parentParentPath.node.type || "ObjectProperty" === parentParentPath.node.type && parentParentPath.node.value === parentPath.node && "ObjectPattern" === parentParentPath.parentPath.type || "ForOfStatement" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node) throw path5.buildCodeFrameError(`Decorated private methods are not updatable, but "#${path5.node.id.name}" is updated via this expression.`);
              } });
              const classLocals = [];
              let classInitInjected = false;
              const classInitCall = classInitLocal && _core.types.callExpression(_core.types.cloneNode(classInitLocal), []), originalClass = path4.node;
              if (classDecorators) {
                classLocals.push(classIdLocal, classInitLocal);
                const statics = [];
                let staticBlocks = [];
                if (path4.get("body.body").forEach((element) => {
                  if (element.isStaticBlock()) return staticBlocks.push(element.node), void element.remove();
                  const isProperty = element.isClassProperty() || element.isClassPrivateProperty();
                  if ((isProperty || element.isClassPrivateMethod()) && element.node.static) {
                    if (isProperty && staticBlocks.length > 0) {
                      const allValues = staticBlocks.map(staticBlockToIIFE);
                      element.node.value && allValues.push(element.node.value), element.node.value = 0 === (exprs = allValues).length ? _core.types.unaryExpression("void", _core.types.numericLiteral(0)) : 1 === exprs.length ? exprs[0] : _core.types.sequenceExpression(exprs), staticBlocks = [];
                    }
                    element.node.static = false, statics.push(element.node), element.remove();
                  }
                  var exprs;
                }), statics.length > 0 || staticBlocks.length > 0) {
                  const staticsClass = _core.template.expression.ast`
        class extends ${state2.addHelper("identity")} {}
      `;
                  staticsClass.body.body = [_core.types.staticBlock([_core.types.toStatement(originalClass, true) || _core.types.expressionStatement(originalClass)]), ...statics];
                  const constructorBody = [], newExpr = _core.types.newExpression(staticsClass, []);
                  staticBlocks.length > 0 && constructorBody.push(...staticBlocks.map(staticBlockToIIFE)), classInitCall && (classInitInjected = true, constructorBody.push(classInitCall)), constructorBody.length > 0 ? (constructorBody.unshift(_core.types.callExpression(_core.types.super(), [_core.types.cloneNode(classIdLocal)])), staticsClass.body.body.push(_core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([_core.types.expressionStatement(_core.types.sequenceExpression(constructorBody))])))) : newExpr.arguments.push(_core.types.cloneNode(classIdLocal)), path4.replaceWith(newExpr);
                }
              }
              !classInitInjected && classInitCall && path4.node.body.body.push(_core.types.staticBlock([_core.types.expressionStatement(classInitCall)]));
              let { superClass } = originalClass;
              if (superClass && "2023-05" === version2) {
                const id = path4.scope.maybeGenerateMemoised(superClass);
                id && (originalClass.superClass = _core.types.assignmentExpression("=", id, superClass), superClass = id);
              }
              return originalClass.body.body.unshift(_core.types.staticBlock([_core.types.expressionStatement(createLocalsAssignment(elementLocals, classLocals, elementDecorations, _core.types.arrayExpression(classDecorations), _core.types.numericLiteral(classDecorationsFlag), needsInstancePrivateBrandCheck ? lastInstancePrivateName : null, _core.types.cloneNode(superClass), state2, version2)), requiresStaticInit && _core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(staticInitLocal), [_core.types.thisExpression()]))].filter(Boolean))), path4.insertBefore(assignments.map((expr) => _core.types.expressionStatement(expr))), path4.scope.crawl(), path4;
            }(path3, state, constantSuper, version);
            newPath && VISITED.add(newPath);
          } } };
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _pluginSyntaxDecorators = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.22.10_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-decorators/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.22.20_@babel+core@7.23.2/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.22.6/node_modules/@babel/helper-split-export-declaration/lib/index.js");
        function incrementId(id, idx = id.length - 1) {
          if (-1 === idx) return void id.unshift(65);
          const current = id[idx];
          90 === current ? id[idx] = 97 : 122 === current ? (id[idx] = 65, incrementId(id, idx - 1)) : id[idx] = current + 1;
        }
        function generateClassProperty(key, value2, isStatic) {
          return "PrivateName" === key.type ? _core.types.classPrivateProperty(key, value2, void 0, isStatic) : _core.types.classProperty(key, value2, void 0, void 0, isStatic);
        }
        function addProxyAccessorsFor(className, element, originalKey, targetKey, version, isComputed = false) {
          const { static: isStatic } = element.node, thisArg = "2023-05" === version && isStatic ? className : _core.types.thisExpression(), getterBody = _core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)))]), setterBody = _core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)), _core.types.identifier("v")))]);
          let getter, setter;
          "PrivateName" === originalKey.type ? (getter = _core.types.classPrivateMethod("get", _core.types.cloneNode(originalKey), [], getterBody, isStatic), setter = _core.types.classPrivateMethod("set", _core.types.cloneNode(originalKey), [_core.types.identifier("v")], setterBody, isStatic)) : (getter = _core.types.classMethod("get", _core.types.cloneNode(originalKey), [], getterBody, isComputed, isStatic), setter = _core.types.classMethod("set", _core.types.cloneNode(originalKey), [_core.types.identifier("v")], setterBody, isComputed, isStatic)), element.insertAfter(setter), element.insertAfter(getter);
        }
        function extractProxyAccessorsFor(targetKey, version) {
          return "2023-05" !== version && "2023-01" !== version ? [_core.template.expression.ast`
        function () {
          return this.${_core.types.cloneNode(targetKey)};
        }
      `, _core.template.expression.ast`
        function (value) {
          this.${_core.types.cloneNode(targetKey)} = value;
        }
      `] : [_core.template.expression.ast`
      o => o.${_core.types.cloneNode(targetKey)}
    `, _core.template.expression.ast`
      (o, v) => o.${_core.types.cloneNode(targetKey)} = v
    `];
        }
        const FIELD = 0, ACCESSOR = 1, METHOD = 2, GETTER = 3, SETTER = 4, STATIC_OLD_VERSION = 5, STATIC = 8, DECORATORS_HAVE_THIS = 16;
        function getElementKind(element) {
          switch (element.node.type) {
            case "ClassProperty":
            case "ClassPrivateProperty":
              return FIELD;
            case "ClassAccessorProperty":
              return ACCESSOR;
            case "ClassMethod":
            case "ClassPrivateMethod":
              return "get" === element.node.kind ? GETTER : "set" === element.node.kind ? SETTER : METHOD;
          }
        }
        function isDecoratorInfo(info) {
          return "decorators" in info;
        }
        function filteredOrderedDecoratorInfo(info) {
          const filtered = info.filter(isDecoratorInfo);
          return [...filtered.filter((el) => el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...filtered.filter((el) => !el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...filtered.filter((el) => el.isStatic && el.kind === FIELD), ...filtered.filter((el) => !el.isStatic && el.kind === FIELD)];
        }
        function generateDecorationList(decorators, decoratorsThis, version) {
          const decsCount = decorators.length, hasOneThis = decoratorsThis.some(Boolean), decs = [];
          for (let i = 0; i < decsCount; i++) "2023-05" === version && hasOneThis && decs.push(decoratorsThis[i] || _core.types.unaryExpression("void", _core.types.numericLiteral(0))), decs.push(decorators[i]);
          return { hasThis: hasOneThis, decs };
        }
        function addCallAccessorsFor(element, key, getId, setId) {
          element.insertAfter(_core.types.classPrivateMethod("get", _core.types.cloneNode(key), [], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.cloneNode(getId), [_core.types.thisExpression()]))]))), element.insertAfter(_core.types.classPrivateMethod("set", _core.types.cloneNode(key), [_core.types.identifier("v")], _core.types.blockStatement([_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(setId), [_core.types.thisExpression(), _core.types.identifier("v")]))])));
        }
        function isNotTsParameter(node) {
          return "TSParameterProperty" !== node.type;
        }
        function movePrivateAccessor(element, key, methodLocalVar, isStatic) {
          let params, block;
          "set" === element.node.kind ? (params = [_core.types.identifier("v")], block = [_core.types.expressionStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression(), _core.types.identifier("v")]))]) : (params = [], block = [_core.types.returnStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression()]))]), element.replaceWith(_core.types.classPrivateMethod(element.node.kind, _core.types.cloneNode(key), params, _core.types.blockStatement(block), isStatic));
        }
        function isClassDecoratableElementPath(path3) {
          const { type } = path3;
          return "TSDeclareMethod" !== type && "TSIndexSignature" !== type && "StaticBlock" !== type;
        }
        function staticBlockToIIFE(block) {
          return _core.types.callExpression(_core.types.arrowFunctionExpression([], _core.types.blockStatement(block.body)), []);
        }
        function createLocalsAssignment(elementLocals, classLocals, elementDecorations, classDecorations, classDecorationsFlag, maybePrivateBranName, superClass, state, version) {
          let lhs, rhs;
          const args = [_core.types.thisExpression(), elementDecorations, classDecorations];
          if ("2021-12" === version || "2022-03" === version && !state.availableHelper("applyDecs2203R")) {
            const lhs2 = _core.types.arrayPattern([...elementLocals, ...classLocals]), rhs2 = _core.types.callExpression(state.addHelper("2021-12" === version ? "applyDecs" : "applyDecs2203"), args);
            return _core.types.assignmentExpression("=", lhs2, rhs2);
          }
          return "2023-05" === version ? ((maybePrivateBranName || superClass || 0 !== classDecorationsFlag.value) && args.push(classDecorationsFlag), maybePrivateBranName ? args.push(_core.template.expression.ast`
            _ => ${_core.types.cloneNode(maybePrivateBranName)} in _
          `) : superClass && args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0))), superClass && args.push(superClass), rhs = _core.types.callExpression(state.addHelper("applyDecs2305"), args)) : "2023-01" === version ? (maybePrivateBranName && args.push(_core.template.expression.ast`
            _ => ${_core.types.cloneNode(maybePrivateBranName)} in _
          `), rhs = _core.types.callExpression(state.addHelper("applyDecs2301"), args)) : rhs = _core.types.callExpression(state.addHelper("applyDecs2203R"), args), elementLocals.length > 0 ? classLocals.length > 0 ? lhs = _core.types.objectPattern([_core.types.objectProperty(_core.types.identifier("e"), _core.types.arrayPattern(elementLocals)), _core.types.objectProperty(_core.types.identifier("c"), _core.types.arrayPattern(classLocals))]) : (lhs = _core.types.arrayPattern(elementLocals), rhs = _core.types.memberExpression(rhs, _core.types.identifier("e"), false, false)) : (lhs = _core.types.arrayPattern(classLocals), rhs = _core.types.memberExpression(rhs, _core.types.identifier("c"), false, false)), _core.types.assignmentExpression("=", lhs, rhs);
        }
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.23.2_@babel+core@7.23.2/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js");
        const buildClassDecorator = _core.template.statement("\n  DECORATOR(CLASS_REF = INNER) || CLASS_REF;\n"), buildClassPrototype = (0, _core.template)("\n  CLASS_REF.prototype;\n"), buildGetDescriptor = (0, _core.template)("\n    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);\n"), buildGetObjectInitializer = (0, _core.template)("\n    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        initializer: function(){\n            return TEMP;\n        }\n    })\n"), WARNING_CALLS = /* @__PURE__ */ new WeakSet();
        function applyEnsureOrdering(path3) {
          const identDecorators = (path3.isClass() ? [path3, ...path3.get("body.body")] : path3.get("properties")).reduce((acc, prop) => acc.concat(prop.node.decorators || []), []).filter((decorator) => !_core.types.isIdentifier(decorator.expression));
          if (0 !== identDecorators.length) return _core.types.sequenceExpression(identDecorators.map((decorator) => {
            const expression = decorator.expression, id = decorator.expression = path3.scope.generateDeclaredUidIdentifier("dec");
            return _core.types.assignmentExpression("=", id, expression);
          }).concat([path3.node]));
        }
        function hasClassDecorators(classNode) {
          var _classNode$decorators;
          return !(null == (_classNode$decorators = classNode.decorators) || !_classNode$decorators.length);
        }
        function hasMethodDecorators(body) {
          return body.some((node) => {
            var _node$decorators;
            return null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length;
          });
        }
        function applyTargetDecorators(path3, state, decoratedProps) {
          const name = path3.scope.generateDeclaredUidIdentifier(path3.isClass() ? "class" : "obj"), exprs = decoratedProps.reduce(function(acc, node) {
            let decorators = [];
            if (null != node.decorators && (decorators = node.decorators, node.decorators = null), 0 === decorators.length) return acc;
            if (node.computed) throw path3.buildCodeFrameError("Computed method/property decorators are not yet supported.");
            const property = _core.types.isLiteral(node.key) ? node.key : _core.types.stringLiteral(node.key.name), target = path3.isClass() && !node.static ? buildClassPrototype({ CLASS_REF: name }).expression : name;
            if (_core.types.isClassProperty(node, { static: false })) {
              const descriptor = path3.scope.generateDeclaredUidIdentifier("descriptor"), initializer = node.value ? _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(node.value)])) : _core.types.nullLiteral();
              node.value = _core.types.callExpression(state.addHelper("initializerWarningHelper"), [descriptor, _core.types.thisExpression()]), WARNING_CALLS.add(node.value), acc.push(_core.types.assignmentExpression("=", _core.types.cloneNode(descriptor), _core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.objectExpression([_core.types.objectProperty(_core.types.identifier("configurable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("enumerable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("writable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("initializer"), initializer)])])));
            } else acc.push(_core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.isObjectProperty(node) || _core.types.isClassProperty(node, { static: true }) ? buildGetObjectInitializer({ TEMP: path3.scope.generateDeclaredUidIdentifier("init"), TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression : buildGetDescriptor({ TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression, _core.types.cloneNode(target)]));
            return acc;
          }, []);
          return _core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(name), path3.node), _core.types.sequenceExpression(exprs), _core.types.cloneNode(name)]);
        }
        function decoratedClassToExpression({ node, scope }) {
          if (!hasClassDecorators(node) && !hasMethodDecorators(node.body.body)) return;
          const ref = node.id ? _core.types.cloneNode(node.id) : scope.generateUidIdentifier("class");
          return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(ref, _core.types.toExpression(node))]);
        }
        var _default = { ExportDefaultDeclaration(path3) {
          const decl = path3.get("declaration");
          if (!decl.isClassDeclaration()) return;
          const replacement = decoratedClassToExpression(decl);
          if (replacement) {
            const [varDeclPath] = path3.replaceWithMultiple([replacement, _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(replacement.declarations[0].id), _core.types.identifier("default"))])]);
            decl.node.id || path3.scope.registerDeclaration(varDeclPath);
          }
        }, ClassDeclaration(path3) {
          const replacement = decoratedClassToExpression(path3);
          if (replacement) {
            const [newPath] = path3.replaceWith(replacement), decl = newPath.get("declarations.0"), id = decl.node.id, binding = path3.scope.getOwnBinding(id.name);
            binding.identifier = id, binding.path = decl;
          }
        }, ClassExpression(path3, state) {
          const decoratedClass = applyEnsureOrdering(path3) || function(classPath) {
            if (!hasClassDecorators(classPath.node)) return;
            const decorators = classPath.node.decorators || [];
            classPath.node.decorators = null;
            const name = classPath.scope.generateDeclaredUidIdentifier("class");
            return decorators.map((dec) => dec.expression).reverse().reduce(function(acc, decorator) {
              return buildClassDecorator({ CLASS_REF: _core.types.cloneNode(name), DECORATOR: _core.types.cloneNode(decorator), INNER: acc }).expression;
            }, classPath.node);
          }(path3) || function(path4, state2) {
            if (hasMethodDecorators(path4.node.body.body)) return applyTargetDecorators(path4, state2, path4.node.body.body);
          }(path3, state);
          decoratedClass && path3.replaceWith(decoratedClass);
        }, ObjectExpression(path3, state) {
          const decoratedObject = applyEnsureOrdering(path3) || function(path4, state2) {
            if (hasMethodDecorators(path4.node.properties)) return applyTargetDecorators(path4, state2, path4.node.properties.filter((prop) => "SpreadElement" !== prop.type));
          }(path3, state);
          decoratedObject && path3.replaceWith(decoratedObject);
        }, AssignmentExpression(path3, state) {
          WARNING_CALLS.has(path3.node.right) && path3.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path3.get("left.object").node), _core.types.stringLiteral(path3.get("left.property").node.name || path3.get("left.property").node.value), _core.types.cloneNode(path3.get("right.arguments")[0].node), _core.types.cloneNode(path3.get("right.arguments")[1].node)]));
        }, CallExpression(path3, state) {
          3 === path3.node.arguments.length && WARNING_CALLS.has(path3.node.arguments[2]) && path3.node.callee.name === state.addHelper("defineProperty").name && path3.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path3.get("arguments")[0].node), _core.types.cloneNode(path3.get("arguments")[1].node), _core.types.cloneNode(path3.get("arguments.2.arguments")[0].node), _core.types.cloneNode(path3.get("arguments.2.arguments")[1].node)]));
        } };
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.22.10_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-decorators/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api, options) => {
          api.assertVersion(7);
          let { version } = options;
          {
            const { legacy } = options;
            if (void 0 !== legacy) {
              if ("boolean" != typeof legacy) throw new Error(".legacy must be a boolean.");
              if (void 0 !== version) throw new Error("You can either use the .legacy or the .version option, not both.");
            }
            if (void 0 === version) version = legacy ? "legacy" : "2018-09";
            else if ("2023-05" !== version && "2023-01" !== version && "2022-03" !== version && "2021-12" !== version && "2018-09" !== version && "legacy" !== version) throw new Error("Unsupported decorators version: " + version);
            var { decoratorsBeforeExport } = options;
            if (void 0 === decoratorsBeforeExport) {
              if ("2021-12" === version || "2022-03" === version) decoratorsBeforeExport = false;
              else if ("2018-09" === version) throw new Error("The decorators plugin, when .version is '2018-09' or not specified, requires a 'decoratorsBeforeExport' option, whose value must be a boolean.");
            } else {
              if ("legacy" === version || "2022-03" === version || "2023-01" === version) throw new Error(`'decoratorsBeforeExport' can't be used with ${version} decorators.`);
              if ("boolean" != typeof decoratorsBeforeExport) throw new Error("'decoratorsBeforeExport' must be a boolean.");
            }
          }
          return { name: "syntax-decorators", manipulateOptions({ generatorOpts }, parserOpts) {
            "legacy" === version ? parserOpts.plugins.push("decorators-legacy") : "2023-01" === version || "2023-05" === version ? parserOpts.plugins.push(["decorators", { allowCallParenthesized: false }], "decoratorAutoAccessors") : "2022-03" === version ? parserOpts.plugins.push(["decorators", { decoratorsBeforeExport: false, allowCallParenthesized: false }], "decoratorAutoAccessors") : "2021-12" === version ? (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }], "decoratorAutoAccessors"), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport) : "2018-09" === version && (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }]), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport);
          } };
        });
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.22.5_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-import-assertions", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("importAssertions");
        } }));
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.22.5_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-jsx/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-jsx", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.some((p) => "typescript" === (Array.isArray(p) ? p[0] : p)) || parserOpts.plugins.push("jsx");
        } }));
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.22.5_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-typescript/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js"), removePlugin = function(plugins, name) {
          const indices = [];
          plugins.forEach((plugin, i) => {
            (Array.isArray(plugin) ? plugin[0] : plugin) === name && indices.unshift(i);
          });
          for (const i of indices) plugins.splice(i, 1);
        }, _default = (0, _helperPluginUtils.declare)((api, opts) => {
          api.assertVersion(7);
          const { disallowAmbiguousJSXLike, dts } = opts;
          var { isTSX } = opts;
          return { name: "syntax-typescript", manipulateOptions(opts2, parserOpts) {
            {
              const { plugins } = parserOpts;
              removePlugin(plugins, "flow"), removePlugin(plugins, "jsx"), plugins.push("objectRestSpread", "classProperties"), isTSX && plugins.push("jsx");
            }
            parserOpts.plugins.push(["typescript", { disallowAmbiguousJSXLike, dts }]);
          } };
        });
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-export-namespace-from@7.22.11_@babel+core@7.23.2/node_modules/@babel/plugin-transform-export-namespace-from/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _default = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { name: "transform-export-namespace-from", inherits: __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-export-namespace-from@7.8.3_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-export-namespace-from/lib/index.js").Z, visitor: { ExportNamedDeclaration(path3) {
          var _exported$name;
          const { node, scope } = path3, { specifiers } = node, index = _core.types.isExportDefaultSpecifier(specifiers[0]) ? 1 : 0;
          if (!_core.types.isExportNamespaceSpecifier(specifiers[index])) return;
          const nodes = [];
          1 === index && nodes.push(_core.types.exportNamedDeclaration(null, [specifiers.shift()], node.source));
          const specifier = specifiers.shift(), { exported } = specifier, uid = scope.generateUidIdentifier(null != (_exported$name = exported.name) ? _exported$name : exported.value);
          nodes.push(_core.types.importDeclaration([_core.types.importNamespaceSpecifier(uid)], _core.types.cloneNode(node.source)), _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(uid), exported)])), node.specifiers.length >= 1 && nodes.push(node);
          const [importDeclaration] = path3.replaceWithMultiple(nodes);
          path3.scope.registerDeclaration(importDeclaration);
        } } }));
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.transformDynamicImport = function(path3, noInterop, file) {
          const buildRequire = noInterop ? requireNoInterop : requireInterop;
          path3.replaceWith((0, _helperModuleTransforms.buildDynamicImport)(path3.node, true, false, (specifier) => buildRequire(specifier, file)));
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/index.js");
        const requireNoInterop = (source) => _core.template.expression.ast`require(${source})`, requireInterop = (source, file) => _core.types.callExpression(file.addHelper("interopRequireWildcard"), [requireNoInterop(source)]);
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.defineCommonJSHook = function(file, hook) {
          let hooks = file.get(commonJSHooksKey);
          hooks || file.set(commonJSHooksKey, hooks = []);
          hooks.push(hook);
        }, exports3.makeInvokers = function(file) {
          const hooks = file.get(commonJSHooksKey);
          return { getWrapperPayload: (...args) => findMap(hooks, (hook) => null == hook.getWrapperPayload ? void 0 : hook.getWrapperPayload(...args)), wrapReference: (...args) => findMap(hooks, (hook) => null == hook.wrapReference ? void 0 : hook.wrapReference(...args)), buildRequireWrapper: (...args) => findMap(hooks, (hook) => null == hook.buildRequireWrapper ? void 0 : hook.buildRequireWrapper(...args)) };
        };
        const commonJSHooksKey = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
        function findMap(arr, cb) {
          if (arr) for (const el of arr) {
            const res = cb(el);
            if (null != res) return res;
          }
        }
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0, Object.defineProperty(exports3, "defineCommonJSHook", { enumerable: true, get: function() {
          return _hooks.defineCommonJSHook;
        } });
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/index.js"), _helperSimpleAccess = __webpack_require__2("./node_modules/.pnpm/@babel+helper-simple-access@7.22.5/node_modules/@babel/helper-simple-access/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _dynamicImport = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js"), _lazy = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js"), _hooks = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js"), _default = (0, _helperPluginUtils.declare)((api, options) => {
          var _api$assumption, _api$assumption2, _api$assumption3;
          api.assertVersion(7);
          const { strictNamespace = false, mjsStrictNamespace = strictNamespace, allowTopLevelThis, strict, strictMode, noInterop, importInterop, lazy = false, allowCommonJSExports = true, loose = false } = options, constantReexports = null != (_api$assumption = api.assumption("constantReexports")) ? _api$assumption : loose, enumerableModuleMeta = null != (_api$assumption2 = api.assumption("enumerableModuleMeta")) ? _api$assumption2 : loose, noIncompleteNsImportDetection = null != (_api$assumption3 = api.assumption("noIncompleteNsImportDetection")) && _api$assumption3;
          if (!("boolean" == typeof lazy || "function" == typeof lazy || Array.isArray(lazy) && lazy.every((item) => "string" == typeof item))) throw new Error(".lazy must be a boolean, array of strings, or a function");
          if ("boolean" != typeof strictNamespace) throw new Error(".strictNamespace must be a boolean, or undefined");
          if ("boolean" != typeof mjsStrictNamespace) throw new Error(".mjsStrictNamespace must be a boolean, or undefined");
          const getAssertion = (localName) => _core.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, moduleExportsVisitor = { ReferencedIdentifier(path3) {
            const localName = path3.node.name;
            if ("module" !== localName && "exports" !== localName) return;
            const localBinding = path3.scope.getBinding(localName);
            this.scope.getBinding(localName) !== localBinding || path3.parentPath.isObjectProperty({ value: path3.node }) && path3.parentPath.parentPath.isObjectPattern() || path3.parentPath.isAssignmentExpression({ left: path3.node }) || path3.isAssignmentExpression({ left: path3.node }) || path3.replaceWith(getAssertion(localName));
          }, UpdateExpression(path3) {
            const arg = path3.get("argument");
            if (!arg.isIdentifier()) return;
            const localName = arg.node.name;
            if ("module" !== localName && "exports" !== localName) return;
            const localBinding = path3.scope.getBinding(localName);
            this.scope.getBinding(localName) === localBinding && path3.replaceWith(_core.types.assignmentExpression(path3.node.operator[0] + "=", arg.node, getAssertion(localName)));
          }, AssignmentExpression(path3) {
            const left = path3.get("left");
            if (left.isIdentifier()) {
              const localName = left.node.name;
              if ("module" !== localName && "exports" !== localName) return;
              const localBinding = path3.scope.getBinding(localName);
              if (this.scope.getBinding(localName) !== localBinding) return;
              const right = path3.get("right");
              right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
            } else if (left.isPattern()) {
              const ids = left.getOuterBindingIdentifiers(), localName = Object.keys(ids).filter((localName2) => ("module" === localName2 || "exports" === localName2) && this.scope.getBinding(localName2) === path3.scope.getBinding(localName2))[0];
              if (localName) {
                const right = path3.get("right");
                right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
              }
            }
          } };
          return { name: "transform-modules-commonjs", pre() {
            this.file.set("@babel/plugin-transform-modules-*", "commonjs"), lazy && (0, _hooks.defineCommonJSHook)(this.file, (0, _lazy.lazyImportsHook)(lazy));
          }, visitor: { ["CallExpression" + (api.types.importExpression ? "|ImportExpression" : "")](path3) {
            if (!this.file.has("@babel/plugin-proposal-dynamic-import")) return;
            if (path3.isCallExpression() && !_core.types.isImport(path3.node.callee)) return;
            let { scope } = path3;
            do {
              scope.rename("require");
            } while (scope = scope.parent);
            (0, _dynamicImport.transformDynamicImport)(path3, noInterop, this.file);
          }, Program: { exit(path3, state) {
            if (!(0, _helperModuleTransforms.isModule)(path3)) return;
            path3.scope.rename("exports"), path3.scope.rename("module"), path3.scope.rename("require"), path3.scope.rename("__filename"), path3.scope.rename("__dirname"), allowCommonJSExports || ((0, _helperSimpleAccess.default)(path3, /* @__PURE__ */ new Set(["module", "exports"]), false), path3.traverse(moduleExportsVisitor, { scope: path3.scope }));
            let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options);
            moduleName && (moduleName = _core.types.stringLiteral(moduleName));
            const hooks = (0, _hooks.makeInvokers)(this.file), { meta, headers } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path3, { exportName: "exports", constantReexports, enumerableModuleMeta, strict, strictMode, allowTopLevelThis, noInterop, importInterop, wrapReference: hooks.wrapReference, getWrapperPayload: hooks.getWrapperPayload, esNamespaceOnly: "string" == typeof state.filename && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace, noIncompleteNsImportDetection, filename: this.file.opts.filename });
            for (const [source, metadata] of meta.source) {
              const loadExpr = _core.types.callExpression(_core.types.identifier("require"), [_core.types.stringLiteral(source)]);
              let header;
              if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {
                if (lazy && "function" === metadata.wrap) throw new Error("Assertion failure");
                header = _core.types.expressionStatement(loadExpr);
              } else {
                const init = (0, _helperModuleTransforms.wrapInterop)(path3, loadExpr, metadata.interop) || loadExpr;
                if (metadata.wrap) {
                  const res = hooks.buildRequireWrapper(metadata.name, init, metadata.wrap, metadata.referenced);
                  if (false === res) continue;
                  header = res;
                }
                null != header || (header = _core.template.statement.ast`
                var ${metadata.name} = ${init};
              `);
              }
              header.loc = metadata.loc, headers.push(header), headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, constantReexports, hooks.wrapReference));
            }
            (0, _helperModuleTransforms.ensureStatementsHoisted)(headers), path3.unshiftContainer("body", headers), path3.get("body").forEach((path4) => {
              -1 !== headers.indexOf(path4.node) && path4.isVariableDeclaration() && path4.scope.registerDeclaration(path4);
            });
          } } } };
        });
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.lazyImportsHook = void 0;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.23.0_@babel+core@7.23.2/node_modules/@babel/helper-module-transforms/lib/index.js");
        exports3.lazyImportsHook = (lazy) => ({ name: "@babel/plugin-transform-modules-commonjs/lazy", version: "7.23.0", getWrapperPayload: (source, metadata) => (0, _helperModuleTransforms.isSideEffectImport)(metadata) || metadata.reexportAll ? null : true === lazy ? /\./.test(source) ? null : "lazy/function" : Array.isArray(lazy) ? -1 === lazy.indexOf(source) ? null : "lazy/function" : "function" == typeof lazy ? lazy(source) ? "lazy/function" : null : void 0, buildRequireWrapper(name, init, payload, referenced) {
          if ("lazy/function" === payload) return !!referenced && _core.template.statement.ast`
        function ${name}() {
          const data = ${init};
          ${name} = function(){ return data; };
          return data;
        }
      `;
        }, wrapReference(ref, payload) {
          if ("lazy/function" === payload) return _core.types.callExpression(ref, []);
        } });
      }, "./node_modules/.pnpm/@babel+plugin-transform-nullish-coalescing-operator@7.22.11_@babel+core@7.23.2/node_modules/@babel/plugin-transform-nullish-coalescing-operator/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _default = (0, _helperPluginUtils.declare)((api, { loose = false }) => {
          var _api$assumption;
          api.assertVersion(7);
          const noDocumentAll = null != (_api$assumption = api.assumption("noDocumentAll")) ? _api$assumption : loose;
          return { name: "transform-nullish-coalescing-operator", inherits: __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-nullish-coalescing-operator@7.8.3_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/lib/index.js").Z, visitor: { LogicalExpression(path3) {
            const { node, scope } = path3;
            if ("??" !== node.operator) return;
            let ref, assignment;
            if (scope.isStatic(node.left)) ref = node.left, assignment = _core.types.cloneNode(node.left);
            else {
              if (scope.path.isPattern()) return void path3.replaceWith(_core.template.statement.ast`(() => ${path3.node})()`);
              ref = scope.generateUidIdentifierBasedOnNode(node.left), scope.push({ id: _core.types.cloneNode(ref) }), assignment = _core.types.assignmentExpression("=", ref, node.left);
            }
            path3.replaceWith(_core.types.conditionalExpression(noDocumentAll ? _core.types.binaryExpression("!=", assignment, _core.types.nullLiteral()) : _core.types.logicalExpression("&&", _core.types.binaryExpression("!==", assignment, _core.types.nullLiteral()), _core.types.binaryExpression("!==", _core.types.cloneNode(ref), scope.buildUndefinedNode())), _core.types.cloneNode(ref), node.right));
          } } };
        });
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-optional-chaining@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-optional-chaining/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        var helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js"), core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.22.5/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js");
        function willPathCastToBoolean(path3) {
          const maybeWrapped = findOutermostTransparentParent(path3), { node, parentPath } = maybeWrapped;
          if (parentPath.isLogicalExpression()) {
            const { operator, right } = parentPath.node;
            if ("&&" === operator || "||" === operator || "??" === operator && node === right) return willPathCastToBoolean(parentPath);
          }
          if (parentPath.isSequenceExpression()) {
            const { expressions } = parentPath.node;
            return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
          }
          return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
        }
        function findOutermostTransparentParent(path3) {
          let maybeWrapped = path3;
          return path3.findParent((p) => {
            if (!helperSkipTransparentExpressionWrappers.isTransparentExprWrapper(p.node)) return true;
            maybeWrapped = p;
          }), maybeWrapped;
        }
        const last = (arr) => arr[arr.length - 1];
        function isSimpleMemberExpression(expression) {
          return expression = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(expression), core.types.isIdentifier(expression) || core.types.isSuper(expression) || core.types.isMemberExpression(expression) && !expression.computed && isSimpleMemberExpression(expression.object);
        }
        const NULLISH_CHECK = core.template.expression("%%check%% === null || %%ref%% === void 0"), NULLISH_CHECK_NO_DDA = core.template.expression("%%check%% == null"), NULLISH_CHECK_NEG = core.template.expression("%%check%% !== null && %%ref%% !== void 0"), NULLISH_CHECK_NO_DDA_NEG = core.template.expression("%%check%% != null");
        function transformOptionalChain(path3, { pureGetters, noDocumentAll }, replacementPath, ifNullish, wrapLast) {
          const { scope } = path3;
          if (scope.path.isPattern() && function(path4) {
            let optionalPath2 = path4;
            const { scope: scope2 } = path4;
            for (; optionalPath2.isOptionalMemberExpression() || optionalPath2.isOptionalCallExpression(); ) {
              const { node } = optionalPath2, childPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath2.isOptionalMemberExpression() ? optionalPath2.get("object") : optionalPath2.get("callee"));
              if (node.optional) return !scope2.isStatic(childPath.node);
              optionalPath2 = childPath;
            }
          }(path3)) return void replacementPath.replaceWith(core.template.expression.ast`(() => ${replacementPath.node})()`);
          const optionals = [];
          let optionalPath = path3;
          for (; optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression(); ) {
            const { node } = optionalPath;
            node.optional && optionals.push(node), optionalPath.isOptionalMemberExpression() ? (optionalPath.node.type = "MemberExpression", optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("object"))) : optionalPath.isOptionalCallExpression() && (optionalPath.node.type = "CallExpression", optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("callee")));
          }
          if (0 === optionals.length) return;
          const checks = [];
          let tmpVar;
          for (let i = optionals.length - 1; i >= 0; i--) {
            const node = optionals[i], isCall = core.types.isCallExpression(node), chainWithTypes = isCall ? node.callee : node.object, chain = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(chainWithTypes);
            let ref, check2;
            if (isCall && core.types.isIdentifier(chain, { name: "eval" }) ? (check2 = ref = chain, node.callee = core.types.sequenceExpression([core.types.numericLiteral(0), ref])) : pureGetters && isCall && isSimpleMemberExpression(chain) ? check2 = ref = node.callee : scope.isStatic(chain) ? check2 = ref = chainWithTypes : (tmpVar && !isCall || (tmpVar = scope.generateUidIdentifierBasedOnNode(chain), scope.push({ id: core.types.cloneNode(tmpVar) })), ref = tmpVar, check2 = core.types.assignmentExpression("=", core.types.cloneNode(tmpVar), chainWithTypes), isCall ? node.callee = ref : node.object = ref), isCall && core.types.isMemberExpression(chain)) if (pureGetters && isSimpleMemberExpression(chain)) node.callee = chainWithTypes;
            else {
              const { object } = chain;
              let context;
              if (core.types.isSuper(object)) context = core.types.thisExpression();
              else {
                const memoized = scope.maybeGenerateMemoised(object);
                memoized ? (context = memoized, chain.object = core.types.assignmentExpression("=", memoized, object)) : context = object;
              }
              node.arguments.unshift(core.types.cloneNode(context)), node.callee = core.types.memberExpression(node.callee, core.types.identifier("call"));
            }
            const data = { check: core.types.cloneNode(check2), ref: core.types.cloneNode(ref) };
            Object.defineProperty(data, "ref", { enumerable: false }), checks.push(data);
          }
          let result = replacementPath.node;
          wrapLast && (result = wrapLast(result));
          const ifNullishBoolean = core.types.isBooleanLiteral(ifNullish), ifNullishFalse = ifNullishBoolean && false === ifNullish.value, ifNullishVoid = !ifNullishBoolean && core.types.isUnaryExpression(ifNullish, { operator: "void" }), isEvaluationValueIgnored = core.types.isExpressionStatement(replacementPath.parent) && !replacementPath.isCompletionRecord() || core.types.isSequenceExpression(replacementPath.parent) && last(replacementPath.parent.expressions) !== replacementPath.node, tpl = ifNullishFalse ? noDocumentAll ? NULLISH_CHECK_NO_DDA_NEG : NULLISH_CHECK_NEG : noDocumentAll ? NULLISH_CHECK_NO_DDA : NULLISH_CHECK, logicalOp = ifNullishFalse ? "&&" : "||", check = checks.map(tpl).reduce((expr, check2) => core.types.logicalExpression(logicalOp, expr, check2));
          replacementPath.replaceWith(ifNullishBoolean || ifNullishVoid && isEvaluationValueIgnored ? core.types.logicalExpression(logicalOp, check, result) : core.types.conditionalExpression(check, ifNullish, result));
        }
        function transform2(path3, assumptions) {
          const { scope } = path3, maybeWrapped = findOutermostTransparentParent(path3), { parentPath } = maybeWrapped;
          if (parentPath.isUnaryExpression({ operator: "delete" })) transformOptionalChain(path3, assumptions, parentPath, core.types.booleanLiteral(true));
          else {
            let wrapLast;
            parentPath.isCallExpression({ callee: maybeWrapped.node }) && path3.isOptionalMemberExpression() && (wrapLast = (replacement) => {
              var _baseRef;
              const object = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(replacement.object);
              let baseRef;
              return assumptions.pureGetters && isSimpleMemberExpression(object) || (baseRef = scope.maybeGenerateMemoised(object), baseRef && (replacement.object = core.types.assignmentExpression("=", baseRef, object))), core.types.callExpression(core.types.memberExpression(replacement, core.types.identifier("bind")), [core.types.cloneNode(null != (_baseRef = baseRef) ? _baseRef : object)]);
            }), transformOptionalChain(path3, assumptions, path3, willPathCastToBoolean(maybeWrapped) ? core.types.booleanLiteral(false) : scope.buildUndefinedNode(), wrapLast);
          }
        }
        var index = helperPluginUtils.declare((api, options) => {
          var _api$assumption, _api$assumption2;
          api.assertVersion(7);
          const { loose = false } = options, noDocumentAll = null != (_api$assumption = api.assumption("noDocumentAll")) ? _api$assumption : loose, pureGetters = null != (_api$assumption2 = api.assumption("pureGetters")) ? _api$assumption2 : loose;
          return { name: "transform-optional-chaining", inherits: __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-optional-chaining@7.8.3_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-optional-chaining/lib/index.js").Z, visitor: { "OptionalCallExpression|OptionalMemberExpression"(path3) {
            transform2(path3, { noDocumentAll, pureGetters });
          } } };
        });
        exports3.default = index, exports3.transform = transform2, exports3.transformOptionalChain = transformOptionalChain;
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.22.15_@babel+core@7.23.2/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(path3, t) {
          const { name } = path3.node.id, parentIsExport = path3.parentPath.isExportNamedDeclaration();
          let isExported = parentIsExport;
          !isExported && t.isProgram(path3.parent) && (isExported = path3.parent.body.some((stmt) => t.isExportNamedDeclaration(stmt) && "type" !== stmt.exportKind && !stmt.source && stmt.specifiers.some((spec) => t.isExportSpecifier(spec) && "type" !== spec.exportKind && spec.local.name === name)));
          const { enumValues: entries } = (0, _enum.translateEnumValues)(path3, t);
          if (isExported) {
            const obj = t.objectExpression(entries.map(([name2, value2]) => t.objectProperty(t.isValidIdentifier(name2) ? t.identifier(name2) : t.stringLiteral(name2), value2)));
            return void (path3.scope.hasOwnBinding(name) ? (parentIsExport ? path3.parentPath : path3).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("assign")), [path3.node.id, obj]))) : (path3.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(path3.node.id, obj)])), path3.scope.registerDeclaration(path3)));
          }
          const entriesMap = new Map(entries);
          path3.scope.path.traverse({ Scope(path4) {
            path4.scope.hasOwnBinding(name) && path4.skip();
          }, MemberExpression(path4) {
            if (!t.isIdentifier(path4.node.object, { name })) return;
            let key;
            if (path4.node.computed) {
              if (!t.isStringLiteral(path4.node.property)) return;
              key = path4.node.property.value;
            } else {
              if (!t.isIdentifier(path4.node.property)) return;
              key = path4.node.property.name;
            }
            entriesMap.has(key) && path4.replaceWith(t.cloneNode(entriesMap.get(key)));
          } }), path3.remove();
        };
        var _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.22.15_@babel+core@7.23.2/node_modules/@babel/plugin-transform-typescript/lib/enum.js");
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.22.15_@babel+core@7.23.2/node_modules/@babel/plugin-transform-typescript/lib/enum.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(path3, t) {
          const { node, parentPath } = path3;
          if (node.declare) return void path3.remove();
          const name = node.id.name, { fill, data, isPure } = function(path4, t2, id) {
            const { enumValues: x, data: data2, isPure: isPure2 } = translateEnumValues(path4, t2), assignments = x.map(([memberName, memberValue]) => buildEnumMember(t2.isStringLiteral(memberValue), { ENUM: t2.cloneNode(id), NAME: memberName, VALUE: memberValue }));
            return { fill: { ID: t2.cloneNode(id), ASSIGNMENTS: assignments }, data: data2, isPure: isPure2 };
          }(path3, t, node.id);
          switch (parentPath.type) {
            case "BlockStatement":
            case "ExportNamedDeclaration":
            case "Program": {
              const isGlobal = t.isProgram(path3.parent), isSeen = function seen(parentPath2) {
                if (parentPath2.isExportDeclaration()) return seen(parentPath2.parentPath);
                return !!parentPath2.getData(name) || (parentPath2.setData(name, true), false);
              }(parentPath);
              let init = t.objectExpression([]);
              (isSeen || isGlobal) && (init = t.logicalExpression("||", t.cloneNode(fill.ID), init));
              const enumIIFE = buildEnumWrapper(Object.assign({}, fill, { INIT: init }));
              if (isPure && (0, _helperAnnotateAsPure.default)(enumIIFE), isSeen) {
                (parentPath.isExportDeclaration() ? parentPath : path3).replaceWith(t.expressionStatement(t.assignmentExpression("=", t.cloneNode(node.id), enumIIFE)));
              } else path3.scope.registerDeclaration(path3.replaceWith(t.variableDeclaration(isGlobal ? "var" : "let", [t.variableDeclarator(node.id, enumIIFE)]))[0]);
              ENUMS.set(path3.scope.getBindingIdentifier(name), data);
              break;
            }
            default:
              throw new Error(`Unexpected enum parent '${path3.parent.type}`);
          }
        }, exports3.translateEnumValues = translateEnumValues;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), _assert = __webpack_require__2("assert"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.22.5/node_modules/@babel/helper-annotate-as-pure/lib/index.js");
        const ENUMS = /* @__PURE__ */ new WeakMap(), buildEnumWrapper = _core.template.expression("\n    (function (ID) {\n      ASSIGNMENTS;\n      return ID;\n    })(INIT)\n  ");
        const buildStringAssignment = (0, _core.template)('\n  ENUM["NAME"] = VALUE;\n'), buildNumericAssignment = (0, _core.template)('\n  ENUM[ENUM["NAME"] = VALUE] = "NAME";\n'), buildEnumMember = (isString, options) => (isString ? buildStringAssignment : buildNumericAssignment)(options);
        function ReferencedIdentifier(expr, state) {
          const { seen, path: path3, t } = state, name = expr.node.name;
          seen.has(name) && !expr.scope.hasOwnBinding(name) && (expr.replaceWith(t.memberExpression(t.cloneNode(path3.node.id), t.cloneNode(expr.node))), expr.skip());
        }
        const enumSelfReferenceVisitor = { ReferencedIdentifier };
        function translateEnumValues(path3, t) {
          const seen = /* @__PURE__ */ new Map();
          let lastName, constValue = -1, isPure = true;
          const enumValues = path3.get("members").map((memberPath) => {
            const member = memberPath.node, name = t.isIdentifier(member.id) ? member.id.name : member.id.value, initializerPath = memberPath.get("initializer");
            let value2;
            if (member.initializer) constValue = computeConstantValue(initializerPath, seen), void 0 !== constValue ? (seen.set(name, constValue), _assert("number" == typeof constValue || "string" == typeof constValue), value2 = constValue === 1 / 0 || Number.isNaN(constValue) ? t.identifier(String(constValue)) : constValue === -1 / 0 ? t.unaryExpression("-", t.identifier("Infinity")) : t.valueToNode(constValue)) : (isPure && (isPure = initializerPath.isPure()), initializerPath.isReferencedIdentifier() ? ReferencedIdentifier(initializerPath, { t, seen, path: path3 }) : initializerPath.traverse(enumSelfReferenceVisitor, { t, seen, path: path3 }), value2 = initializerPath.node, seen.set(name, void 0));
            else if ("number" == typeof constValue) constValue += 1, value2 = t.numericLiteral(constValue), seen.set(name, constValue);
            else {
              if ("string" == typeof constValue) throw path3.buildCodeFrameError("Enum member must have initializer.");
              {
                const lastRef = t.memberExpression(t.cloneNode(path3.node.id), t.stringLiteral(lastName), true);
                value2 = t.binaryExpression("+", t.numericLiteral(1), lastRef), seen.set(name, void 0);
              }
            }
            return lastName = name, [name, value2];
          });
          return { isPure, data: seen, enumValues };
        }
        function computeConstantValue(path3, prevMembers, seen = /* @__PURE__ */ new Set()) {
          return evaluate(path3);
          function evaluate(path4) {
            const expr = path4.node;
            switch (expr.type) {
              case "MemberExpression":
              case "Identifier":
                return evaluateRef(path4, prevMembers, seen);
              case "StringLiteral":
              case "NumericLiteral":
                return expr.value;
              case "UnaryExpression":
                return function(path5) {
                  const value2 = evaluate(path5.get("argument"));
                  if (void 0 === value2) return;
                  switch (path5.node.operator) {
                    case "+":
                      return value2;
                    case "-":
                      return -value2;
                    case "~":
                      return ~value2;
                    default:
                      return;
                  }
                }(path4);
              case "BinaryExpression":
                return function(path5) {
                  const left = evaluate(path5.get("left"));
                  if (void 0 === left) return;
                  const right = evaluate(path5.get("right"));
                  if (void 0 === right) return;
                  switch (path5.node.operator) {
                    case "|":
                      return left | right;
                    case "&":
                      return left & right;
                    case ">>":
                      return left >> right;
                    case ">>>":
                      return left >>> right;
                    case "<<":
                      return left << right;
                    case "^":
                      return left ^ right;
                    case "*":
                      return left * right;
                    case "/":
                      return left / right;
                    case "+":
                      return left + right;
                    case "-":
                      return left - right;
                    case "%":
                      return left % right;
                    case "**":
                      return Math.pow(left, right);
                    default:
                      return;
                  }
                }(path4);
              case "ParenthesizedExpression":
                return evaluate(path4.get("expression"));
              case "TemplateLiteral": {
                if (1 === expr.quasis.length) return expr.quasis[0].value.cooked;
                const paths = path4.get("expressions"), quasis = expr.quasis;
                let str = "";
                for (let i = 0; i < quasis.length; i++) if (str += quasis[i].value.cooked, i + 1 < quasis.length) {
                  const value2 = evaluateRef(paths[i], prevMembers, seen);
                  if (void 0 === value2) return;
                  str += value2;
                }
                return str;
              }
              default:
                return;
            }
          }
          function evaluateRef(path4, prevMembers2, seen2) {
            if (path4.isMemberExpression()) {
              const expr = path4.node, obj = expr.object, prop = expr.property;
              if (!_core.types.isIdentifier(obj) || (expr.computed ? !_core.types.isStringLiteral(prop) : !_core.types.isIdentifier(prop))) return;
              const bindingIdentifier = path4.scope.getBindingIdentifier(obj.name), data = ENUMS.get(bindingIdentifier);
              if (!data) return;
              return data.get(prop.computed ? prop.value : prop.name);
            }
            if (path4.isIdentifier()) {
              const name = path4.node.name;
              if (["Infinity", "NaN"].includes(name)) return Number(name);
              let value2 = null == prevMembers2 ? void 0 : prevMembers2.get(name);
              if (void 0 !== value2) return value2;
              if (seen2.has(path4.node)) return;
              const bindingInitPath = path4.resolve();
              if (bindingInitPath) return seen2.add(path4.node), value2 = computeConstantValue(bindingInitPath, void 0, seen2), null == prevMembers2 || prevMembers2.set(name, value2), value2;
            }
          }
        }
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.22.15_@babel+core@7.23.2/node_modules/@babel/plugin-transform-typescript/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxTypescript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.22.5_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-typescript/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.22.15_@babel+core@7.23.2/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _constEnum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.22.15_@babel+core@7.23.2/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js"), _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.22.15_@babel+core@7.23.2/node_modules/@babel/plugin-transform-typescript/lib/enum.js"), _namespace = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.22.15_@babel+core@7.23.2/node_modules/@babel/plugin-transform-typescript/lib/namespace.js");
        function isInType(path3) {
          switch (path3.parent.type) {
            case "TSTypeReference":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;
            case "TSQualifiedName":
              return "TSImportEqualsDeclaration" !== path3.parentPath.findParent((path4) => "TSQualifiedName" !== path4.type).type;
            case "ExportSpecifier":
              return "type" === path3.parent.exportKind || "type" === path3.parentPath.parent.exportKind;
            default:
              return false;
          }
        }
        const GLOBAL_TYPES = /* @__PURE__ */ new WeakMap(), NEEDS_EXPLICIT_ESM = /* @__PURE__ */ new WeakMap(), PARSED_PARAMS = /* @__PURE__ */ new WeakSet();
        function isGlobalType({ scope }, name) {
          return !scope.hasBinding(name) && (!!GLOBAL_TYPES.get(scope).has(name) || (console.warn(`The exported identifier "${name}" is not declared in Babel's scope tracker
as a JavaScript value binding, and "@babel/plugin-transform-typescript"
never encountered it as a TypeScript type declaration.
It will be treated as a JavaScript value.

This problem is likely caused by another plugin injecting
"${name}" without registering it in the scope tracker. If you are the author
 of that plugin, please use "scope.registerDeclaration(declarationPath)".`), false));
        }
        function registerGlobalType(programScope, name) {
          GLOBAL_TYPES.get(programScope).add(name);
        }
        function safeRemove(path3) {
          const ids = path3.getBindingIdentifiers();
          for (const name of Object.keys(ids)) {
            const binding = path3.scope.getBinding(name);
            binding && binding.identifier === ids[name] && binding.scope.removeBinding(name);
          }
          path3.opts.noScope = true, path3.remove(), path3.opts.noScope = false;
        }
        function assertCjsTransformEnabled(path3, pass, wrong, suggestion, extra = "") {
          if ("commonjs" !== pass.file.get("@babel/plugin-transform-modules-*")) throw path3.buildCodeFrameError(`\`${wrong}\` is only supported when compiling modules to CommonJS.
Please consider using \`${suggestion}\`${extra}, or add @babel/plugin-transform-modules-commonjs to your Babel config.`);
        }
        var _default = (0, _helperPluginUtils.declare)((api, opts) => {
          const { types: t, template } = api;
          api.assertVersion(7);
          const JSX_PRAGMA_REGEX = /\*?\s*@jsx((?:Frag)?)\s+([^\s]+)/, { allowNamespaces = true, jsxPragma = "React.createElement", jsxPragmaFrag = "React.Fragment", onlyRemoveTypeImports = false, optimizeConstEnums = false } = opts;
          var { allowDeclareFields = false } = opts;
          const classMemberVisitors = { field(path3) {
            const { node } = path3;
            if (!allowDeclareFields && node.declare) throw path3.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transform-typescript or @babel/preset-typescript is enabled.");
            if (node.declare) {
              if (node.value) throw path3.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");
              node.decorators || path3.remove();
            } else if (node.definite) {
              if (node.value) throw path3.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");
              allowDeclareFields || node.decorators || t.isClassPrivateProperty(node) || path3.remove();
            } else node.abstract ? path3.remove() : allowDeclareFields || node.value || node.decorators || t.isClassPrivateProperty(node) || path3.remove();
            node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.readonly && (node.readonly = null), node.optional && (node.optional = null), node.typeAnnotation && (node.typeAnnotation = null), node.definite && (node.definite = null), node.declare && (node.declare = null), node.override && (node.override = null);
          }, method({ node }) {
            node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.optional && (node.optional = null), node.override && (node.override = null);
          }, constructor(path3, classPath) {
            path3.node.accessibility && (path3.node.accessibility = null);
            const assigns = [], { scope } = path3;
            for (const paramPath of path3.get("params")) {
              const param = paramPath.node;
              if ("TSParameterProperty" === param.type) {
                const parameter = param.parameter;
                if (PARSED_PARAMS.has(parameter)) continue;
                let id;
                if (PARSED_PARAMS.add(parameter), t.isIdentifier(parameter)) id = parameter;
                else {
                  if (!t.isAssignmentPattern(parameter) || !t.isIdentifier(parameter.left)) throw paramPath.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
                  id = parameter.left;
                }
                assigns.push(template.statement.ast`
          this.${t.cloneNode(id)} = ${t.cloneNode(id)}`), paramPath.replaceWith(paramPath.get("parameter")), scope.registerBinding("param", paramPath);
              }
            }
            (0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, path3, assigns);
          } };
          return { name: "transform-typescript", inherits: _pluginSyntaxTypescript.default, visitor: { Pattern: visitPattern, Identifier: visitPattern, RestElement: visitPattern, Program: { enter(path3, state) {
            const { file } = state;
            let fileJsxPragma = null, fileJsxPragmaFrag = null;
            const programScope = path3.scope;
            if (GLOBAL_TYPES.has(programScope) || GLOBAL_TYPES.set(programScope, /* @__PURE__ */ new Set()), file.ast.comments) for (const comment of file.ast.comments) {
              const jsxMatches = JSX_PRAGMA_REGEX.exec(comment.value);
              jsxMatches && (jsxMatches[1] ? fileJsxPragmaFrag = jsxMatches[2] : fileJsxPragma = jsxMatches[2]);
            }
            let pragmaImportName = fileJsxPragma || jsxPragma;
            pragmaImportName && ([pragmaImportName] = pragmaImportName.split("."));
            let pragmaFragImportName = fileJsxPragmaFrag || jsxPragmaFrag;
            pragmaFragImportName && ([pragmaFragImportName] = pragmaFragImportName.split("."));
            for (let stmt of path3.get("body")) if (stmt.isImportDeclaration()) {
              if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), "type" === stmt.node.importKind) {
                for (const specifier of stmt.node.specifiers) registerGlobalType(programScope, specifier.local.name);
                stmt.remove();
                continue;
              }
              const importsToRemove = /* @__PURE__ */ new Set(), specifiersLength = stmt.node.specifiers.length, isAllSpecifiersElided = () => specifiersLength > 0 && specifiersLength === importsToRemove.size;
              for (const specifier of stmt.node.specifiers) if ("ImportSpecifier" === specifier.type && "type" === specifier.importKind) {
                registerGlobalType(programScope, specifier.local.name);
                const binding = stmt.scope.getBinding(specifier.local.name);
                binding && importsToRemove.add(binding.path);
              }
              if (onlyRemoveTypeImports) NEEDS_EXPLICIT_ESM.set(path3.node, false);
              else {
                if (0 === stmt.node.specifiers.length) {
                  NEEDS_EXPLICIT_ESM.set(path3.node, false);
                  continue;
                }
                for (const specifier of stmt.node.specifiers) {
                  const binding = stmt.scope.getBinding(specifier.local.name);
                  binding && !importsToRemove.has(binding.path) && (isImportTypeOnly({ binding, programPath: path3, pragmaImportName, pragmaFragImportName }) ? importsToRemove.add(binding.path) : NEEDS_EXPLICIT_ESM.set(path3.node, false));
                }
              }
              if (isAllSpecifiersElided() && !onlyRemoveTypeImports) stmt.remove();
              else for (const importPath of importsToRemove) importPath.remove();
            } else if (stmt.isExportDeclaration() && (stmt = stmt.get("declaration")), stmt.isVariableDeclaration({ declare: true })) for (const name of Object.keys(stmt.getBindingIdentifiers())) registerGlobalType(programScope, name);
            else (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() && stmt.get("id").isIdentifier() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({ declare: true }) || stmt.isTSEnumDeclaration({ declare: true }) || stmt.isTSModuleDeclaration({ declare: true }) && stmt.get("id").isIdentifier()) && registerGlobalType(programScope, stmt.node.id.name);
          }, exit(path3) {
            "module" === path3.node.sourceType && NEEDS_EXPLICIT_ESM.get(path3.node) && path3.pushContainer("body", t.exportNamedDeclaration());
          } }, ExportNamedDeclaration(path3, state) {
            if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), "type" !== path3.node.exportKind) if (path3.node.source && path3.node.specifiers.length > 0 && path3.node.specifiers.every((specifier) => "ExportSpecifier" === specifier.type && "type" === specifier.exportKind)) path3.remove();
            else if (!path3.node.source && path3.node.specifiers.length > 0 && path3.node.specifiers.every((specifier) => t.isExportSpecifier(specifier) && isGlobalType(path3, specifier.local.name))) path3.remove();
            else {
              if (t.isTSModuleDeclaration(path3.node.declaration)) {
                const namespace = path3.node.declaration, { id } = namespace;
                if (t.isIdentifier(id)) if (path3.scope.hasOwnBinding(id.name)) path3.replaceWith(namespace);
                else {
                  const [newExport] = path3.replaceWithMultiple([t.exportNamedDeclaration(t.variableDeclaration("let", [t.variableDeclarator(t.cloneNode(id))])), namespace]);
                  path3.scope.registerDeclaration(newExport);
                }
              }
              NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
            }
            else path3.remove();
          }, ExportAllDeclaration(path3) {
            "type" === path3.node.exportKind && path3.remove();
          }, ExportSpecifier(path3) {
            (!path3.parent.source && isGlobalType(path3, path3.node.local.name) || "type" === path3.node.exportKind) && path3.remove();
          }, ExportDefaultDeclaration(path3, state) {
            NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), t.isIdentifier(path3.node.declaration) && isGlobalType(path3, path3.node.declaration.name) ? path3.remove() : NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
          }, TSDeclareFunction(path3) {
            safeRemove(path3);
          }, TSDeclareMethod(path3) {
            safeRemove(path3);
          }, VariableDeclaration(path3) {
            path3.node.declare && safeRemove(path3);
          }, VariableDeclarator({ node }) {
            node.definite && (node.definite = null);
          }, TSIndexSignature(path3) {
            path3.remove();
          }, ClassDeclaration(path3) {
            const { node } = path3;
            node.declare && safeRemove(path3);
          }, Class(path3) {
            const { node } = path3;
            node.typeParameters && (node.typeParameters = null), node.superTypeParameters && (node.superTypeParameters = null), node.implements && (node.implements = null), node.abstract && (node.abstract = null), path3.get("body.body").forEach((child) => {
              child.isClassMethod() || child.isClassPrivateMethod() ? "constructor" === child.node.kind ? classMemberVisitors.constructor(child, path3) : classMemberVisitors.method(child) : (child.isClassProperty() || child.isClassPrivateProperty() || child.isClassAccessorProperty()) && classMemberVisitors.field(child);
            });
          }, Function(path3) {
            const { node } = path3;
            node.typeParameters && (node.typeParameters = null), node.returnType && (node.returnType = null);
            const params = node.params;
            params.length > 0 && t.isIdentifier(params[0], { name: "this" }) && params.shift();
          }, TSModuleDeclaration(path3) {
            (0, _namespace.default)(path3, allowNamespaces);
          }, TSInterfaceDeclaration(path3) {
            path3.remove();
          }, TSTypeAliasDeclaration(path3) {
            path3.remove();
          }, TSEnumDeclaration(path3) {
            optimizeConstEnums && path3.node.const ? (0, _constEnum.default)(path3, t) : (0, _enum.default)(path3, t);
          }, TSImportEqualsDeclaration(path3, pass) {
            const { id, moduleReference } = path3.node;
            let init, varKind;
            t.isTSExternalModuleReference(moduleReference) ? (assertCjsTransformEnabled(path3, pass, `import ${id.name} = require(...);`, `import ${id.name} from '...';`, " alongside Typescript's --allowSyntheticDefaultImports option"), init = t.callExpression(t.identifier("require"), [moduleReference.expression]), varKind = "const") : (init = entityNameToExpr(moduleReference), varKind = "var"), path3.replaceWith(t.variableDeclaration(varKind, [t.variableDeclarator(id, init)])), path3.scope.registerDeclaration(path3);
          }, TSExportAssignment(path3, pass) {
            assertCjsTransformEnabled(path3, pass, "export = <value>;", "export default <value>;"), path3.replaceWith(template.statement.ast`module.exports = ${path3.node.expression}`);
          }, TSTypeAssertion(path3) {
            path3.replaceWith(path3.node.expression);
          }, ["TSAsExpression" + (t.tsSatisfiesExpression ? "|TSSatisfiesExpression" : "")](path3) {
            let { node } = path3;
            do {
              node = node.expression;
            } while (t.isTSAsExpression(node) || null != t.isTSSatisfiesExpression && t.isTSSatisfiesExpression(node));
            path3.replaceWith(node);
          }, [api.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](path3) {
            path3.replaceWith(path3.node.expression);
          }, CallExpression(path3) {
            path3.node.typeParameters = null;
          }, OptionalCallExpression(path3) {
            path3.node.typeParameters = null;
          }, NewExpression(path3) {
            path3.node.typeParameters = null;
          }, JSXOpeningElement(path3) {
            path3.node.typeParameters = null;
          }, TaggedTemplateExpression(path3) {
            path3.node.typeParameters = null;
          } } };
          function entityNameToExpr(node) {
            return t.isTSQualifiedName(node) ? t.memberExpression(entityNameToExpr(node.left), node.right) : node;
          }
          function visitPattern({ node }) {
            node.typeAnnotation && (node.typeAnnotation = null), t.isIdentifier(node) && node.optional && (node.optional = null);
          }
          function isImportTypeOnly({ binding, programPath, pragmaImportName, pragmaFragImportName }) {
            for (const path3 of binding.referencePaths) if (!isInType(path3)) return false;
            if (binding.identifier.name !== pragmaImportName && binding.identifier.name !== pragmaFragImportName) return true;
            let sourceFileHasJsx = false;
            return programPath.traverse({ "JSXElement|JSXFragment"(path3) {
              sourceFileHasJsx = true, path3.stop();
            } }), !sourceFileHasJsx;
          }
        });
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.22.15_@babel+core@7.23.2/node_modules/@babel/plugin-transform-typescript/lib/namespace.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(path3, allowNamespaces) {
          if (path3.node.declare || "StringLiteral" === path3.node.id.type) return void path3.remove();
          if (!allowNamespaces) throw path3.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimentally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
          const name = path3.node.id.name, value2 = handleNested(path3, _core.types.cloneNode(path3.node, true));
          null === value2 ? path3.remove() : path3.scope.hasOwnBinding(name) ? path3.replaceWith(value2) : path3.scope.registerDeclaration(path3.replaceWithMultiple([getDeclaration(name), value2])[0]);
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js");
        function getDeclaration(name) {
          return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.identifier(name))]);
        }
        function getMemberExpression(name, itemName) {
          return _core.types.memberExpression(_core.types.identifier(name), _core.types.identifier(itemName));
        }
        function handleVariableDeclaration(node, name, hub) {
          if ("const" !== node.kind) throw hub.file.buildCodeFrameError(node, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
          const { declarations } = node;
          if (declarations.every((declarator) => _core.types.isIdentifier(declarator.id))) {
            for (const declarator of declarations) declarator.init = _core.types.assignmentExpression("=", getMemberExpression(name, declarator.id.name), declarator.init);
            return [node];
          }
          const bindingIdentifiers = _core.types.getBindingIdentifiers(node), assignments = [];
          for (const idName in bindingIdentifiers) assignments.push(_core.types.assignmentExpression("=", getMemberExpression(name, idName), _core.types.cloneNode(bindingIdentifiers[idName])));
          return [node, _core.types.expressionStatement(_core.types.sequenceExpression(assignments))];
        }
        function buildNestedAmbientModuleError(path3, node) {
          return path3.hub.buildError(node, "Ambient modules cannot be nested in other modules or namespaces.", Error);
        }
        function handleNested(path3, node, parentExport) {
          const names = /* @__PURE__ */ new Set(), realName = node.id;
          _core.types.assertIdentifier(realName);
          const name = path3.scope.generateUid(realName.name), namespaceTopLevel = _core.types.isTSModuleBlock(node.body) ? node.body.body : [_core.types.exportNamedDeclaration(node.body)];
          let isEmpty = true;
          for (let i = 0; i < namespaceTopLevel.length; i++) {
            const subNode = namespaceTopLevel[i];
            switch (subNode.type) {
              case "TSModuleDeclaration": {
                if (!_core.types.isIdentifier(subNode.id)) throw buildNestedAmbientModuleError(path3, subNode);
                const transformed = handleNested(path3, subNode);
                if (null !== transformed) {
                  isEmpty = false;
                  const moduleName = subNode.id.name;
                  names.has(moduleName) ? namespaceTopLevel[i] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed));
                }
                continue;
              }
              case "TSEnumDeclaration":
              case "FunctionDeclaration":
              case "ClassDeclaration":
                isEmpty = false, names.add(subNode.id.name);
                continue;
              case "VariableDeclaration":
                isEmpty = false;
                for (const name2 in _core.types.getBindingIdentifiers(subNode)) names.add(name2);
                continue;
              default:
                isEmpty && (isEmpty = _core.types.isTypeScript(subNode));
                continue;
              case "ExportNamedDeclaration":
            }
            if (!("declare" in subNode.declaration) || !subNode.declaration.declare) switch (subNode.declaration.type) {
              case "TSEnumDeclaration":
              case "FunctionDeclaration":
              case "ClassDeclaration": {
                isEmpty = false;
                const itemName = subNode.declaration.id.name;
                names.add(itemName), namespaceTopLevel.splice(i++, 1, subNode.declaration, _core.types.expressionStatement(_core.types.assignmentExpression("=", getMemberExpression(name, itemName), _core.types.identifier(itemName))));
                break;
              }
              case "VariableDeclaration": {
                isEmpty = false;
                const nodes = handleVariableDeclaration(subNode.declaration, name, path3.hub);
                namespaceTopLevel.splice(i, nodes.length, ...nodes), i += nodes.length - 1;
                break;
              }
              case "TSModuleDeclaration": {
                if (!_core.types.isIdentifier(subNode.declaration.id)) throw buildNestedAmbientModuleError(path3, subNode.declaration);
                const transformed = handleNested(path3, subNode.declaration, _core.types.identifier(name));
                if (null !== transformed) {
                  isEmpty = false;
                  const moduleName = subNode.declaration.id.name;
                  names.has(moduleName) ? namespaceTopLevel[i] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed));
                } else namespaceTopLevel.splice(i, 1), i--;
              }
            }
          }
          if (isEmpty) return null;
          let fallthroughValue = _core.types.objectExpression([]);
          if (parentExport) {
            const memberExpr = _core.types.memberExpression(parentExport, realName);
            fallthroughValue = _core.template.expression.ast`
      ${_core.types.cloneNode(memberExpr)} ||
        (${_core.types.cloneNode(memberExpr)} = ${fallthroughValue})
    `;
          }
          return _core.template.statement.ast`
    (function (${_core.types.identifier(name)}) {
      ${namespaceTopLevel}
    })(${realName} || (${_core.types.cloneNode(realName)} = ${fallthroughValue}));
  `;
        }
      }, "./node_modules/.pnpm/@babel+preset-typescript@7.23.2_@babel+core@7.23.2/node_modules/@babel/preset-typescript/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        var helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.22.5/node_modules/@babel/helper-plugin-utils/lib/index.js"), transformTypeScript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.22.15_@babel+core@7.23.2/node_modules/@babel/plugin-transform-typescript/lib/index.js");
        __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.22.5_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-jsx/lib/index.js");
        var transformModulesCommonJS = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"), helperValidatorOption = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.22.15/node_modules/@babel/helper-validator-option/lib/index.js");
        function _interopDefault(e) {
          return e && e.__esModule ? e : { default: e };
        }
        var transformTypeScript__default = _interopDefault(transformTypeScript), transformModulesCommonJS__default = _interopDefault(transformModulesCommonJS);
        const v = new helperValidatorOption.OptionValidator("@babel/preset-typescript");
        var pluginRewriteTSImports = helperPluginUtils.declare(function({ types: t }) {
          return { name: "preset-typescript/plugin-rewrite-ts-imports", visitor: { "ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration"({ node }) {
            const { source } = node;
            "value" === (t.isImportDeclaration(node) ? node.importKind : node.exportKind) && source && /[\\/]/.test(source.value) && (source.value = source.value.replace(/(\.[mc]?)ts$/, "$1js").replace(/\.tsx$/, ".js"));
          } } };
        }), index = helperPluginUtils.declarePreset((api, opts) => {
          api.assertVersion(7);
          const { allExtensions, ignoreExtensions, allowNamespaces, disallowAmbiguousJSXLike, isTSX, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums, rewriteImportExtensions } = function(options = {}) {
            let { allowNamespaces: allowNamespaces2 = true, jsxPragma: jsxPragma2, onlyRemoveTypeImports: onlyRemoveTypeImports2 } = options;
            const TopLevelOptions_ignoreExtensions = "ignoreExtensions", TopLevelOptions_disallowAmbiguousJSXLike = "disallowAmbiguousJSXLike", TopLevelOptions_jsxPragmaFrag = "jsxPragmaFrag", TopLevelOptions_optimizeConstEnums = "optimizeConstEnums", TopLevelOptions_rewriteImportExtensions = "rewriteImportExtensions", TopLevelOptions_allExtensions = "allExtensions", TopLevelOptions_isTSX = "isTSX", jsxPragmaFrag2 = v.validateStringOption(TopLevelOptions_jsxPragmaFrag, options.jsxPragmaFrag, "React.Fragment");
            var allExtensions2 = v.validateBooleanOption(TopLevelOptions_allExtensions, options.allExtensions, false), isTSX2 = v.validateBooleanOption(TopLevelOptions_isTSX, options.isTSX, false);
            isTSX2 && v.invariant(allExtensions2, "isTSX:true requires allExtensions:true");
            const ignoreExtensions2 = v.validateBooleanOption(TopLevelOptions_ignoreExtensions, options.ignoreExtensions, false), disallowAmbiguousJSXLike2 = v.validateBooleanOption(TopLevelOptions_disallowAmbiguousJSXLike, options.disallowAmbiguousJSXLike, false);
            disallowAmbiguousJSXLike2 && v.invariant(allExtensions2, "disallowAmbiguousJSXLike:true requires allExtensions:true");
            const normalized = { ignoreExtensions: ignoreExtensions2, allowNamespaces: allowNamespaces2, disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2, jsxPragma: jsxPragma2, jsxPragmaFrag: jsxPragmaFrag2, onlyRemoveTypeImports: onlyRemoveTypeImports2, optimizeConstEnums: v.validateBooleanOption(TopLevelOptions_optimizeConstEnums, options.optimizeConstEnums, false), rewriteImportExtensions: v.validateBooleanOption(TopLevelOptions_rewriteImportExtensions, options.rewriteImportExtensions, false) };
            return normalized.allExtensions = allExtensions2, normalized.isTSX = isTSX2, normalized;
          }(opts), pluginOptions = (disallowAmbiguousJSXLike2) => ({ allowDeclareFields: opts.allowDeclareFields, allowNamespaces, disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums }), getPlugins = (isTSX2, disallowAmbiguousJSXLike2) => [[transformTypeScript__default.default, Object.assign({ isTSX: isTSX2 }, pluginOptions(disallowAmbiguousJSXLike2))]];
          return { plugins: rewriteImportExtensions ? [pluginRewriteTSImports] : [], overrides: allExtensions || ignoreExtensions ? [{ plugins: getPlugins(isTSX, disallowAmbiguousJSXLike) }] : [{ test: /\.ts$/, plugins: getPlugins(false, false) }, { test: /\.mts$/, sourceType: "module", plugins: getPlugins(false, true) }, { test: /\.cts$/, sourceType: "unambiguous", plugins: [[transformModulesCommonJS__default.default, { allowTopLevelThis: true }], [transformTypeScript__default.default, pluginOptions(true)]] }, { test: /\.tsx$/, plugins: getPlugins(true, false) }] };
        });
        exports3.default = index;
      }, "./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/builder.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function createTemplateBuilder(formatter, defaultOpts) {
          const templateFnCache = /* @__PURE__ */ new WeakMap(), templateAstCache = /* @__PURE__ */ new WeakMap(), cachedOpts = defaultOpts || (0, _options.validate)(null);
          return Object.assign((tpl, ...args) => {
            if ("string" == typeof tpl) {
              if (args.length > 1) throw new Error("Unexpected extra params.");
              return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
            }
            if (Array.isArray(tpl)) {
              let builder = templateFnCache.get(tpl);
              return builder || (builder = (0, _literal.default)(formatter, tpl, cachedOpts), templateFnCache.set(tpl, builder)), extendedTrace(builder(args));
            }
            if ("object" == typeof tpl && tpl) {
              if (args.length > 0) throw new Error("Unexpected extra params.");
              return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
            }
            throw new Error("Unexpected template param " + typeof tpl);
          }, { ast: (tpl, ...args) => {
            if ("string" == typeof tpl) {
              if (args.length > 1) throw new Error("Unexpected extra params.");
              return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
            }
            if (Array.isArray(tpl)) {
              let builder = templateAstCache.get(tpl);
              return builder || (builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER)), templateAstCache.set(tpl, builder)), builder(args)();
            }
            throw new Error("Unexpected template param " + typeof tpl);
          } });
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/options.js"), _string = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/string.js"), _literal = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/literal.js");
        const NO_PLACEHOLDER = (0, _options.validate)({ placeholderPattern: false });
        function extendedTrace(fn) {
          let rootStack = "";
          try {
            throw new Error();
          } catch (error) {
            error.stack && (rootStack = error.stack.split("\n").slice(3).join("\n"));
          }
          return (arg) => {
            try {
              return fn(arg);
            } catch (err) {
              throw err.stack += `
    =============
${rootStack}`, err;
            }
          };
        }
      }, "./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/formatters.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.statements = exports3.statement = exports3.smart = exports3.program = exports3.expression = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { assertExpressionStatement } = _t;
        function makeStatementFormatter(fn) {
          return { code: (str) => `/* @babel/template */;
${str}`, validate: () => {
          }, unwrap: (ast) => fn(ast.program.body.slice(1)) };
        }
        const smart = makeStatementFormatter((body) => body.length > 1 ? body : body[0]);
        exports3.smart = smart;
        const statements = makeStatementFormatter((body) => body);
        exports3.statements = statements;
        const statement = makeStatementFormatter((body) => {
          if (0 === body.length) throw new Error("Found nothing to return.");
          if (body.length > 1) throw new Error("Found multiple statements but wanted one");
          return body[0];
        });
        exports3.statement = statement;
        const expression = { code: (str) => `(
${str}
)`, validate: (ast) => {
          if (ast.program.body.length > 1) throw new Error("Found multiple statements but wanted one");
          if (0 === expression.unwrap(ast).start) throw new Error("Parse result included parens.");
        }, unwrap: ({ program }) => {
          const [stmt] = program.body;
          return assertExpressionStatement(stmt), stmt.expression;
        } };
        exports3.expression = expression;
        exports3.program = { code: (str) => str, validate: () => {
        }, unwrap: (ast) => ast.program };
      }, "./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.statements = exports3.statement = exports3.smart = exports3.program = exports3.expression = exports3.default = void 0;
        var formatters = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/formatters.js"), _builder = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/builder.js");
        const smart = (0, _builder.default)(formatters.smart);
        exports3.smart = smart;
        const statement = (0, _builder.default)(formatters.statement);
        exports3.statement = statement;
        const statements = (0, _builder.default)(formatters.statements);
        exports3.statements = statements;
        const expression = (0, _builder.default)(formatters.expression);
        exports3.expression = expression;
        const program = (0, _builder.default)(formatters.program);
        exports3.program = program;
        var _default = Object.assign(smart.bind(void 0), { smart, statement, statements, expression, program, ast: smart.ast });
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/literal.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(formatter, tpl, opts) {
          const { metadata, names } = function(formatter2, tpl2, opts2) {
            let prefix = "BABEL_TPL$";
            const raw = tpl2.join("");
            do {
              prefix = "$$" + prefix;
            } while (raw.includes(prefix));
            const { names: names2, code } = function(tpl3, prefix2) {
              const names3 = [];
              let code2 = tpl3[0];
              for (let i = 1; i < tpl3.length; i++) {
                const value2 = `${prefix2}${i - 1}`;
                names3.push(value2), code2 += value2 + tpl3[i];
              }
              return { names: names3, code: code2 };
            }(tpl2, prefix), metadata2 = (0, _parse.default)(formatter2, formatter2.code(code), { parser: opts2.parser, placeholderWhitelist: new Set(names2.concat(opts2.placeholderWhitelist ? Array.from(opts2.placeholderWhitelist) : [])), placeholderPattern: opts2.placeholderPattern, preserveComments: opts2.preserveComments, syntacticPlaceholders: opts2.syntacticPlaceholders });
            return { metadata: metadata2, names: names2 };
          }(formatter, tpl, opts);
          return (arg) => {
            const defaultReplacements = {};
            return arg.forEach((replacement, i) => {
              defaultReplacements[names[i]] = replacement;
            }), (arg2) => {
              const replacements = (0, _options.normalizeReplacements)(arg2);
              return replacements && Object.keys(replacements).forEach((key) => {
                if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) throw new Error("Unexpected replacement overlap.");
              }), formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
            };
          };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/populate.js");
      }, "./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/options.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.merge = function(a, b) {
          const { placeholderWhitelist = a.placeholderWhitelist, placeholderPattern = a.placeholderPattern, preserveComments = a.preserveComments, syntacticPlaceholders = a.syntacticPlaceholders } = b;
          return { parser: Object.assign({}, a.parser, b.parser), placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders };
        }, exports3.normalizeReplacements = function(replacements) {
          if (Array.isArray(replacements)) return replacements.reduce((acc, replacement, i) => (acc["$" + i] = replacement, acc), {});
          if ("object" == typeof replacements || null == replacements) return replacements || void 0;
          throw new Error("Template replacements must be an array, object, null, or undefined");
        }, exports3.validate = function(opts) {
          if (null != opts && "object" != typeof opts) throw new Error("Unknown template options.");
          const _ref = opts || {}, { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = _ref, parser = function(source, excluded) {
            if (null == source) return {};
            var key, i, target = {}, sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++) key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          }(_ref, _excluded);
          if (null != placeholderWhitelist && !(placeholderWhitelist instanceof Set)) throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
          if (null != placeholderPattern && !(placeholderPattern instanceof RegExp) && false !== placeholderPattern) throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
          if (null != preserveComments && "boolean" != typeof preserveComments) throw new Error("'.preserveComments' must be a boolean, null, or undefined");
          if (null != syntacticPlaceholders && "boolean" != typeof syntacticPlaceholders) throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
          if (true === syntacticPlaceholders && (null != placeholderWhitelist || null != placeholderPattern)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
          return { parser, placeholderWhitelist: placeholderWhitelist || void 0, placeholderPattern: null == placeholderPattern ? void 0 : placeholderPattern, preserveComments: null == preserveComments ? void 0 : preserveComments, syntacticPlaceholders: null == syntacticPlaceholders ? void 0 : syntacticPlaceholders };
        };
        const _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
      }, "./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/parse.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(formatter, code, opts) {
          const { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = opts, ast = function(code2, parserOpts, syntacticPlaceholders2) {
            const plugins = (parserOpts.plugins || []).slice();
            false !== syntacticPlaceholders2 && plugins.push("placeholders");
            parserOpts = Object.assign({ allowReturnOutsideFunction: true, allowSuperOutsideMethod: true, sourceType: "module" }, parserOpts, { plugins });
            try {
              return (0, _parser.parse)(code2, parserOpts);
            } catch (err) {
              const loc = err.loc;
              throw loc && (err.message += "\n" + (0, _codeFrame.codeFrameColumns)(code2, { start: loc }), err.code = "BABEL_TEMPLATE_PARSE_ERROR"), err;
            }
          }(code, opts.parser, syntacticPlaceholders);
          removePropertiesDeep(ast, { preserveComments }), formatter.validate(ast);
          const state = { syntactic: { placeholders: [], placeholderNames: /* @__PURE__ */ new Set() }, legacy: { placeholders: [], placeholderNames: /* @__PURE__ */ new Set() }, placeholderWhitelist, placeholderPattern, syntacticPlaceholders };
          return traverse(ast, placeholderVisitorHandler, state), Object.assign({ ast }, state.syntactic.placeholders.length ? state.syntactic : state.legacy);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.23.0/node_modules/@babel/parser/lib/index.js"), _codeFrame = __webpack_require__2("./stubs/babel-codeframe.js");
        const { isCallExpression, isExpressionStatement, isFunction, isIdentifier, isJSXIdentifier, isNewExpression, isPlaceholder, isStatement, isStringLiteral, removePropertiesDeep, traverse } = _t, PATTERN = /^[_$A-Z0-9]+$/;
        function placeholderVisitorHandler(node, ancestors, state) {
          var _state$placeholderWhi;
          let name, hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;
          if (isPlaceholder(node)) {
            if (false === state.syntacticPlaceholders) throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
            name = node.name.name, hasSyntacticPlaceholders = true;
          } else {
            if (hasSyntacticPlaceholders || state.syntacticPlaceholders) return;
            if (isIdentifier(node) || isJSXIdentifier(node)) name = node.name;
            else {
              if (!isStringLiteral(node)) return;
              name = node.value;
            }
          }
          if (hasSyntacticPlaceholders && (null != state.placeholderPattern || null != state.placeholderWhitelist)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
          if (!(hasSyntacticPlaceholders || false !== state.placeholderPattern && (state.placeholderPattern || PATTERN).test(name) || null != (_state$placeholderWhi = state.placeholderWhitelist) && _state$placeholderWhi.has(name))) return;
          ancestors = ancestors.slice();
          const { node: parent, key } = ancestors[ancestors.length - 1];
          let type;
          isStringLiteral(node) || isPlaceholder(node, { expectedNode: "StringLiteral" }) ? type = "string" : isNewExpression(parent) && "arguments" === key || isCallExpression(parent) && "arguments" === key || isFunction(parent) && "params" === key ? type = "param" : isExpressionStatement(parent) && !isPlaceholder(node) ? (type = "statement", ancestors = ancestors.slice(0, -1)) : type = isStatement(node) && isPlaceholder(node) ? "statement" : "other";
          const { placeholders, placeholderNames } = hasSyntacticPlaceholders ? state.syntactic : state.legacy;
          placeholders.push({ name, type, resolve: (ast) => function(ast2, ancestors2) {
            let parent2 = ast2;
            for (let i = 0; i < ancestors2.length - 1; i++) {
              const { key: key3, index: index2 } = ancestors2[i];
              parent2 = void 0 === index2 ? parent2[key3] : parent2[key3][index2];
            }
            const { key: key2, index } = ancestors2[ancestors2.length - 1];
            return { parent: parent2, key: key2, index };
          }(ast, ancestors), isDuplicate: placeholderNames.has(name) }), placeholderNames.add(name);
        }
      }, "./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/populate.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(metadata, replacements) {
          const ast = cloneNode(metadata.ast);
          replacements && (metadata.placeholders.forEach((placeholder) => {
            if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {
              const placeholderName = placeholder.name;
              throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
            }
          }), Object.keys(replacements).forEach((key) => {
            if (!metadata.placeholderNames.has(key)) throw new Error(`Unknown substitution "${key}" given`);
          }));
          return metadata.placeholders.slice().reverse().forEach((placeholder) => {
            try {
              !function(placeholder2, ast2, replacement) {
                placeholder2.isDuplicate && (Array.isArray(replacement) ? replacement = replacement.map((node) => cloneNode(node)) : "object" == typeof replacement && (replacement = cloneNode(replacement)));
                const { parent, key, index } = placeholder2.resolve(ast2);
                if ("string" === placeholder2.type) {
                  if ("string" == typeof replacement && (replacement = stringLiteral(replacement)), !replacement || !isStringLiteral(replacement)) throw new Error("Expected string substitution");
                } else if ("statement" === placeholder2.type) void 0 === index ? replacement ? Array.isArray(replacement) ? replacement = blockStatement(replacement) : "string" == typeof replacement ? replacement = expressionStatement(identifier(replacement)) : isStatement(replacement) || (replacement = expressionStatement(replacement)) : replacement = emptyStatement() : replacement && !Array.isArray(replacement) && ("string" == typeof replacement && (replacement = identifier(replacement)), isStatement(replacement) || (replacement = expressionStatement(replacement)));
                else if ("param" === placeholder2.type) {
                  if ("string" == typeof replacement && (replacement = identifier(replacement)), void 0 === index) throw new Error("Assertion failure.");
                } else if ("string" == typeof replacement && (replacement = identifier(replacement)), Array.isArray(replacement)) throw new Error("Cannot replace single expression with an array.");
                if (void 0 === index) validate(parent, key, replacement), parent[key] = replacement;
                else {
                  const items = parent[key].slice();
                  "statement" === placeholder2.type || "param" === placeholder2.type ? null == replacement ? items.splice(index, 1) : Array.isArray(replacement) ? items.splice(index, 1, ...replacement) : items[index] = replacement : items[index] = replacement, validate(parent, key, items), parent[key] = items;
                }
              }(placeholder, ast, replacements && replacements[placeholder.name] || null);
            } catch (e) {
              throw e.message = `@babel/template placeholder "${placeholder.name}": ${e.message}`, e;
            }
          }), ast;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { blockStatement, cloneNode, emptyStatement, expressionStatement, identifier, isStatement, isStringLiteral, stringLiteral, validate } = _t;
      }, "./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/string.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(formatter, code, opts) {
          let metadata;
          return code = formatter.code(code), (arg) => {
            const replacements = (0, _options.normalizeReplacements)(arg);
            return metadata || (metadata = (0, _parse.default)(formatter, code, opts)), formatter.unwrap((0, _populate.default)(metadata, replacements));
          };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/populate.js");
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/cache.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.clear = function() {
          clearPath(), clearScope();
        }, exports3.clearPath = clearPath, exports3.clearScope = clearScope, exports3.getCachedPaths = function(hub, parent) {
          var _pathsCache$get;
          return null, null == (_pathsCache$get = pathsCache.get(false ? null : nullHub)) ? void 0 : _pathsCache$get.get(parent);
        }, exports3.getOrCreateCachedPaths = function(hub, parent) {
          null;
          let parents = pathsCache.get(false ? null : nullHub);
          parents || pathsCache.set(false ? null : nullHub, parents = /* @__PURE__ */ new WeakMap());
          let paths = parents.get(parent);
          paths || parents.set(parent, paths = /* @__PURE__ */ new Map());
          return paths;
        }, exports3.scope = exports3.path = void 0;
        let pathsCache = /* @__PURE__ */ new WeakMap();
        exports3.path = pathsCache;
        let scope = /* @__PURE__ */ new WeakMap();
        function clearPath() {
          exports3.path = pathsCache = /* @__PURE__ */ new WeakMap();
        }
        function clearScope() {
          exports3.scope = scope = /* @__PURE__ */ new WeakMap();
        }
        exports3.scope = scope;
        const nullHub = Object.freeze({});
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/context.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
        exports3.default = class {
          constructor(scope, opts, state, parentPath) {
            this.queue = null, this.priorityQueue = null, this.parentPath = parentPath, this.scope = scope, this.state = state, this.opts = opts;
          }
          shouldVisit(node) {
            const opts = this.opts;
            if (opts.enter || opts.exit) return true;
            if (opts[node.type]) return true;
            const keys = VISITOR_KEYS[node.type];
            if (null == keys || !keys.length) return false;
            for (const key of keys) if (node[key]) return true;
            return false;
          }
          create(node, container, key, listKey) {
            return _index.default.get({ parentPath: this.parentPath, parent: node, container, key, listKey });
          }
          maybeQueue(path3, notPriority) {
            this.queue && (notPriority ? this.queue.push(path3) : this.priorityQueue.push(path3));
          }
          visitMultiple(container, parent, listKey) {
            if (0 === container.length) return false;
            const queue = [];
            for (let key = 0; key < container.length; key++) {
              const node = container[key];
              node && this.shouldVisit(node) && queue.push(this.create(parent, container, key, listKey));
            }
            return this.visitQueue(queue);
          }
          visitSingle(node, key) {
            return !!this.shouldVisit(node[key]) && this.visitQueue([this.create(node, node, key)]);
          }
          visitQueue(queue) {
            this.queue = queue, this.priorityQueue = [];
            const visited = /* @__PURE__ */ new WeakSet();
            let stop = false;
            for (const path3 of queue) {
              if (path3.resync(), 0 !== path3.contexts.length && path3.contexts[path3.contexts.length - 1] === this || path3.pushContext(this), null === path3.key) continue;
              const { node } = path3;
              if (!visited.has(node)) {
                if (node && visited.add(node), path3.visit()) {
                  stop = true;
                  break;
                }
                if (this.priorityQueue.length && (stop = this.visitQueue(this.priorityQueue), this.priorityQueue = [], this.queue = queue, stop)) break;
              }
            }
            for (const path3 of queue) path3.popContext();
            return this.queue = null, stop;
          }
          visit(node, key) {
            const nodes = node[key];
            return !!nodes && (Array.isArray(nodes) ? this.visitMultiple(nodes, node, key) : this.visitSingle(node, key));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/hub.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        exports3.default = class {
          getCode() {
          }
          getScope() {
          }
          addHelper() {
            throw new Error("Helpers are not supported by the default hub.");
          }
          buildError(node, msg, Error2 = TypeError) {
            return new Error2(msg);
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "Hub", { enumerable: true, get: function() {
          return _hub.default;
        } }), Object.defineProperty(exports3, "NodePath", { enumerable: true, get: function() {
          return _index.default;
        } }), Object.defineProperty(exports3, "Scope", { enumerable: true, get: function() {
          return _index2.default;
        } }), exports3.visitors = exports3.default = void 0;
        var visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/visitors.js");
        exports3.visitors = visitors;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/cache.js"), _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/scope/index.js"), _hub = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/hub.js");
        const { VISITOR_KEYS, removeProperties, traverseFast } = _t;
        function traverse(parent, opts = {}, scope, state, parentPath, visitSelf) {
          if (parent) {
            if (!opts.noScope && !scope && "Program" !== parent.type && "File" !== parent.type) throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
            if (!parentPath && visitSelf) throw new Error("visitSelf can only be used when providing a NodePath.");
            VISITOR_KEYS[parent.type] && (visitors.explode(opts), (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath, null, visitSelf));
          }
        }
        var _default = traverse;
        function hasDenylistedType(path3, state) {
          path3.node.type === state.type && (state.has = true, path3.stop());
        }
        exports3.default = _default, traverse.visitors = visitors, traverse.verify = visitors.verify, traverse.explode = visitors.explode, traverse.cheap = function(node, enter) {
          traverseFast(node, enter);
        }, traverse.node = function(node, opts, scope, state, path3, skipKeys) {
          (0, _traverseNode.traverseNode)(node, opts, scope, state, path3, skipKeys);
        }, traverse.clearNode = function(node, opts) {
          removeProperties(node, opts);
        }, traverse.removeProperties = function(tree, opts) {
          return traverseFast(tree, traverse.clearNode, opts), tree;
        }, traverse.hasType = function(tree, type, denylistTypes) {
          if (null != denylistTypes && denylistTypes.includes(tree.type)) return false;
          if (tree.type === type) return true;
          const state = { has: false, type };
          return traverse(tree, { noScope: true, denylist: denylistTypes, enter: hasDenylistedType }, null, state), state.has;
        }, traverse.cache = cache;
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/ancestry.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.find = function(callback) {
          let path3 = this;
          do {
            if (callback(path3)) return path3;
          } while (path3 = path3.parentPath);
          return null;
        }, exports3.findParent = function(callback) {
          let path3 = this;
          for (; path3 = path3.parentPath; ) if (callback(path3)) return path3;
          return null;
        }, exports3.getAncestry = function() {
          let path3 = this;
          const paths = [];
          do {
            paths.push(path3);
          } while (path3 = path3.parentPath);
          return paths;
        }, exports3.getDeepestCommonAncestorFrom = function(paths, filter) {
          if (!paths.length) return this;
          if (1 === paths.length) return paths[0];
          let lastCommonIndex, lastCommon, minDepth = 1 / 0;
          const ancestries = paths.map((path3) => {
            const ancestry = [];
            do {
              ancestry.unshift(path3);
            } while ((path3 = path3.parentPath) && path3 !== this);
            return ancestry.length < minDepth && (minDepth = ancestry.length), ancestry;
          }), first = ancestries[0];
          depthLoop: for (let i = 0; i < minDepth; i++) {
            const shouldMatch = first[i];
            for (const ancestry of ancestries) if (ancestry[i] !== shouldMatch) break depthLoop;
            lastCommonIndex = i, lastCommon = shouldMatch;
          }
          if (lastCommon) return filter ? filter(lastCommon, lastCommonIndex, ancestries) : lastCommon;
          throw new Error("Couldn't find intersection");
        }, exports3.getEarliestCommonAncestorFrom = function(paths) {
          return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
            let earliest;
            const keys = VISITOR_KEYS[deepest.type];
            for (const ancestry of ancestries) {
              const path3 = ancestry[i + 1];
              if (!earliest) {
                earliest = path3;
                continue;
              }
              if (path3.listKey && earliest.listKey === path3.listKey && path3.key < earliest.key) {
                earliest = path3;
                continue;
              }
              keys.indexOf(earliest.parentKey) > keys.indexOf(path3.parentKey) && (earliest = path3);
            }
            return earliest;
          });
        }, exports3.getFunctionParent = function() {
          return this.findParent((p) => p.isFunction());
        }, exports3.getStatementParent = function() {
          let path3 = this;
          do {
            if (!path3.parentPath || Array.isArray(path3.container) && path3.isStatement()) break;
            path3 = path3.parentPath;
          } while (path3);
          if (path3 && (path3.isProgram() || path3.isFile())) throw new Error("File/Program node, we can't possibly find a statement parent to this");
          return path3;
        }, exports3.inType = function(...candidateTypes) {
          let path3 = this;
          for (; path3; ) {
            for (const type of candidateTypes) if (path3.node.type === type) return true;
            path3 = path3.parentPath;
          }
          return false;
        }, exports3.isAncestor = function(maybeDescendant) {
          return maybeDescendant.isDescendant(this);
        }, exports3.isDescendant = function(maybeAncestor) {
          return !!this.findParent((parent) => parent === maybeAncestor);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/comments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.addComment = function(type, content, line) {
          _addComment(this.node, type, content, line);
        }, exports3.addComments = function(type, comments) {
          _addComments(this.node, type, comments);
        }, exports3.shareCommentsWithSiblings = function() {
          if ("string" == typeof this.key) return;
          const node = this.node;
          if (!node) return;
          const trailing = node.trailingComments, leading = node.leadingComments;
          if (!trailing && !leading) return;
          const prev = this.getSibling(this.key - 1), next = this.getSibling(this.key + 1), hasPrev = Boolean(prev.node), hasNext = Boolean(next.node);
          hasPrev && (leading && prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments)), trailing && !hasNext && prev.addComments("trailing", trailing));
          hasNext && (trailing && next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments)), leading && !hasPrev && next.addComments("leading", leading));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { addComment: _addComment, addComments: _addComments } = _t;
        function removeIfExisting(list, toRemove) {
          if (!toRemove) return list;
          let lastFoundIndex = -1;
          return list.filter((el) => {
            const i = toRemove.indexOf(el, lastFoundIndex);
            if (-1 === i) return true;
            lastFoundIndex = i;
          });
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/context.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._call = function(fns) {
          if (!fns) return false;
          for (const fn of fns) {
            if (!fn) continue;
            const node = this.node;
            if (!node) return true;
            const ret = fn.call(this.state, this, this.state);
            if (ret && "object" == typeof ret && "function" == typeof ret.then) throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
            if (ret) throw new Error(`Unexpected return value from visitor method ${fn}`);
            if (this.node !== node) return true;
            if (this._traverseFlags > 0) return true;
          }
          return false;
        }, exports3._getQueueContexts = function() {
          let path3 = this, contexts = this.contexts;
          for (; !contexts.length && (path3 = path3.parentPath, path3); ) contexts = path3.contexts;
          return contexts;
        }, exports3._resyncKey = function() {
          if (!this.container) return;
          if (this.node === this.container[this.key]) return;
          if (Array.isArray(this.container)) {
            for (let i = 0; i < this.container.length; i++) if (this.container[i] === this.node) return void this.setKey(i);
          } else for (const key of Object.keys(this.container)) if (this.container[key] === this.node) return void this.setKey(key);
          this.key = null;
        }, exports3._resyncList = function() {
          if (!this.parent || !this.inList) return;
          const newContainer = this.parent[this.listKey];
          if (this.container === newContainer) return;
          this.container = newContainer || null;
        }, exports3._resyncParent = function() {
          this.parentPath && (this.parent = this.parentPath.node);
        }, exports3._resyncRemoved = function() {
          null != this.key && this.container && this.container[this.key] === this.node || this._markRemoved();
        }, exports3.call = function(key) {
          const opts = this.opts;
          if (this.debug(key), this.node && this._call(opts[key])) return true;
          var _opts$this$node$type;
          return !!this.node && this._call(null == (_opts$this$node$type = opts[this.node.type]) ? void 0 : _opts$this$node$type[key]);
        }, exports3.isBlacklisted = exports3.isDenylisted = function() {
          var _this$opts$denylist;
          const denylist = null != (_this$opts$denylist = this.opts.denylist) ? _this$opts$denylist : this.opts.blacklist;
          return denylist && denylist.indexOf(this.node.type) > -1;
        }, exports3.popContext = function() {
          this.contexts.pop(), this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(void 0);
        }, exports3.pushContext = function(context) {
          this.contexts.push(context), this.setContext(context);
        }, exports3.requeue = function(pathToQueue = this) {
          if (pathToQueue.removed) return;
          const contexts = this.contexts;
          for (const context of contexts) context.maybeQueue(pathToQueue);
        }, exports3.resync = function() {
          if (this.removed) return;
          this._resyncParent(), this._resyncList(), this._resyncKey();
        }, exports3.setContext = function(context) {
          null != this.skipKeys && (this.skipKeys = {});
          this._traverseFlags = 0, context && (this.context = context, this.state = context.state, this.opts = context.opts);
          return this.setScope(), this;
        }, exports3.setKey = function(key) {
          var _this$node;
          this.key = key, this.node = this.container[this.key], this.type = null == (_this$node = this.node) ? void 0 : _this$node.type;
        }, exports3.setScope = function() {
          var _this$opts2, _this$scope;
          if (null != (_this$opts2 = this.opts) && _this$opts2.noScope) return;
          let target, path3 = this.parentPath;
          (("key" === this.key || "decorators" === this.listKey) && path3.isMethod() || "discriminant" === this.key && path3.isSwitchStatement()) && (path3 = path3.parentPath);
          for (; path3 && !target; ) {
            var _path$opts;
            if (null != (_path$opts = path3.opts) && _path$opts.noScope) return;
            target = path3.scope, path3 = path3.parentPath;
          }
          this.scope = this.getScope(target), null == (_this$scope = this.scope) || _this$scope.init();
        }, exports3.setup = function(parentPath, container, listKey, key) {
          this.listKey = listKey, this.container = container, this.parentPath = parentPath || this.parentPath, this.setKey(key);
        }, exports3.skip = function() {
          this.shouldSkip = true;
        }, exports3.skipKey = function(key) {
          null == this.skipKeys && (this.skipKeys = {});
          this.skipKeys[key] = true;
        }, exports3.stop = function() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
        }, exports3.visit = function() {
          var _this$opts$shouldSkip, _this$opts;
          if (!this.node) return false;
          if (this.isDenylisted()) return false;
          if (null != (_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) && _this$opts$shouldSkip.call(_this$opts, this)) return false;
          const currentContext = this.context;
          if (this.shouldSkip || this.call("enter")) return this.debug("Skip..."), this.shouldStop;
          return restoreContext(this, currentContext), this.debug("Recursing into..."), this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys), restoreContext(this, currentContext), this.call("exit"), this.shouldStop;
        };
        var _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/index.js");
        function restoreContext(path3, context) {
          path3.context !== context && (path3.context = context, path3.state = context.state, path3.opts = context.opts);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/conversion.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.arrowFunctionToExpression = function({ allowInsertArrow = true, allowInsertArrowWithRest = allowInsertArrow, noNewArrows = !((_arguments$) => null == (_arguments$ = arguments[0]) ? void 0 : _arguments$.specCompliant)() } = {}) {
          if (!this.isArrowFunctionExpression()) throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
          const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
          if (fn.ensureBlock(), function(path3, type) {
            path3.node.type = type;
          }(fn, "FunctionExpression"), !noNewArrows) {
            const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
            return checkBinding && fn.parentPath.scope.push({ id: checkBinding, init: objectExpression([]) }), fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), identifier(checkBinding ? checkBinding.name : thisBinding)]))), fn.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()])), fn.get("callee.object");
          }
          return fn;
        }, exports3.ensureBlock = function() {
          const body = this.get("body"), bodyNode = body.node;
          if (Array.isArray(body)) throw new Error("Can't convert array path to a block statement");
          if (!bodyNode) throw new Error("Can't convert node without a body");
          if (body.isBlockStatement()) return bodyNode;
          const statements = [];
          let key, listKey, stringPath = "body";
          body.isStatement() ? (listKey = "body", key = 0, statements.push(body.node)) : (stringPath += ".body.0", this.isFunction() ? (key = "argument", statements.push(returnStatement(body.node))) : (key = "expression", statements.push(expressionStatement(body.node))));
          this.node.body = blockStatement(statements);
          const parentPath = this.get(stringPath);
          return body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key), this.node;
        }, exports3.toComputedKey = function() {
          let key;
          if (this.isMemberExpression()) key = this.node.property;
          else {
            if (!this.isProperty() && !this.isMethod()) throw new ReferenceError("todo");
            key = this.node.key;
          }
          this.node.computed || isIdentifier(key) && (key = stringLiteral(key.name));
          return key;
        }, exports3.unwrapFunctionEnvironment = function() {
          if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
          hoistFunctionEnvironment(this);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.22.20/node_modules/@babel/helper-environment-visitor/lib/index.js"), _helperFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-function-name@7.23.0/node_modules/@babel/helper-function-name/lib/index.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/visitors.js");
        const { arrowFunctionExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, conditionalExpression, expressionStatement, identifier, isIdentifier, jsxIdentifier, logicalExpression, LOGICAL_OPERATORS, memberExpression, metaProperty, numericLiteral, objectExpression, restElement, returnStatement, sequenceExpression, spreadElement, stringLiteral, super: _super, thisExpression, toExpression, unaryExpression } = _t;
        exports3.arrowFunctionToShadowed = function() {
          this.isArrowFunctionExpression() && this.arrowFunctionToExpression();
        };
        const getSuperCallsVisitor = (0, _visitors.merge)([{ CallExpression(child, { allSuperCalls }) {
          child.get("callee").isSuper() && allSuperCalls.push(child);
        } }, _helperEnvironmentVisitor.default]);
        function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {
          let arrowParent, thisEnvFn = fnPath.findParent((p) => p.isArrowFunctionExpression() ? (null != arrowParent || (arrowParent = p), false) : p.isFunction() || p.isProgram() || p.isClassProperty({ static: false }) || p.isClassPrivateProperty({ static: false }));
          const inConstructor = thisEnvFn.isClassMethod({ kind: "constructor" });
          if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) if (arrowParent) thisEnvFn = arrowParent;
          else {
            if (!allowInsertArrow) throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
            fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), [])), thisEnvFn = fnPath.get("callee"), fnPath = thisEnvFn.get("body");
          }
          const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } = function(fnPath2) {
            const thisPaths2 = [], argumentsPaths2 = [], newTargetPaths2 = [], superProps2 = [], superCalls2 = [];
            return fnPath2.traverse(getScopeInformationVisitor, { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 }), { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 };
          }(fnPath);
          if (inConstructor && superCalls.length > 0) {
            if (!allowInsertArrow) throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            if (!allowInsertArrowWithRest) throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            const allSuperCalls = [];
            thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });
            const superBinding = function(thisEnvFn2) {
              return getBinding(thisEnvFn2, "supercall", () => {
                const argsBinding = thisEnvFn2.scope.generateUidIdentifier("args");
                return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
              });
            }(thisEnvFn);
            allSuperCalls.forEach((superCall) => {
              const callee = identifier(superBinding);
              callee.loc = superCall.node.callee.loc, superCall.get("callee").replaceWith(callee);
            });
          }
          if (argumentsPaths.length > 0) {
            const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
              const args = () => identifier("arguments");
              return thisEnvFn.scope.path.isProgram() ? conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args()) : args();
            });
            argumentsPaths.forEach((argumentsChild) => {
              const argsRef = identifier(argumentsBinding);
              argsRef.loc = argumentsChild.node.loc, argumentsChild.replaceWith(argsRef);
            });
          }
          if (newTargetPaths.length > 0) {
            const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
            newTargetPaths.forEach((targetChild) => {
              const targetRef = identifier(newTargetBinding);
              targetRef.loc = targetChild.node.loc, targetChild.replaceWith(targetRef);
            });
          }
          if (superProps.length > 0) {
            if (!allowInsertArrow) throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            superProps.reduce((acc, superProp) => acc.concat(function(superProp2) {
              if (superProp2.parentPath.isAssignmentExpression() && "=" !== superProp2.parentPath.node.operator) {
                const assignmentPath = superProp2.parentPath, op = assignmentPath.node.operator.slice(0, -1), value2 = assignmentPath.node.right, isLogicalAssignment = function(op2) {
                  return LOGICAL_OPERATORS.includes(op2);
                }(op);
                if (superProp2.node.computed) {
                  const tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), true), value2));
                } else {
                  const object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, property)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value2));
                }
                return isLogicalAssignment ? assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right)) : assignmentPath.node.operator = "=", [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
              }
              if (superProp2.parentPath.isUpdateExpression()) {
                const updateExpr = superProp2.parentPath, tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), computedKey = superProp2.node.computed ? superProp2.scope.generateDeclaredUidIdentifier("prop") : null, parts = [assignmentExpression("=", tmp, memberExpression(superProp2.node.object, computedKey ? assignmentExpression("=", computedKey, superProp2.node.property) : superProp2.node.property, superProp2.node.computed)), assignmentExpression("=", memberExpression(superProp2.node.object, computedKey ? identifier(computedKey.name) : superProp2.node.property, superProp2.node.computed), binaryExpression(superProp2.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
                superProp2.parentPath.node.prefix || parts.push(identifier(tmp.name)), updateExpr.replaceWith(sequenceExpression(parts));
                return [updateExpr.get("expressions.0.right"), updateExpr.get("expressions.1.left")];
              }
              return [superProp2];
              function rightExpression(op, left, right) {
                return "=" === op ? assignmentExpression("=", left, right) : binaryExpression(op, left, right);
              }
            }(superProp)), []).forEach((superProp) => {
              const key = superProp.node.computed ? "" : superProp.get("property").node.name, superParentPath = superProp.parentPath, isAssignment = superParentPath.isAssignmentExpression({ left: superProp.node }), isCall = superParentPath.isCallExpression({ callee: superProp.node }), isTaggedTemplate = superParentPath.isTaggedTemplateExpression({ tag: superProp.node }), superBinding = function(thisEnvFn2, isAssignment2, propName) {
                const op = isAssignment2 ? "set" : "get";
                return getBinding(thisEnvFn2, `superprop_${op}:${propName || ""}`, () => {
                  const argsList = [];
                  let fnBody;
                  if (propName) fnBody = memberExpression(_super(), identifier(propName));
                  else {
                    const method = thisEnvFn2.scope.generateUidIdentifier("prop");
                    argsList.unshift(method), fnBody = memberExpression(_super(), identifier(method.name), true);
                  }
                  if (isAssignment2) {
                    const valueIdent = thisEnvFn2.scope.generateUidIdentifier("value");
                    argsList.push(valueIdent), fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
                  }
                  return arrowFunctionExpression(argsList, fnBody);
                });
              }(thisEnvFn, isAssignment, key), args = [];
              if (superProp.node.computed && args.push(superProp.get("property").node), isAssignment) {
                const value2 = superParentPath.node.right;
                args.push(value2);
              }
              const call = callExpression(identifier(superBinding), args);
              isCall ? (superParentPath.unshiftContainer("arguments", thisExpression()), superProp.replaceWith(memberExpression(call, identifier("call"))), thisPaths.push(superParentPath.get("arguments.0"))) : isAssignment ? superParentPath.replaceWith(call) : isTaggedTemplate ? (superProp.replaceWith(callExpression(memberExpression(call, identifier("bind"), false), [thisExpression()])), thisPaths.push(superProp.get("arguments.0"))) : superProp.replaceWith(call);
            });
          }
          let thisBinding;
          return (thisPaths.length > 0 || !noNewArrows) && (thisBinding = function(thisEnvFn2, inConstructor2) {
            return getBinding(thisEnvFn2, "this", (thisBinding2) => {
              if (!inConstructor2 || !hasSuperClass(thisEnvFn2)) return thisExpression();
              thisEnvFn2.traverse(assignSuperThisVisitor, { supers: /* @__PURE__ */ new WeakSet(), thisBinding: thisBinding2 });
            });
          }(thisEnvFn, inConstructor), (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) && (thisPaths.forEach((thisChild) => {
            const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
            thisRef.loc = thisChild.node.loc, thisChild.replaceWith(thisRef);
          }), noNewArrows || (thisBinding = null))), { thisBinding, fnPath };
        }
        function hasSuperClass(thisEnvFn) {
          return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
        }
        const assignSuperThisVisitor = (0, _visitors.merge)([{ CallExpression(child, { supers, thisBinding }) {
          child.get("callee").isSuper() && (supers.has(child.node) || (supers.add(child.node), child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))])));
        } }, _helperEnvironmentVisitor.default]);
        function getBinding(thisEnvFn, key, init) {
          const cacheKey = "binding:" + key;
          let data = thisEnvFn.getData(cacheKey);
          if (!data) {
            const id = thisEnvFn.scope.generateUidIdentifier(key);
            data = id.name, thisEnvFn.setData(cacheKey, data), thisEnvFn.scope.push({ id, init: init(data) });
          }
          return data;
        }
        const getScopeInformationVisitor = (0, _visitors.merge)([{ ThisExpression(child, { thisPaths }) {
          thisPaths.push(child);
        }, JSXIdentifier(child, { thisPaths }) {
          "this" === child.node.name && (child.parentPath.isJSXMemberExpression({ object: child.node }) || child.parentPath.isJSXOpeningElement({ name: child.node })) && thisPaths.push(child);
        }, CallExpression(child, { superCalls }) {
          child.get("callee").isSuper() && superCalls.push(child);
        }, MemberExpression(child, { superProps }) {
          child.get("object").isSuper() && superProps.push(child);
        }, Identifier(child, { argumentsPaths }) {
          if (!child.isReferencedIdentifier({ name: "arguments" })) return;
          let curr = child.scope;
          do {
            if (curr.hasOwnBinding("arguments")) return void curr.rename("arguments");
            if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) break;
          } while (curr = curr.parent);
          argumentsPaths.push(child);
        }, MetaProperty(child, { newTargetPaths }) {
          child.get("meta").isIdentifier({ name: "new" }) && child.get("property").isIdentifier({ name: "target" }) && newTargetPaths.push(child);
        } }, _helperEnvironmentVisitor.default]);
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/evaluation.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.evaluate = function() {
          const state = { confident: true, deoptPath: null, seen: /* @__PURE__ */ new Map() };
          let value2 = evaluateCached(this, state);
          state.confident || (value2 = void 0);
          return { confident: state.confident, deopt: state.deoptPath, value: value2 };
        }, exports3.evaluateTruthy = function() {
          const res = this.evaluate();
          if (res.confident) return !!res.value;
        };
        const VALID_OBJECT_CALLEES = ["Number", "String", "Math"], VALID_IDENTIFIER_CALLEES = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", null, null], INVALID_METHODS = ["random"];
        function isValidObjectCallee(val) {
          return VALID_OBJECT_CALLEES.includes(val);
        }
        function deopt(path3, state) {
          state.confident && (state.deoptPath = path3, state.confident = false);
        }
        const Globals = /* @__PURE__ */ new Map([["undefined", void 0], ["Infinity", 1 / 0], ["NaN", NaN]]);
        function evaluateCached(path3, state) {
          const { node } = path3, { seen } = state;
          if (seen.has(node)) {
            const existing = seen.get(node);
            return existing.resolved ? existing.value : void deopt(path3, state);
          }
          {
            const item = { resolved: false };
            seen.set(node, item);
            const val = function(path4, state2) {
              if (!state2.confident) return;
              if (path4.isSequenceExpression()) {
                const exprs = path4.get("expressions");
                return evaluateCached(exprs[exprs.length - 1], state2);
              }
              if (path4.isStringLiteral() || path4.isNumericLiteral() || path4.isBooleanLiteral()) return path4.node.value;
              if (path4.isNullLiteral()) return null;
              if (path4.isTemplateLiteral()) return evaluateQuasis(path4, path4.node.quasis, state2);
              if (path4.isTaggedTemplateExpression() && path4.get("tag").isMemberExpression()) {
                const object = path4.get("tag.object"), { node: { name } } = object, property = path4.get("tag.property");
                if (object.isIdentifier() && "String" === name && !path4.scope.getBinding(name) && property.isIdentifier() && "raw" === property.node.name) return evaluateQuasis(path4, path4.node.quasi.quasis, state2, true);
              }
              if (path4.isConditionalExpression()) {
                const testResult = evaluateCached(path4.get("test"), state2);
                if (!state2.confident) return;
                return evaluateCached(testResult ? path4.get("consequent") : path4.get("alternate"), state2);
              }
              if (path4.isExpressionWrapper()) return evaluateCached(path4.get("expression"), state2);
              if (path4.isMemberExpression() && !path4.parentPath.isCallExpression({ callee: path4.node })) {
                const property = path4.get("property"), object = path4.get("object");
                if (object.isLiteral()) {
                  const value2 = object.node.value, type = typeof value2;
                  let key = null;
                  if (path4.node.computed) {
                    if (key = evaluateCached(property, state2), !state2.confident) return;
                  } else property.isIdentifier() && (key = property.node.name);
                  if (!("number" !== type && "string" !== type || null == key || "number" != typeof key && "string" != typeof key)) return value2[key];
                }
              }
              if (path4.isReferencedIdentifier()) {
                const binding = path4.scope.getBinding(path4.node.name);
                if (binding) {
                  if (binding.constantViolations.length > 0 || path4.node.start < binding.path.node.end) return void deopt(binding.path, state2);
                  if (binding.hasValue) return binding.value;
                }
                const name = path4.node.name;
                if (Globals.has(name)) return binding ? void deopt(binding.path, state2) : Globals.get(name);
                const resolved = path4.resolve();
                return resolved === path4 ? void deopt(path4, state2) : evaluateCached(resolved, state2);
              }
              if (path4.isUnaryExpression({ prefix: true })) {
                if ("void" === path4.node.operator) return;
                const argument = path4.get("argument");
                if ("typeof" === path4.node.operator && (argument.isFunction() || argument.isClass())) return "function";
                const arg = evaluateCached(argument, state2);
                if (!state2.confident) return;
                switch (path4.node.operator) {
                  case "!":
                    return !arg;
                  case "+":
                    return +arg;
                  case "-":
                    return -arg;
                  case "~":
                    return ~arg;
                  case "typeof":
                    return typeof arg;
                }
              }
              if (path4.isArrayExpression()) {
                const arr = [], elems = path4.get("elements");
                for (const elem of elems) {
                  const elemValue = elem.evaluate();
                  if (!elemValue.confident) return void deopt(elemValue.deopt, state2);
                  arr.push(elemValue.value);
                }
                return arr;
              }
              if (path4.isObjectExpression()) {
                const obj = {}, props = path4.get("properties");
                for (const prop of props) {
                  if (prop.isObjectMethod() || prop.isSpreadElement()) return void deopt(prop, state2);
                  const keyPath = prop.get("key");
                  let key;
                  if (prop.node.computed) {
                    if (key = keyPath.evaluate(), !key.confident) return void deopt(key.deopt, state2);
                    key = key.value;
                  } else key = keyPath.isIdentifier() ? keyPath.node.name : keyPath.node.value;
                  let value2 = prop.get("value").evaluate();
                  if (!value2.confident) return void deopt(value2.deopt, state2);
                  value2 = value2.value, obj[key] = value2;
                }
                return obj;
              }
              if (path4.isLogicalExpression()) {
                const wasConfident = state2.confident, left = evaluateCached(path4.get("left"), state2), leftConfident = state2.confident;
                state2.confident = wasConfident;
                const right = evaluateCached(path4.get("right"), state2), rightConfident = state2.confident;
                switch (path4.node.operator) {
                  case "||":
                    if (state2.confident = leftConfident && (!!left || rightConfident), !state2.confident) return;
                    return left || right;
                  case "&&":
                    if (state2.confident = leftConfident && (!left || rightConfident), !state2.confident) return;
                    return left && right;
                  case "??":
                    if (state2.confident = leftConfident && (null != left || rightConfident), !state2.confident) return;
                    return null != left ? left : right;
                }
              }
              if (path4.isBinaryExpression()) {
                const left = evaluateCached(path4.get("left"), state2);
                if (!state2.confident) return;
                const right = evaluateCached(path4.get("right"), state2);
                if (!state2.confident) return;
                switch (path4.node.operator) {
                  case "-":
                    return left - right;
                  case "+":
                    return left + right;
                  case "/":
                    return left / right;
                  case "*":
                    return left * right;
                  case "%":
                    return left % right;
                  case "**":
                    return Math.pow(left, right);
                  case "<":
                    return left < right;
                  case ">":
                    return left > right;
                  case "<=":
                    return left <= right;
                  case ">=":
                    return left >= right;
                  case "==":
                    return left == right;
                  case "!=":
                    return left != right;
                  case "===":
                    return left === right;
                  case "!==":
                    return left !== right;
                  case "|":
                    return left | right;
                  case "&":
                    return left & right;
                  case "^":
                    return left ^ right;
                  case "<<":
                    return left << right;
                  case ">>":
                    return left >> right;
                  case ">>>":
                    return left >>> right;
                }
              }
              if (path4.isCallExpression()) {
                const callee = path4.get("callee");
                let context, func;
                if (callee.isIdentifier() && !path4.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || function(val2) {
                  return VALID_IDENTIFIER_CALLEES.includes(val2);
                }(callee.node.name)) && (func = global[callee.node.name]), callee.isMemberExpression()) {
                  const object = callee.get("object"), property = callee.get("property");
                  if (object.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object.node.name) && !function(val2) {
                    return INVALID_METHODS.includes(val2);
                  }(property.node.name)) {
                    context = global[object.node.name];
                    const key = property.node.name;
                    Object.hasOwnProperty.call(context, key) && (func = context[key]);
                  }
                  if (object.isLiteral() && property.isIdentifier()) {
                    const type = typeof object.node.value;
                    "string" !== type && "number" !== type || (context = object.node.value, func = context[property.node.name]);
                  }
                }
                if (func) {
                  const args = path4.get("arguments").map((arg) => evaluateCached(arg, state2));
                  if (!state2.confident) return;
                  return func.apply(context, args);
                }
              }
              deopt(path4, state2);
            }(path3, state);
            return state.confident && (item.resolved = true, item.value = val), val;
          }
        }
        function evaluateQuasis(path3, quasis, state, raw = false) {
          let str = "", i = 0;
          const exprs = path3.isTemplateLiteral() ? path3.get("expressions") : path3.get("quasi.expressions");
          for (const elem of quasis) {
            if (!state.confident) break;
            str += raw ? elem.value.raw : elem.value.cooked;
            const expr = exprs[i++];
            expr && (str += String(evaluateCached(expr, state)));
          }
          if (state.confident) return str;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/family.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._getKey = function(key, context) {
          const node = this.node, container = node[key];
          return Array.isArray(container) ? container.map((_, i) => _index.default.get({ listKey: key, parentPath: this, parent: node, container, key: i }).setContext(context)) : _index.default.get({ parentPath: this, parent: node, container: node, key }).setContext(context);
        }, exports3._getPattern = function(parts, context) {
          let path3 = this;
          for (const part of parts) path3 = "." === part ? path3.parentPath : Array.isArray(path3) ? path3[part] : path3.get(part, context);
          return path3;
        }, exports3.get = function(key, context = true) {
          true === context && (context = this.context);
          const parts = key.split(".");
          return 1 === parts.length ? this._getKey(key, context) : this._getPattern(parts, context);
        }, exports3.getAllNextSiblings = function() {
          let _key = this.key, sibling = this.getSibling(++_key);
          const siblings = [];
          for (; sibling.node; ) siblings.push(sibling), sibling = this.getSibling(++_key);
          return siblings;
        }, exports3.getAllPrevSiblings = function() {
          let _key = this.key, sibling = this.getSibling(--_key);
          const siblings = [];
          for (; sibling.node; ) siblings.push(sibling), sibling = this.getSibling(--_key);
          return siblings;
        }, exports3.getBindingIdentifierPaths = function(duplicates = false, outerOnly = false) {
          const search = [this], ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id) continue;
            if (!id.node) continue;
            const keys = _getBindingIdentifiers.keys[id.node.type];
            if (id.isIdentifier()) if (duplicates) {
              (ids[id.node.name] = ids[id.node.name] || []).push(id);
            } else ids[id.node.name] = id;
            else if (id.isExportDeclaration()) {
              const declaration = id.get("declaration");
              isDeclaration(declaration) && search.push(declaration);
            } else {
              if (outerOnly) {
                if (id.isFunctionDeclaration()) {
                  search.push(id.get("id"));
                  continue;
                }
                if (id.isFunctionExpression()) continue;
              }
              if (keys) for (let i = 0; i < keys.length; i++) {
                const key = keys[i], child = id.get(key);
                Array.isArray(child) ? search.push(...child) : child.node && search.push(child);
              }
            }
          }
          return ids;
        }, exports3.getBindingIdentifiers = function(duplicates) {
          return _getBindingIdentifiers(this.node, duplicates);
        }, exports3.getCompletionRecords = function() {
          return _getCompletionRecords(this, { canHaveBreak: false, shouldPopulateBreak: false, inCaseClause: false }).map((r) => r.path);
        }, exports3.getNextSibling = function() {
          return this.getSibling(this.key + 1);
        }, exports3.getOpposite = function() {
          if ("left" === this.key) return this.getSibling("right");
          if ("right" === this.key) return this.getSibling("left");
          return null;
        }, exports3.getOuterBindingIdentifierPaths = function(duplicates = false) {
          return this.getBindingIdentifierPaths(duplicates, true);
        }, exports3.getOuterBindingIdentifiers = function(duplicates) {
          return _getOuterBindingIdentifiers(this.node, duplicates);
        }, exports3.getPrevSibling = function() {
          return this.getSibling(this.key - 1);
        }, exports3.getSibling = function(key) {
          return _index.default.get({ parentPath: this.parentPath, parent: this.parent, container: this.container, listKey: this.listKey, key }).setContext(this.context);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { getBindingIdentifiers: _getBindingIdentifiers, getOuterBindingIdentifiers: _getOuterBindingIdentifiers, isDeclaration, numericLiteral, unaryExpression } = _t, NORMAL_COMPLETION = 0, BREAK_COMPLETION = 1;
        function addCompletionRecords(path3, records, context) {
          return path3 && records.push(..._getCompletionRecords(path3, context)), records;
        }
        function normalCompletionToBreak(completions) {
          completions.forEach((c) => {
            c.type = BREAK_COMPLETION;
          });
        }
        function replaceBreakStatementInBreakCompletion(completions, reachable) {
          completions.forEach((c) => {
            c.path.isBreakStatement({ label: null }) && (reachable ? c.path.replaceWith(unaryExpression("void", numericLiteral(0))) : c.path.remove());
          });
        }
        function getStatementListCompletion(paths, context) {
          const completions = [];
          if (context.canHaveBreak) {
            let lastNormalCompletions = [];
            for (let i = 0; i < paths.length; i++) {
              const path3 = paths[i], newContext = Object.assign({}, context, { inCaseClause: false });
              path3.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak) ? newContext.shouldPopulateBreak = true : newContext.shouldPopulateBreak = false;
              const statementCompletions = _getCompletionRecords(path3, newContext);
              if (statementCompletions.length > 0 && statementCompletions.every((c) => c.type === BREAK_COMPLETION)) {
                lastNormalCompletions.length > 0 && statementCompletions.every((c) => c.path.isBreakStatement({ label: null })) ? (normalCompletionToBreak(lastNormalCompletions), completions.push(...lastNormalCompletions), lastNormalCompletions.some((c) => c.path.isDeclaration()) && (completions.push(...statementCompletions), replaceBreakStatementInBreakCompletion(statementCompletions, true)), replaceBreakStatementInBreakCompletion(statementCompletions, false)) : (completions.push(...statementCompletions), context.shouldPopulateBreak || replaceBreakStatementInBreakCompletion(statementCompletions, true));
                break;
              }
              if (i === paths.length - 1) completions.push(...statementCompletions);
              else {
                lastNormalCompletions = [];
                for (let i2 = 0; i2 < statementCompletions.length; i2++) {
                  const c = statementCompletions[i2];
                  c.type === BREAK_COMPLETION && completions.push(c), c.type === NORMAL_COMPLETION && lastNormalCompletions.push(c);
                }
              }
            }
          } else if (paths.length) for (let i = paths.length - 1; i >= 0; i--) {
            const pathCompletions = _getCompletionRecords(paths[i], context);
            if (pathCompletions.length > 1 || 1 === pathCompletions.length && !pathCompletions[0].path.isVariableDeclaration()) {
              completions.push(...pathCompletions);
              break;
            }
          }
          return completions;
        }
        function _getCompletionRecords(path3, context) {
          let records = [];
          if (path3.isIfStatement()) records = addCompletionRecords(path3.get("consequent"), records, context), records = addCompletionRecords(path3.get("alternate"), records, context);
          else {
            if (path3.isDoExpression() || path3.isFor() || path3.isWhile() || path3.isLabeledStatement()) return addCompletionRecords(path3.get("body"), records, context);
            if (path3.isProgram() || path3.isBlockStatement()) return getStatementListCompletion(path3.get("body"), context);
            if (path3.isFunction()) return _getCompletionRecords(path3.get("body"), context);
            if (path3.isTryStatement()) records = addCompletionRecords(path3.get("block"), records, context), records = addCompletionRecords(path3.get("handler"), records, context);
            else {
              if (path3.isCatchClause()) return addCompletionRecords(path3.get("body"), records, context);
              if (path3.isSwitchStatement()) return function(cases, records2, context2) {
                let lastNormalCompletions = [];
                for (let i = 0; i < cases.length; i++) {
                  const caseCompletions = _getCompletionRecords(cases[i], context2), normalCompletions = [], breakCompletions = [];
                  for (const c of caseCompletions) c.type === NORMAL_COMPLETION && normalCompletions.push(c), c.type === BREAK_COMPLETION && breakCompletions.push(c);
                  normalCompletions.length && (lastNormalCompletions = normalCompletions), records2.push(...breakCompletions);
                }
                return records2.push(...lastNormalCompletions), records2;
              }(path3.get("cases"), records, context);
              if (path3.isSwitchCase()) return getStatementListCompletion(path3.get("consequent"), { canHaveBreak: true, shouldPopulateBreak: false, inCaseClause: true });
              path3.isBreakStatement() ? records.push(/* @__PURE__ */ function(path4) {
                return { type: BREAK_COMPLETION, path: path4 };
              }(path3)) : records.push(/* @__PURE__ */ function(path4) {
                return { type: NORMAL_COMPLETION, path: path4 };
              }(path3));
            }
          }
          return records;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = exports3.SHOULD_STOP = exports3.SHOULD_SKIP = exports3.REMOVED = void 0;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _debug = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/scope/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), t = _t, cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/cache.js"), _generator = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.23.0/node_modules/@babel/generator/lib/index.js"), NodePath_ancestry = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/ancestry.js"), NodePath_inference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/inference/index.js"), NodePath_replacement = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/replacement.js"), NodePath_evaluation = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/evaluation.js"), NodePath_conversion = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/conversion.js"), NodePath_introspection = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/introspection.js"), NodePath_context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/context.js"), NodePath_removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/removal.js"), NodePath_modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/modification.js"), NodePath_family = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/family.js"), NodePath_comments = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/comments.js"), NodePath_virtual_types_validator = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js");
        const { validate } = _t, debug = _debug("babel");
        exports3.REMOVED = 1;
        exports3.SHOULD_STOP = 2;
        exports3.SHOULD_SKIP = 4;
        class NodePath {
          constructor(hub, parent) {
            this.contexts = [], this.state = null, this.opts = null, this._traverseFlags = 0, this.skipKeys = null, this.parentPath = null, this.container = null, this.listKey = null, this.key = null, this.node = null, this.type = null, this.parent = parent, this.hub = hub, this.data = null, this.context = null, this.scope = null;
          }
          static get({ hub, parentPath, parent, container, listKey, key }) {
            if (!hub && parentPath && (hub = parentPath.hub), !parent) throw new Error("To get a node path the parent needs to exist");
            const targetNode = container[key], paths = cache.getOrCreateCachedPaths(hub, parent);
            let path3 = paths.get(targetNode);
            return path3 || (path3 = new NodePath(hub, parent), targetNode && paths.set(targetNode, path3)), path3.setup(parentPath, container, listKey, key), path3;
          }
          getScope(scope) {
            return this.isScope() ? new _index2.default(this) : scope;
          }
          setData(key, val) {
            return null == this.data && (this.data = /* @__PURE__ */ Object.create(null)), this.data[key] = val;
          }
          getData(key, def) {
            null == this.data && (this.data = /* @__PURE__ */ Object.create(null));
            let val = this.data[key];
            return void 0 === val && void 0 !== def && (val = this.data[key] = def), val;
          }
          hasNode() {
            return null != this.node;
          }
          buildCodeFrameError(msg, Error2 = SyntaxError) {
            return this.hub.buildError(this.node, msg, Error2);
          }
          traverse(visitor, state) {
            (0, _index.default)(this.node, visitor, this.scope, state, this);
          }
          set(key, node) {
            validate(this.node, key, node), this.node[key] = node;
          }
          getPathLocation() {
            const parts = [];
            let path3 = this;
            do {
              let key = path3.key;
              path3.inList && (key = `${path3.listKey}[${key}]`), parts.unshift(key);
            } while (path3 = path3.parentPath);
            return parts.join(".");
          }
          debug(message) {
            debug.enabled && debug(`${this.getPathLocation()} ${this.type}: ${message}`);
          }
          toString() {
            return (0, _generator.default)(this.node).code;
          }
          get inList() {
            return !!this.listKey;
          }
          set inList(inList) {
            inList || (this.listKey = null);
          }
          get parentKey() {
            return this.listKey || this.key;
          }
          get shouldSkip() {
            return !!(4 & this._traverseFlags);
          }
          set shouldSkip(v) {
            v ? this._traverseFlags |= 4 : this._traverseFlags &= -5;
          }
          get shouldStop() {
            return !!(2 & this._traverseFlags);
          }
          set shouldStop(v) {
            v ? this._traverseFlags |= 2 : this._traverseFlags &= -3;
          }
          get removed() {
            return !!(1 & this._traverseFlags);
          }
          set removed(v) {
            v ? this._traverseFlags |= 1 : this._traverseFlags &= -2;
          }
        }
        Object.assign(NodePath.prototype, NodePath_ancestry, NodePath_inference, NodePath_replacement, NodePath_evaluation, NodePath_conversion, NodePath_introspection, NodePath_context, NodePath_removal, NodePath_modification, NodePath_family, NodePath_comments), NodePath.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
        for (const type of t.TYPES) {
          const typeKey = `is${type}`, fn = t[typeKey];
          NodePath.prototype[typeKey] = function(opts) {
            return fn(this.node, opts);
          }, NodePath.prototype[`assert${type}`] = function(opts) {
            if (!fn(this.node, opts)) throw new TypeError(`Expected node path of type ${type}`);
          };
        }
        Object.assign(NodePath.prototype, NodePath_virtual_types_validator);
        for (const type of Object.keys(virtualTypes)) "_" !== type[0] && (t.TYPES.includes(type) || t.TYPES.push(type));
        var _default = NodePath;
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/inference/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._getTypeAnnotation = function() {
          const node = this.node;
          if (!node) {
            if ("init" === this.key && this.parentPath.isVariableDeclarator()) {
              const declar = this.parentPath.parentPath, declarParent = declar.parentPath;
              return "left" === declar.key && declarParent.isForInStatement() ? stringTypeAnnotation() : "left" === declar.key && declarParent.isForOfStatement() ? anyTypeAnnotation() : voidTypeAnnotation();
            }
            return;
          }
          if (node.typeAnnotation) return node.typeAnnotation;
          if (typeAnnotationInferringNodes.has(node)) return;
          typeAnnotationInferringNodes.add(node);
          try {
            var _inferer;
            let inferer = inferers[node.type];
            if (inferer) return inferer.call(this, node);
            if (inferer = inferers[this.parentPath.type], null != (_inferer = inferer) && _inferer.validParent) return this.parentPath.getTypeAnnotation();
          } finally {
            typeAnnotationInferringNodes.delete(node);
          }
        }, exports3.baseTypeStrictlyMatches = function(rightArg) {
          const left = this.getTypeAnnotation(), right = rightArg.getTypeAnnotation();
          if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) return right.type === left.type;
          return false;
        }, exports3.couldBeBaseType = function(name) {
          const type = this.getTypeAnnotation();
          if (isAnyTypeAnnotation(type)) return true;
          if (isUnionTypeAnnotation(type)) {
            for (const type2 of type.types) if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) return true;
            return false;
          }
          return _isBaseType(name, type, true);
        }, exports3.getTypeAnnotation = function() {
          let type = this.getData("typeAnnotation");
          if (null != type) return type;
          type = this._getTypeAnnotation() || anyTypeAnnotation(), (isTypeAnnotation(type) || isTSTypeAnnotation(type)) && (type = type.typeAnnotation);
          return this.setData("typeAnnotation", type), type;
        }, exports3.isBaseType = function(baseName, soft) {
          return _isBaseType(baseName, this.getTypeAnnotation(), soft);
        }, exports3.isGenericType = function(genericName) {
          const type = this.getTypeAnnotation();
          if ("Array" === genericName && (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type))) return true;
          return isGenericTypeAnnotation(type) && isIdentifier(type.id, { name: genericName }) || isTSTypeReference(type) && isIdentifier(type.typeName, { name: genericName });
        };
        var inferers = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/inference/inferers.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { anyTypeAnnotation, isAnyTypeAnnotation, isArrayTypeAnnotation, isBooleanTypeAnnotation, isEmptyTypeAnnotation, isFlowBaseAnnotation, isGenericTypeAnnotation, isIdentifier, isMixedTypeAnnotation, isNumberTypeAnnotation, isStringTypeAnnotation, isTSArrayType, isTSTypeAnnotation, isTSTypeReference, isTupleTypeAnnotation, isTypeAnnotation, isUnionTypeAnnotation, isVoidTypeAnnotation, stringTypeAnnotation, voidTypeAnnotation } = _t;
        const typeAnnotationInferringNodes = /* @__PURE__ */ new WeakSet();
        function _isBaseType(baseName, type, soft) {
          if ("string" === baseName) return isStringTypeAnnotation(type);
          if ("number" === baseName) return isNumberTypeAnnotation(type);
          if ("boolean" === baseName) return isBooleanTypeAnnotation(type);
          if ("any" === baseName) return isAnyTypeAnnotation(type);
          if ("mixed" === baseName) return isMixedTypeAnnotation(type);
          if ("empty" === baseName) return isEmptyTypeAnnotation(type);
          if ("void" === baseName) return isVoidTypeAnnotation(type);
          if (soft) return false;
          throw new Error(`Unknown base type ${baseName}`);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          if (!this.isReferenced()) return;
          const binding = this.scope.getBinding(node.name);
          if (binding) return binding.identifier.typeAnnotation ? binding.identifier.typeAnnotation : function(binding2, path3, name) {
            const types = [], functionConstantViolations = [];
            let constantViolations = getConstantViolationsBefore(binding2, path3, functionConstantViolations);
            const testType = getConditionalAnnotation(binding2, path3, name);
            if (testType) {
              const testConstantViolations = getConstantViolationsBefore(binding2, testType.ifStatement);
              constantViolations = constantViolations.filter((path4) => testConstantViolations.indexOf(path4) < 0), types.push(testType.typeAnnotation);
            }
            if (constantViolations.length) {
              constantViolations.push(...functionConstantViolations);
              for (const violation of constantViolations) types.push(violation.getTypeAnnotation());
            }
            if (!types.length) return;
            return (0, _util.createUnionType)(types);
          }(binding, this, node.name);
          if ("undefined" === node.name) return voidTypeAnnotation();
          if ("NaN" === node.name || "Infinity" === node.name) return numberTypeAnnotation();
          node.name;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_NUMBER_BINARY_OPERATORS, createTypeAnnotationBasedOnTypeof, numberTypeAnnotation, voidTypeAnnotation } = _t;
        function getConstantViolationsBefore(binding, path3, functions) {
          const violations = binding.constantViolations.slice();
          return violations.unshift(binding.path), violations.filter((violation) => {
            const status = (violation = violation.resolve())._guessExecutionStatusRelativeTo(path3);
            return functions && "unknown" === status && functions.push(violation), "before" === status;
          });
        }
        function inferAnnotationFromBinaryExpression(name, path3) {
          const operator = path3.node.operator, right = path3.get("right").resolve(), left = path3.get("left").resolve();
          let target, typeofPath, typePath;
          if (left.isIdentifier({ name }) ? target = right : right.isIdentifier({ name }) && (target = left), target) return "===" === operator ? target.getTypeAnnotation() : BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0 ? numberTypeAnnotation() : void 0;
          if ("===" !== operator && "==" !== operator) return;
          if (left.isUnaryExpression({ operator: "typeof" }) ? (typeofPath = left, typePath = right) : right.isUnaryExpression({ operator: "typeof" }) && (typeofPath = right, typePath = left), !typeofPath) return;
          if (!typeofPath.get("argument").isIdentifier({ name })) return;
          if (typePath = typePath.resolve(), !typePath.isLiteral()) return;
          const typeValue = typePath.node.value;
          return "string" == typeof typeValue ? createTypeAnnotationBasedOnTypeof(typeValue) : void 0;
        }
        function getConditionalAnnotation(binding, path3, name) {
          const ifStatement = function(binding2, path4, name2) {
            let parentPath;
            for (; parentPath = path4.parentPath; ) {
              if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
                if ("test" === path4.key) return;
                return parentPath;
              }
              if (parentPath.isFunction() && parentPath.parentPath.scope.getBinding(name2) !== binding2) return;
              path4 = parentPath;
            }
          }(binding, path3, name);
          if (!ifStatement) return;
          const paths = [ifStatement.get("test")], types = [];
          for (let i = 0; i < paths.length; i++) {
            const path4 = paths[i];
            if (path4.isLogicalExpression()) "&&" === path4.node.operator && (paths.push(path4.get("left")), paths.push(path4.get("right")));
            else if (path4.isBinaryExpression()) {
              const type = inferAnnotationFromBinaryExpression(name, path4);
              type && types.push(type);
            }
          }
          return types.length ? { typeAnnotation: (0, _util.createUnionType)(types), ifStatement } : getConditionalAnnotation(binding, ifStatement, name);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/inference/inferers.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.ArrayExpression = ArrayExpression, exports3.AssignmentExpression = function() {
          return this.get("right").getTypeAnnotation();
        }, exports3.BinaryExpression = function(node) {
          const operator = node.operator;
          if (NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) return numberTypeAnnotation();
          if (BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) return booleanTypeAnnotation();
          if ("+" === operator) {
            const right = this.get("right"), left = this.get("left");
            return left.isBaseType("number") && right.isBaseType("number") ? numberTypeAnnotation() : left.isBaseType("string") || right.isBaseType("string") ? stringTypeAnnotation() : unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
          }
        }, exports3.BooleanLiteral = function() {
          return booleanTypeAnnotation();
        }, exports3.CallExpression = function() {
          const { callee } = this.node;
          if (isObjectKeys(callee)) return arrayTypeAnnotation(stringTypeAnnotation());
          if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, { name: "Array" })) return arrayTypeAnnotation(anyTypeAnnotation());
          if (isObjectEntries(callee)) return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
          return resolveCall(this.get("callee"));
        }, exports3.ConditionalExpression = function() {
          const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports3.ClassDeclaration = exports3.ClassExpression = exports3.FunctionDeclaration = exports3.ArrowFunctionExpression = exports3.FunctionExpression = function() {
          return genericTypeAnnotation(identifier("Function"));
        }, Object.defineProperty(exports3, "Identifier", { enumerable: true, get: function() {
          return _infererReference.default;
        } }), exports3.LogicalExpression = function() {
          const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports3.NewExpression = function(node) {
          if ("Identifier" === node.callee.type) return genericTypeAnnotation(node.callee);
        }, exports3.NullLiteral = function() {
          return nullLiteralTypeAnnotation();
        }, exports3.NumericLiteral = function() {
          return numberTypeAnnotation();
        }, exports3.ObjectExpression = function() {
          return genericTypeAnnotation(identifier("Object"));
        }, exports3.ParenthesizedExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports3.RegExpLiteral = function() {
          return genericTypeAnnotation(identifier("RegExp"));
        }, exports3.RestElement = RestElement, exports3.SequenceExpression = function() {
          return this.get("expressions").pop().getTypeAnnotation();
        }, exports3.StringLiteral = function() {
          return stringTypeAnnotation();
        }, exports3.TSAsExpression = TSAsExpression, exports3.TSNonNullExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports3.TaggedTemplateExpression = function() {
          return resolveCall(this.get("tag"));
        }, exports3.TemplateLiteral = function() {
          return stringTypeAnnotation();
        }, exports3.TypeCastExpression = TypeCastExpression, exports3.UnaryExpression = function(node) {
          const operator = node.operator;
          if ("void" === operator) return voidTypeAnnotation();
          if (NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) return numberTypeAnnotation();
          if (STRING_UNARY_OPERATORS.indexOf(operator) >= 0) return stringTypeAnnotation();
          if (BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) return booleanTypeAnnotation();
        }, exports3.UpdateExpression = function(node) {
          const operator = node.operator;
          if ("++" === operator || "--" === operator) return numberTypeAnnotation();
        }, exports3.VariableDeclarator = function() {
          if (!this.get("id").isIdentifier()) return;
          return this.get("init").getTypeAnnotation();
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _infererReference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS, anyTypeAnnotation, arrayTypeAnnotation, booleanTypeAnnotation, buildMatchMemberExpression, genericTypeAnnotation, identifier, nullLiteralTypeAnnotation, numberTypeAnnotation, stringTypeAnnotation, tupleTypeAnnotation, unionTypeAnnotation, voidTypeAnnotation, isIdentifier } = _t;
        function TypeCastExpression(node) {
          return node.typeAnnotation;
        }
        function TSAsExpression(node) {
          return node.typeAnnotation;
        }
        function ArrayExpression() {
          return genericTypeAnnotation(identifier("Array"));
        }
        function RestElement() {
          return ArrayExpression();
        }
        TypeCastExpression.validParent = true, TSAsExpression.validParent = true, RestElement.validParent = true;
        const isArrayFrom = buildMatchMemberExpression("Array.from"), isObjectKeys = buildMatchMemberExpression("Object.keys"), isObjectValues = buildMatchMemberExpression("Object.values"), isObjectEntries = buildMatchMemberExpression("Object.entries");
        function resolveCall(callee) {
          if ((callee = callee.resolve()).isFunction()) {
            const { node } = callee;
            if (node.async) return node.generator ? genericTypeAnnotation(identifier("AsyncIterator")) : genericTypeAnnotation(identifier("Promise"));
            if (node.generator) return genericTypeAnnotation(identifier("Iterator"));
            if (callee.node.returnType) return callee.node.returnType;
          }
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/inference/util.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.createUnionType = function(types) {
          if (isFlowType(types[0])) return createFlowUnionType ? createFlowUnionType(types) : createUnionTypeAnnotation(types);
          if (createTSUnionType) return createTSUnionType(types);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { createFlowUnionType, createTSUnionType, createUnionTypeAnnotation, isFlowType, isTSType } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/introspection.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._guessExecutionStatusRelativeTo = function(target) {
          return _guessExecutionStatusRelativeToCached(this, target, /* @__PURE__ */ new Map());
        }, exports3._resolve = function(dangerous, resolved) {
          if (resolved && resolved.indexOf(this) >= 0) return;
          if ((resolved = resolved || []).push(this), this.isVariableDeclarator()) {
            if (this.get("id").isIdentifier()) return this.get("init").resolve(dangerous, resolved);
          } else if (this.isReferencedIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            if (!binding) return;
            if (!binding.constant) return;
            if ("module" === binding.kind) return;
            if (binding.path !== this) {
              const ret = binding.path.resolve(dangerous, resolved);
              if (this.find((parent) => parent.node === ret.node)) return;
              return ret;
            }
          } else {
            if (this.isTypeCastExpression()) return this.get("expression").resolve(dangerous, resolved);
            if (dangerous && this.isMemberExpression()) {
              const targetKey = this.toComputedKey();
              if (!isLiteral(targetKey)) return;
              const targetName = targetKey.value, target = this.get("object").resolve(dangerous, resolved);
              if (target.isObjectExpression()) {
                const props = target.get("properties");
                for (const prop of props) {
                  if (!prop.isProperty()) continue;
                  const key = prop.get("key");
                  let match = prop.isnt("computed") && key.isIdentifier({ name: targetName });
                  if (match = match || key.isLiteral({ value: targetName }), match) return prop.get("value").resolve(dangerous, resolved);
                }
              } else if (target.isArrayExpression() && !isNaN(+targetName)) {
                const elem = target.get("elements")[targetName];
                if (elem) return elem.resolve(dangerous, resolved);
              }
            }
          }
        }, exports3.canHaveVariableDeclarationOrExpression = function() {
          return ("init" === this.key || "left" === this.key) && this.parentPath.isFor();
        }, exports3.canSwapBetweenExpressionAndStatement = function(replacement) {
          if ("body" !== this.key || !this.parentPath.isArrowFunctionExpression()) return false;
          if (this.isExpression()) return isBlockStatement(replacement);
          if (this.isBlockStatement()) return isExpression(replacement);
          return false;
        }, exports3.equals = function(key, value2) {
          return this.node[key] === value2;
        }, exports3.getSource = function() {
          const node = this.node;
          if (node.end) {
            const code = this.hub.getCode();
            if (code) return code.slice(node.start, node.end);
          }
          return "";
        }, exports3.has = has, exports3.is = void 0, exports3.isCompletionRecord = function(allowInsideFunction) {
          let path3 = this, first = true;
          do {
            const { type, container } = path3;
            if (!first && (path3.isFunction() || "StaticBlock" === type)) return !!allowInsideFunction;
            if (first = false, Array.isArray(container) && path3.key !== container.length - 1) return false;
          } while ((path3 = path3.parentPath) && !path3.isProgram() && !path3.isDoExpression());
          return true;
        }, exports3.isConstantExpression = function() {
          if (this.isIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            return !!binding && binding.constant;
          }
          if (this.isLiteral()) return !this.isRegExpLiteral() && (!this.isTemplateLiteral() || this.get("expressions").every((expression) => expression.isConstantExpression()));
          if (this.isUnaryExpression()) return "void" === this.node.operator && this.get("argument").isConstantExpression();
          if (this.isBinaryExpression()) {
            const { operator } = this.node;
            return "in" !== operator && "instanceof" !== operator && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
          }
          return false;
        }, exports3.isInStrictMode = function() {
          const start = this.isProgram() ? this : this.parentPath;
          return !!start.find((path3) => {
            if (path3.isProgram({ sourceType: "module" })) return true;
            if (path3.isClass()) return true;
            if (path3.isArrowFunctionExpression() && !path3.get("body").isBlockStatement()) return false;
            let body;
            if (path3.isFunction()) body = path3.node.body;
            else {
              if (!path3.isProgram()) return false;
              body = path3.node;
            }
            for (const directive of body.directives) if ("use strict" === directive.value.value) return true;
          });
        }, exports3.isNodeType = function(type) {
          return isType(this.type, type);
        }, exports3.isStatementOrBlock = function() {
          return !this.parentPath.isLabeledStatement() && !isBlockStatement(this.container) && STATEMENT_OR_BLOCK_KEYS.includes(this.key);
        }, exports3.isStatic = function() {
          return this.scope.isStatic(this.node);
        }, exports3.isnt = function(key) {
          return !this.has(key);
        }, exports3.matchesPattern = function(pattern, allowPartial) {
          return _matchesPattern(this.node, pattern, allowPartial);
        }, exports3.referencesImport = function(moduleSource, importName) {
          if (!this.isReferencedIdentifier()) {
            if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, { value: importName }) : this.node.property.name === importName)) {
              const object = this.get("object");
              return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
            }
            return false;
          }
          const binding = this.scope.getBinding(this.node.name);
          if (!binding || "module" !== binding.kind) return false;
          const path3 = binding.path, parent = path3.parentPath;
          if (!parent.isImportDeclaration()) return false;
          if (parent.node.source.value !== moduleSource) return false;
          if (!importName) return true;
          if (path3.isImportDefaultSpecifier() && "default" === importName) return true;
          if (path3.isImportNamespaceSpecifier() && "*" === importName) return true;
          if (path3.isImportSpecifier() && isIdentifier(path3.node.imported, { name: importName })) return true;
          return false;
        }, exports3.resolve = function(dangerous, resolved) {
          return this._resolve(dangerous, resolved) || this;
        }, exports3.willIMaybeExecuteBefore = function(target) {
          return "after" !== this._guessExecutionStatusRelativeTo(target);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { STATEMENT_OR_BLOCK_KEYS, VISITOR_KEYS, isBlockStatement, isExpression, isIdentifier, isLiteral, isStringLiteral, isType, matchesPattern: _matchesPattern } = _t;
        function has(key) {
          const val = this.node && this.node[key];
          return val && Array.isArray(val) ? !!val.length : !!val;
        }
        const is = has;
        function getOuterFunction(path3) {
          return path3.isProgram() ? path3 : (path3.parentPath.scope.getFunctionParent() || path3.parentPath.scope.getProgramParent()).path;
        }
        function isExecutionUncertain(type, key) {
          switch (type) {
            case "LogicalExpression":
            case "AssignmentPattern":
              return "right" === key;
            case "ConditionalExpression":
            case "IfStatement":
              return "consequent" === key || "alternate" === key;
            case "WhileStatement":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForOfStatement":
              return "body" === key;
            case "ForStatement":
              return "body" === key || "update" === key;
            case "SwitchStatement":
              return "cases" === key;
            case "TryStatement":
              return "handler" === key;
            case "OptionalMemberExpression":
              return "property" === key;
            case "OptionalCallExpression":
              return "arguments" === key;
            default:
              return false;
          }
        }
        function isExecutionUncertainInList(paths, maxIndex) {
          for (let i = 0; i < maxIndex; i++) {
            const path3 = paths[i];
            if (isExecutionUncertain(path3.parent.type, path3.parentKey)) return true;
          }
          return false;
        }
        exports3.is = is;
        const SYMBOL_CHECKING = Symbol();
        function _guessExecutionStatusRelativeToCached(base, target, cache) {
          const funcParent = { this: getOuterFunction(base), target: getOuterFunction(target) };
          if (funcParent.target.node !== funcParent.this.node) return function(base2, target2, cache2) {
            let cached, nodeMap = cache2.get(base2.node);
            if (nodeMap) {
              if (cached = nodeMap.get(target2.node)) return cached === SYMBOL_CHECKING ? "unknown" : cached;
            } else cache2.set(base2.node, nodeMap = /* @__PURE__ */ new Map());
            nodeMap.set(target2.node, SYMBOL_CHECKING);
            const result = function(base3, target3, cache3) {
              if (!target3.isFunctionDeclaration()) return "before" === _guessExecutionStatusRelativeToCached(base3, target3, cache3) ? "before" : "unknown";
              if (target3.parentPath.isExportDeclaration()) return "unknown";
              const binding = target3.scope.getBinding(target3.node.id.name);
              if (!binding.references) return "before";
              const referencePaths = binding.referencePaths;
              let allStatus;
              for (const path3 of referencePaths) {
                if (!!path3.find((path4) => path4.node === target3.node)) continue;
                if ("callee" !== path3.key || !path3.parentPath.isCallExpression()) return "unknown";
                const status = _guessExecutionStatusRelativeToCached(base3, path3, cache3);
                if (allStatus && allStatus !== status) return "unknown";
                allStatus = status;
              }
              return allStatus;
            }(base2, target2, cache2);
            return nodeMap.set(target2.node, result), result;
          }(base, funcParent.target, cache);
          const paths = { target: target.getAncestry(), this: base.getAncestry() };
          if (paths.target.indexOf(base) >= 0) return "after";
          if (paths.this.indexOf(target) >= 0) return "before";
          let commonPath;
          const commonIndex = { target: 0, this: 0 };
          for (; !commonPath && commonIndex.this < paths.this.length; ) {
            const path3 = paths.this[commonIndex.this];
            commonIndex.target = paths.target.indexOf(path3), commonIndex.target >= 0 ? commonPath = path3 : commonIndex.this++;
          }
          if (!commonPath) throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
          if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) return "unknown";
          const divergence = { this: paths.this[commonIndex.this - 1], target: paths.target[commonIndex.target - 1] };
          if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) return divergence.target.key > divergence.this.key ? "before" : "after";
          const keys = VISITOR_KEYS[commonPath.type], keyPosition_this = keys.indexOf(divergence.this.parentKey);
          return keys.indexOf(divergence.target.parentKey) > keyPosition_this ? "before" : "after";
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/lib/hoister.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _t2 = _t;
        const { react } = _t, { cloneNode, jsxExpressionContainer, variableDeclaration, variableDeclarator } = _t2, referenceVisitor = { ReferencedIdentifier(path3, state) {
          if (path3.isJSXIdentifier() && react.isCompatTag(path3.node.name) && !path3.parentPath.isJSXMemberExpression()) return;
          if ("this" === path3.node.name) {
            let scope = path3.scope;
            do {
              if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) break;
            } while (scope = scope.parent);
            scope && state.breakOnScopePaths.push(scope.path);
          }
          const binding = path3.scope.getBinding(path3.node.name);
          if (binding) {
            for (const violation of binding.constantViolations) if (violation.scope !== binding.path.scope) return state.mutableBinding = true, void path3.stop();
            binding === state.scope.getBinding(path3.node.name) && (state.bindings[path3.node.name] = binding);
          }
        } };
        exports3.default = class {
          constructor(path3, scope) {
            this.breakOnScopePaths = void 0, this.bindings = void 0, this.mutableBinding = void 0, this.scopes = void 0, this.scope = void 0, this.path = void 0, this.attachAfter = void 0, this.breakOnScopePaths = [], this.bindings = {}, this.mutableBinding = false, this.scopes = [], this.scope = scope, this.path = path3, this.attachAfter = false;
          }
          isCompatibleScope(scope) {
            for (const key of Object.keys(this.bindings)) {
              const binding = this.bindings[key];
              if (!scope.bindingIdentifierEquals(key, binding.identifier)) return false;
            }
            return true;
          }
          getCompatibleScopes() {
            let scope = this.path.scope;
            do {
              if (!this.isCompatibleScope(scope)) break;
              if (this.scopes.push(scope), this.breakOnScopePaths.indexOf(scope.path) >= 0) break;
            } while (scope = scope.parent);
          }
          getAttachmentPath() {
            let path3 = this._getAttachmentPath();
            if (!path3) return;
            let targetScope = path3.scope;
            if (targetScope.path === path3 && (targetScope = path3.scope.parent), targetScope.path.isProgram() || targetScope.path.isFunction()) for (const name of Object.keys(this.bindings)) {
              if (!targetScope.hasOwnBinding(name)) continue;
              const binding = this.bindings[name];
              if ("param" === binding.kind || "params" === binding.path.parentKey) continue;
              if (this.getAttachmentParentForPath(binding.path).key >= path3.key) {
                this.attachAfter = true, path3 = binding.path;
                for (const violationPath of binding.constantViolations) this.getAttachmentParentForPath(violationPath).key > path3.key && (path3 = violationPath);
              }
            }
            return path3;
          }
          _getAttachmentPath() {
            const scope = this.scopes.pop();
            if (scope) {
              if (scope.path.isFunction()) {
                if (!this.hasOwnParamBindings(scope)) return this.getNextScopeAttachmentParent();
                {
                  if (this.scope === scope) return;
                  const bodies = scope.path.get("body").get("body");
                  for (let i = 0; i < bodies.length; i++) if (!bodies[i].node._blockHoist) return bodies[i];
                }
              } else if (scope.path.isProgram()) return this.getNextScopeAttachmentParent();
            }
          }
          getNextScopeAttachmentParent() {
            const scope = this.scopes.pop();
            if (scope) return this.getAttachmentParentForPath(scope.path);
          }
          getAttachmentParentForPath(path3) {
            do {
              if (!path3.parentPath || Array.isArray(path3.container) && path3.isStatement()) return path3;
            } while (path3 = path3.parentPath);
          }
          hasOwnParamBindings(scope) {
            for (const name of Object.keys(this.bindings)) {
              if (!scope.hasOwnBinding(name)) continue;
              const binding = this.bindings[name];
              if ("param" === binding.kind && binding.constant) return true;
            }
            return false;
          }
          run() {
            if (this.path.traverse(referenceVisitor, this), this.mutableBinding) return;
            this.getCompatibleScopes();
            const attachTo = this.getAttachmentPath();
            if (!attachTo) return;
            if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;
            let uid = attachTo.scope.generateUidIdentifier("ref");
            const declarator = variableDeclarator(uid, this.path.node), insertFn = this.attachAfter ? "insertAfter" : "insertBefore", [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]), parent = this.path.parentPath;
            return parent.isJSXElement() && this.path.container === parent.node.children && (uid = jsxExpressionContainer(uid)), this.path.replaceWith(cloneNode(uid)), attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.hooks = void 0;
        exports3.hooks = [function(self2, parent) {
          if ("test" === self2.key && (parent.isWhile() || parent.isSwitchCase()) || "declaration" === self2.key && parent.isExportDeclaration() || "body" === self2.key && parent.isLabeledStatement() || "declarations" === self2.listKey && parent.isVariableDeclaration() && 1 === parent.node.declarations.length || "expression" === self2.key && parent.isExpressionStatement()) return parent.remove(), true;
        }, function(self2, parent) {
          if (parent.isSequenceExpression() && 1 === parent.node.expressions.length) return parent.replaceWith(parent.node.expressions[0]), true;
        }, function(self2, parent) {
          if (parent.isBinary()) return "left" === self2.key ? parent.replaceWith(parent.node.right) : parent.replaceWith(parent.node.left), true;
        }, function(self2, parent) {
          if (parent.isIfStatement() && "consequent" === self2.key || "body" === self2.key && (parent.isLoop() || parent.isArrowFunctionExpression())) return self2.replaceWith({ type: "BlockStatement", body: [] }), true;
        }];
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isBindingIdentifier = function() {
          const { node, parent } = this, grandparent = this.parentPath.parent;
          return isIdentifier(node) && isBinding(node, parent, grandparent);
        }, exports3.isBlockScoped = function() {
          return nodeIsBlockScoped(this.node);
        }, exports3.isExpression = function() {
          return this.isIdentifier() ? this.isReferencedIdentifier() : nodeIsExpression(this.node);
        }, exports3.isFlow = function() {
          const { node } = this;
          return !!nodeIsFlow(node) || (isImportDeclaration(node) ? "type" === node.importKind || "typeof" === node.importKind : isExportDeclaration(node) ? "type" === node.exportKind : !!isImportSpecifier(node) && ("type" === node.importKind || "typeof" === node.importKind));
        }, exports3.isForAwaitStatement = function() {
          return isForOfStatement(this.node, { await: true });
        }, exports3.isGenerated = function() {
          return !this.isUser();
        }, exports3.isPure = function(constantsOnly) {
          return this.scope.isPure(this.node, constantsOnly);
        }, exports3.isReferenced = function() {
          return nodeIsReferenced(this.node, this.parent);
        }, exports3.isReferencedIdentifier = function(opts) {
          const { node, parent } = this;
          if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {
            if (!isJSXIdentifier(node, opts)) return false;
            if (isCompatTag(node.name)) return false;
          }
          return nodeIsReferenced(node, parent, this.parentPath.parent);
        }, exports3.isReferencedMemberExpression = function() {
          const { node, parent } = this;
          return isMemberExpression(node) && nodeIsReferenced(node, parent);
        }, exports3.isRestProperty = function() {
          return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectPattern();
        }, exports3.isScope = function() {
          return nodeIsScope(this.node, this.parent);
        }, exports3.isSpreadProperty = function() {
          return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectExpression();
        }, exports3.isStatement = function() {
          const { node, parent } = this;
          if (nodeIsStatement(node)) {
            if (isVariableDeclaration(node)) {
              if (isForXStatement(parent, { left: node })) return false;
              if (isForStatement(parent, { init: node })) return false;
            }
            return true;
          }
          return false;
        }, exports3.isUser = function() {
          return this.node && !!this.node.loc;
        }, exports3.isVar = function() {
          return nodeIsVar(this.node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { isBinding, isBlockScoped: nodeIsBlockScoped, isExportDeclaration, isExpression: nodeIsExpression, isFlow: nodeIsFlow, isForStatement, isForXStatement, isIdentifier, isImportDeclaration, isImportSpecifier, isJSXIdentifier, isJSXMemberExpression, isMemberExpression, isRestElement: nodeIsRestElement, isReferenced: nodeIsReferenced, isScope: nodeIsScope, isStatement: nodeIsStatement, isVar: nodeIsVar, isVariableDeclaration, react, isForOfStatement } = _t, { isCompatTag } = react;
        exports3.isExistentialTypeParam = function() {
          throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
        }, exports3.isNumericLiteralTypeAnnotation = function() {
          throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/lib/virtual-types.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.Var = exports3.User = exports3.Statement = exports3.SpreadProperty = exports3.Scope = exports3.RestProperty = exports3.ReferencedMemberExpression = exports3.ReferencedIdentifier = exports3.Referenced = exports3.Pure = exports3.NumericLiteralTypeAnnotation = exports3.Generated = exports3.ForAwaitStatement = exports3.Flow = exports3.Expression = exports3.ExistentialTypeParam = exports3.BlockScoped = exports3.BindingIdentifier = void 0;
        exports3.ReferencedIdentifier = ["Identifier", "JSXIdentifier"];
        exports3.ReferencedMemberExpression = ["MemberExpression"];
        exports3.BindingIdentifier = ["Identifier"];
        exports3.Statement = ["Statement"];
        exports3.Expression = ["Expression"];
        exports3.Scope = ["Scopable", "Pattern"];
        exports3.Referenced = null;
        exports3.BlockScoped = null;
        exports3.Var = ["VariableDeclaration"];
        exports3.User = null;
        exports3.Generated = null;
        exports3.Pure = null;
        exports3.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"];
        exports3.RestProperty = ["RestElement"];
        exports3.SpreadProperty = ["RestElement"];
        exports3.ExistentialTypeParam = ["ExistsTypeAnnotation"];
        exports3.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"];
        exports3.ForAwaitStatement = ["ForOfStatement"];
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/modification.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._containerInsert = function(from, nodes) {
          this.updateSiblingKeys(from, nodes.length);
          const paths = [];
          this.container.splice(from, 0, ...nodes);
          for (let i = 0; i < nodes.length; i++) {
            var _this$context;
            const to = from + i, path3 = this.getSibling(to);
            paths.push(path3), null != (_this$context = this.context) && _this$context.queue && path3.pushContext(this.context);
          }
          const contexts = this._getQueueContexts();
          for (const path3 of paths) {
            path3.setScope(), path3.debug("Inserted.");
            for (const context of contexts) context.maybeQueue(path3, true);
          }
          return paths;
        }, exports3._containerInsertAfter = function(nodes) {
          return this._containerInsert(this.key + 1, nodes);
        }, exports3._containerInsertBefore = function(nodes) {
          return this._containerInsert(this.key, nodes);
        }, exports3._verifyNodeList = function(nodes) {
          if (!nodes) return [];
          Array.isArray(nodes) || (nodes = [nodes]);
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            let msg;
            if (node ? "object" != typeof node ? msg = "contains a non-object node" : node.type ? node instanceof _index.default && (msg = "has a NodePath when it expected a raw object") : msg = "without a type" : msg = "has falsy node", msg) {
              const type = Array.isArray(node) ? "array" : typeof node;
              throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);
            }
          }
          return nodes;
        }, exports3.hoist = function(scope = this.scope) {
          return new _hoister.default(this, scope).run();
        }, exports3.insertAfter = function(nodes_) {
          if (this._assertUnremoved(), this.isSequenceExpression()) return last(this.get("expressions")).insertAfter(nodes_);
          const nodes = this._verifyNodeList(nodes_), { parentPath, parent } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) return parentPath.insertAfter(nodes.map((node) => isExpression(node) ? expressionStatement(node) : node));
          if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && "init" === this.key) {
            if (this.node) {
              const node = this.node;
              let { scope } = this;
              if (scope.path.isPattern()) return assertExpression(node), this.replaceWith(callExpression(arrowFunctionExpression([], node), [])), this.get("callee.body").insertAfter(nodes), [this];
              if (isHiddenInSequenceExpression(this)) nodes.unshift(node);
              else if (isCallExpression(node) && isSuper(node.callee)) nodes.unshift(node), nodes.push(thisExpression());
              else if (function(node2, scope2) {
                if (!isAssignmentExpression(node2) || !isIdentifier(node2.left)) return false;
                const blockScope = scope2.getBlockParent();
                return blockScope.hasOwnBinding(node2.left.name) && blockScope.getOwnBinding(node2.left.name).constantViolations.length <= 1;
              }(node, scope)) nodes.unshift(node), nodes.push(cloneNode(node.left));
              else if (scope.isPure(node, true)) nodes.push(node);
              else {
                parentPath.isMethod({ computed: true, key: node }) && (scope = scope.parent);
                const temp = scope.generateDeclaredUidIdentifier();
                nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode(temp), node))), nodes.push(expressionStatement(cloneNode(temp)));
              }
            }
            return this.replaceExpressionWithStatements(nodes);
          }
          if (Array.isArray(this.container)) return this._containerInsertAfter(nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.pushContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports3.insertBefore = function(nodes_) {
          this._assertUnremoved();
          const nodes = this._verifyNodeList(nodes_), { parentPath, parent } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) return parentPath.insertBefore(nodes);
          if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && "init" === this.key) return this.node && nodes.push(this.node), this.replaceExpressionWithStatements(nodes);
          if (Array.isArray(this.container)) return this._containerInsertBefore(nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.unshiftContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports3.pushContainer = function(listKey, nodes) {
          this._assertUnremoved();
          const verifiedNodes = this._verifyNodeList(nodes), container = this.node[listKey];
          return _index.default.get({ parentPath: this, parent: this.node, container, listKey, key: container.length }).setContext(this.context).replaceWithMultiple(verifiedNodes);
        }, exports3.unshiftContainer = function(listKey, nodes) {
          this._assertUnremoved(), nodes = this._verifyNodeList(nodes);
          return _index.default.get({ parentPath: this, parent: this.node, container: this.node[listKey], listKey, key: 0 }).setContext(this.context)._containerInsertBefore(nodes);
        }, exports3.updateSiblingKeys = function(fromIndex, incrementBy) {
          if (!this.parent) return;
          const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];
          for (const [, path3] of paths) "number" == typeof path3.key && path3.key >= fromIndex && (path3.key += incrementBy);
        };
        var _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/cache.js"), _hoister = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/lib/hoister.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { arrowFunctionExpression, assertExpression, assignmentExpression, blockStatement, callExpression, cloneNode, expressionStatement, isAssignmentExpression, isCallExpression, isExportNamedDeclaration, isExpression, isIdentifier, isSequenceExpression, isSuper, thisExpression } = _t;
        const last = (arr) => arr[arr.length - 1];
        function isHiddenInSequenceExpression(path3) {
          return isSequenceExpression(path3.parent) && (last(path3.parent.expressions) !== path3.node || isHiddenInSequenceExpression(path3.parentPath));
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/removal.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._assertUnremoved = function() {
          if (this.removed) throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
        }, exports3._callRemovalHooks = function() {
          for (const fn of _removalHooks.hooks) if (fn(this, this.parentPath)) return true;
        }, exports3._markRemoved = function() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED, this.parent && (0, _cache.getCachedPaths)(this.hub, this.parent).delete(this.node);
          this.node = null;
        }, exports3._remove = function() {
          Array.isArray(this.container) ? (this.container.splice(this.key, 1), this.updateSiblingKeys(this.key, -1)) : this._replaceWith(null);
        }, exports3._removeFromScope = function() {
          const bindings = this.getBindingIdentifiers();
          Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
        }, exports3.remove = function() {
          var _this$opts;
          this._assertUnremoved(), this.resync(), null != (_this$opts = this.opts) && _this$opts.noScope || this._removeFromScope();
          if (this._callRemovalHooks()) return void this._markRemoved();
          this.shareCommentsWithSiblings(), this._remove(), this._markRemoved();
        };
        var _removalHooks = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/cache.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/index.js");
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/replacement.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3._replaceWith = function(node) {
          var _getCachedPaths2;
          if (!this.container) throw new ReferenceError("Container is falsy");
          this.inList ? validate(this.parent, this.key, [node]) : validate(this.parent, this.key, node);
          this.debug(`Replace with ${null == node ? void 0 : node.type}`), null == (_getCachedPaths2 = (0, _cache.getCachedPaths)(this.hub, this.parent)) || _getCachedPaths2.set(node, this).delete(this.node), this.node = this.container[this.key] = node;
        }, exports3.replaceExpressionWithStatements = function(nodes) {
          this.resync();
          const nodesAsSequenceExpression = toSequenceExpression(nodes, this.scope);
          if (nodesAsSequenceExpression) return this.replaceWith(nodesAsSequenceExpression)[0].get("expressions");
          const functionParent = this.getFunctionParent(), isParentAsync = null == functionParent ? void 0 : functionParent.is("async"), isParentGenerator = null == functionParent ? void 0 : functionParent.is("generator"), container = arrowFunctionExpression([], blockStatement(nodes));
          this.replaceWith(callExpression(container, []));
          const callee = this.get("callee");
          (0, _helperHoistVariables.default)(callee.get("body"), (id) => {
            this.scope.push({ id });
          }, "var");
          const completionRecords = this.get("callee").getCompletionRecords();
          for (const path3 of completionRecords) {
            if (!path3.isExpressionStatement()) continue;
            const loop = path3.findParent((path4) => path4.isLoop());
            if (loop) {
              let uid = loop.getData("expressionReplacementReturnUid");
              uid ? uid = identifier(uid.name) : (uid = callee.scope.generateDeclaredUidIdentifier("ret"), callee.get("body").pushContainer("body", returnStatement(cloneNode(uid))), loop.setData("expressionReplacementReturnUid", uid)), path3.get("expression").replaceWith(assignmentExpression("=", cloneNode(uid), path3.node.expression));
            } else path3.replaceWith(returnStatement(path3.node.expression));
          }
          callee.arrowFunctionToExpression();
          const newCallee = callee, needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES), needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
          needToAwaitFunction && (newCallee.set("async", true), needToYieldFunction || this.replaceWith(awaitExpression(this.node)));
          needToYieldFunction && (newCallee.set("generator", true), this.replaceWith(yieldExpression(this.node, true)));
          return newCallee.get("body.body");
        }, exports3.replaceInline = function(nodes) {
          if (this.resync(), Array.isArray(nodes)) {
            if (Array.isArray(this.container)) {
              nodes = this._verifyNodeList(nodes);
              const paths = this._containerInsertAfter(nodes);
              return this.remove(), paths;
            }
            return this.replaceWithMultiple(nodes);
          }
          return this.replaceWith(nodes);
        }, exports3.replaceWith = function(replacementPath) {
          if (this.resync(), this.removed) throw new Error("You can't replace this node, we've already removed it");
          let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
          if (!replacement) throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
          if (this.node === replacement) return [this];
          if (this.isProgram() && !isProgram(replacement)) throw new Error("You can only replace a Program root node with another Program node");
          if (Array.isArray(replacement)) throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
          if ("string" == typeof replacement) throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
          let nodePath = "";
          this.isNodeType("Statement") && isExpression(replacement) && (this.canHaveVariableDeclarationOrExpression() || this.canSwapBetweenExpressionAndStatement(replacement) || this.parentPath.isExportDefaultDeclaration() || (replacement = expressionStatement(replacement), nodePath = "expression"));
          if (this.isNodeType("Expression") && isStatement(replacement) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) return this.replaceExpressionWithStatements([replacement]);
          const oldNode = this.node;
          oldNode && (inheritsComments(replacement, oldNode), removeComments(oldNode));
          return this._replaceWith(replacement), this.type = replacement.type, this.setScope(), this.requeue(), [nodePath ? this.get(nodePath) : this];
        }, exports3.replaceWithMultiple = function(nodes) {
          var _getCachedPaths;
          this.resync(), nodes = this._verifyNodeList(nodes), inheritLeadingComments(nodes[0], this.node), inheritTrailingComments(nodes[nodes.length - 1], this.node), null == (_getCachedPaths = (0, _cache.getCachedPaths)(this.hub, this.parent)) || _getCachedPaths.delete(this.node), this.node = this.container[this.key] = null;
          const paths = this.insertAfter(nodes);
          this.node ? this.requeue() : this.remove();
          return paths;
        }, exports3.replaceWithSourceString = function(replacement) {
          let ast;
          this.resync();
          try {
            replacement = `(${replacement})`, ast = (0, _parser.parse)(replacement);
          } catch (err) {
            const loc = err.loc;
            throw loc && (err.message += " - make sure this is an expression.\n" + (0, _codeFrame.codeFrameColumns)(replacement, { start: { line: loc.line, column: loc.column + 1 } }), err.code = "BABEL_REPLACE_SOURCE_ERROR"), err;
          }
          const expressionAST = ast.program.body[0].expression;
          return _index.default.removeProperties(expressionAST), this.replaceWith(expressionAST);
        };
        var _codeFrame = __webpack_require__2("./stubs/babel-codeframe.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/index.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/cache.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.23.0/node_modules/@babel/parser/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _helperHoistVariables = __webpack_require__2("./node_modules/.pnpm/@babel+helper-hoist-variables@7.22.5/node_modules/@babel/helper-hoist-variables/lib/index.js");
        const { FUNCTION_TYPES, arrowFunctionExpression, assignmentExpression, awaitExpression, blockStatement, callExpression, cloneNode, expressionStatement, identifier, inheritLeadingComments, inheritTrailingComments, inheritsComments, isExpression, isProgram, isStatement, removeComments, returnStatement, toSequenceExpression, validate, yieldExpression } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/scope/binding.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        exports3.default = class {
          constructor({ identifier, scope, path: path3, kind }) {
            this.identifier = void 0, this.scope = void 0, this.path = void 0, this.kind = void 0, this.constantViolations = [], this.constant = true, this.referencePaths = [], this.referenced = false, this.references = 0, this.identifier = identifier, this.scope = scope, this.path = path3, this.kind = kind, "var" !== kind && "hoisted" !== kind || !function(path4) {
              for (let { parentPath, key } = path4; parentPath; { parentPath, key } = parentPath) {
                if (parentPath.isFunctionParent()) return false;
                if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && "body" === key) return true;
              }
              return false;
            }(path3) || this.reassign(path3), this.clearValue();
          }
          deoptValue() {
            this.clearValue(), this.hasDeoptedValue = true;
          }
          setValue(value2) {
            this.hasDeoptedValue || (this.hasValue = true, this.value = value2);
          }
          clearValue() {
            this.hasDeoptedValue = false, this.hasValue = false, this.value = null;
          }
          reassign(path3) {
            this.constant = false, -1 === this.constantViolations.indexOf(path3) && this.constantViolations.push(path3);
          }
          reference(path3) {
            -1 === this.referencePaths.indexOf(path3) && (this.referenced = true, this.references++, this.referencePaths.push(path3));
          }
          dereference() {
            this.references--, this.referenced = !!this.references;
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/scope/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _renamer = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/scope/lib/renamer.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/index.js"), _binding = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/scope/binding.js"), _globals = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), t = _t, _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/cache.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/visitors.js");
        const { NOT_LOCAL_BINDING, callExpression, cloneNode, getBindingIdentifiers, identifier, isArrayExpression, isBinary, isClass, isClassBody, isClassDeclaration, isExportAllDeclaration, isExportDefaultDeclaration, isExportNamedDeclaration, isFunctionDeclaration, isIdentifier, isImportDeclaration, isLiteral, isMethod, isModuleSpecifier, isNullLiteral, isObjectExpression, isProperty, isPureish, isRegExpLiteral, isSuper, isTaggedTemplateExpression, isTemplateLiteral, isThisExpression, isUnaryExpression, isVariableDeclaration, matchesPattern, memberExpression, numericLiteral, toIdentifier, variableDeclaration, variableDeclarator, isRecordExpression, isTupleExpression, isObjectProperty, isTopicReference, isMetaProperty, isPrivateName, isExportDeclaration, buildUndefinedNode } = _t;
        function gatherNodeParts(node, parts) {
          switch (null == node ? void 0 : node.type) {
            default:
              var _node$specifiers;
              if (isImportDeclaration(node) || isExportDeclaration(node)) if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source) gatherNodeParts(node.source, parts);
              else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && null != (_node$specifiers = node.specifiers) && _node$specifiers.length) for (const e of node.specifiers) gatherNodeParts(e, parts);
              else (isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration && gatherNodeParts(node.declaration, parts);
              else isModuleSpecifier(node) ? gatherNodeParts(node.local, parts) : !isLiteral(node) || isNullLiteral(node) || isRegExpLiteral(node) || isTemplateLiteral(node) || parts.push(node.value);
              break;
            case "MemberExpression":
            case "OptionalMemberExpression":
            case "JSXMemberExpression":
              gatherNodeParts(node.object, parts), gatherNodeParts(node.property, parts);
              break;
            case "Identifier":
            case "JSXIdentifier":
              parts.push(node.name);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
            case "NewExpression":
              gatherNodeParts(node.callee, parts);
              break;
            case "ObjectExpression":
            case "ObjectPattern":
              for (const e of node.properties) gatherNodeParts(e, parts);
              break;
            case "SpreadElement":
            case "RestElement":
            case "UnaryExpression":
            case "UpdateExpression":
              gatherNodeParts(node.argument, parts);
              break;
            case "ObjectProperty":
            case "ObjectMethod":
            case "ClassProperty":
            case "ClassMethod":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
              gatherNodeParts(node.key, parts);
              break;
            case "ThisExpression":
              parts.push("this");
              break;
            case "Super":
              parts.push("super");
              break;
            case "Import":
              parts.push("import");
              break;
            case "DoExpression":
              parts.push("do");
              break;
            case "YieldExpression":
              parts.push("yield"), gatherNodeParts(node.argument, parts);
              break;
            case "AwaitExpression":
              parts.push("await"), gatherNodeParts(node.argument, parts);
              break;
            case "AssignmentExpression":
              gatherNodeParts(node.left, parts);
              break;
            case "VariableDeclarator":
            case "FunctionExpression":
            case "FunctionDeclaration":
            case "ClassExpression":
            case "ClassDeclaration":
            case "PrivateName":
              gatherNodeParts(node.id, parts);
              break;
            case "ParenthesizedExpression":
              gatherNodeParts(node.expression, parts);
              break;
            case "MetaProperty":
              gatherNodeParts(node.meta, parts), gatherNodeParts(node.property, parts);
              break;
            case "JSXElement":
              gatherNodeParts(node.openingElement, parts);
              break;
            case "JSXOpeningElement":
              gatherNodeParts(node.name, parts);
              break;
            case "JSXFragment":
              gatherNodeParts(node.openingFragment, parts);
              break;
            case "JSXOpeningFragment":
              parts.push("Fragment");
              break;
            case "JSXNamespacedName":
              gatherNodeParts(node.namespace, parts), gatherNodeParts(node.name, parts);
          }
        }
        const collectorVisitor = { ForStatement(path3) {
          const declar = path3.get("init");
          if (declar.isVar()) {
            const { scope } = path3;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", declar);
          }
        }, Declaration(path3) {
          if (path3.isBlockScoped()) return;
          if (path3.isImportDeclaration()) return;
          if (path3.isExportDeclaration()) return;
          (path3.scope.getFunctionParent() || path3.scope.getProgramParent()).registerDeclaration(path3);
        }, ImportDeclaration(path3) {
          path3.scope.getBlockParent().registerDeclaration(path3);
        }, ReferencedIdentifier(path3, state) {
          state.references.push(path3);
        }, ForXStatement(path3, state) {
          const left = path3.get("left");
          if (left.isPattern() || left.isIdentifier()) state.constantViolations.push(path3);
          else if (left.isVar()) {
            const { scope } = path3;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", left);
          }
        }, ExportDeclaration: { exit(path3) {
          const { node, scope } = path3;
          if (isExportAllDeclaration(node)) return;
          const declar = node.declaration;
          if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
            const id = declar.id;
            if (!id) return;
            const binding = scope.getBinding(id.name);
            null == binding || binding.reference(path3);
          } else if (isVariableDeclaration(declar)) for (const decl of declar.declarations) for (const name of Object.keys(getBindingIdentifiers(decl))) {
            const binding = scope.getBinding(name);
            null == binding || binding.reference(path3);
          }
        } }, LabeledStatement(path3) {
          path3.scope.getBlockParent().registerDeclaration(path3);
        }, AssignmentExpression(path3, state) {
          state.assignments.push(path3);
        }, UpdateExpression(path3, state) {
          state.constantViolations.push(path3);
        }, UnaryExpression(path3, state) {
          "delete" === path3.node.operator && state.constantViolations.push(path3);
        }, BlockScoped(path3) {
          let scope = path3.scope;
          scope.path === path3 && (scope = scope.parent);
          if (scope.getBlockParent().registerDeclaration(path3), path3.isClassDeclaration() && path3.node.id) {
            const name = path3.node.id.name;
            path3.scope.bindings[name] = path3.scope.parent.getBinding(name);
          }
        }, CatchClause(path3) {
          path3.scope.registerBinding("let", path3);
        }, Function(path3) {
          const params = path3.get("params");
          for (const param of params) path3.scope.registerBinding("param", param);
          path3.isFunctionExpression() && path3.has("id") && !path3.get("id").node[NOT_LOCAL_BINDING] && path3.scope.registerBinding("local", path3.get("id"), path3);
        }, ClassExpression(path3) {
          path3.has("id") && !path3.get("id").node[NOT_LOCAL_BINDING] && path3.scope.registerBinding("local", path3);
        } };
        let uid = 0;
        class Scope {
          constructor(path3) {
            this.uid = void 0, this.path = void 0, this.block = void 0, this.labels = void 0, this.inited = void 0, this.bindings = void 0, this.references = void 0, this.globals = void 0, this.uids = void 0, this.data = void 0, this.crawling = void 0;
            const { node } = path3, cached = _cache.scope.get(node);
            if ((null == cached ? void 0 : cached.path) === path3) return cached;
            _cache.scope.set(node, this), this.uid = uid++, this.block = node, this.path = path3, this.labels = /* @__PURE__ */ new Map(), this.inited = false;
          }
          get parent() {
            var _parent;
            let parent, path3 = this.path;
            do {
              const shouldSkip = "key" === path3.key || "decorators" === path3.listKey;
              path3 = path3.parentPath, shouldSkip && path3.isMethod() && (path3 = path3.parentPath), path3 && path3.isScope() && (parent = path3);
            } while (path3 && !parent);
            return null == (_parent = parent) ? void 0 : _parent.scope;
          }
          get parentBlock() {
            return this.path.parent;
          }
          get hub() {
            return this.path.hub;
          }
          traverse(node, opts, state) {
            (0, _index.default)(node, opts, this, state, this.path);
          }
          generateDeclaredUidIdentifier(name) {
            const id = this.generateUidIdentifier(name);
            return this.push({ id }), cloneNode(id);
          }
          generateUidIdentifier(name) {
            return identifier(this.generateUid(name));
          }
          generateUid(name = "temp") {
            let uid2;
            name = toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
            let i = 1;
            do {
              uid2 = this._generateUid(name, i), i++;
            } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
            const program = this.getProgramParent();
            return program.references[uid2] = true, program.uids[uid2] = true, uid2;
          }
          _generateUid(name, i) {
            let id = name;
            return i > 1 && (id += i), `_${id}`;
          }
          generateUidBasedOnNode(node, defaultName) {
            const parts = [];
            gatherNodeParts(node, parts);
            let id = parts.join("$");
            return id = id.replace(/^_/, "") || defaultName || "ref", this.generateUid(id.slice(0, 20));
          }
          generateUidIdentifierBasedOnNode(node, defaultName) {
            return identifier(this.generateUidBasedOnNode(node, defaultName));
          }
          isStatic(node) {
            if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) return true;
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              return binding ? binding.constant : this.hasBinding(node.name);
            }
            return false;
          }
          maybeGenerateMemoised(node, dontPush) {
            if (this.isStatic(node)) return null;
            {
              const id = this.generateUidIdentifierBasedOnNode(node);
              return dontPush ? id : (this.push({ id }), cloneNode(id));
            }
          }
          checkBlockScopedCollisions(local, kind, name, id) {
            if ("param" === kind) return;
            if ("local" === local.kind) return;
            if ("let" === kind || "let" === local.kind || "const" === local.kind || "module" === local.kind || "param" === local.kind && "const" === kind) throw this.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
          }
          rename(oldName, newName) {
            const binding = this.getBinding(oldName);
            if (binding) {
              newName || (newName = this.generateUidIdentifier(oldName).name);
              new _renamer.default(binding, oldName, newName).rename(arguments[2]);
            }
          }
          _renameFromMap(map, oldName, newName, value2) {
            map[oldName] && (map[newName] = value2, map[oldName] = null);
          }
          dump() {
            const sep = "-".repeat(60);
            console.log(sep);
            let scope = this;
            do {
              console.log("#", scope.block.type);
              for (const name of Object.keys(scope.bindings)) {
                const binding = scope.bindings[name];
                console.log(" -", name, { constant: binding.constant, references: binding.references, violations: binding.constantViolations.length, kind: binding.kind });
              }
            } while (scope = scope.parent);
            console.log(sep);
          }
          toArray(node, i, arrayLikeIsIterable) {
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              if (null != binding && binding.constant && binding.path.isGenericType("Array")) return node;
            }
            if (isArrayExpression(node)) return node;
            if (isIdentifier(node, { name: "arguments" })) return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
            let helperName;
            const args = [node];
            return true === i ? helperName = "toConsumableArray" : "number" == typeof i ? (args.push(numericLiteral(i)), helperName = "slicedToArray") : helperName = "toArray", arrayLikeIsIterable && (args.unshift(this.hub.addHelper(helperName)), helperName = "maybeArrayLike"), callExpression(this.hub.addHelper(helperName), args);
          }
          hasLabel(name) {
            return !!this.getLabel(name);
          }
          getLabel(name) {
            return this.labels.get(name);
          }
          registerLabel(path3) {
            this.labels.set(path3.node.label.name, path3);
          }
          registerDeclaration(path3) {
            if (path3.isLabeledStatement()) this.registerLabel(path3);
            else if (path3.isFunctionDeclaration()) this.registerBinding("hoisted", path3.get("id"), path3);
            else if (path3.isVariableDeclaration()) {
              const declarations = path3.get("declarations"), { kind } = path3.node;
              for (const declar of declarations) this.registerBinding("using" === kind || "await using" === kind ? "const" : kind, declar);
            } else if (path3.isClassDeclaration()) {
              if (path3.node.declare) return;
              this.registerBinding("let", path3);
            } else if (path3.isImportDeclaration()) {
              const isTypeDeclaration = "type" === path3.node.importKind || "typeof" === path3.node.importKind, specifiers = path3.get("specifiers");
              for (const specifier of specifiers) {
                const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && ("type" === specifier.node.importKind || "typeof" === specifier.node.importKind);
                this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
              }
            } else if (path3.isExportDeclaration()) {
              const declar = path3.get("declaration");
              (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) && this.registerDeclaration(declar);
            } else this.registerBinding("unknown", path3);
          }
          buildUndefinedNode() {
            return buildUndefinedNode();
          }
          registerConstantViolation(path3) {
            const ids = path3.getBindingIdentifiers();
            for (const name of Object.keys(ids)) {
              var _this$getBinding;
              null == (_this$getBinding = this.getBinding(name)) || _this$getBinding.reassign(path3);
            }
          }
          registerBinding(kind, path3, bindingPath = path3) {
            if (!kind) throw new ReferenceError("no `kind`");
            if (path3.isVariableDeclaration()) {
              const declarators = path3.get("declarations");
              for (const declar of declarators) this.registerBinding(kind, declar);
              return;
            }
            const parent = this.getProgramParent(), ids = path3.getOuterBindingIdentifiers(true);
            for (const name of Object.keys(ids)) {
              parent.references[name] = true;
              for (const id of ids[name]) {
                const local = this.getOwnBinding(name);
                if (local) {
                  if (local.identifier === id) continue;
                  this.checkBlockScopedCollisions(local, kind, name, id);
                }
                local ? this.registerConstantViolation(bindingPath) : this.bindings[name] = new _binding.default({ identifier: id, scope: this, path: bindingPath, kind });
              }
            }
          }
          addGlobal(node) {
            this.globals[node.name] = node;
          }
          hasUid(name) {
            let scope = this;
            do {
              if (scope.uids[name]) return true;
            } while (scope = scope.parent);
            return false;
          }
          hasGlobal(name) {
            let scope = this;
            do {
              if (scope.globals[name]) return true;
            } while (scope = scope.parent);
            return false;
          }
          hasReference(name) {
            return !!this.getProgramParent().references[name];
          }
          isPure(node, constantsOnly) {
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              return !!binding && (!constantsOnly || binding.constant);
            }
            if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node)) return true;
            var _node$decorators, _node$decorators2, _node$decorators3;
            if (isClass(node)) return !(node.superClass && !this.isPure(node.superClass, constantsOnly)) && (!((null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length) > 0) && this.isPure(node.body, constantsOnly));
            if (isClassBody(node)) {
              for (const method of node.body) if (!this.isPure(method, constantsOnly)) return false;
              return true;
            }
            if (isBinary(node)) return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
            if (isArrayExpression(node) || isTupleExpression(node)) {
              for (const elem of node.elements) if (null !== elem && !this.isPure(elem, constantsOnly)) return false;
              return true;
            }
            if (isObjectExpression(node) || isRecordExpression(node)) {
              for (const prop of node.properties) if (!this.isPure(prop, constantsOnly)) return false;
              return true;
            }
            if (isMethod(node)) return !(node.computed && !this.isPure(node.key, constantsOnly)) && !((null == (_node$decorators2 = node.decorators) ? void 0 : _node$decorators2.length) > 0);
            if (isProperty(node)) return !(node.computed && !this.isPure(node.key, constantsOnly)) && (!((null == (_node$decorators3 = node.decorators) ? void 0 : _node$decorators3.length) > 0) && !((isObjectProperty(node) || node.static) && null !== node.value && !this.isPure(node.value, constantsOnly)));
            if (isUnaryExpression(node)) return this.isPure(node.argument, constantsOnly);
            if (isTaggedTemplateExpression(node)) return matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", true) && this.isPure(node.quasi, constantsOnly);
            if (isTemplateLiteral(node)) {
              for (const expression of node.expressions) if (!this.isPure(expression, constantsOnly)) return false;
              return true;
            }
            return isPureish(node);
          }
          setData(key, val) {
            return this.data[key] = val;
          }
          getData(key) {
            let scope = this;
            do {
              const data = scope.data[key];
              if (null != data) return data;
            } while (scope = scope.parent);
          }
          removeData(key) {
            let scope = this;
            do {
              null != scope.data[key] && (scope.data[key] = null);
            } while (scope = scope.parent);
          }
          init() {
            this.inited || (this.inited = true, this.crawl());
          }
          crawl() {
            const path3 = this.path;
            this.references = /* @__PURE__ */ Object.create(null), this.bindings = /* @__PURE__ */ Object.create(null), this.globals = /* @__PURE__ */ Object.create(null), this.uids = /* @__PURE__ */ Object.create(null), this.data = /* @__PURE__ */ Object.create(null);
            const programParent = this.getProgramParent();
            if (programParent.crawling) return;
            const state = { references: [], constantViolations: [], assignments: [] };
            if (this.crawling = true, "Program" !== path3.type && (0, _visitors.isExplodedVisitor)(collectorVisitor)) {
              for (const visit of collectorVisitor.enter) visit.call(state, path3, state);
              const typeVisitors = collectorVisitor[path3.type];
              if (typeVisitors) for (const visit of typeVisitors.enter) visit.call(state, path3, state);
            }
            path3.traverse(collectorVisitor, state), this.crawling = false;
            for (const path4 of state.assignments) {
              const ids = path4.getBindingIdentifiers();
              for (const name of Object.keys(ids)) path4.scope.getBinding(name) || programParent.addGlobal(ids[name]);
              path4.scope.registerConstantViolation(path4);
            }
            for (const ref of state.references) {
              const binding = ref.scope.getBinding(ref.node.name);
              binding ? binding.reference(ref) : programParent.addGlobal(ref.node);
            }
            for (const path4 of state.constantViolations) path4.scope.registerConstantViolation(path4);
          }
          push(opts) {
            let path3 = this.path;
            path3.isPattern() ? path3 = this.getPatternParent().path : path3.isBlockStatement() || path3.isProgram() || (path3 = this.getBlockParent().path), path3.isSwitchStatement() && (path3 = (this.getFunctionParent() || this.getProgramParent()).path);
            const { init, unique, kind = "var", id } = opts;
            if (!init && !unique && ("var" === kind || "let" === kind) && path3.isFunction() && !path3.node.name && t.isCallExpression(path3.parent, { callee: path3.node }) && path3.parent.arguments.length <= path3.node.params.length && t.isIdentifier(id)) return path3.pushContainer("params", id), void path3.scope.registerBinding("param", path3.get("params")[path3.node.params.length - 1]);
            (path3.isLoop() || path3.isCatchClause() || path3.isFunction()) && (path3.ensureBlock(), path3 = path3.get("body"));
            const blockHoist = null == opts._blockHoist ? 2 : opts._blockHoist, dataKey = `declaration:${kind}:${blockHoist}`;
            let declarPath = !unique && path3.getData(dataKey);
            if (!declarPath) {
              const declar = variableDeclaration(kind, []);
              declar._blockHoist = blockHoist, [declarPath] = path3.unshiftContainer("body", [declar]), unique || path3.setData(dataKey, declarPath);
            }
            const declarator = variableDeclarator(id, init), len = declarPath.node.declarations.push(declarator);
            path3.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
          }
          getProgramParent() {
            let scope = this;
            do {
              if (scope.path.isProgram()) return scope;
            } while (scope = scope.parent);
            throw new Error("Couldn't find a Program");
          }
          getFunctionParent() {
            let scope = this;
            do {
              if (scope.path.isFunctionParent()) return scope;
            } while (scope = scope.parent);
            return null;
          }
          getBlockParent() {
            let scope = this;
            do {
              if (scope.path.isBlockParent()) return scope;
            } while (scope = scope.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getPatternParent() {
            let scope = this;
            do {
              if (!scope.path.isPattern()) return scope.getBlockParent();
            } while (scope = scope.parent.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getAllBindings() {
            const ids = /* @__PURE__ */ Object.create(null);
            let scope = this;
            do {
              for (const key of Object.keys(scope.bindings)) key in ids == false && (ids[key] = scope.bindings[key]);
              scope = scope.parent;
            } while (scope);
            return ids;
          }
          getAllBindingsOfKind(...kinds) {
            const ids = /* @__PURE__ */ Object.create(null);
            for (const kind of kinds) {
              let scope = this;
              do {
                for (const name of Object.keys(scope.bindings)) {
                  const binding = scope.bindings[name];
                  binding.kind === kind && (ids[name] = binding);
                }
                scope = scope.parent;
              } while (scope);
            }
            return ids;
          }
          bindingIdentifierEquals(name, node) {
            return this.getBindingIdentifier(name) === node;
          }
          getBinding(name) {
            let previousPath, scope = this;
            do {
              const binding = scope.getOwnBinding(name);
              var _previousPath;
              if (binding) {
                if (null == (_previousPath = previousPath) || !_previousPath.isPattern() || "param" === binding.kind || "local" === binding.kind) return binding;
              } else if (!binding && "arguments" === name && scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) break;
              previousPath = scope.path;
            } while (scope = scope.parent);
          }
          getOwnBinding(name) {
            return this.bindings[name];
          }
          getBindingIdentifier(name) {
            var _this$getBinding2;
            return null == (_this$getBinding2 = this.getBinding(name)) ? void 0 : _this$getBinding2.identifier;
          }
          getOwnBindingIdentifier(name) {
            const binding = this.bindings[name];
            return null == binding ? void 0 : binding.identifier;
          }
          hasOwnBinding(name) {
            return !!this.getOwnBinding(name);
          }
          hasBinding(name, opts) {
            var _opts, _opts2, _opts3;
            return !!name && (!!this.hasOwnBinding(name) || ("boolean" == typeof opts && (opts = { noGlobals: opts }), !!this.parentHasBinding(name, opts) || (!(null != (_opts = opts) && _opts.noUids || !this.hasUid(name)) || (!(null != (_opts2 = opts) && _opts2.noGlobals || !Scope.globals.includes(name)) || !(null != (_opts3 = opts) && _opts3.noGlobals || !Scope.contextVariables.includes(name))))));
          }
          parentHasBinding(name, opts) {
            var _this$parent;
            return null == (_this$parent = this.parent) ? void 0 : _this$parent.hasBinding(name, opts);
          }
          moveBindingTo(name, scope) {
            const info = this.getBinding(name);
            info && (info.scope.removeOwnBinding(name), info.scope = scope, scope.bindings[name] = info);
          }
          removeOwnBinding(name) {
            delete this.bindings[name];
          }
          removeBinding(name) {
            var _this$getBinding3;
            null == (_this$getBinding3 = this.getBinding(name)) || _this$getBinding3.scope.removeOwnBinding(name);
            let scope = this;
            do {
              scope.uids[name] && (scope.uids[name] = false);
            } while (scope = scope.parent);
          }
        }
        exports3.default = Scope, Scope.globals = Object.keys(_globals.builtin), Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/scope/lib/renamer.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.22.6/node_modules/@babel/helper-split-export-declaration/lib/index.js"), t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.22.20/node_modules/@babel/helper-environment-visitor/lib/index.js"), _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/traverse-node.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/visitors.js");
        const renameVisitor = { ReferencedIdentifier({ node }, state) {
          node.name === state.oldName && (node.name = state.newName);
        }, Scope(path3, state) {
          path3.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier) || (path3.skip(), path3.isMethod() && (0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path3));
        }, ObjectProperty({ node, scope }, state) {
          const { name } = node.key;
          var _node$extra;
          !node.shorthand || name !== state.oldName && name !== state.newName || scope.getBindingIdentifier(name) !== state.binding.identifier || (node.shorthand = false, null != (_node$extra = node.extra) && _node$extra.shorthand && (node.extra.shorthand = false));
        }, "AssignmentExpression|Declaration|VariableDeclarator"(path3, state) {
          if (path3.isVariableDeclaration()) return;
          const ids = path3.getOuterBindingIdentifiers();
          for (const name in ids) name === state.oldName && (ids[name].name = state.newName);
        } };
        exports3.default = class {
          constructor(binding, oldName, newName) {
            this.newName = newName, this.oldName = oldName, this.binding = binding;
          }
          maybeConvertFromExportDeclaration(parentDeclar) {
            const maybeExportDeclar = parentDeclar.parentPath;
            if (maybeExportDeclar.isExportDeclaration()) {
              if (maybeExportDeclar.isExportDefaultDeclaration()) {
                const { declaration } = maybeExportDeclar.node;
                if (t.isDeclaration(declaration) && !declaration.id) return;
              }
              maybeExportDeclar.isExportAllDeclaration() || (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);
            }
          }
          maybeConvertFromClassFunctionDeclaration(path3) {
            return path3;
          }
          maybeConvertFromClassFunctionExpression(path3) {
            return path3;
          }
          rename() {
            const { binding, oldName, newName } = this, { scope, path: path3 } = binding, parentDeclar = path3.find((path4) => path4.isDeclaration() || path4.isFunctionExpression() || path4.isClassExpression());
            if (parentDeclar) {
              parentDeclar.getOuterBindingIdentifiers()[oldName] === binding.identifier && this.maybeConvertFromExportDeclaration(parentDeclar);
            }
            const blockToTraverse = arguments[0] || scope.block;
            (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, { discriminant: true }), arguments[0] || (scope.removeOwnBinding(oldName), scope.bindings[newName] = binding, this.binding.identifier.name = newName), parentDeclar && (this.maybeConvertFromClassFunctionDeclaration(path3), this.maybeConvertFromClassFunctionExpression(path3));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/traverse-node.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.traverseNode = function(node, opts, scope, state, path3, skipKeys, visitSelf) {
          const keys = VISITOR_KEYS[node.type];
          if (!keys) return false;
          const context = new _context.default(scope, opts, state, path3);
          if (visitSelf) return (null == skipKeys || !skipKeys[path3.parentKey]) && context.visitQueue([path3]);
          for (const key of keys) if ((null == skipKeys || !skipKeys[key]) && context.visit(node, key)) return true;
          return false;
        };
        var _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/context.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/visitors.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.explode = explode, exports3.isExplodedVisitor = isExplodedVisitor, exports3.merge = function(visitors, states = [], wrapper) {
          const mergedVisitor = {};
          for (let i = 0; i < visitors.length; i++) {
            const visitor = explode(visitors[i]), state = states[i];
            let topVisitor = visitor;
            (state || wrapper) && (topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper)), mergePair(mergedVisitor, topVisitor);
            for (const key of Object.keys(visitor)) {
              if (shouldIgnoreKey(key)) continue;
              let typeVisitor = visitor[key];
              (state || wrapper) && (typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper));
              mergePair(mergedVisitor[key] || (mergedVisitor[key] = {}), typeVisitor);
            }
          }
          return mergedVisitor;
        }, exports3.verify = verify;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.23.2/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
        const { DEPRECATED_KEYS, DEPRECATED_ALIASES, FLIPPED_ALIAS_KEYS, TYPES, __internal__deprecationWarning: deprecationWarning } = _t;
        function isExplodedVisitor(visitor) {
          return null == visitor ? void 0 : visitor._exploded;
        }
        function explode(visitor) {
          if (isExplodedVisitor(visitor)) return visitor;
          visitor._exploded = true;
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            const parts = nodeType.split("|");
            if (1 === parts.length) continue;
            const fns = visitor[nodeType];
            delete visitor[nodeType];
            for (const part of parts) visitor[part] = fns;
          }
          verify(visitor), delete visitor.__esModule, function(obj) {
            for (const key of Object.keys(obj)) {
              if (shouldIgnoreKey(key)) continue;
              const fns = obj[key];
              "function" == typeof fns && (obj[key] = { enter: fns });
            }
          }(visitor), ensureCallbackArrays(visitor);
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            if (!(nodeType in virtualTypes)) continue;
            const fns = visitor[nodeType];
            for (const type of Object.keys(fns)) fns[type] = wrapCheck(nodeType, fns[type]);
            delete visitor[nodeType];
            const types = virtualTypes[nodeType];
            if (null !== types) for (const type of types) visitor[type] ? mergePair(visitor[type], fns) : visitor[type] = fns;
            else mergePair(visitor, fns);
          }
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType)) continue;
            let aliases2 = FLIPPED_ALIAS_KEYS[nodeType];
            if (nodeType in DEPRECATED_KEYS) {
              const deprecatedKey = DEPRECATED_KEYS[nodeType];
              deprecationWarning(nodeType, deprecatedKey, "Visitor "), aliases2 = [deprecatedKey];
            } else if (nodeType in DEPRECATED_ALIASES) {
              const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
              deprecationWarning(nodeType, deprecatedAlias, "Visitor "), aliases2 = FLIPPED_ALIAS_KEYS[deprecatedAlias];
            }
            if (!aliases2) continue;
            const fns = visitor[nodeType];
            delete visitor[nodeType];
            for (const alias of aliases2) {
              const existing = visitor[alias];
              existing ? mergePair(existing, fns) : visitor[alias] = Object.assign({}, fns);
            }
          }
          for (const nodeType of Object.keys(visitor)) shouldIgnoreKey(nodeType) || ensureCallbackArrays(visitor[nodeType]);
          return visitor;
        }
        function verify(visitor) {
          if (!visitor._verified) {
            if ("function" == typeof visitor) throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
            for (const nodeType of Object.keys(visitor)) {
              if ("enter" !== nodeType && "exit" !== nodeType || validateVisitorMethods(nodeType, visitor[nodeType]), shouldIgnoreKey(nodeType)) continue;
              if (TYPES.indexOf(nodeType) < 0) throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type`);
              const visitors = visitor[nodeType];
              if ("object" == typeof visitors) for (const visitorKey of Object.keys(visitors)) {
                if ("enter" !== visitorKey && "exit" !== visitorKey) throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
                validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
              }
            }
            visitor._verified = true;
          }
        }
        function validateVisitorMethods(path3, val) {
          const fns = [].concat(val);
          for (const fn of fns) if ("function" != typeof fn) throw new TypeError(`Non-function found defined in ${path3} with type ${typeof fn}`);
        }
        function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
          const newVisitor = {};
          for (const phase of ["enter", "exit"]) {
            let fns = oldVisitor[phase];
            Array.isArray(fns) && (fns = fns.map(function(fn) {
              let newFn = fn;
              return state && (newFn = function(path3) {
                fn.call(state, path3, state);
              }), wrapper && (newFn = wrapper(null == state ? void 0 : state.key, phase, newFn)), newFn !== fn && (newFn.toString = () => fn.toString()), newFn;
            }), newVisitor[phase] = fns);
          }
          return newVisitor;
        }
        function ensureCallbackArrays(obj) {
          obj.enter && !Array.isArray(obj.enter) && (obj.enter = [obj.enter]), obj.exit && !Array.isArray(obj.exit) && (obj.exit = [obj.exit]);
        }
        function wrapCheck(nodeType, fn) {
          const newFn = function(path3) {
            if (path3[`is${nodeType}`]()) return fn.apply(this, arguments);
          };
          return newFn.toString = () => fn.toString(), newFn;
        }
        function shouldIgnoreKey(key) {
          return "_" === key[0] || ("enter" === key || "exit" === key || "shouldSkip" === key || ("denylist" === key || "noScope" === key || "skipKeys" === key || "blacklist" === key));
        }
        function mergePair(dest, src) {
          for (const phase of ["enter", "exit"]) src[phase] && (dest[phase] = [].concat(dest[phase] || [], src[phase]));
        }
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/asserts/assertNode.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          if (!(0, _isNode.default)(node)) {
            var _node$type;
            const type = null != (_node$type = null == node ? void 0 : node.type) ? _node$type : JSON.stringify(node);
            throw new TypeError(`Not a valid node of type "${type}"`);
          }
        };
        var _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/asserts/generated/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.assertAccessor = function(node, opts) {
          assert("Accessor", node, opts);
        }, exports3.assertAnyTypeAnnotation = function(node, opts) {
          assert("AnyTypeAnnotation", node, opts);
        }, exports3.assertArgumentPlaceholder = function(node, opts) {
          assert("ArgumentPlaceholder", node, opts);
        }, exports3.assertArrayExpression = function(node, opts) {
          assert("ArrayExpression", node, opts);
        }, exports3.assertArrayPattern = function(node, opts) {
          assert("ArrayPattern", node, opts);
        }, exports3.assertArrayTypeAnnotation = function(node, opts) {
          assert("ArrayTypeAnnotation", node, opts);
        }, exports3.assertArrowFunctionExpression = function(node, opts) {
          assert("ArrowFunctionExpression", node, opts);
        }, exports3.assertAssignmentExpression = function(node, opts) {
          assert("AssignmentExpression", node, opts);
        }, exports3.assertAssignmentPattern = function(node, opts) {
          assert("AssignmentPattern", node, opts);
        }, exports3.assertAwaitExpression = function(node, opts) {
          assert("AwaitExpression", node, opts);
        }, exports3.assertBigIntLiteral = function(node, opts) {
          assert("BigIntLiteral", node, opts);
        }, exports3.assertBinary = function(node, opts) {
          assert("Binary", node, opts);
        }, exports3.assertBinaryExpression = function(node, opts) {
          assert("BinaryExpression", node, opts);
        }, exports3.assertBindExpression = function(node, opts) {
          assert("BindExpression", node, opts);
        }, exports3.assertBlock = function(node, opts) {
          assert("Block", node, opts);
        }, exports3.assertBlockParent = function(node, opts) {
          assert("BlockParent", node, opts);
        }, exports3.assertBlockStatement = function(node, opts) {
          assert("BlockStatement", node, opts);
        }, exports3.assertBooleanLiteral = function(node, opts) {
          assert("BooleanLiteral", node, opts);
        }, exports3.assertBooleanLiteralTypeAnnotation = function(node, opts) {
          assert("BooleanLiteralTypeAnnotation", node, opts);
        }, exports3.assertBooleanTypeAnnotation = function(node, opts) {
          assert("BooleanTypeAnnotation", node, opts);
        }, exports3.assertBreakStatement = function(node, opts) {
          assert("BreakStatement", node, opts);
        }, exports3.assertCallExpression = function(node, opts) {
          assert("CallExpression", node, opts);
        }, exports3.assertCatchClause = function(node, opts) {
          assert("CatchClause", node, opts);
        }, exports3.assertClass = function(node, opts) {
          assert("Class", node, opts);
        }, exports3.assertClassAccessorProperty = function(node, opts) {
          assert("ClassAccessorProperty", node, opts);
        }, exports3.assertClassBody = function(node, opts) {
          assert("ClassBody", node, opts);
        }, exports3.assertClassDeclaration = function(node, opts) {
          assert("ClassDeclaration", node, opts);
        }, exports3.assertClassExpression = function(node, opts) {
          assert("ClassExpression", node, opts);
        }, exports3.assertClassImplements = function(node, opts) {
          assert("ClassImplements", node, opts);
        }, exports3.assertClassMethod = function(node, opts) {
          assert("ClassMethod", node, opts);
        }, exports3.assertClassPrivateMethod = function(node, opts) {
          assert("ClassPrivateMethod", node, opts);
        }, exports3.assertClassPrivateProperty = function(node, opts) {
          assert("ClassPrivateProperty", node, opts);
        }, exports3.assertClassProperty = function(node, opts) {
          assert("ClassProperty", node, opts);
        }, exports3.assertCompletionStatement = function(node, opts) {
          assert("CompletionStatement", node, opts);
        }, exports3.assertConditional = function(node, opts) {
          assert("Conditional", node, opts);
        }, exports3.assertConditionalExpression = function(node, opts) {
          assert("ConditionalExpression", node, opts);
        }, exports3.assertContinueStatement = function(node, opts) {
          assert("ContinueStatement", node, opts);
        }, exports3.assertDebuggerStatement = function(node, opts) {
          assert("DebuggerStatement", node, opts);
        }, exports3.assertDecimalLiteral = function(node, opts) {
          assert("DecimalLiteral", node, opts);
        }, exports3.assertDeclaration = function(node, opts) {
          assert("Declaration", node, opts);
        }, exports3.assertDeclareClass = function(node, opts) {
          assert("DeclareClass", node, opts);
        }, exports3.assertDeclareExportAllDeclaration = function(node, opts) {
          assert("DeclareExportAllDeclaration", node, opts);
        }, exports3.assertDeclareExportDeclaration = function(node, opts) {
          assert("DeclareExportDeclaration", node, opts);
        }, exports3.assertDeclareFunction = function(node, opts) {
          assert("DeclareFunction", node, opts);
        }, exports3.assertDeclareInterface = function(node, opts) {
          assert("DeclareInterface", node, opts);
        }, exports3.assertDeclareModule = function(node, opts) {
          assert("DeclareModule", node, opts);
        }, exports3.assertDeclareModuleExports = function(node, opts) {
          assert("DeclareModuleExports", node, opts);
        }, exports3.assertDeclareOpaqueType = function(node, opts) {
          assert("DeclareOpaqueType", node, opts);
        }, exports3.assertDeclareTypeAlias = function(node, opts) {
          assert("DeclareTypeAlias", node, opts);
        }, exports3.assertDeclareVariable = function(node, opts) {
          assert("DeclareVariable", node, opts);
        }, exports3.assertDeclaredPredicate = function(node, opts) {
          assert("DeclaredPredicate", node, opts);
        }, exports3.assertDecorator = function(node, opts) {
          assert("Decorator", node, opts);
        }, exports3.assertDirective = function(node, opts) {
          assert("Directive", node, opts);
        }, exports3.assertDirectiveLiteral = function(node, opts) {
          assert("DirectiveLiteral", node, opts);
        }, exports3.assertDoExpression = function(node, opts) {
          assert("DoExpression", node, opts);
        }, exports3.assertDoWhileStatement = function(node, opts) {
          assert("DoWhileStatement", node, opts);
        }, exports3.assertEmptyStatement = function(node, opts) {
          assert("EmptyStatement", node, opts);
        }, exports3.assertEmptyTypeAnnotation = function(node, opts) {
          assert("EmptyTypeAnnotation", node, opts);
        }, exports3.assertEnumBody = function(node, opts) {
          assert("EnumBody", node, opts);
        }, exports3.assertEnumBooleanBody = function(node, opts) {
          assert("EnumBooleanBody", node, opts);
        }, exports3.assertEnumBooleanMember = function(node, opts) {
          assert("EnumBooleanMember", node, opts);
        }, exports3.assertEnumDeclaration = function(node, opts) {
          assert("EnumDeclaration", node, opts);
        }, exports3.assertEnumDefaultedMember = function(node, opts) {
          assert("EnumDefaultedMember", node, opts);
        }, exports3.assertEnumMember = function(node, opts) {
          assert("EnumMember", node, opts);
        }, exports3.assertEnumNumberBody = function(node, opts) {
          assert("EnumNumberBody", node, opts);
        }, exports3.assertEnumNumberMember = function(node, opts) {
          assert("EnumNumberMember", node, opts);
        }, exports3.assertEnumStringBody = function(node, opts) {
          assert("EnumStringBody", node, opts);
        }, exports3.assertEnumStringMember = function(node, opts) {
          assert("EnumStringMember", node, opts);
        }, exports3.assertEnumSymbolBody = function(node, opts) {
          assert("EnumSymbolBody", node, opts);
        }, exports3.assertExistsTypeAnnotation = function(node, opts) {
          assert("ExistsTypeAnnotation", node, opts);
        }, exports3.assertExportAllDeclaration = function(node, opts) {
          assert("ExportAllDeclaration", node, opts);
        }, exports3.assertExportDeclaration = function(node, opts) {
          assert("ExportDeclaration", node, opts);
        }, exports3.assertExportDefaultDeclaration = function(node, opts) {
          assert("ExportDefaultDeclaration", node, opts);
        }, exports3.assertExportDefaultSpecifier = function(node, opts) {
          assert("ExportDefaultSpecifier", node, opts);
        }, exports3.assertExportNamedDeclaration = function(node, opts) {
          assert("ExportNamedDeclaration", node, opts);
        }, exports3.assertExportNamespaceSpecifier = function(node, opts) {
          assert("ExportNamespaceSpecifier", node, opts);
        }, exports3.assertExportSpecifier = function(node, opts) {
          assert("ExportSpecifier", node, opts);
        }, exports3.assertExpression = function(node, opts) {
          assert("Expression", node, opts);
        }, exports3.assertExpressionStatement = function(node, opts) {
          assert("ExpressionStatement", node, opts);
        }, exports3.assertExpressionWrapper = function(node, opts) {
          assert("ExpressionWrapper", node, opts);
        }, exports3.assertFile = function(node, opts) {
          assert("File", node, opts);
        }, exports3.assertFlow = function(node, opts) {
          assert("Flow", node, opts);
        }, exports3.assertFlowBaseAnnotation = function(node, opts) {
          assert("FlowBaseAnnotation", node, opts);
        }, exports3.assertFlowDeclaration = function(node, opts) {
          assert("FlowDeclaration", node, opts);
        }, exports3.assertFlowPredicate = function(node, opts) {
          assert("FlowPredicate", node, opts);
        }, exports3.assertFlowType = function(node, opts) {
          assert("FlowType", node, opts);
        }, exports3.assertFor = function(node, opts) {
          assert("For", node, opts);
        }, exports3.assertForInStatement = function(node, opts) {
          assert("ForInStatement", node, opts);
        }, exports3.assertForOfStatement = function(node, opts) {
          assert("ForOfStatement", node, opts);
        }, exports3.assertForStatement = function(node, opts) {
          assert("ForStatement", node, opts);
        }, exports3.assertForXStatement = function(node, opts) {
          assert("ForXStatement", node, opts);
        }, exports3.assertFunction = function(node, opts) {
          assert("Function", node, opts);
        }, exports3.assertFunctionDeclaration = function(node, opts) {
          assert("FunctionDeclaration", node, opts);
        }, exports3.assertFunctionExpression = function(node, opts) {
          assert("FunctionExpression", node, opts);
        }, exports3.assertFunctionParent = function(node, opts) {
          assert("FunctionParent", node, opts);
        }, exports3.assertFunctionTypeAnnotation = function(node, opts) {
          assert("FunctionTypeAnnotation", node, opts);
        }, exports3.assertFunctionTypeParam = function(node, opts) {
          assert("FunctionTypeParam", node, opts);
        }, exports3.assertGenericTypeAnnotation = function(node, opts) {
          assert("GenericTypeAnnotation", node, opts);
        }, exports3.assertIdentifier = function(node, opts) {
          assert("Identifier", node, opts);
        }, exports3.assertIfStatement = function(node, opts) {
          assert("IfStatement", node, opts);
        }, exports3.assertImmutable = function(node, opts) {
          assert("Immutable", node, opts);
        }, exports3.assertImport = function(node, opts) {
          assert("Import", node, opts);
        }, exports3.assertImportAttribute = function(node, opts) {
          assert("ImportAttribute", node, opts);
        }, exports3.assertImportDeclaration = function(node, opts) {
          assert("ImportDeclaration", node, opts);
        }, exports3.assertImportDefaultSpecifier = function(node, opts) {
          assert("ImportDefaultSpecifier", node, opts);
        }, exports3.assertImportExpression = function(node, opts) {
          assert("ImportExpression", node, opts);
        }, exports3.assertImportNamespaceSpecifier = function(node, opts) {
          assert("ImportNamespaceSpecifier", node, opts);
        }, exports3.assertImportOrExportDeclaration = function(node, opts) {
          assert("ImportOrExportDeclaration", node, opts);
        }, exports3.assertImportSpecifier = function(node, opts) {
          assert("ImportSpecifier", node, opts);
        }, exports3.assertIndexedAccessType = function(node, opts) {
          assert("IndexedAccessType", node, opts);
        }, exports3.assertInferredPredicate = function(node, opts) {
          assert("InferredPredicate", node, opts);
        }, exports3.assertInterfaceDeclaration = function(node, opts) {
          assert("InterfaceDeclaration", node, opts);
        }, exports3.assertInterfaceExtends = function(node, opts) {
          assert("InterfaceExtends", node, opts);
        }, exports3.assertInterfaceTypeAnnotation = function(node, opts) {
          assert("InterfaceTypeAnnotation", node, opts);
        }, exports3.assertInterpreterDirective = function(node, opts) {
          assert("InterpreterDirective", node, opts);
        }, exports3.assertIntersectionTypeAnnotation = function(node, opts) {
          assert("IntersectionTypeAnnotation", node, opts);
        }, exports3.assertJSX = function(node, opts) {
          assert("JSX", node, opts);
        }, exports3.assertJSXAttribute = function(node, opts) {
          assert("JSXAttribute", node, opts);
        }, exports3.assertJSXClosingElement = function(node, opts) {
          assert("JSXClosingElement", node, opts);
        }, exports3.assertJSXClosingFragment = function(node, opts) {
          assert("JSXClosingFragment", node, opts);
        }, exports3.assertJSXElement = function(node, opts) {
          assert("JSXElement", node, opts);
        }, exports3.assertJSXEmptyExpression = function(node, opts) {
          assert("JSXEmptyExpression", node, opts);
        }, exports3.assertJSXExpressionContainer = function(node, opts) {
          assert("JSXExpressionContainer", node, opts);
        }, exports3.assertJSXFragment = function(node, opts) {
          assert("JSXFragment", node, opts);
        }, exports3.assertJSXIdentifier = function(node, opts) {
          assert("JSXIdentifier", node, opts);
        }, exports3.assertJSXMemberExpression = function(node, opts) {
          assert("JSXMemberExpression", node, opts);
        }, exports3.assertJSXNamespacedName = function(node, opts) {
          assert("JSXNamespacedName", node, opts);
        }, exports3.assertJSXOpeningElement = function(node, opts) {
          assert("JSXOpeningElement", node, opts);
        }, exports3.assertJSXOpeningFragment = function(node, opts) {
          assert("JSXOpeningFragment", node, opts);
        }, exports3.assertJSXSpreadAttribute = function(node, opts) {
          assert("JSXSpreadAttribute", node, opts);
        }, exports3.assertJSXSpreadChild = function(node, opts) {
          assert("JSXSpreadChild", node, opts);
        }, exports3.assertJSXText = function(node, opts) {
          assert("JSXText", node, opts);
        }, exports3.assertLVal = function(node, opts) {
          assert("LVal", node, opts);
        }, exports3.assertLabeledStatement = function(node, opts) {
          assert("LabeledStatement", node, opts);
        }, exports3.assertLiteral = function(node, opts) {
          assert("Literal", node, opts);
        }, exports3.assertLogicalExpression = function(node, opts) {
          assert("LogicalExpression", node, opts);
        }, exports3.assertLoop = function(node, opts) {
          assert("Loop", node, opts);
        }, exports3.assertMemberExpression = function(node, opts) {
          assert("MemberExpression", node, opts);
        }, exports3.assertMetaProperty = function(node, opts) {
          assert("MetaProperty", node, opts);
        }, exports3.assertMethod = function(node, opts) {
          assert("Method", node, opts);
        }, exports3.assertMiscellaneous = function(node, opts) {
          assert("Miscellaneous", node, opts);
        }, exports3.assertMixedTypeAnnotation = function(node, opts) {
          assert("MixedTypeAnnotation", node, opts);
        }, exports3.assertModuleDeclaration = function(node, opts) {
          (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration"), assert("ModuleDeclaration", node, opts);
        }, exports3.assertModuleExpression = function(node, opts) {
          assert("ModuleExpression", node, opts);
        }, exports3.assertModuleSpecifier = function(node, opts) {
          assert("ModuleSpecifier", node, opts);
        }, exports3.assertNewExpression = function(node, opts) {
          assert("NewExpression", node, opts);
        }, exports3.assertNoop = function(node, opts) {
          assert("Noop", node, opts);
        }, exports3.assertNullLiteral = function(node, opts) {
          assert("NullLiteral", node, opts);
        }, exports3.assertNullLiteralTypeAnnotation = function(node, opts) {
          assert("NullLiteralTypeAnnotation", node, opts);
        }, exports3.assertNullableTypeAnnotation = function(node, opts) {
          assert("NullableTypeAnnotation", node, opts);
        }, exports3.assertNumberLiteral = function(node, opts) {
          (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral"), assert("NumberLiteral", node, opts);
        }, exports3.assertNumberLiteralTypeAnnotation = function(node, opts) {
          assert("NumberLiteralTypeAnnotation", node, opts);
        }, exports3.assertNumberTypeAnnotation = function(node, opts) {
          assert("NumberTypeAnnotation", node, opts);
        }, exports3.assertNumericLiteral = function(node, opts) {
          assert("NumericLiteral", node, opts);
        }, exports3.assertObjectExpression = function(node, opts) {
          assert("ObjectExpression", node, opts);
        }, exports3.assertObjectMember = function(node, opts) {
          assert("ObjectMember", node, opts);
        }, exports3.assertObjectMethod = function(node, opts) {
          assert("ObjectMethod", node, opts);
        }, exports3.assertObjectPattern = function(node, opts) {
          assert("ObjectPattern", node, opts);
        }, exports3.assertObjectProperty = function(node, opts) {
          assert("ObjectProperty", node, opts);
        }, exports3.assertObjectTypeAnnotation = function(node, opts) {
          assert("ObjectTypeAnnotation", node, opts);
        }, exports3.assertObjectTypeCallProperty = function(node, opts) {
          assert("ObjectTypeCallProperty", node, opts);
        }, exports3.assertObjectTypeIndexer = function(node, opts) {
          assert("ObjectTypeIndexer", node, opts);
        }, exports3.assertObjectTypeInternalSlot = function(node, opts) {
          assert("ObjectTypeInternalSlot", node, opts);
        }, exports3.assertObjectTypeProperty = function(node, opts) {
          assert("ObjectTypeProperty", node, opts);
        }, exports3.assertObjectTypeSpreadProperty = function(node, opts) {
          assert("ObjectTypeSpreadProperty", node, opts);
        }, exports3.assertOpaqueType = function(node, opts) {
          assert("OpaqueType", node, opts);
        }, exports3.assertOptionalCallExpression = function(node, opts) {
          assert("OptionalCallExpression", node, opts);
        }, exports3.assertOptionalIndexedAccessType = function(node, opts) {
          assert("OptionalIndexedAccessType", node, opts);
        }, exports3.assertOptionalMemberExpression = function(node, opts) {
          assert("OptionalMemberExpression", node, opts);
        }, exports3.assertParenthesizedExpression = function(node, opts) {
          assert("ParenthesizedExpression", node, opts);
        }, exports3.assertPattern = function(node, opts) {
          assert("Pattern", node, opts);
        }, exports3.assertPatternLike = function(node, opts) {
          assert("PatternLike", node, opts);
        }, exports3.assertPipelineBareFunction = function(node, opts) {
          assert("PipelineBareFunction", node, opts);
        }, exports3.assertPipelinePrimaryTopicReference = function(node, opts) {
          assert("PipelinePrimaryTopicReference", node, opts);
        }, exports3.assertPipelineTopicExpression = function(node, opts) {
          assert("PipelineTopicExpression", node, opts);
        }, exports3.assertPlaceholder = function(node, opts) {
          assert("Placeholder", node, opts);
        }, exports3.assertPrivate = function(node, opts) {
          assert("Private", node, opts);
        }, exports3.assertPrivateName = function(node, opts) {
          assert("PrivateName", node, opts);
        }, exports3.assertProgram = function(node, opts) {
          assert("Program", node, opts);
        }, exports3.assertProperty = function(node, opts) {
          assert("Property", node, opts);
        }, exports3.assertPureish = function(node, opts) {
          assert("Pureish", node, opts);
        }, exports3.assertQualifiedTypeIdentifier = function(node, opts) {
          assert("QualifiedTypeIdentifier", node, opts);
        }, exports3.assertRecordExpression = function(node, opts) {
          assert("RecordExpression", node, opts);
        }, exports3.assertRegExpLiteral = function(node, opts) {
          assert("RegExpLiteral", node, opts);
        }, exports3.assertRegexLiteral = function(node, opts) {
          (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral"), assert("RegexLiteral", node, opts);
        }, exports3.assertRestElement = function(node, opts) {
          assert("RestElement", node, opts);
        }, exports3.assertRestProperty = function(node, opts) {
          (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement"), assert("RestProperty", node, opts);
        }, exports3.assertReturnStatement = function(node, opts) {
          assert("ReturnStatement", node, opts);
        }, exports3.assertScopable = function(node, opts) {
          assert("Scopable", node, opts);
        }, exports3.assertSequenceExpression = function(node, opts) {
          assert("SequenceExpression", node, opts);
        }, exports3.assertSpreadElement = function(node, opts) {
          assert("SpreadElement", node, opts);
        }, exports3.assertSpreadProperty = function(node, opts) {
          (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement"), assert("SpreadProperty", node, opts);
        }, exports3.assertStandardized = function(node, opts) {
          assert("Standardized", node, opts);
        }, exports3.assertStatement = function(node, opts) {
          assert("Statement", node, opts);
        }, exports3.assertStaticBlock = function(node, opts) {
          assert("StaticBlock", node, opts);
        }, exports3.assertStringLiteral = function(node, opts) {
          assert("StringLiteral", node, opts);
        }, exports3.assertStringLiteralTypeAnnotation = function(node, opts) {
          assert("StringLiteralTypeAnnotation", node, opts);
        }, exports3.assertStringTypeAnnotation = function(node, opts) {
          assert("StringTypeAnnotation", node, opts);
        }, exports3.assertSuper = function(node, opts) {
          assert("Super", node, opts);
        }, exports3.assertSwitchCase = function(node, opts) {
          assert("SwitchCase", node, opts);
        }, exports3.assertSwitchStatement = function(node, opts) {
          assert("SwitchStatement", node, opts);
        }, exports3.assertSymbolTypeAnnotation = function(node, opts) {
          assert("SymbolTypeAnnotation", node, opts);
        }, exports3.assertTSAnyKeyword = function(node, opts) {
          assert("TSAnyKeyword", node, opts);
        }, exports3.assertTSArrayType = function(node, opts) {
          assert("TSArrayType", node, opts);
        }, exports3.assertTSAsExpression = function(node, opts) {
          assert("TSAsExpression", node, opts);
        }, exports3.assertTSBaseType = function(node, opts) {
          assert("TSBaseType", node, opts);
        }, exports3.assertTSBigIntKeyword = function(node, opts) {
          assert("TSBigIntKeyword", node, opts);
        }, exports3.assertTSBooleanKeyword = function(node, opts) {
          assert("TSBooleanKeyword", node, opts);
        }, exports3.assertTSCallSignatureDeclaration = function(node, opts) {
          assert("TSCallSignatureDeclaration", node, opts);
        }, exports3.assertTSConditionalType = function(node, opts) {
          assert("TSConditionalType", node, opts);
        }, exports3.assertTSConstructSignatureDeclaration = function(node, opts) {
          assert("TSConstructSignatureDeclaration", node, opts);
        }, exports3.assertTSConstructorType = function(node, opts) {
          assert("TSConstructorType", node, opts);
        }, exports3.assertTSDeclareFunction = function(node, opts) {
          assert("TSDeclareFunction", node, opts);
        }, exports3.assertTSDeclareMethod = function(node, opts) {
          assert("TSDeclareMethod", node, opts);
        }, exports3.assertTSEntityName = function(node, opts) {
          assert("TSEntityName", node, opts);
        }, exports3.assertTSEnumDeclaration = function(node, opts) {
          assert("TSEnumDeclaration", node, opts);
        }, exports3.assertTSEnumMember = function(node, opts) {
          assert("TSEnumMember", node, opts);
        }, exports3.assertTSExportAssignment = function(node, opts) {
          assert("TSExportAssignment", node, opts);
        }, exports3.assertTSExpressionWithTypeArguments = function(node, opts) {
          assert("TSExpressionWithTypeArguments", node, opts);
        }, exports3.assertTSExternalModuleReference = function(node, opts) {
          assert("TSExternalModuleReference", node, opts);
        }, exports3.assertTSFunctionType = function(node, opts) {
          assert("TSFunctionType", node, opts);
        }, exports3.assertTSImportEqualsDeclaration = function(node, opts) {
          assert("TSImportEqualsDeclaration", node, opts);
        }, exports3.assertTSImportType = function(node, opts) {
          assert("TSImportType", node, opts);
        }, exports3.assertTSIndexSignature = function(node, opts) {
          assert("TSIndexSignature", node, opts);
        }, exports3.assertTSIndexedAccessType = function(node, opts) {
          assert("TSIndexedAccessType", node, opts);
        }, exports3.assertTSInferType = function(node, opts) {
          assert("TSInferType", node, opts);
        }, exports3.assertTSInstantiationExpression = function(node, opts) {
          assert("TSInstantiationExpression", node, opts);
        }, exports3.assertTSInterfaceBody = function(node, opts) {
          assert("TSInterfaceBody", node, opts);
        }, exports3.assertTSInterfaceDeclaration = function(node, opts) {
          assert("TSInterfaceDeclaration", node, opts);
        }, exports3.assertTSIntersectionType = function(node, opts) {
          assert("TSIntersectionType", node, opts);
        }, exports3.assertTSIntrinsicKeyword = function(node, opts) {
          assert("TSIntrinsicKeyword", node, opts);
        }, exports3.assertTSLiteralType = function(node, opts) {
          assert("TSLiteralType", node, opts);
        }, exports3.assertTSMappedType = function(node, opts) {
          assert("TSMappedType", node, opts);
        }, exports3.assertTSMethodSignature = function(node, opts) {
          assert("TSMethodSignature", node, opts);
        }, exports3.assertTSModuleBlock = function(node, opts) {
          assert("TSModuleBlock", node, opts);
        }, exports3.assertTSModuleDeclaration = function(node, opts) {
          assert("TSModuleDeclaration", node, opts);
        }, exports3.assertTSNamedTupleMember = function(node, opts) {
          assert("TSNamedTupleMember", node, opts);
        }, exports3.assertTSNamespaceExportDeclaration = function(node, opts) {
          assert("TSNamespaceExportDeclaration", node, opts);
        }, exports3.assertTSNeverKeyword = function(node, opts) {
          assert("TSNeverKeyword", node, opts);
        }, exports3.assertTSNonNullExpression = function(node, opts) {
          assert("TSNonNullExpression", node, opts);
        }, exports3.assertTSNullKeyword = function(node, opts) {
          assert("TSNullKeyword", node, opts);
        }, exports3.assertTSNumberKeyword = function(node, opts) {
          assert("TSNumberKeyword", node, opts);
        }, exports3.assertTSObjectKeyword = function(node, opts) {
          assert("TSObjectKeyword", node, opts);
        }, exports3.assertTSOptionalType = function(node, opts) {
          assert("TSOptionalType", node, opts);
        }, exports3.assertTSParameterProperty = function(node, opts) {
          assert("TSParameterProperty", node, opts);
        }, exports3.assertTSParenthesizedType = function(node, opts) {
          assert("TSParenthesizedType", node, opts);
        }, exports3.assertTSPropertySignature = function(node, opts) {
          assert("TSPropertySignature", node, opts);
        }, exports3.assertTSQualifiedName = function(node, opts) {
          assert("TSQualifiedName", node, opts);
        }, exports3.assertTSRestType = function(node, opts) {
          assert("TSRestType", node, opts);
        }, exports3.assertTSSatisfiesExpression = function(node, opts) {
          assert("TSSatisfiesExpression", node, opts);
        }, exports3.assertTSStringKeyword = function(node, opts) {
          assert("TSStringKeyword", node, opts);
        }, exports3.assertTSSymbolKeyword = function(node, opts) {
          assert("TSSymbolKeyword", node, opts);
        }, exports3.assertTSThisType = function(node, opts) {
          assert("TSThisType", node, opts);
        }, exports3.assertTSTupleType = function(node, opts) {
          assert("TSTupleType", node, opts);
        }, exports3.assertTSType = function(node, opts) {
          assert("TSType", node, opts);
        }, exports3.assertTSTypeAliasDeclaration = function(node, opts) {
          assert("TSTypeAliasDeclaration", node, opts);
        }, exports3.assertTSTypeAnnotation = function(node, opts) {
          assert("TSTypeAnnotation", node, opts);
        }, exports3.assertTSTypeAssertion = function(node, opts) {
          assert("TSTypeAssertion", node, opts);
        }, exports3.assertTSTypeElement = function(node, opts) {
          assert("TSTypeElement", node, opts);
        }, exports3.assertTSTypeLiteral = function(node, opts) {
          assert("TSTypeLiteral", node, opts);
        }, exports3.assertTSTypeOperator = function(node, opts) {
          assert("TSTypeOperator", node, opts);
        }, exports3.assertTSTypeParameter = function(node, opts) {
          assert("TSTypeParameter", node, opts);
        }, exports3.assertTSTypeParameterDeclaration = function(node, opts) {
          assert("TSTypeParameterDeclaration", node, opts);
        }, exports3.assertTSTypeParameterInstantiation = function(node, opts) {
          assert("TSTypeParameterInstantiation", node, opts);
        }, exports3.assertTSTypePredicate = function(node, opts) {
          assert("TSTypePredicate", node, opts);
        }, exports3.assertTSTypeQuery = function(node, opts) {
          assert("TSTypeQuery", node, opts);
        }, exports3.assertTSTypeReference = function(node, opts) {
          assert("TSTypeReference", node, opts);
        }, exports3.assertTSUndefinedKeyword = function(node, opts) {
          assert("TSUndefinedKeyword", node, opts);
        }, exports3.assertTSUnionType = function(node, opts) {
          assert("TSUnionType", node, opts);
        }, exports3.assertTSUnknownKeyword = function(node, opts) {
          assert("TSUnknownKeyword", node, opts);
        }, exports3.assertTSVoidKeyword = function(node, opts) {
          assert("TSVoidKeyword", node, opts);
        }, exports3.assertTaggedTemplateExpression = function(node, opts) {
          assert("TaggedTemplateExpression", node, opts);
        }, exports3.assertTemplateElement = function(node, opts) {
          assert("TemplateElement", node, opts);
        }, exports3.assertTemplateLiteral = function(node, opts) {
          assert("TemplateLiteral", node, opts);
        }, exports3.assertTerminatorless = function(node, opts) {
          assert("Terminatorless", node, opts);
        }, exports3.assertThisExpression = function(node, opts) {
          assert("ThisExpression", node, opts);
        }, exports3.assertThisTypeAnnotation = function(node, opts) {
          assert("ThisTypeAnnotation", node, opts);
        }, exports3.assertThrowStatement = function(node, opts) {
          assert("ThrowStatement", node, opts);
        }, exports3.assertTopicReference = function(node, opts) {
          assert("TopicReference", node, opts);
        }, exports3.assertTryStatement = function(node, opts) {
          assert("TryStatement", node, opts);
        }, exports3.assertTupleExpression = function(node, opts) {
          assert("TupleExpression", node, opts);
        }, exports3.assertTupleTypeAnnotation = function(node, opts) {
          assert("TupleTypeAnnotation", node, opts);
        }, exports3.assertTypeAlias = function(node, opts) {
          assert("TypeAlias", node, opts);
        }, exports3.assertTypeAnnotation = function(node, opts) {
          assert("TypeAnnotation", node, opts);
        }, exports3.assertTypeCastExpression = function(node, opts) {
          assert("TypeCastExpression", node, opts);
        }, exports3.assertTypeParameter = function(node, opts) {
          assert("TypeParameter", node, opts);
        }, exports3.assertTypeParameterDeclaration = function(node, opts) {
          assert("TypeParameterDeclaration", node, opts);
        }, exports3.assertTypeParameterInstantiation = function(node, opts) {
          assert("TypeParameterInstantiation", node, opts);
        }, exports3.assertTypeScript = function(node, opts) {
          assert("TypeScript", node, opts);
        }, exports3.assertTypeofTypeAnnotation = function(node, opts) {
          assert("TypeofTypeAnnotation", node, opts);
        }, exports3.assertUnaryExpression = function(node, opts) {
          assert("UnaryExpression", node, opts);
        }, exports3.assertUnaryLike = function(node, opts) {
          assert("UnaryLike", node, opts);
        }, exports3.assertUnionTypeAnnotation = function(node, opts) {
          assert("UnionTypeAnnotation", node, opts);
        }, exports3.assertUpdateExpression = function(node, opts) {
          assert("UpdateExpression", node, opts);
        }, exports3.assertUserWhitespacable = function(node, opts) {
          assert("UserWhitespacable", node, opts);
        }, exports3.assertV8IntrinsicIdentifier = function(node, opts) {
          assert("V8IntrinsicIdentifier", node, opts);
        }, exports3.assertVariableDeclaration = function(node, opts) {
          assert("VariableDeclaration", node, opts);
        }, exports3.assertVariableDeclarator = function(node, opts) {
          assert("VariableDeclarator", node, opts);
        }, exports3.assertVariance = function(node, opts) {
          assert("Variance", node, opts);
        }, exports3.assertVoidTypeAnnotation = function(node, opts) {
          assert("VoidTypeAnnotation", node, opts);
        }, exports3.assertWhile = function(node, opts) {
          assert("While", node, opts);
        }, exports3.assertWhileStatement = function(node, opts) {
          assert("WhileStatement", node, opts);
        }, exports3.assertWithStatement = function(node, opts) {
          assert("WithStatement", node, opts);
        }, exports3.assertYieldExpression = function(node, opts) {
          assert("YieldExpression", node, opts);
        };
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/is.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        function assert(type, node, opts) {
          if (!(0, _is.default)(type, node, opts)) throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`);
        }
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(types) {
          const flattened = (0, _removeTypeDuplicates.default)(types);
          return 1 === flattened.length ? flattened[0] : (0, _index.unionTypeAnnotation)(flattened);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js"), _default = function(type) {
          switch (type) {
            case "string":
              return (0, _index.stringTypeAnnotation)();
            case "number":
              return (0, _index.numberTypeAnnotation)();
            case "undefined":
              return (0, _index.voidTypeAnnotation)();
            case "boolean":
              return (0, _index.booleanTypeAnnotation)();
            case "function":
              return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));
            case "object":
              return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));
            case "symbol":
              return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));
            case "bigint":
              return (0, _index.anyTypeAnnotation)();
          }
          throw new Error("Invalid typeof value: " + type);
        };
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.anyTypeAnnotation = function() {
          return { type: "AnyTypeAnnotation" };
        }, exports3.argumentPlaceholder = function() {
          return { type: "ArgumentPlaceholder" };
        }, exports3.arrayExpression = function(elements = []) {
          return (0, _validateNode.default)({ type: "ArrayExpression", elements });
        }, exports3.arrayPattern = function(elements) {
          return (0, _validateNode.default)({ type: "ArrayPattern", elements });
        }, exports3.arrayTypeAnnotation = function(elementType) {
          return (0, _validateNode.default)({ type: "ArrayTypeAnnotation", elementType });
        }, exports3.arrowFunctionExpression = function(params, body, async = false) {
          return (0, _validateNode.default)({ type: "ArrowFunctionExpression", params, body, async, expression: null });
        }, exports3.assignmentExpression = function(operator, left, right) {
          return (0, _validateNode.default)({ type: "AssignmentExpression", operator, left, right });
        }, exports3.assignmentPattern = function(left, right) {
          return (0, _validateNode.default)({ type: "AssignmentPattern", left, right });
        }, exports3.awaitExpression = function(argument) {
          return (0, _validateNode.default)({ type: "AwaitExpression", argument });
        }, exports3.bigIntLiteral = function(value2) {
          return (0, _validateNode.default)({ type: "BigIntLiteral", value: value2 });
        }, exports3.binaryExpression = function(operator, left, right) {
          return (0, _validateNode.default)({ type: "BinaryExpression", operator, left, right });
        }, exports3.bindExpression = function(object, callee) {
          return (0, _validateNode.default)({ type: "BindExpression", object, callee });
        }, exports3.blockStatement = function(body, directives = []) {
          return (0, _validateNode.default)({ type: "BlockStatement", body, directives });
        }, exports3.booleanLiteral = function(value2) {
          return (0, _validateNode.default)({ type: "BooleanLiteral", value: value2 });
        }, exports3.booleanLiteralTypeAnnotation = function(value2) {
          return (0, _validateNode.default)({ type: "BooleanLiteralTypeAnnotation", value: value2 });
        }, exports3.booleanTypeAnnotation = function() {
          return { type: "BooleanTypeAnnotation" };
        }, exports3.breakStatement = function(label = null) {
          return (0, _validateNode.default)({ type: "BreakStatement", label });
        }, exports3.callExpression = function(callee, _arguments) {
          return (0, _validateNode.default)({ type: "CallExpression", callee, arguments: _arguments });
        }, exports3.catchClause = function(param = null, body) {
          return (0, _validateNode.default)({ type: "CatchClause", param, body });
        }, exports3.classAccessorProperty = function(key, value2 = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
          return (0, _validateNode.default)({ type: "ClassAccessorProperty", key, value: value2, typeAnnotation, decorators, computed, static: _static });
        }, exports3.classBody = function(body) {
          return (0, _validateNode.default)({ type: "ClassBody", body });
        }, exports3.classDeclaration = function(id = null, superClass = null, body, decorators = null) {
          return (0, _validateNode.default)({ type: "ClassDeclaration", id, superClass, body, decorators });
        }, exports3.classExpression = function(id = null, superClass = null, body, decorators = null) {
          return (0, _validateNode.default)({ type: "ClassExpression", id, superClass, body, decorators });
        }, exports3.classImplements = function(id, typeParameters = null) {
          return (0, _validateNode.default)({ type: "ClassImplements", id, typeParameters });
        }, exports3.classMethod = function(kind = "method", key, params, body, computed = false, _static = false, generator = false, async = false) {
          return (0, _validateNode.default)({ type: "ClassMethod", kind, key, params, body, computed, static: _static, generator, async });
        }, exports3.classPrivateMethod = function(kind = "method", key, params, body, _static = false) {
          return (0, _validateNode.default)({ type: "ClassPrivateMethod", kind, key, params, body, static: _static });
        }, exports3.classPrivateProperty = function(key, value2 = null, decorators = null, _static = false) {
          return (0, _validateNode.default)({ type: "ClassPrivateProperty", key, value: value2, decorators, static: _static });
        }, exports3.classProperty = function(key, value2 = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
          return (0, _validateNode.default)({ type: "ClassProperty", key, value: value2, typeAnnotation, decorators, computed, static: _static });
        }, exports3.conditionalExpression = function(test, consequent, alternate) {
          return (0, _validateNode.default)({ type: "ConditionalExpression", test, consequent, alternate });
        }, exports3.continueStatement = function(label = null) {
          return (0, _validateNode.default)({ type: "ContinueStatement", label });
        }, exports3.debuggerStatement = function() {
          return { type: "DebuggerStatement" };
        }, exports3.decimalLiteral = function(value2) {
          return (0, _validateNode.default)({ type: "DecimalLiteral", value: value2 });
        }, exports3.declareClass = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "DeclareClass", id, typeParameters, extends: _extends, body });
        }, exports3.declareExportAllDeclaration = function(source) {
          return (0, _validateNode.default)({ type: "DeclareExportAllDeclaration", source });
        }, exports3.declareExportDeclaration = function(declaration = null, specifiers = null, source = null) {
          return (0, _validateNode.default)({ type: "DeclareExportDeclaration", declaration, specifiers, source });
        }, exports3.declareFunction = function(id) {
          return (0, _validateNode.default)({ type: "DeclareFunction", id });
        }, exports3.declareInterface = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "DeclareInterface", id, typeParameters, extends: _extends, body });
        }, exports3.declareModule = function(id, body, kind = null) {
          return (0, _validateNode.default)({ type: "DeclareModule", id, body, kind });
        }, exports3.declareModuleExports = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "DeclareModuleExports", typeAnnotation });
        }, exports3.declareOpaqueType = function(id, typeParameters = null, supertype = null) {
          return (0, _validateNode.default)({ type: "DeclareOpaqueType", id, typeParameters, supertype });
        }, exports3.declareTypeAlias = function(id, typeParameters = null, right) {
          return (0, _validateNode.default)({ type: "DeclareTypeAlias", id, typeParameters, right });
        }, exports3.declareVariable = function(id) {
          return (0, _validateNode.default)({ type: "DeclareVariable", id });
        }, exports3.declaredPredicate = function(value2) {
          return (0, _validateNode.default)({ type: "DeclaredPredicate", value: value2 });
        }, exports3.decorator = function(expression) {
          return (0, _validateNode.default)({ type: "Decorator", expression });
        }, exports3.directive = function(value2) {
          return (0, _validateNode.default)({ type: "Directive", value: value2 });
        }, exports3.directiveLiteral = function(value2) {
          return (0, _validateNode.default)({ type: "DirectiveLiteral", value: value2 });
        }, exports3.doExpression = function(body, async = false) {
          return (0, _validateNode.default)({ type: "DoExpression", body, async });
        }, exports3.doWhileStatement = function(test, body) {
          return (0, _validateNode.default)({ type: "DoWhileStatement", test, body });
        }, exports3.emptyStatement = function() {
          return { type: "EmptyStatement" };
        }, exports3.emptyTypeAnnotation = function() {
          return { type: "EmptyTypeAnnotation" };
        }, exports3.enumBooleanBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumBooleanBody", members, explicitType: null, hasUnknownMembers: null });
        }, exports3.enumBooleanMember = function(id) {
          return (0, _validateNode.default)({ type: "EnumBooleanMember", id, init: null });
        }, exports3.enumDeclaration = function(id, body) {
          return (0, _validateNode.default)({ type: "EnumDeclaration", id, body });
        }, exports3.enumDefaultedMember = function(id) {
          return (0, _validateNode.default)({ type: "EnumDefaultedMember", id });
        }, exports3.enumNumberBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumNumberBody", members, explicitType: null, hasUnknownMembers: null });
        }, exports3.enumNumberMember = function(id, init) {
          return (0, _validateNode.default)({ type: "EnumNumberMember", id, init });
        }, exports3.enumStringBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumStringBody", members, explicitType: null, hasUnknownMembers: null });
        }, exports3.enumStringMember = function(id, init) {
          return (0, _validateNode.default)({ type: "EnumStringMember", id, init });
        }, exports3.enumSymbolBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumSymbolBody", members, hasUnknownMembers: null });
        }, exports3.existsTypeAnnotation = function() {
          return { type: "ExistsTypeAnnotation" };
        }, exports3.exportAllDeclaration = function(source) {
          return (0, _validateNode.default)({ type: "ExportAllDeclaration", source });
        }, exports3.exportDefaultDeclaration = function(declaration) {
          return (0, _validateNode.default)({ type: "ExportDefaultDeclaration", declaration });
        }, exports3.exportDefaultSpecifier = function(exported) {
          return (0, _validateNode.default)({ type: "ExportDefaultSpecifier", exported });
        }, exports3.exportNamedDeclaration = function(declaration = null, specifiers = [], source = null) {
          return (0, _validateNode.default)({ type: "ExportNamedDeclaration", declaration, specifiers, source });
        }, exports3.exportNamespaceSpecifier = function(exported) {
          return (0, _validateNode.default)({ type: "ExportNamespaceSpecifier", exported });
        }, exports3.exportSpecifier = function(local, exported) {
          return (0, _validateNode.default)({ type: "ExportSpecifier", local, exported });
        }, exports3.expressionStatement = function(expression) {
          return (0, _validateNode.default)({ type: "ExpressionStatement", expression });
        }, exports3.file = function(program, comments = null, tokens = null) {
          return (0, _validateNode.default)({ type: "File", program, comments, tokens });
        }, exports3.forInStatement = function(left, right, body) {
          return (0, _validateNode.default)({ type: "ForInStatement", left, right, body });
        }, exports3.forOfStatement = function(left, right, body, _await = false) {
          return (0, _validateNode.default)({ type: "ForOfStatement", left, right, body, await: _await });
        }, exports3.forStatement = function(init = null, test = null, update = null, body) {
          return (0, _validateNode.default)({ type: "ForStatement", init, test, update, body });
        }, exports3.functionDeclaration = function(id = null, params, body, generator = false, async = false) {
          return (0, _validateNode.default)({ type: "FunctionDeclaration", id, params, body, generator, async });
        }, exports3.functionExpression = function(id = null, params, body, generator = false, async = false) {
          return (0, _validateNode.default)({ type: "FunctionExpression", id, params, body, generator, async });
        }, exports3.functionTypeAnnotation = function(typeParameters = null, params, rest = null, returnType) {
          return (0, _validateNode.default)({ type: "FunctionTypeAnnotation", typeParameters, params, rest, returnType });
        }, exports3.functionTypeParam = function(name = null, typeAnnotation) {
          return (0, _validateNode.default)({ type: "FunctionTypeParam", name, typeAnnotation });
        }, exports3.genericTypeAnnotation = function(id, typeParameters = null) {
          return (0, _validateNode.default)({ type: "GenericTypeAnnotation", id, typeParameters });
        }, exports3.identifier = function(name) {
          return (0, _validateNode.default)({ type: "Identifier", name });
        }, exports3.ifStatement = function(test, consequent, alternate = null) {
          return (0, _validateNode.default)({ type: "IfStatement", test, consequent, alternate });
        }, exports3.import = function() {
          return { type: "Import" };
        }, exports3.importAttribute = function(key, value2) {
          return (0, _validateNode.default)({ type: "ImportAttribute", key, value: value2 });
        }, exports3.importDeclaration = function(specifiers, source) {
          return (0, _validateNode.default)({ type: "ImportDeclaration", specifiers, source });
        }, exports3.importDefaultSpecifier = function(local) {
          return (0, _validateNode.default)({ type: "ImportDefaultSpecifier", local });
        }, exports3.importExpression = function(source, options = null) {
          return (0, _validateNode.default)({ type: "ImportExpression", source, options });
        }, exports3.importNamespaceSpecifier = function(local) {
          return (0, _validateNode.default)({ type: "ImportNamespaceSpecifier", local });
        }, exports3.importSpecifier = function(local, imported) {
          return (0, _validateNode.default)({ type: "ImportSpecifier", local, imported });
        }, exports3.indexedAccessType = function(objectType, indexType) {
          return (0, _validateNode.default)({ type: "IndexedAccessType", objectType, indexType });
        }, exports3.inferredPredicate = function() {
          return { type: "InferredPredicate" };
        }, exports3.interfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "InterfaceDeclaration", id, typeParameters, extends: _extends, body });
        }, exports3.interfaceExtends = function(id, typeParameters = null) {
          return (0, _validateNode.default)({ type: "InterfaceExtends", id, typeParameters });
        }, exports3.interfaceTypeAnnotation = function(_extends = null, body) {
          return (0, _validateNode.default)({ type: "InterfaceTypeAnnotation", extends: _extends, body });
        }, exports3.interpreterDirective = function(value2) {
          return (0, _validateNode.default)({ type: "InterpreterDirective", value: value2 });
        }, exports3.intersectionTypeAnnotation = function(types) {
          return (0, _validateNode.default)({ type: "IntersectionTypeAnnotation", types });
        }, exports3.jSXAttribute = exports3.jsxAttribute = function(name, value2 = null) {
          return (0, _validateNode.default)({ type: "JSXAttribute", name, value: value2 });
        }, exports3.jSXClosingElement = exports3.jsxClosingElement = function(name) {
          return (0, _validateNode.default)({ type: "JSXClosingElement", name });
        }, exports3.jSXClosingFragment = exports3.jsxClosingFragment = function() {
          return { type: "JSXClosingFragment" };
        }, exports3.jSXElement = exports3.jsxElement = function(openingElement, closingElement = null, children, selfClosing = null) {
          return (0, _validateNode.default)({ type: "JSXElement", openingElement, closingElement, children, selfClosing });
        }, exports3.jSXEmptyExpression = exports3.jsxEmptyExpression = function() {
          return { type: "JSXEmptyExpression" };
        }, exports3.jSXExpressionContainer = exports3.jsxExpressionContainer = function(expression) {
          return (0, _validateNode.default)({ type: "JSXExpressionContainer", expression });
        }, exports3.jSXFragment = exports3.jsxFragment = function(openingFragment, closingFragment, children) {
          return (0, _validateNode.default)({ type: "JSXFragment", openingFragment, closingFragment, children });
        }, exports3.jSXIdentifier = exports3.jsxIdentifier = function(name) {
          return (0, _validateNode.default)({ type: "JSXIdentifier", name });
        }, exports3.jSXMemberExpression = exports3.jsxMemberExpression = function(object, property) {
          return (0, _validateNode.default)({ type: "JSXMemberExpression", object, property });
        }, exports3.jSXNamespacedName = exports3.jsxNamespacedName = function(namespace, name) {
          return (0, _validateNode.default)({ type: "JSXNamespacedName", namespace, name });
        }, exports3.jSXOpeningElement = exports3.jsxOpeningElement = function(name, attributes, selfClosing = false) {
          return (0, _validateNode.default)({ type: "JSXOpeningElement", name, attributes, selfClosing });
        }, exports3.jSXOpeningFragment = exports3.jsxOpeningFragment = function() {
          return { type: "JSXOpeningFragment" };
        }, exports3.jSXSpreadAttribute = exports3.jsxSpreadAttribute = function(argument) {
          return (0, _validateNode.default)({ type: "JSXSpreadAttribute", argument });
        }, exports3.jSXSpreadChild = exports3.jsxSpreadChild = function(expression) {
          return (0, _validateNode.default)({ type: "JSXSpreadChild", expression });
        }, exports3.jSXText = exports3.jsxText = function(value2) {
          return (0, _validateNode.default)({ type: "JSXText", value: value2 });
        }, exports3.labeledStatement = function(label, body) {
          return (0, _validateNode.default)({ type: "LabeledStatement", label, body });
        }, exports3.logicalExpression = function(operator, left, right) {
          return (0, _validateNode.default)({ type: "LogicalExpression", operator, left, right });
        }, exports3.memberExpression = function(object, property, computed = false, optional = null) {
          return (0, _validateNode.default)({ type: "MemberExpression", object, property, computed, optional });
        }, exports3.metaProperty = function(meta, property) {
          return (0, _validateNode.default)({ type: "MetaProperty", meta, property });
        }, exports3.mixedTypeAnnotation = function() {
          return { type: "MixedTypeAnnotation" };
        }, exports3.moduleExpression = function(body) {
          return (0, _validateNode.default)({ type: "ModuleExpression", body });
        }, exports3.newExpression = function(callee, _arguments) {
          return (0, _validateNode.default)({ type: "NewExpression", callee, arguments: _arguments });
        }, exports3.noop = function() {
          return { type: "Noop" };
        }, exports3.nullLiteral = function() {
          return { type: "NullLiteral" };
        }, exports3.nullLiteralTypeAnnotation = function() {
          return { type: "NullLiteralTypeAnnotation" };
        }, exports3.nullableTypeAnnotation = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "NullableTypeAnnotation", typeAnnotation });
        }, exports3.numberLiteral = function(value2) {
          return (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type "), numericLiteral(value2);
        }, exports3.numberLiteralTypeAnnotation = function(value2) {
          return (0, _validateNode.default)({ type: "NumberLiteralTypeAnnotation", value: value2 });
        }, exports3.numberTypeAnnotation = function() {
          return { type: "NumberTypeAnnotation" };
        }, exports3.numericLiteral = numericLiteral, exports3.objectExpression = function(properties) {
          return (0, _validateNode.default)({ type: "ObjectExpression", properties });
        }, exports3.objectMethod = function(kind = "method", key, params, body, computed = false, generator = false, async = false) {
          return (0, _validateNode.default)({ type: "ObjectMethod", kind, key, params, body, computed, generator, async });
        }, exports3.objectPattern = function(properties) {
          return (0, _validateNode.default)({ type: "ObjectPattern", properties });
        }, exports3.objectProperty = function(key, value2, computed = false, shorthand = false, decorators = null) {
          return (0, _validateNode.default)({ type: "ObjectProperty", key, value: value2, computed, shorthand, decorators });
        }, exports3.objectTypeAnnotation = function(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
          return (0, _validateNode.default)({ type: "ObjectTypeAnnotation", properties, indexers, callProperties, internalSlots, exact });
        }, exports3.objectTypeCallProperty = function(value2) {
          return (0, _validateNode.default)({ type: "ObjectTypeCallProperty", value: value2, static: null });
        }, exports3.objectTypeIndexer = function(id = null, key, value2, variance = null) {
          return (0, _validateNode.default)({ type: "ObjectTypeIndexer", id, key, value: value2, variance, static: null });
        }, exports3.objectTypeInternalSlot = function(id, value2, optional, _static, method) {
          return (0, _validateNode.default)({ type: "ObjectTypeInternalSlot", id, value: value2, optional, static: _static, method });
        }, exports3.objectTypeProperty = function(key, value2, variance = null) {
          return (0, _validateNode.default)({ type: "ObjectTypeProperty", key, value: value2, variance, kind: null, method: null, optional: null, proto: null, static: null });
        }, exports3.objectTypeSpreadProperty = function(argument) {
          return (0, _validateNode.default)({ type: "ObjectTypeSpreadProperty", argument });
        }, exports3.opaqueType = function(id, typeParameters = null, supertype = null, impltype) {
          return (0, _validateNode.default)({ type: "OpaqueType", id, typeParameters, supertype, impltype });
        }, exports3.optionalCallExpression = function(callee, _arguments, optional) {
          return (0, _validateNode.default)({ type: "OptionalCallExpression", callee, arguments: _arguments, optional });
        }, exports3.optionalIndexedAccessType = function(objectType, indexType) {
          return (0, _validateNode.default)({ type: "OptionalIndexedAccessType", objectType, indexType, optional: null });
        }, exports3.optionalMemberExpression = function(object, property, computed = false, optional) {
          return (0, _validateNode.default)({ type: "OptionalMemberExpression", object, property, computed, optional });
        }, exports3.parenthesizedExpression = function(expression) {
          return (0, _validateNode.default)({ type: "ParenthesizedExpression", expression });
        }, exports3.pipelineBareFunction = function(callee) {
          return (0, _validateNode.default)({ type: "PipelineBareFunction", callee });
        }, exports3.pipelinePrimaryTopicReference = function() {
          return { type: "PipelinePrimaryTopicReference" };
        }, exports3.pipelineTopicExpression = function(expression) {
          return (0, _validateNode.default)({ type: "PipelineTopicExpression", expression });
        }, exports3.placeholder = function(expectedNode, name) {
          return (0, _validateNode.default)({ type: "Placeholder", expectedNode, name });
        }, exports3.privateName = function(id) {
          return (0, _validateNode.default)({ type: "PrivateName", id });
        }, exports3.program = function(body, directives = [], sourceType = "script", interpreter = null) {
          return (0, _validateNode.default)({ type: "Program", body, directives, sourceType, interpreter, sourceFile: null });
        }, exports3.qualifiedTypeIdentifier = function(id, qualification) {
          return (0, _validateNode.default)({ type: "QualifiedTypeIdentifier", id, qualification });
        }, exports3.recordExpression = function(properties) {
          return (0, _validateNode.default)({ type: "RecordExpression", properties });
        }, exports3.regExpLiteral = regExpLiteral, exports3.regexLiteral = function(pattern, flags = "") {
          return (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type "), regExpLiteral(pattern, flags);
        }, exports3.restElement = restElement, exports3.restProperty = function(argument) {
          return (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type "), restElement(argument);
        }, exports3.returnStatement = function(argument = null) {
          return (0, _validateNode.default)({ type: "ReturnStatement", argument });
        }, exports3.sequenceExpression = function(expressions) {
          return (0, _validateNode.default)({ type: "SequenceExpression", expressions });
        }, exports3.spreadElement = spreadElement, exports3.spreadProperty = function(argument) {
          return (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type "), spreadElement(argument);
        }, exports3.staticBlock = function(body) {
          return (0, _validateNode.default)({ type: "StaticBlock", body });
        }, exports3.stringLiteral = function(value2) {
          return (0, _validateNode.default)({ type: "StringLiteral", value: value2 });
        }, exports3.stringLiteralTypeAnnotation = function(value2) {
          return (0, _validateNode.default)({ type: "StringLiteralTypeAnnotation", value: value2 });
        }, exports3.stringTypeAnnotation = function() {
          return { type: "StringTypeAnnotation" };
        }, exports3.super = function() {
          return { type: "Super" };
        }, exports3.switchCase = function(test = null, consequent) {
          return (0, _validateNode.default)({ type: "SwitchCase", test, consequent });
        }, exports3.switchStatement = function(discriminant, cases) {
          return (0, _validateNode.default)({ type: "SwitchStatement", discriminant, cases });
        }, exports3.symbolTypeAnnotation = function() {
          return { type: "SymbolTypeAnnotation" };
        }, exports3.taggedTemplateExpression = function(tag, quasi) {
          return (0, _validateNode.default)({ type: "TaggedTemplateExpression", tag, quasi });
        }, exports3.templateElement = function(value2, tail = false) {
          return (0, _validateNode.default)({ type: "TemplateElement", value: value2, tail });
        }, exports3.templateLiteral = function(quasis, expressions) {
          return (0, _validateNode.default)({ type: "TemplateLiteral", quasis, expressions });
        }, exports3.thisExpression = function() {
          return { type: "ThisExpression" };
        }, exports3.thisTypeAnnotation = function() {
          return { type: "ThisTypeAnnotation" };
        }, exports3.throwStatement = function(argument) {
          return (0, _validateNode.default)({ type: "ThrowStatement", argument });
        }, exports3.topicReference = function() {
          return { type: "TopicReference" };
        }, exports3.tryStatement = function(block, handler = null, finalizer = null) {
          return (0, _validateNode.default)({ type: "TryStatement", block, handler, finalizer });
        }, exports3.tSAnyKeyword = exports3.tsAnyKeyword = function() {
          return { type: "TSAnyKeyword" };
        }, exports3.tSArrayType = exports3.tsArrayType = function(elementType) {
          return (0, _validateNode.default)({ type: "TSArrayType", elementType });
        }, exports3.tSAsExpression = exports3.tsAsExpression = function(expression, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSAsExpression", expression, typeAnnotation });
        }, exports3.tSBigIntKeyword = exports3.tsBigIntKeyword = function() {
          return { type: "TSBigIntKeyword" };
        }, exports3.tSBooleanKeyword = exports3.tsBooleanKeyword = function() {
          return { type: "TSBooleanKeyword" };
        }, exports3.tSCallSignatureDeclaration = exports3.tsCallSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSCallSignatureDeclaration", typeParameters, parameters, typeAnnotation });
        }, exports3.tSConditionalType = exports3.tsConditionalType = function(checkType, extendsType, trueType, falseType) {
          return (0, _validateNode.default)({ type: "TSConditionalType", checkType, extendsType, trueType, falseType });
        }, exports3.tSConstructSignatureDeclaration = exports3.tsConstructSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSConstructSignatureDeclaration", typeParameters, parameters, typeAnnotation });
        }, exports3.tSConstructorType = exports3.tsConstructorType = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSConstructorType", typeParameters, parameters, typeAnnotation });
        }, exports3.tSDeclareFunction = exports3.tsDeclareFunction = function(id = null, typeParameters = null, params, returnType = null) {
          return (0, _validateNode.default)({ type: "TSDeclareFunction", id, typeParameters, params, returnType });
        }, exports3.tSDeclareMethod = exports3.tsDeclareMethod = function(decorators = null, key, typeParameters = null, params, returnType = null) {
          return (0, _validateNode.default)({ type: "TSDeclareMethod", decorators, key, typeParameters, params, returnType });
        }, exports3.tSEnumDeclaration = exports3.tsEnumDeclaration = function(id, members) {
          return (0, _validateNode.default)({ type: "TSEnumDeclaration", id, members });
        }, exports3.tSEnumMember = exports3.tsEnumMember = function(id, initializer = null) {
          return (0, _validateNode.default)({ type: "TSEnumMember", id, initializer });
        }, exports3.tSExportAssignment = exports3.tsExportAssignment = function(expression) {
          return (0, _validateNode.default)({ type: "TSExportAssignment", expression });
        }, exports3.tSExpressionWithTypeArguments = exports3.tsExpressionWithTypeArguments = function(expression, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSExpressionWithTypeArguments", expression, typeParameters });
        }, exports3.tSExternalModuleReference = exports3.tsExternalModuleReference = function(expression) {
          return (0, _validateNode.default)({ type: "TSExternalModuleReference", expression });
        }, exports3.tSFunctionType = exports3.tsFunctionType = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSFunctionType", typeParameters, parameters, typeAnnotation });
        }, exports3.tSImportEqualsDeclaration = exports3.tsImportEqualsDeclaration = function(id, moduleReference) {
          return (0, _validateNode.default)({ type: "TSImportEqualsDeclaration", id, moduleReference, isExport: null });
        }, exports3.tSImportType = exports3.tsImportType = function(argument, qualifier = null, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSImportType", argument, qualifier, typeParameters });
        }, exports3.tSIndexSignature = exports3.tsIndexSignature = function(parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSIndexSignature", parameters, typeAnnotation });
        }, exports3.tSIndexedAccessType = exports3.tsIndexedAccessType = function(objectType, indexType) {
          return (0, _validateNode.default)({ type: "TSIndexedAccessType", objectType, indexType });
        }, exports3.tSInferType = exports3.tsInferType = function(typeParameter) {
          return (0, _validateNode.default)({ type: "TSInferType", typeParameter });
        }, exports3.tSInstantiationExpression = exports3.tsInstantiationExpression = function(expression, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSInstantiationExpression", expression, typeParameters });
        }, exports3.tSInterfaceBody = exports3.tsInterfaceBody = function(body) {
          return (0, _validateNode.default)({ type: "TSInterfaceBody", body });
        }, exports3.tSInterfaceDeclaration = exports3.tsInterfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "TSInterfaceDeclaration", id, typeParameters, extends: _extends, body });
        }, exports3.tSIntersectionType = exports3.tsIntersectionType = function(types) {
          return (0, _validateNode.default)({ type: "TSIntersectionType", types });
        }, exports3.tSIntrinsicKeyword = exports3.tsIntrinsicKeyword = function() {
          return { type: "TSIntrinsicKeyword" };
        }, exports3.tSLiteralType = exports3.tsLiteralType = function(literal) {
          return (0, _validateNode.default)({ type: "TSLiteralType", literal });
        }, exports3.tSMappedType = exports3.tsMappedType = function(typeParameter, typeAnnotation = null, nameType = null) {
          return (0, _validateNode.default)({ type: "TSMappedType", typeParameter, typeAnnotation, nameType });
        }, exports3.tSMethodSignature = exports3.tsMethodSignature = function(key, typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSMethodSignature", key, typeParameters, parameters, typeAnnotation, kind: null });
        }, exports3.tSModuleBlock = exports3.tsModuleBlock = function(body) {
          return (0, _validateNode.default)({ type: "TSModuleBlock", body });
        }, exports3.tSModuleDeclaration = exports3.tsModuleDeclaration = function(id, body) {
          return (0, _validateNode.default)({ type: "TSModuleDeclaration", id, body });
        }, exports3.tSNamedTupleMember = exports3.tsNamedTupleMember = function(label, elementType, optional = false) {
          return (0, _validateNode.default)({ type: "TSNamedTupleMember", label, elementType, optional });
        }, exports3.tSNamespaceExportDeclaration = exports3.tsNamespaceExportDeclaration = function(id) {
          return (0, _validateNode.default)({ type: "TSNamespaceExportDeclaration", id });
        }, exports3.tSNeverKeyword = exports3.tsNeverKeyword = function() {
          return { type: "TSNeverKeyword" };
        }, exports3.tSNonNullExpression = exports3.tsNonNullExpression = function(expression) {
          return (0, _validateNode.default)({ type: "TSNonNullExpression", expression });
        }, exports3.tSNullKeyword = exports3.tsNullKeyword = function() {
          return { type: "TSNullKeyword" };
        }, exports3.tSNumberKeyword = exports3.tsNumberKeyword = function() {
          return { type: "TSNumberKeyword" };
        }, exports3.tSObjectKeyword = exports3.tsObjectKeyword = function() {
          return { type: "TSObjectKeyword" };
        }, exports3.tSOptionalType = exports3.tsOptionalType = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSOptionalType", typeAnnotation });
        }, exports3.tSParameterProperty = exports3.tsParameterProperty = function(parameter) {
          return (0, _validateNode.default)({ type: "TSParameterProperty", parameter });
        }, exports3.tSParenthesizedType = exports3.tsParenthesizedType = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSParenthesizedType", typeAnnotation });
        }, exports3.tSPropertySignature = exports3.tsPropertySignature = function(key, typeAnnotation = null, initializer = null) {
          return (0, _validateNode.default)({ type: "TSPropertySignature", key, typeAnnotation, initializer, kind: null });
        }, exports3.tSQualifiedName = exports3.tsQualifiedName = function(left, right) {
          return (0, _validateNode.default)({ type: "TSQualifiedName", left, right });
        }, exports3.tSRestType = exports3.tsRestType = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSRestType", typeAnnotation });
        }, exports3.tSSatisfiesExpression = exports3.tsSatisfiesExpression = function(expression, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSSatisfiesExpression", expression, typeAnnotation });
        }, exports3.tSStringKeyword = exports3.tsStringKeyword = function() {
          return { type: "TSStringKeyword" };
        }, exports3.tSSymbolKeyword = exports3.tsSymbolKeyword = function() {
          return { type: "TSSymbolKeyword" };
        }, exports3.tSThisType = exports3.tsThisType = function() {
          return { type: "TSThisType" };
        }, exports3.tSTupleType = exports3.tsTupleType = function(elementTypes) {
          return (0, _validateNode.default)({ type: "TSTupleType", elementTypes });
        }, exports3.tSTypeAliasDeclaration = exports3.tsTypeAliasDeclaration = function(id, typeParameters = null, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSTypeAliasDeclaration", id, typeParameters, typeAnnotation });
        }, exports3.tSTypeAnnotation = exports3.tsTypeAnnotation = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSTypeAnnotation", typeAnnotation });
        }, exports3.tSTypeAssertion = exports3.tsTypeAssertion = function(typeAnnotation, expression) {
          return (0, _validateNode.default)({ type: "TSTypeAssertion", typeAnnotation, expression });
        }, exports3.tSTypeLiteral = exports3.tsTypeLiteral = function(members) {
          return (0, _validateNode.default)({ type: "TSTypeLiteral", members });
        }, exports3.tSTypeOperator = exports3.tsTypeOperator = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSTypeOperator", typeAnnotation, operator: null });
        }, exports3.tSTypeParameter = exports3.tsTypeParameter = function(constraint = null, _default = null, name) {
          return (0, _validateNode.default)({ type: "TSTypeParameter", constraint, default: _default, name });
        }, exports3.tSTypeParameterDeclaration = exports3.tsTypeParameterDeclaration = function(params) {
          return (0, _validateNode.default)({ type: "TSTypeParameterDeclaration", params });
        }, exports3.tSTypeParameterInstantiation = exports3.tsTypeParameterInstantiation = function(params) {
          return (0, _validateNode.default)({ type: "TSTypeParameterInstantiation", params });
        }, exports3.tSTypePredicate = exports3.tsTypePredicate = function(parameterName, typeAnnotation = null, asserts = null) {
          return (0, _validateNode.default)({ type: "TSTypePredicate", parameterName, typeAnnotation, asserts });
        }, exports3.tSTypeQuery = exports3.tsTypeQuery = function(exprName, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSTypeQuery", exprName, typeParameters });
        }, exports3.tSTypeReference = exports3.tsTypeReference = function(typeName, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSTypeReference", typeName, typeParameters });
        }, exports3.tSUndefinedKeyword = exports3.tsUndefinedKeyword = function() {
          return { type: "TSUndefinedKeyword" };
        }, exports3.tSUnionType = exports3.tsUnionType = function(types) {
          return (0, _validateNode.default)({ type: "TSUnionType", types });
        }, exports3.tSUnknownKeyword = exports3.tsUnknownKeyword = function() {
          return { type: "TSUnknownKeyword" };
        }, exports3.tSVoidKeyword = exports3.tsVoidKeyword = function() {
          return { type: "TSVoidKeyword" };
        }, exports3.tupleExpression = function(elements = []) {
          return (0, _validateNode.default)({ type: "TupleExpression", elements });
        }, exports3.tupleTypeAnnotation = function(types) {
          return (0, _validateNode.default)({ type: "TupleTypeAnnotation", types });
        }, exports3.typeAlias = function(id, typeParameters = null, right) {
          return (0, _validateNode.default)({ type: "TypeAlias", id, typeParameters, right });
        }, exports3.typeAnnotation = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TypeAnnotation", typeAnnotation });
        }, exports3.typeCastExpression = function(expression, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TypeCastExpression", expression, typeAnnotation });
        }, exports3.typeParameter = function(bound = null, _default = null, variance = null) {
          return (0, _validateNode.default)({ type: "TypeParameter", bound, default: _default, variance, name: null });
        }, exports3.typeParameterDeclaration = function(params) {
          return (0, _validateNode.default)({ type: "TypeParameterDeclaration", params });
        }, exports3.typeParameterInstantiation = function(params) {
          return (0, _validateNode.default)({ type: "TypeParameterInstantiation", params });
        }, exports3.typeofTypeAnnotation = function(argument) {
          return (0, _validateNode.default)({ type: "TypeofTypeAnnotation", argument });
        }, exports3.unaryExpression = function(operator, argument, prefix = true) {
          return (0, _validateNode.default)({ type: "UnaryExpression", operator, argument, prefix });
        }, exports3.unionTypeAnnotation = function(types) {
          return (0, _validateNode.default)({ type: "UnionTypeAnnotation", types });
        }, exports3.updateExpression = function(operator, argument, prefix = false) {
          return (0, _validateNode.default)({ type: "UpdateExpression", operator, argument, prefix });
        }, exports3.v8IntrinsicIdentifier = function(name) {
          return (0, _validateNode.default)({ type: "V8IntrinsicIdentifier", name });
        }, exports3.variableDeclaration = function(kind, declarations) {
          return (0, _validateNode.default)({ type: "VariableDeclaration", kind, declarations });
        }, exports3.variableDeclarator = function(id, init = null) {
          return (0, _validateNode.default)({ type: "VariableDeclarator", id, init });
        }, exports3.variance = function(kind) {
          return (0, _validateNode.default)({ type: "Variance", kind });
        }, exports3.voidTypeAnnotation = function() {
          return { type: "VoidTypeAnnotation" };
        }, exports3.whileStatement = function(test, body) {
          return (0, _validateNode.default)({ type: "WhileStatement", test, body });
        }, exports3.withStatement = function(object, body) {
          return (0, _validateNode.default)({ type: "WithStatement", object, body });
        }, exports3.yieldExpression = function(argument = null, delegate = false) {
          return (0, _validateNode.default)({ type: "YieldExpression", argument, delegate });
        };
        var _validateNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/validateNode.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        function numericLiteral(value2) {
          return (0, _validateNode.default)({ type: "NumericLiteral", value: value2 });
        }
        function regExpLiteral(pattern, flags = "") {
          return (0, _validateNode.default)({ type: "RegExpLiteral", pattern, flags });
        }
        function restElement(argument) {
          return (0, _validateNode.default)({ type: "RestElement", argument });
        }
        function spreadElement(argument) {
          return (0, _validateNode.default)({ type: "SpreadElement", argument });
        }
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/uppercase.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "AnyTypeAnnotation", { enumerable: true, get: function() {
          return _index.anyTypeAnnotation;
        } }), Object.defineProperty(exports3, "ArgumentPlaceholder", { enumerable: true, get: function() {
          return _index.argumentPlaceholder;
        } }), Object.defineProperty(exports3, "ArrayExpression", { enumerable: true, get: function() {
          return _index.arrayExpression;
        } }), Object.defineProperty(exports3, "ArrayPattern", { enumerable: true, get: function() {
          return _index.arrayPattern;
        } }), Object.defineProperty(exports3, "ArrayTypeAnnotation", { enumerable: true, get: function() {
          return _index.arrayTypeAnnotation;
        } }), Object.defineProperty(exports3, "ArrowFunctionExpression", { enumerable: true, get: function() {
          return _index.arrowFunctionExpression;
        } }), Object.defineProperty(exports3, "AssignmentExpression", { enumerable: true, get: function() {
          return _index.assignmentExpression;
        } }), Object.defineProperty(exports3, "AssignmentPattern", { enumerable: true, get: function() {
          return _index.assignmentPattern;
        } }), Object.defineProperty(exports3, "AwaitExpression", { enumerable: true, get: function() {
          return _index.awaitExpression;
        } }), Object.defineProperty(exports3, "BigIntLiteral", { enumerable: true, get: function() {
          return _index.bigIntLiteral;
        } }), Object.defineProperty(exports3, "BinaryExpression", { enumerable: true, get: function() {
          return _index.binaryExpression;
        } }), Object.defineProperty(exports3, "BindExpression", { enumerable: true, get: function() {
          return _index.bindExpression;
        } }), Object.defineProperty(exports3, "BlockStatement", { enumerable: true, get: function() {
          return _index.blockStatement;
        } }), Object.defineProperty(exports3, "BooleanLiteral", { enumerable: true, get: function() {
          return _index.booleanLiteral;
        } }), Object.defineProperty(exports3, "BooleanLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.booleanLiteralTypeAnnotation;
        } }), Object.defineProperty(exports3, "BooleanTypeAnnotation", { enumerable: true, get: function() {
          return _index.booleanTypeAnnotation;
        } }), Object.defineProperty(exports3, "BreakStatement", { enumerable: true, get: function() {
          return _index.breakStatement;
        } }), Object.defineProperty(exports3, "CallExpression", { enumerable: true, get: function() {
          return _index.callExpression;
        } }), Object.defineProperty(exports3, "CatchClause", { enumerable: true, get: function() {
          return _index.catchClause;
        } }), Object.defineProperty(exports3, "ClassAccessorProperty", { enumerable: true, get: function() {
          return _index.classAccessorProperty;
        } }), Object.defineProperty(exports3, "ClassBody", { enumerable: true, get: function() {
          return _index.classBody;
        } }), Object.defineProperty(exports3, "ClassDeclaration", { enumerable: true, get: function() {
          return _index.classDeclaration;
        } }), Object.defineProperty(exports3, "ClassExpression", { enumerable: true, get: function() {
          return _index.classExpression;
        } }), Object.defineProperty(exports3, "ClassImplements", { enumerable: true, get: function() {
          return _index.classImplements;
        } }), Object.defineProperty(exports3, "ClassMethod", { enumerable: true, get: function() {
          return _index.classMethod;
        } }), Object.defineProperty(exports3, "ClassPrivateMethod", { enumerable: true, get: function() {
          return _index.classPrivateMethod;
        } }), Object.defineProperty(exports3, "ClassPrivateProperty", { enumerable: true, get: function() {
          return _index.classPrivateProperty;
        } }), Object.defineProperty(exports3, "ClassProperty", { enumerable: true, get: function() {
          return _index.classProperty;
        } }), Object.defineProperty(exports3, "ConditionalExpression", { enumerable: true, get: function() {
          return _index.conditionalExpression;
        } }), Object.defineProperty(exports3, "ContinueStatement", { enumerable: true, get: function() {
          return _index.continueStatement;
        } }), Object.defineProperty(exports3, "DebuggerStatement", { enumerable: true, get: function() {
          return _index.debuggerStatement;
        } }), Object.defineProperty(exports3, "DecimalLiteral", { enumerable: true, get: function() {
          return _index.decimalLiteral;
        } }), Object.defineProperty(exports3, "DeclareClass", { enumerable: true, get: function() {
          return _index.declareClass;
        } }), Object.defineProperty(exports3, "DeclareExportAllDeclaration", { enumerable: true, get: function() {
          return _index.declareExportAllDeclaration;
        } }), Object.defineProperty(exports3, "DeclareExportDeclaration", { enumerable: true, get: function() {
          return _index.declareExportDeclaration;
        } }), Object.defineProperty(exports3, "DeclareFunction", { enumerable: true, get: function() {
          return _index.declareFunction;
        } }), Object.defineProperty(exports3, "DeclareInterface", { enumerable: true, get: function() {
          return _index.declareInterface;
        } }), Object.defineProperty(exports3, "DeclareModule", { enumerable: true, get: function() {
          return _index.declareModule;
        } }), Object.defineProperty(exports3, "DeclareModuleExports", { enumerable: true, get: function() {
          return _index.declareModuleExports;
        } }), Object.defineProperty(exports3, "DeclareOpaqueType", { enumerable: true, get: function() {
          return _index.declareOpaqueType;
        } }), Object.defineProperty(exports3, "DeclareTypeAlias", { enumerable: true, get: function() {
          return _index.declareTypeAlias;
        } }), Object.defineProperty(exports3, "DeclareVariable", { enumerable: true, get: function() {
          return _index.declareVariable;
        } }), Object.defineProperty(exports3, "DeclaredPredicate", { enumerable: true, get: function() {
          return _index.declaredPredicate;
        } }), Object.defineProperty(exports3, "Decorator", { enumerable: true, get: function() {
          return _index.decorator;
        } }), Object.defineProperty(exports3, "Directive", { enumerable: true, get: function() {
          return _index.directive;
        } }), Object.defineProperty(exports3, "DirectiveLiteral", { enumerable: true, get: function() {
          return _index.directiveLiteral;
        } }), Object.defineProperty(exports3, "DoExpression", { enumerable: true, get: function() {
          return _index.doExpression;
        } }), Object.defineProperty(exports3, "DoWhileStatement", { enumerable: true, get: function() {
          return _index.doWhileStatement;
        } }), Object.defineProperty(exports3, "EmptyStatement", { enumerable: true, get: function() {
          return _index.emptyStatement;
        } }), Object.defineProperty(exports3, "EmptyTypeAnnotation", { enumerable: true, get: function() {
          return _index.emptyTypeAnnotation;
        } }), Object.defineProperty(exports3, "EnumBooleanBody", { enumerable: true, get: function() {
          return _index.enumBooleanBody;
        } }), Object.defineProperty(exports3, "EnumBooleanMember", { enumerable: true, get: function() {
          return _index.enumBooleanMember;
        } }), Object.defineProperty(exports3, "EnumDeclaration", { enumerable: true, get: function() {
          return _index.enumDeclaration;
        } }), Object.defineProperty(exports3, "EnumDefaultedMember", { enumerable: true, get: function() {
          return _index.enumDefaultedMember;
        } }), Object.defineProperty(exports3, "EnumNumberBody", { enumerable: true, get: function() {
          return _index.enumNumberBody;
        } }), Object.defineProperty(exports3, "EnumNumberMember", { enumerable: true, get: function() {
          return _index.enumNumberMember;
        } }), Object.defineProperty(exports3, "EnumStringBody", { enumerable: true, get: function() {
          return _index.enumStringBody;
        } }), Object.defineProperty(exports3, "EnumStringMember", { enumerable: true, get: function() {
          return _index.enumStringMember;
        } }), Object.defineProperty(exports3, "EnumSymbolBody", { enumerable: true, get: function() {
          return _index.enumSymbolBody;
        } }), Object.defineProperty(exports3, "ExistsTypeAnnotation", { enumerable: true, get: function() {
          return _index.existsTypeAnnotation;
        } }), Object.defineProperty(exports3, "ExportAllDeclaration", { enumerable: true, get: function() {
          return _index.exportAllDeclaration;
        } }), Object.defineProperty(exports3, "ExportDefaultDeclaration", { enumerable: true, get: function() {
          return _index.exportDefaultDeclaration;
        } }), Object.defineProperty(exports3, "ExportDefaultSpecifier", { enumerable: true, get: function() {
          return _index.exportDefaultSpecifier;
        } }), Object.defineProperty(exports3, "ExportNamedDeclaration", { enumerable: true, get: function() {
          return _index.exportNamedDeclaration;
        } }), Object.defineProperty(exports3, "ExportNamespaceSpecifier", { enumerable: true, get: function() {
          return _index.exportNamespaceSpecifier;
        } }), Object.defineProperty(exports3, "ExportSpecifier", { enumerable: true, get: function() {
          return _index.exportSpecifier;
        } }), Object.defineProperty(exports3, "ExpressionStatement", { enumerable: true, get: function() {
          return _index.expressionStatement;
        } }), Object.defineProperty(exports3, "File", { enumerable: true, get: function() {
          return _index.file;
        } }), Object.defineProperty(exports3, "ForInStatement", { enumerable: true, get: function() {
          return _index.forInStatement;
        } }), Object.defineProperty(exports3, "ForOfStatement", { enumerable: true, get: function() {
          return _index.forOfStatement;
        } }), Object.defineProperty(exports3, "ForStatement", { enumerable: true, get: function() {
          return _index.forStatement;
        } }), Object.defineProperty(exports3, "FunctionDeclaration", { enumerable: true, get: function() {
          return _index.functionDeclaration;
        } }), Object.defineProperty(exports3, "FunctionExpression", { enumerable: true, get: function() {
          return _index.functionExpression;
        } }), Object.defineProperty(exports3, "FunctionTypeAnnotation", { enumerable: true, get: function() {
          return _index.functionTypeAnnotation;
        } }), Object.defineProperty(exports3, "FunctionTypeParam", { enumerable: true, get: function() {
          return _index.functionTypeParam;
        } }), Object.defineProperty(exports3, "GenericTypeAnnotation", { enumerable: true, get: function() {
          return _index.genericTypeAnnotation;
        } }), Object.defineProperty(exports3, "Identifier", { enumerable: true, get: function() {
          return _index.identifier;
        } }), Object.defineProperty(exports3, "IfStatement", { enumerable: true, get: function() {
          return _index.ifStatement;
        } }), Object.defineProperty(exports3, "Import", { enumerable: true, get: function() {
          return _index.import;
        } }), Object.defineProperty(exports3, "ImportAttribute", { enumerable: true, get: function() {
          return _index.importAttribute;
        } }), Object.defineProperty(exports3, "ImportDeclaration", { enumerable: true, get: function() {
          return _index.importDeclaration;
        } }), Object.defineProperty(exports3, "ImportDefaultSpecifier", { enumerable: true, get: function() {
          return _index.importDefaultSpecifier;
        } }), Object.defineProperty(exports3, "ImportExpression", { enumerable: true, get: function() {
          return _index.importExpression;
        } }), Object.defineProperty(exports3, "ImportNamespaceSpecifier", { enumerable: true, get: function() {
          return _index.importNamespaceSpecifier;
        } }), Object.defineProperty(exports3, "ImportSpecifier", { enumerable: true, get: function() {
          return _index.importSpecifier;
        } }), Object.defineProperty(exports3, "IndexedAccessType", { enumerable: true, get: function() {
          return _index.indexedAccessType;
        } }), Object.defineProperty(exports3, "InferredPredicate", { enumerable: true, get: function() {
          return _index.inferredPredicate;
        } }), Object.defineProperty(exports3, "InterfaceDeclaration", { enumerable: true, get: function() {
          return _index.interfaceDeclaration;
        } }), Object.defineProperty(exports3, "InterfaceExtends", { enumerable: true, get: function() {
          return _index.interfaceExtends;
        } }), Object.defineProperty(exports3, "InterfaceTypeAnnotation", { enumerable: true, get: function() {
          return _index.interfaceTypeAnnotation;
        } }), Object.defineProperty(exports3, "InterpreterDirective", { enumerable: true, get: function() {
          return _index.interpreterDirective;
        } }), Object.defineProperty(exports3, "IntersectionTypeAnnotation", { enumerable: true, get: function() {
          return _index.intersectionTypeAnnotation;
        } }), Object.defineProperty(exports3, "JSXAttribute", { enumerable: true, get: function() {
          return _index.jsxAttribute;
        } }), Object.defineProperty(exports3, "JSXClosingElement", { enumerable: true, get: function() {
          return _index.jsxClosingElement;
        } }), Object.defineProperty(exports3, "JSXClosingFragment", { enumerable: true, get: function() {
          return _index.jsxClosingFragment;
        } }), Object.defineProperty(exports3, "JSXElement", { enumerable: true, get: function() {
          return _index.jsxElement;
        } }), Object.defineProperty(exports3, "JSXEmptyExpression", { enumerable: true, get: function() {
          return _index.jsxEmptyExpression;
        } }), Object.defineProperty(exports3, "JSXExpressionContainer", { enumerable: true, get: function() {
          return _index.jsxExpressionContainer;
        } }), Object.defineProperty(exports3, "JSXFragment", { enumerable: true, get: function() {
          return _index.jsxFragment;
        } }), Object.defineProperty(exports3, "JSXIdentifier", { enumerable: true, get: function() {
          return _index.jsxIdentifier;
        } }), Object.defineProperty(exports3, "JSXMemberExpression", { enumerable: true, get: function() {
          return _index.jsxMemberExpression;
        } }), Object.defineProperty(exports3, "JSXNamespacedName", { enumerable: true, get: function() {
          return _index.jsxNamespacedName;
        } }), Object.defineProperty(exports3, "JSXOpeningElement", { enumerable: true, get: function() {
          return _index.jsxOpeningElement;
        } }), Object.defineProperty(exports3, "JSXOpeningFragment", { enumerable: true, get: function() {
          return _index.jsxOpeningFragment;
        } }), Object.defineProperty(exports3, "JSXSpreadAttribute", { enumerable: true, get: function() {
          return _index.jsxSpreadAttribute;
        } }), Object.defineProperty(exports3, "JSXSpreadChild", { enumerable: true, get: function() {
          return _index.jsxSpreadChild;
        } }), Object.defineProperty(exports3, "JSXText", { enumerable: true, get: function() {
          return _index.jsxText;
        } }), Object.defineProperty(exports3, "LabeledStatement", { enumerable: true, get: function() {
          return _index.labeledStatement;
        } }), Object.defineProperty(exports3, "LogicalExpression", { enumerable: true, get: function() {
          return _index.logicalExpression;
        } }), Object.defineProperty(exports3, "MemberExpression", { enumerable: true, get: function() {
          return _index.memberExpression;
        } }), Object.defineProperty(exports3, "MetaProperty", { enumerable: true, get: function() {
          return _index.metaProperty;
        } }), Object.defineProperty(exports3, "MixedTypeAnnotation", { enumerable: true, get: function() {
          return _index.mixedTypeAnnotation;
        } }), Object.defineProperty(exports3, "ModuleExpression", { enumerable: true, get: function() {
          return _index.moduleExpression;
        } }), Object.defineProperty(exports3, "NewExpression", { enumerable: true, get: function() {
          return _index.newExpression;
        } }), Object.defineProperty(exports3, "Noop", { enumerable: true, get: function() {
          return _index.noop;
        } }), Object.defineProperty(exports3, "NullLiteral", { enumerable: true, get: function() {
          return _index.nullLiteral;
        } }), Object.defineProperty(exports3, "NullLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.nullLiteralTypeAnnotation;
        } }), Object.defineProperty(exports3, "NullableTypeAnnotation", { enumerable: true, get: function() {
          return _index.nullableTypeAnnotation;
        } }), Object.defineProperty(exports3, "NumberLiteral", { enumerable: true, get: function() {
          return _index.numberLiteral;
        } }), Object.defineProperty(exports3, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.numberLiteralTypeAnnotation;
        } }), Object.defineProperty(exports3, "NumberTypeAnnotation", { enumerable: true, get: function() {
          return _index.numberTypeAnnotation;
        } }), Object.defineProperty(exports3, "NumericLiteral", { enumerable: true, get: function() {
          return _index.numericLiteral;
        } }), Object.defineProperty(exports3, "ObjectExpression", { enumerable: true, get: function() {
          return _index.objectExpression;
        } }), Object.defineProperty(exports3, "ObjectMethod", { enumerable: true, get: function() {
          return _index.objectMethod;
        } }), Object.defineProperty(exports3, "ObjectPattern", { enumerable: true, get: function() {
          return _index.objectPattern;
        } }), Object.defineProperty(exports3, "ObjectProperty", { enumerable: true, get: function() {
          return _index.objectProperty;
        } }), Object.defineProperty(exports3, "ObjectTypeAnnotation", { enumerable: true, get: function() {
          return _index.objectTypeAnnotation;
        } }), Object.defineProperty(exports3, "ObjectTypeCallProperty", { enumerable: true, get: function() {
          return _index.objectTypeCallProperty;
        } }), Object.defineProperty(exports3, "ObjectTypeIndexer", { enumerable: true, get: function() {
          return _index.objectTypeIndexer;
        } }), Object.defineProperty(exports3, "ObjectTypeInternalSlot", { enumerable: true, get: function() {
          return _index.objectTypeInternalSlot;
        } }), Object.defineProperty(exports3, "ObjectTypeProperty", { enumerable: true, get: function() {
          return _index.objectTypeProperty;
        } }), Object.defineProperty(exports3, "ObjectTypeSpreadProperty", { enumerable: true, get: function() {
          return _index.objectTypeSpreadProperty;
        } }), Object.defineProperty(exports3, "OpaqueType", { enumerable: true, get: function() {
          return _index.opaqueType;
        } }), Object.defineProperty(exports3, "OptionalCallExpression", { enumerable: true, get: function() {
          return _index.optionalCallExpression;
        } }), Object.defineProperty(exports3, "OptionalIndexedAccessType", { enumerable: true, get: function() {
          return _index.optionalIndexedAccessType;
        } }), Object.defineProperty(exports3, "OptionalMemberExpression", { enumerable: true, get: function() {
          return _index.optionalMemberExpression;
        } }), Object.defineProperty(exports3, "ParenthesizedExpression", { enumerable: true, get: function() {
          return _index.parenthesizedExpression;
        } }), Object.defineProperty(exports3, "PipelineBareFunction", { enumerable: true, get: function() {
          return _index.pipelineBareFunction;
        } }), Object.defineProperty(exports3, "PipelinePrimaryTopicReference", { enumerable: true, get: function() {
          return _index.pipelinePrimaryTopicReference;
        } }), Object.defineProperty(exports3, "PipelineTopicExpression", { enumerable: true, get: function() {
          return _index.pipelineTopicExpression;
        } }), Object.defineProperty(exports3, "Placeholder", { enumerable: true, get: function() {
          return _index.placeholder;
        } }), Object.defineProperty(exports3, "PrivateName", { enumerable: true, get: function() {
          return _index.privateName;
        } }), Object.defineProperty(exports3, "Program", { enumerable: true, get: function() {
          return _index.program;
        } }), Object.defineProperty(exports3, "QualifiedTypeIdentifier", { enumerable: true, get: function() {
          return _index.qualifiedTypeIdentifier;
        } }), Object.defineProperty(exports3, "RecordExpression", { enumerable: true, get: function() {
          return _index.recordExpression;
        } }), Object.defineProperty(exports3, "RegExpLiteral", { enumerable: true, get: function() {
          return _index.regExpLiteral;
        } }), Object.defineProperty(exports3, "RegexLiteral", { enumerable: true, get: function() {
          return _index.regexLiteral;
        } }), Object.defineProperty(exports3, "RestElement", { enumerable: true, get: function() {
          return _index.restElement;
        } }), Object.defineProperty(exports3, "RestProperty", { enumerable: true, get: function() {
          return _index.restProperty;
        } }), Object.defineProperty(exports3, "ReturnStatement", { enumerable: true, get: function() {
          return _index.returnStatement;
        } }), Object.defineProperty(exports3, "SequenceExpression", { enumerable: true, get: function() {
          return _index.sequenceExpression;
        } }), Object.defineProperty(exports3, "SpreadElement", { enumerable: true, get: function() {
          return _index.spreadElement;
        } }), Object.defineProperty(exports3, "SpreadProperty", { enumerable: true, get: function() {
          return _index.spreadProperty;
        } }), Object.defineProperty(exports3, "StaticBlock", { enumerable: true, get: function() {
          return _index.staticBlock;
        } }), Object.defineProperty(exports3, "StringLiteral", { enumerable: true, get: function() {
          return _index.stringLiteral;
        } }), Object.defineProperty(exports3, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.stringLiteralTypeAnnotation;
        } }), Object.defineProperty(exports3, "StringTypeAnnotation", { enumerable: true, get: function() {
          return _index.stringTypeAnnotation;
        } }), Object.defineProperty(exports3, "Super", { enumerable: true, get: function() {
          return _index.super;
        } }), Object.defineProperty(exports3, "SwitchCase", { enumerable: true, get: function() {
          return _index.switchCase;
        } }), Object.defineProperty(exports3, "SwitchStatement", { enumerable: true, get: function() {
          return _index.switchStatement;
        } }), Object.defineProperty(exports3, "SymbolTypeAnnotation", { enumerable: true, get: function() {
          return _index.symbolTypeAnnotation;
        } }), Object.defineProperty(exports3, "TSAnyKeyword", { enumerable: true, get: function() {
          return _index.tsAnyKeyword;
        } }), Object.defineProperty(exports3, "TSArrayType", { enumerable: true, get: function() {
          return _index.tsArrayType;
        } }), Object.defineProperty(exports3, "TSAsExpression", { enumerable: true, get: function() {
          return _index.tsAsExpression;
        } }), Object.defineProperty(exports3, "TSBigIntKeyword", { enumerable: true, get: function() {
          return _index.tsBigIntKeyword;
        } }), Object.defineProperty(exports3, "TSBooleanKeyword", { enumerable: true, get: function() {
          return _index.tsBooleanKeyword;
        } }), Object.defineProperty(exports3, "TSCallSignatureDeclaration", { enumerable: true, get: function() {
          return _index.tsCallSignatureDeclaration;
        } }), Object.defineProperty(exports3, "TSConditionalType", { enumerable: true, get: function() {
          return _index.tsConditionalType;
        } }), Object.defineProperty(exports3, "TSConstructSignatureDeclaration", { enumerable: true, get: function() {
          return _index.tsConstructSignatureDeclaration;
        } }), Object.defineProperty(exports3, "TSConstructorType", { enumerable: true, get: function() {
          return _index.tsConstructorType;
        } }), Object.defineProperty(exports3, "TSDeclareFunction", { enumerable: true, get: function() {
          return _index.tsDeclareFunction;
        } }), Object.defineProperty(exports3, "TSDeclareMethod", { enumerable: true, get: function() {
          return _index.tsDeclareMethod;
        } }), Object.defineProperty(exports3, "TSEnumDeclaration", { enumerable: true, get: function() {
          return _index.tsEnumDeclaration;
        } }), Object.defineProperty(exports3, "TSEnumMember", { enumerable: true, get: function() {
          return _index.tsEnumMember;
        } }), Object.defineProperty(exports3, "TSExportAssignment", { enumerable: true, get: function() {
          return _index.tsExportAssignment;
        } }), Object.defineProperty(exports3, "TSExpressionWithTypeArguments", { enumerable: true, get: function() {
          return _index.tsExpressionWithTypeArguments;
        } }), Object.defineProperty(exports3, "TSExternalModuleReference", { enumerable: true, get: function() {
          return _index.tsExternalModuleReference;
        } }), Object.defineProperty(exports3, "TSFunctionType", { enumerable: true, get: function() {
          return _index.tsFunctionType;
        } }), Object.defineProperty(exports3, "TSImportEqualsDeclaration", { enumerable: true, get: function() {
          return _index.tsImportEqualsDeclaration;
        } }), Object.defineProperty(exports3, "TSImportType", { enumerable: true, get: function() {
          return _index.tsImportType;
        } }), Object.defineProperty(exports3, "TSIndexSignature", { enumerable: true, get: function() {
          return _index.tsIndexSignature;
        } }), Object.defineProperty(exports3, "TSIndexedAccessType", { enumerable: true, get: function() {
          return _index.tsIndexedAccessType;
        } }), Object.defineProperty(exports3, "TSInferType", { enumerable: true, get: function() {
          return _index.tsInferType;
        } }), Object.defineProperty(exports3, "TSInstantiationExpression", { enumerable: true, get: function() {
          return _index.tsInstantiationExpression;
        } }), Object.defineProperty(exports3, "TSInterfaceBody", { enumerable: true, get: function() {
          return _index.tsInterfaceBody;
        } }), Object.defineProperty(exports3, "TSInterfaceDeclaration", { enumerable: true, get: function() {
          return _index.tsInterfaceDeclaration;
        } }), Object.defineProperty(exports3, "TSIntersectionType", { enumerable: true, get: function() {
          return _index.tsIntersectionType;
        } }), Object.defineProperty(exports3, "TSIntrinsicKeyword", { enumerable: true, get: function() {
          return _index.tsIntrinsicKeyword;
        } }), Object.defineProperty(exports3, "TSLiteralType", { enumerable: true, get: function() {
          return _index.tsLiteralType;
        } }), Object.defineProperty(exports3, "TSMappedType", { enumerable: true, get: function() {
          return _index.tsMappedType;
        } }), Object.defineProperty(exports3, "TSMethodSignature", { enumerable: true, get: function() {
          return _index.tsMethodSignature;
        } }), Object.defineProperty(exports3, "TSModuleBlock", { enumerable: true, get: function() {
          return _index.tsModuleBlock;
        } }), Object.defineProperty(exports3, "TSModuleDeclaration", { enumerable: true, get: function() {
          return _index.tsModuleDeclaration;
        } }), Object.defineProperty(exports3, "TSNamedTupleMember", { enumerable: true, get: function() {
          return _index.tsNamedTupleMember;
        } }), Object.defineProperty(exports3, "TSNamespaceExportDeclaration", { enumerable: true, get: function() {
          return _index.tsNamespaceExportDeclaration;
        } }), Object.defineProperty(exports3, "TSNeverKeyword", { enumerable: true, get: function() {
          return _index.tsNeverKeyword;
        } }), Object.defineProperty(exports3, "TSNonNullExpression", { enumerable: true, get: function() {
          return _index.tsNonNullExpression;
        } }), Object.defineProperty(exports3, "TSNullKeyword", { enumerable: true, get: function() {
          return _index.tsNullKeyword;
        } }), Object.defineProperty(exports3, "TSNumberKeyword", { enumerable: true, get: function() {
          return _index.tsNumberKeyword;
        } }), Object.defineProperty(exports3, "TSObjectKeyword", { enumerable: true, get: function() {
          return _index.tsObjectKeyword;
        } }), Object.defineProperty(exports3, "TSOptionalType", { enumerable: true, get: function() {
          return _index.tsOptionalType;
        } }), Object.defineProperty(exports3, "TSParameterProperty", { enumerable: true, get: function() {
          return _index.tsParameterProperty;
        } }), Object.defineProperty(exports3, "TSParenthesizedType", { enumerable: true, get: function() {
          return _index.tsParenthesizedType;
        } }), Object.defineProperty(exports3, "TSPropertySignature", { enumerable: true, get: function() {
          return _index.tsPropertySignature;
        } }), Object.defineProperty(exports3, "TSQualifiedName", { enumerable: true, get: function() {
          return _index.tsQualifiedName;
        } }), Object.defineProperty(exports3, "TSRestType", { enumerable: true, get: function() {
          return _index.tsRestType;
        } }), Object.defineProperty(exports3, "TSSatisfiesExpression", { enumerable: true, get: function() {
          return _index.tsSatisfiesExpression;
        } }), Object.defineProperty(exports3, "TSStringKeyword", { enumerable: true, get: function() {
          return _index.tsStringKeyword;
        } }), Object.defineProperty(exports3, "TSSymbolKeyword", { enumerable: true, get: function() {
          return _index.tsSymbolKeyword;
        } }), Object.defineProperty(exports3, "TSThisType", { enumerable: true, get: function() {
          return _index.tsThisType;
        } }), Object.defineProperty(exports3, "TSTupleType", { enumerable: true, get: function() {
          return _index.tsTupleType;
        } }), Object.defineProperty(exports3, "TSTypeAliasDeclaration", { enumerable: true, get: function() {
          return _index.tsTypeAliasDeclaration;
        } }), Object.defineProperty(exports3, "TSTypeAnnotation", { enumerable: true, get: function() {
          return _index.tsTypeAnnotation;
        } }), Object.defineProperty(exports3, "TSTypeAssertion", { enumerable: true, get: function() {
          return _index.tsTypeAssertion;
        } }), Object.defineProperty(exports3, "TSTypeLiteral", { enumerable: true, get: function() {
          return _index.tsTypeLiteral;
        } }), Object.defineProperty(exports3, "TSTypeOperator", { enumerable: true, get: function() {
          return _index.tsTypeOperator;
        } }), Object.defineProperty(exports3, "TSTypeParameter", { enumerable: true, get: function() {
          return _index.tsTypeParameter;
        } }), Object.defineProperty(exports3, "TSTypeParameterDeclaration", { enumerable: true, get: function() {
          return _index.tsTypeParameterDeclaration;
        } }), Object.defineProperty(exports3, "TSTypeParameterInstantiation", { enumerable: true, get: function() {
          return _index.tsTypeParameterInstantiation;
        } }), Object.defineProperty(exports3, "TSTypePredicate", { enumerable: true, get: function() {
          return _index.tsTypePredicate;
        } }), Object.defineProperty(exports3, "TSTypeQuery", { enumerable: true, get: function() {
          return _index.tsTypeQuery;
        } }), Object.defineProperty(exports3, "TSTypeReference", { enumerable: true, get: function() {
          return _index.tsTypeReference;
        } }), Object.defineProperty(exports3, "TSUndefinedKeyword", { enumerable: true, get: function() {
          return _index.tsUndefinedKeyword;
        } }), Object.defineProperty(exports3, "TSUnionType", { enumerable: true, get: function() {
          return _index.tsUnionType;
        } }), Object.defineProperty(exports3, "TSUnknownKeyword", { enumerable: true, get: function() {
          return _index.tsUnknownKeyword;
        } }), Object.defineProperty(exports3, "TSVoidKeyword", { enumerable: true, get: function() {
          return _index.tsVoidKeyword;
        } }), Object.defineProperty(exports3, "TaggedTemplateExpression", { enumerable: true, get: function() {
          return _index.taggedTemplateExpression;
        } }), Object.defineProperty(exports3, "TemplateElement", { enumerable: true, get: function() {
          return _index.templateElement;
        } }), Object.defineProperty(exports3, "TemplateLiteral", { enumerable: true, get: function() {
          return _index.templateLiteral;
        } }), Object.defineProperty(exports3, "ThisExpression", { enumerable: true, get: function() {
          return _index.thisExpression;
        } }), Object.defineProperty(exports3, "ThisTypeAnnotation", { enumerable: true, get: function() {
          return _index.thisTypeAnnotation;
        } }), Object.defineProperty(exports3, "ThrowStatement", { enumerable: true, get: function() {
          return _index.throwStatement;
        } }), Object.defineProperty(exports3, "TopicReference", { enumerable: true, get: function() {
          return _index.topicReference;
        } }), Object.defineProperty(exports3, "TryStatement", { enumerable: true, get: function() {
          return _index.tryStatement;
        } }), Object.defineProperty(exports3, "TupleExpression", { enumerable: true, get: function() {
          return _index.tupleExpression;
        } }), Object.defineProperty(exports3, "TupleTypeAnnotation", { enumerable: true, get: function() {
          return _index.tupleTypeAnnotation;
        } }), Object.defineProperty(exports3, "TypeAlias", { enumerable: true, get: function() {
          return _index.typeAlias;
        } }), Object.defineProperty(exports3, "TypeAnnotation", { enumerable: true, get: function() {
          return _index.typeAnnotation;
        } }), Object.defineProperty(exports3, "TypeCastExpression", { enumerable: true, get: function() {
          return _index.typeCastExpression;
        } }), Object.defineProperty(exports3, "TypeParameter", { enumerable: true, get: function() {
          return _index.typeParameter;
        } }), Object.defineProperty(exports3, "TypeParameterDeclaration", { enumerable: true, get: function() {
          return _index.typeParameterDeclaration;
        } }), Object.defineProperty(exports3, "TypeParameterInstantiation", { enumerable: true, get: function() {
          return _index.typeParameterInstantiation;
        } }), Object.defineProperty(exports3, "TypeofTypeAnnotation", { enumerable: true, get: function() {
          return _index.typeofTypeAnnotation;
        } }), Object.defineProperty(exports3, "UnaryExpression", { enumerable: true, get: function() {
          return _index.unaryExpression;
        } }), Object.defineProperty(exports3, "UnionTypeAnnotation", { enumerable: true, get: function() {
          return _index.unionTypeAnnotation;
        } }), Object.defineProperty(exports3, "UpdateExpression", { enumerable: true, get: function() {
          return _index.updateExpression;
        } }), Object.defineProperty(exports3, "V8IntrinsicIdentifier", { enumerable: true, get: function() {
          return _index.v8IntrinsicIdentifier;
        } }), Object.defineProperty(exports3, "VariableDeclaration", { enumerable: true, get: function() {
          return _index.variableDeclaration;
        } }), Object.defineProperty(exports3, "VariableDeclarator", { enumerable: true, get: function() {
          return _index.variableDeclarator;
        } }), Object.defineProperty(exports3, "Variance", { enumerable: true, get: function() {
          return _index.variance;
        } }), Object.defineProperty(exports3, "VoidTypeAnnotation", { enumerable: true, get: function() {
          return _index.voidTypeAnnotation;
        } }), Object.defineProperty(exports3, "WhileStatement", { enumerable: true, get: function() {
          return _index.whileStatement;
        } }), Object.defineProperty(exports3, "WithStatement", { enumerable: true, get: function() {
          return _index.withStatement;
        } }), Object.defineProperty(exports3, "YieldExpression", { enumerable: true, get: function() {
          return _index.yieldExpression;
        } });
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/productions.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.buildUndefinedNode = function() {
          return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), true);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/react/buildChildren.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          const elements = [];
          for (let i = 0; i < node.children.length; i++) {
            let child = node.children[i];
            (0, _index.isJSXText)(child) ? (0, _cleanJSXElementLiteralChild.default)(child, elements) : ((0, _index.isJSXExpressionContainer)(child) && (child = child.expression), (0, _index.isJSXEmptyExpression)(child) || elements.push(child));
          }
          return elements;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js"), _cleanJSXElementLiteralChild = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(typeAnnotations) {
          const types = typeAnnotations.map((type) => (0, _index2.isTSTypeAnnotation)(type) ? type.typeAnnotation : type), flattened = (0, _removeTypeDuplicates.default)(types);
          return 1 === flattened.length ? flattened[0] : (0, _index.tsUnionType)(flattened);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/validateNode.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          const keys = _index.BUILDER_KEYS[node.type];
          for (const key of keys) (0, _validate.default)(node, key, node[key]);
          return node;
        };
        var _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/validate.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/clone.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _cloneNode.default)(node, false);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneDeep.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _cloneNode.default)(node);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _cloneNode.default)(node, true, true);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneNode.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, deep = true, withoutLoc = false) {
          return cloneNodeInternal(node, deep, withoutLoc, /* @__PURE__ */ new Map());
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js");
        const has = Function.call.bind(Object.prototype.hasOwnProperty);
        function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
          return obj && "string" == typeof obj.type ? cloneNodeInternal(obj, deep, withoutLoc, commentsCache) : obj;
        }
        function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
          return Array.isArray(obj) ? obj.map((node) => cloneIfNode(node, deep, withoutLoc, commentsCache)) : cloneIfNode(obj, deep, withoutLoc, commentsCache);
        }
        function cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {
          if (!node) return node;
          const { type } = node, newNode = { type: node.type };
          if ((0, _index2.isIdentifier)(node)) newNode.name = node.name, has(node, "optional") && "boolean" == typeof node.optional && (newNode.optional = node.optional), has(node, "typeAnnotation") && (newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation);
          else {
            if (!has(_index.NODE_FIELDS, type)) throw new Error(`Unknown node type: "${type}"`);
            for (const field of Object.keys(_index.NODE_FIELDS[type])) has(node, field) && (newNode[field] = deep ? (0, _index2.isFile)(node) && "comments" === field ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache) : node[field]);
          }
          return has(node, "loc") && (newNode.loc = withoutLoc ? null : node.loc), has(node, "leadingComments") && (newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache)), has(node, "innerComments") && (newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache)), has(node, "trailingComments") && (newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache)), has(node, "extra") && (newNode.extra = Object.assign({}, node.extra)), newNode;
        }
        function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
          return comments && deep ? comments.map((comment) => {
            const cache = commentsCache.get(comment);
            if (cache) return cache;
            const { type, value: value2, loc } = comment, ret = { type, value: value2, loc };
            return withoutLoc && (ret.loc = null), commentsCache.set(comment, ret), ret;
          }) : comments;
        }
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _cloneNode.default)(node, false, true);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/addComment.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, type, content, line) {
          return (0, _addComments.default)(node, type, [{ type: line ? "CommentLine" : "CommentBlock", value: content }]);
        };
        var _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/addComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/addComments.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, type, comments) {
          if (!comments || !node) return node;
          const key = `${type}Comments`;
          node[key] ? "leading" === type ? node[key] = comments.concat(node[key]) : node[key].push(...comments) : node[key] = comments;
          return node;
        };
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritInnerComments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, parent) {
          (0, _inherit.default)("innerComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritLeadingComments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, parent) {
          (0, _inherit.default)("leadingComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritTrailingComments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, parent) {
          (0, _inherit.default)("trailingComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritsComments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, parent) {
          return (0, _inheritTrailingComments.default)(child, parent), (0, _inheritLeadingComments.default)(child, parent), (0, _inheritInnerComments.default)(child, parent), child;
        };
        var _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritInnerComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/removeComments.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return _index.COMMENT_KEYS.forEach((key) => {
            node[key] = null;
          }), node;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/constants/generated/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.WHILE_TYPES = exports3.USERWHITESPACABLE_TYPES = exports3.UNARYLIKE_TYPES = exports3.TYPESCRIPT_TYPES = exports3.TSTYPE_TYPES = exports3.TSTYPEELEMENT_TYPES = exports3.TSENTITYNAME_TYPES = exports3.TSBASETYPE_TYPES = exports3.TERMINATORLESS_TYPES = exports3.STATEMENT_TYPES = exports3.STANDARDIZED_TYPES = exports3.SCOPABLE_TYPES = exports3.PUREISH_TYPES = exports3.PROPERTY_TYPES = exports3.PRIVATE_TYPES = exports3.PATTERN_TYPES = exports3.PATTERNLIKE_TYPES = exports3.OBJECTMEMBER_TYPES = exports3.MODULESPECIFIER_TYPES = exports3.MODULEDECLARATION_TYPES = exports3.MISCELLANEOUS_TYPES = exports3.METHOD_TYPES = exports3.LVAL_TYPES = exports3.LOOP_TYPES = exports3.LITERAL_TYPES = exports3.JSX_TYPES = exports3.IMPORTOREXPORTDECLARATION_TYPES = exports3.IMMUTABLE_TYPES = exports3.FUNCTION_TYPES = exports3.FUNCTIONPARENT_TYPES = exports3.FOR_TYPES = exports3.FORXSTATEMENT_TYPES = exports3.FLOW_TYPES = exports3.FLOWTYPE_TYPES = exports3.FLOWPREDICATE_TYPES = exports3.FLOWDECLARATION_TYPES = exports3.FLOWBASEANNOTATION_TYPES = exports3.EXPRESSION_TYPES = exports3.EXPRESSIONWRAPPER_TYPES = exports3.EXPORTDECLARATION_TYPES = exports3.ENUMMEMBER_TYPES = exports3.ENUMBODY_TYPES = exports3.DECLARATION_TYPES = exports3.CONDITIONAL_TYPES = exports3.COMPLETIONSTATEMENT_TYPES = exports3.CLASS_TYPES = exports3.BLOCK_TYPES = exports3.BLOCKPARENT_TYPES = exports3.BINARY_TYPES = exports3.ACCESSOR_TYPES = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js");
        const STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS.Standardized;
        exports3.STANDARDIZED_TYPES = STANDARDIZED_TYPES;
        const EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS.Expression;
        exports3.EXPRESSION_TYPES = EXPRESSION_TYPES;
        const BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS.Binary;
        exports3.BINARY_TYPES = BINARY_TYPES;
        const SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.Scopable;
        exports3.SCOPABLE_TYPES = SCOPABLE_TYPES;
        const BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS.BlockParent;
        exports3.BLOCKPARENT_TYPES = BLOCKPARENT_TYPES;
        const BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS.Block;
        exports3.BLOCK_TYPES = BLOCK_TYPES;
        const STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.Statement;
        exports3.STATEMENT_TYPES = STATEMENT_TYPES;
        const TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS.Terminatorless;
        exports3.TERMINATORLESS_TYPES = TERMINATORLESS_TYPES;
        const COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.CompletionStatement;
        exports3.COMPLETIONSTATEMENT_TYPES = COMPLETIONSTATEMENT_TYPES;
        const CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS.Conditional;
        exports3.CONDITIONAL_TYPES = CONDITIONAL_TYPES;
        const LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS.Loop;
        exports3.LOOP_TYPES = LOOP_TYPES;
        const WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS.While;
        exports3.WHILE_TYPES = WHILE_TYPES;
        const EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS.ExpressionWrapper;
        exports3.EXPRESSIONWRAPPER_TYPES = EXPRESSIONWRAPPER_TYPES;
        const FOR_TYPES = _index.FLIPPED_ALIAS_KEYS.For;
        exports3.FOR_TYPES = FOR_TYPES;
        const FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.ForXStatement;
        exports3.FORXSTATEMENT_TYPES = FORXSTATEMENT_TYPES;
        const FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS.Function;
        exports3.FUNCTION_TYPES = FUNCTION_TYPES;
        const FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS.FunctionParent;
        exports3.FUNCTIONPARENT_TYPES = FUNCTIONPARENT_TYPES;
        const PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS.Pureish;
        exports3.PUREISH_TYPES = PUREISH_TYPES;
        const DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.Declaration;
        exports3.DECLARATION_TYPES = DECLARATION_TYPES;
        const PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS.PatternLike;
        exports3.PATTERNLIKE_TYPES = PATTERNLIKE_TYPES;
        const LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS.LVal;
        exports3.LVAL_TYPES = LVAL_TYPES;
        const TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS.TSEntityName;
        exports3.TSENTITYNAME_TYPES = TSENTITYNAME_TYPES;
        const LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS.Literal;
        exports3.LITERAL_TYPES = LITERAL_TYPES;
        const IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.Immutable;
        exports3.IMMUTABLE_TYPES = IMMUTABLE_TYPES;
        const USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.UserWhitespacable;
        exports3.USERWHITESPACABLE_TYPES = USERWHITESPACABLE_TYPES;
        const METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS.Method;
        exports3.METHOD_TYPES = METHOD_TYPES;
        const OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS.ObjectMember;
        exports3.OBJECTMEMBER_TYPES = OBJECTMEMBER_TYPES;
        const PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS.Property;
        exports3.PROPERTY_TYPES = PROPERTY_TYPES;
        const UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS.UnaryLike;
        exports3.UNARYLIKE_TYPES = UNARYLIKE_TYPES;
        const PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS.Pattern;
        exports3.PATTERN_TYPES = PATTERN_TYPES;
        const CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS.Class;
        exports3.CLASS_TYPES = CLASS_TYPES;
        const IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.ImportOrExportDeclaration;
        exports3.IMPORTOREXPORTDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
        const EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.ExportDeclaration;
        exports3.EXPORTDECLARATION_TYPES = EXPORTDECLARATION_TYPES;
        const MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS.ModuleSpecifier;
        exports3.MODULESPECIFIER_TYPES = MODULESPECIFIER_TYPES;
        const ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS.Accessor;
        exports3.ACCESSOR_TYPES = ACCESSOR_TYPES;
        const PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS.Private;
        exports3.PRIVATE_TYPES = PRIVATE_TYPES;
        const FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS.Flow;
        exports3.FLOW_TYPES = FLOW_TYPES;
        const FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowType;
        exports3.FLOWTYPE_TYPES = FLOWTYPE_TYPES;
        const FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation;
        exports3.FLOWBASEANNOTATION_TYPES = FLOWBASEANNOTATION_TYPES;
        const FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowDeclaration;
        exports3.FLOWDECLARATION_TYPES = FLOWDECLARATION_TYPES;
        const FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowPredicate;
        exports3.FLOWPREDICATE_TYPES = FLOWPREDICATE_TYPES;
        const ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS.EnumBody;
        exports3.ENUMBODY_TYPES = ENUMBODY_TYPES;
        const ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS.EnumMember;
        exports3.ENUMMEMBER_TYPES = ENUMMEMBER_TYPES;
        const JSX_TYPES = _index.FLIPPED_ALIAS_KEYS.JSX;
        exports3.JSX_TYPES = JSX_TYPES;
        const MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS.Miscellaneous;
        exports3.MISCELLANEOUS_TYPES = MISCELLANEOUS_TYPES;
        const TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS.TypeScript;
        exports3.TYPESCRIPT_TYPES = TYPESCRIPT_TYPES;
        const TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.TSTypeElement;
        exports3.TSTYPEELEMENT_TYPES = TSTYPEELEMENT_TYPES;
        const TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.TSType;
        exports3.TSTYPE_TYPES = TSTYPE_TYPES;
        const TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.TSBaseType;
        exports3.TSBASETYPE_TYPES = TSBASETYPE_TYPES;
        const MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
        exports3.MODULEDECLARATION_TYPES = MODULEDECLARATION_TYPES;
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/constants/index.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.UPDATE_OPERATORS = exports3.UNARY_OPERATORS = exports3.STRING_UNARY_OPERATORS = exports3.STATEMENT_OR_BLOCK_KEYS = exports3.NUMBER_UNARY_OPERATORS = exports3.NUMBER_BINARY_OPERATORS = exports3.NOT_LOCAL_BINDING = exports3.LOGICAL_OPERATORS = exports3.INHERIT_KEYS = exports3.FOR_INIT_KEYS = exports3.FLATTENABLE_KEYS = exports3.EQUALITY_BINARY_OPERATORS = exports3.COMPARISON_BINARY_OPERATORS = exports3.COMMENT_KEYS = exports3.BOOLEAN_UNARY_OPERATORS = exports3.BOOLEAN_NUMBER_BINARY_OPERATORS = exports3.BOOLEAN_BINARY_OPERATORS = exports3.BLOCK_SCOPED_SYMBOL = exports3.BINARY_OPERATORS = exports3.ASSIGNMENT_OPERATORS = void 0;
        exports3.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
        exports3.FLATTENABLE_KEYS = ["body", "expressions"];
        exports3.FOR_INIT_KEYS = ["left", "init"];
        exports3.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
        const LOGICAL_OPERATORS = ["||", "&&", "??"];
        exports3.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
        exports3.UPDATE_OPERATORS = ["++", "--"];
        const BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
        exports3.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
        const EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
        exports3.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
        const COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];
        exports3.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
        const BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];
        exports3.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
        const NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
        exports3.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
        const BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"];
        exports3.BINARY_OPERATORS = BINARY_OPERATORS;
        const ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map((op) => op + "="), ...LOGICAL_OPERATORS.map((op) => op + "=")];
        exports3.ASSIGNMENT_OPERATORS = ASSIGNMENT_OPERATORS;
        const BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
        exports3.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
        const NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
        exports3.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
        const STRING_UNARY_OPERATORS = ["typeof"];
        exports3.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
        const UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
        exports3.UNARY_OPERATORS = UNARY_OPERATORS;
        exports3.INHERIT_KEYS = { optional: ["typeAnnotation", "typeParameters", "returnType"], force: ["start", "loc", "end"] };
        const BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
        exports3.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
        const NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
        exports3.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/ensureBlock.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, key = "body") {
          const result = (0, _toBlock.default)(node[key], node);
          return node[key] = result, result;
        };
        var _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toBlock.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function gatherSequenceExpressions(nodes, scope, declars) {
          const exprs = [];
          let ensureLastUndefined = true;
          for (const node of nodes) if ((0, _index.isEmptyStatement)(node) || (ensureLastUndefined = false), (0, _index.isExpression)(node)) exprs.push(node);
          else if ((0, _index.isExpressionStatement)(node)) exprs.push(node.expression);
          else if ((0, _index.isVariableDeclaration)(node)) {
            if ("var" !== node.kind) return;
            for (const declar of node.declarations) {
              const bindings = (0, _getBindingIdentifiers.default)(declar);
              for (const key of Object.keys(bindings)) declars.push({ kind: node.kind, id: (0, _cloneNode.default)(bindings[key]) });
              declar.init && exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));
            }
            ensureLastUndefined = true;
          } else if ((0, _index.isIfStatement)(node)) {
            const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();
            if (!consequent || !alternate) return;
            exprs.push((0, _index2.conditionalExpression)(node.test, consequent, alternate));
          } else if ((0, _index.isBlockStatement)(node)) {
            const body = gatherSequenceExpressions(node.body, scope, declars);
            if (!body) return;
            exprs.push(body);
          } else {
            if (!(0, _index.isEmptyStatement)(node)) return;
            0 === nodes.indexOf(node) && (ensureLastUndefined = true);
          }
          ensureLastUndefined && exprs.push(scope.buildUndefinedNode());
          return 1 === exprs.length ? exprs[0] : (0, _index2.sequenceExpression)(exprs);
        };
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(name) {
          "eval" !== (name = (0, _toIdentifier.default)(name)) && "arguments" !== name || (name = "_" + name);
          return name;
        };
        var _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toIdentifier.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toBlock.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, parent) {
          if ((0, _index.isBlockStatement)(node)) return node;
          let blockNodes = [];
          (0, _index.isEmptyStatement)(node) ? blockNodes = [] : ((0, _index.isStatement)(node) || (node = (0, _index.isFunction)(parent) ? (0, _index2.returnStatement)(node) : (0, _index2.expressionStatement)(node)), blockNodes = [node]);
          return (0, _index2.blockStatement)(blockNodes);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toComputedKey.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, key = node.key || node.property) {
          !node.computed && (0, _index.isIdentifier)(key) && (key = (0, _index2.stringLiteral)(key.name));
          return key;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toExpression.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js"), _default = function(node) {
          (0, _index.isExpressionStatement)(node) && (node = node.expression);
          if ((0, _index.isExpression)(node)) return node;
          (0, _index.isClass)(node) ? node.type = "ClassExpression" : (0, _index.isFunction)(node) && (node.type = "FunctionExpression");
          if (!(0, _index.isExpression)(node)) throw new Error(`cannot turn ${node.type} to an expression`);
          return node;
        };
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toIdentifier.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(input) {
          input += "";
          let name = "";
          for (const c of input) name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : "-";
          name = name.replace(/^[-0-9]+/, ""), name = name.replace(/[-\s]+(.)?/g, function(match, c) {
            return c ? c.toUpperCase() : "";
          }), (0, _isValidIdentifier.default)(name) || (name = `_${name}`);
          return name || "_";
        };
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.22.20/node_modules/@babel/helper-validator-identifier/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toKeyAlias.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = toKeyAlias;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneNode.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js");
        function toKeyAlias(node, key = node.key) {
          let alias;
          return "method" === node.kind ? toKeyAlias.increment() + "" : (alias = (0, _index.isIdentifier)(key) ? key.name : (0, _index.isStringLiteral)(key) ? JSON.stringify(key.value) : JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))), node.computed && (alias = `[${alias}]`), node.static && (alias = `static:${alias}`), alias);
        }
        toKeyAlias.uid = 0, toKeyAlias.increment = function() {
          return toKeyAlias.uid >= Number.MAX_SAFE_INTEGER ? toKeyAlias.uid = 0 : toKeyAlias.uid++;
        };
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toSequenceExpression.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(nodes, scope) {
          if (null == nodes || !nodes.length) return;
          const declars = [], result = (0, _gatherSequenceExpressions.default)(nodes, scope, declars);
          if (!result) return;
          for (const declar of declars) scope.push(declar);
          return result;
        };
        var _gatherSequenceExpressions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toStatement.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js"), _default = function(node, ignore) {
          if ((0, _index.isStatement)(node)) return node;
          let newType, mustHaveId = false;
          if ((0, _index.isClass)(node)) mustHaveId = true, newType = "ClassDeclaration";
          else if ((0, _index.isFunction)(node)) mustHaveId = true, newType = "FunctionDeclaration";
          else if ((0, _index.isAssignmentExpression)(node)) return (0, _index2.expressionStatement)(node);
          mustHaveId && !node.id && (newType = false);
          if (!newType) {
            if (ignore) return false;
            throw new Error(`cannot turn ${node.type} to a statement`);
          }
          return node.type = newType, node;
        };
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/valueToNode.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js"), _default = function valueToNode(value2) {
          if (void 0 === value2) return (0, _index.identifier)("undefined");
          if (true === value2 || false === value2) return (0, _index.booleanLiteral)(value2);
          if (null === value2) return (0, _index.nullLiteral)();
          if ("string" == typeof value2) return (0, _index.stringLiteral)(value2);
          if ("number" == typeof value2) {
            let result;
            if (Number.isFinite(value2)) result = (0, _index.numericLiteral)(Math.abs(value2));
            else {
              let numerator;
              numerator = Number.isNaN(value2) ? (0, _index.numericLiteral)(0) : (0, _index.numericLiteral)(1), result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));
            }
            return (value2 < 0 || Object.is(value2, -0)) && (result = (0, _index.unaryExpression)("-", result)), result;
          }
          if (function(value3) {
            return "[object RegExp]" === objectToString2(value3);
          }(value2)) {
            const pattern = value2.source, flags = value2.toString().match(/\/([a-z]+|)$/)[1];
            return (0, _index.regExpLiteral)(pattern, flags);
          }
          if (Array.isArray(value2)) return (0, _index.arrayExpression)(value2.map(valueToNode));
          if (function(value3) {
            if ("object" != typeof value3 || null === value3 || "[object Object]" !== Object.prototype.toString.call(value3)) return false;
            const proto = Object.getPrototypeOf(value3);
            return null === proto || null === Object.getPrototypeOf(proto);
          }(value2)) {
            const props = [];
            for (const key of Object.keys(value2)) {
              let nodeKey;
              nodeKey = (0, _isValidIdentifier.default)(key) ? (0, _index.identifier)(key) : (0, _index.stringLiteral)(key), props.push((0, _index.objectProperty)(nodeKey, valueToNode(value2[key])));
            }
            return (0, _index.objectExpression)(props);
          }
          throw new Error("don't know how to turn this value into a node");
        };
        exports3.default = _default;
        const objectToString2 = Function.call.bind(Object.prototype.toString);
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/core.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.patternLikeCommon = exports3.functionTypeAnnotationCommon = exports3.functionDeclarationCommon = exports3.functionCommon = exports3.classMethodOrPropertyCommon = exports3.classMethodOrDeclareMethodCommon = void 0;
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/is.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.22.20/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperStringParser = __webpack_require__2("./node_modules/.pnpm/@babel+helper-string-parser@7.22.5/node_modules/@babel/helper-string-parser/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/constants/index.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("Standardized");
        defineType("ArrayExpression", { fields: { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement"))), default: process.env.BABEL_TYPES_8_BREAKING ? void 0 : [] } }, visitor: ["elements"], aliases: ["Expression"] }), defineType("AssignmentExpression", { fields: { operator: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING) return (0, _utils.assertValueType)("string");
          const identifier = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS), pattern = (0, _utils.assertOneOf)("=");
          return function(node, key, val) {
            ((0, _is.default)("Pattern", node.left) ? pattern : identifier)(node, key, val);
          };
        }() }, left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Expression"] }), defineType("BinaryExpression", { builder: ["operator", "left", "right"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS) }, left: { validate: function() {
          const expression = (0, _utils.assertNodeType)("Expression"), inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
          return Object.assign(function(node, key, val) {
            ("in" === node.operator ? inOp : expression)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "PrivateName"] });
        }() }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, visitor: ["left", "right"], aliases: ["Binary", "Expression"] }), defineType("InterpreterDirective", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("Directive", { visitor: ["value"], fields: { value: { validate: (0, _utils.assertNodeType)("DirectiveLiteral") } } }), defineType("DirectiveLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("BlockStatement", { builder: ["body", "directives"], visitor: ["directives", "body"], fields: { directives: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))), default: [] }, body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } }, aliases: ["Scopable", "BlockParent", "Block", "Statement"] }), defineType("BreakStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("CallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments"], aliases: ["Expression"], fields: Object.assign({ callee: { validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier") }, arguments: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder"))) } }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertOneOf)(true, false), optional: true } }, { typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } }) }), defineType("CatchClause", { visitor: ["param", "body"], fields: { param: { validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }, aliases: ["Scopable", "BlockParent"] }), defineType("ConditionalExpression", { visitor: ["test", "consequent", "alternate"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Expression") }, alternate: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression", "Conditional"] }), defineType("ContinueStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("DebuggerStatement", { aliases: ["Statement"] }), defineType("DoWhileStatement", { visitor: ["test", "body"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } }, aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"] }), defineType("EmptyStatement", { aliases: ["Statement"] }), defineType("ExpressionStatement", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Statement", "ExpressionWrapper"] }), defineType("File", { builder: ["program", "comments", "tokens"], visitor: ["program"], fields: { program: { validate: (0, _utils.assertNodeType)("Program") }, comments: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")) : Object.assign(() => {
        }, { each: { oneOfNodeTypes: ["CommentBlock", "CommentLine"] } }), optional: true }, tokens: { validate: (0, _utils.assertEach)(Object.assign(() => {
        }, { type: "any" })), optional: true } } }), defineType("ForInStatement", { visitor: ["left", "right", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("VariableDeclaration", "LVal") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("ForStatement", { visitor: ["init", "test", "update", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"], fields: { init: { validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"), optional: true }, test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, update: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, body: { validate: (0, _utils.assertNodeType)("Statement") } } });
        const functionCommon = () => ({ params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement"))) }, generator: { default: false }, async: { default: false } });
        exports3.functionCommon = functionCommon;
        const functionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true } });
        exports3.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
        const functionDeclarationCommon = () => Object.assign({}, functionCommon(), { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } });
        exports3.functionDeclarationCommon = functionDeclarationCommon, defineType("FunctionDeclaration", { builder: ["id", "params", "body", "generator", "async"], visitor: ["id", "params", "body", "returnType", "typeParameters"], fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }), aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"], validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING) return () => {
          };
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            (0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
          };
        }() }), defineType("FunctionExpression", { inherits: "FunctionDeclaration", aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) });
        const patternLikeCommon = () => ({ typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } });
        exports3.patternLikeCommon = patternLikeCommon, defineType("Identifier", { builder: ["name"], visitor: ["typeAnnotation", "decorators"], aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"], fields: Object.assign({}, patternLikeCommon(), { name: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && !(0, _isValidIdentifier.default)(val, false)) throw new TypeError(`"${val}" is not a valid identifier name`);
        }, { type: "string" })) } }), validate(parent, key, node) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          const match = /\.(\w+)$/.exec(key);
          if (!match) return;
          const [, parentKey] = match, nonComp = { computed: false };
          if ("property" === parentKey) {
            if ((0, _is.default)("MemberExpression", parent, nonComp)) return;
            if ((0, _is.default)("OptionalMemberExpression", parent, nonComp)) return;
          } else if ("key" === parentKey) {
            if ((0, _is.default)("Property", parent, nonComp)) return;
            if ((0, _is.default)("Method", parent, nonComp)) return;
          } else if ("exported" === parentKey) {
            if ((0, _is.default)("ExportSpecifier", parent)) return;
          } else if ("imported" === parentKey) {
            if ((0, _is.default)("ImportSpecifier", parent, { imported: node })) return;
          } else if ("meta" === parentKey && (0, _is.default)("MetaProperty", parent, { meta: node })) return;
          if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && "this" !== node.name) throw new TypeError(`"${node.name}" is not a valid identifier`);
        } }), defineType("IfStatement", { visitor: ["test", "consequent", "alternate"], aliases: ["Statement", "Conditional"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Statement") }, alternate: { optional: true, validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("LabeledStatement", { visitor: ["label", "body"], aliases: ["Statement"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("StringLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NumericLiteral", { builder: ["value"], deprecatedAlias: "NumberLiteral", fields: { value: { validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function(node, key, val) {
          if (1 / val < 0 || !Number.isFinite(val)) {
            new Error(`NumericLiterals must be non-negative finite numbers. You can use t.valueToNode(${val}) instead.`);
          }
        }, { type: "number" })) } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NullLiteral", { aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("BooleanLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("boolean") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("RegExpLiteral", { builder: ["pattern", "flags"], deprecatedAlias: "RegexLiteral", aliases: ["Expression", "Pureish", "Literal"], fields: { pattern: { validate: (0, _utils.assertValueType)("string") }, flags: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          const invalid = /[^gimsuy]/.exec(val);
          if (invalid) throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
        }, { type: "string" })), default: "" } } }), defineType("LogicalExpression", { builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Binary", "Expression"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS) }, left: { validate: (0, _utils.assertNodeType)("Expression") }, right: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("MemberExpression", { builder: ["object", "property", "computed", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["optional"]], visitor: ["object", "property"], aliases: ["Expression", "LVal"], fields: Object.assign({ object: { validate: (0, _utils.assertNodeType)("Expression", "Super") }, property: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
          return validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"], validator;
        }() }, computed: { default: false } }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertOneOf)(true, false), optional: true } }) }), defineType("NewExpression", { inherits: "CallExpression" }), defineType("Program", { visitor: ["directives", "body"], builder: ["body", "directives", "sourceType", "interpreter"], fields: { sourceFile: { validate: (0, _utils.assertValueType)("string") }, sourceType: { validate: (0, _utils.assertOneOf)("script", "module"), default: "script" }, interpreter: { validate: (0, _utils.assertNodeType)("InterpreterDirective"), default: null, optional: true }, directives: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))), default: [] }, body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } }, aliases: ["Scopable", "BlockParent", "Block"] }), defineType("ObjectExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadElement"))) } } }), defineType("ObjectMethod", { builder: ["kind", "key", "params", "body", "computed", "generator", "async"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { kind: Object.assign({ validate: (0, _utils.assertOneOf)("method", "get", "set") }, process.env.BABEL_TYPES_8_BREAKING ? {} : { default: "method" }), computed: { default: false }, key: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
          return validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"], validator;
        }() }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }), visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"], aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"] }), defineType("ObjectProperty", { builder: ["key", "value", "computed", "shorthand", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["decorators"]], fields: { computed: { default: false }, key: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
          return Object.assign(function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"] });
        }() }, value: { validate: (0, _utils.assertNodeType)("Expression", "PatternLike") }, shorthand: { validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && node.computed) throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
        }, { type: "boolean" }), function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && !(0, _is.default)("Identifier", node.key)) throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
        }), default: false }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } }, visitor: ["key", "value", "decorators"], aliases: ["UserWhitespacable", "Property", "ObjectMember"], validate: function() {
          const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion"), expression = (0, _utils.assertNodeType)("Expression");
          return function(parent, key, node) {
            if (!process.env.BABEL_TYPES_8_BREAKING) return;
            ((0, _is.default)("ObjectPattern", parent) ? pattern : expression)(node, "value", node.value);
          };
        }() }), defineType("RestElement", { visitor: ["argument", "typeAnnotation"], builder: ["argument"], aliases: ["LVal", "PatternLike"], deprecatedAlias: "RestProperty", fields: Object.assign({}, patternLikeCommon(), { argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal") } }), validate(parent, key) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          const match = /(\w+)\[(\d+)\]/.exec(key);
          if (!match) throw new Error("Internal Babel error: malformed key.");
          const [, listKey, index] = match;
          if (parent[listKey].length > +index + 1) throw new TypeError(`RestElement must be last element of ${listKey}`);
        } }), defineType("ReturnStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("SequenceExpression", { visitor: ["expressions"], fields: { expressions: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression"))) } }, aliases: ["Expression"] }), defineType("ParenthesizedExpression", { visitor: ["expression"], aliases: ["Expression", "ExpressionWrapper"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("SwitchCase", { visitor: ["test", "consequent"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, consequent: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } } }), defineType("SwitchStatement", { visitor: ["discriminant", "cases"], aliases: ["Statement", "BlockParent", "Scopable"], fields: { discriminant: { validate: (0, _utils.assertNodeType)("Expression") }, cases: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("SwitchCase"))) } } }), defineType("ThisExpression", { aliases: ["Expression"] }), defineType("ThrowStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("TryStatement", { visitor: ["block", "handler", "finalizer"], aliases: ["Statement"], fields: { block: { validate: (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node) {
          if (process.env.BABEL_TYPES_8_BREAKING && !node.handler && !node.finalizer) throw new TypeError("TryStatement expects either a handler or finalizer, or both");
        }, { oneOfNodeTypes: ["BlockStatement"] })) }, handler: { optional: true, validate: (0, _utils.assertNodeType)("CatchClause") }, finalizer: { optional: true, validate: (0, _utils.assertNodeType)("BlockStatement") } } }), defineType("UnaryExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: true }, argument: { validate: (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS) } }, visitor: ["argument"], aliases: ["UnaryLike", "Expression"] }), defineType("UpdateExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: false }, argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression") : (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS) } }, visitor: ["argument"], aliases: ["Expression"] }), defineType("VariableDeclaration", { builder: ["kind", "declarations"], visitor: ["declarations"], aliases: ["Statement", "Declaration"], fields: { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, kind: { validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using") }, declarations: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("VariableDeclarator"))) } }, validate(parent, key, node) {
          if (process.env.BABEL_TYPES_8_BREAKING && (0, _is.default)("ForXStatement", parent, { left: node }) && 1 !== node.declarations.length) throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
        } }), defineType("VariableDeclarator", { visitor: ["id", "init"], fields: { id: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING) return (0, _utils.assertNodeType)("LVal");
          const normal = (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"), without = (0, _utils.assertNodeType)("Identifier");
          return function(node, key, val) {
            (node.init ? normal : without)(node, key, val);
          };
        }() }, definite: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, init: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("WhileStatement", { visitor: ["test", "body"], aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("WithStatement", { visitor: ["object", "body"], aliases: ["Statement"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("AssignmentPattern", { visitor: ["left", "right", "decorators"], builder: ["left", "right"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { left: { validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } }) }), defineType("ArrayPattern", { visitor: ["elements", "typeAnnotation"], builder: ["elements"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal"))) } }) }), defineType("ArrowFunctionExpression", { builder: ["params", "body", "async"], visitor: ["params", "body", "returnType", "typeParameters"], aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { expression: { validate: (0, _utils.assertValueType)("boolean") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement", "Expression") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) }), defineType("ClassBody", { visitor: ["body"], fields: { body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock"))) } } }), defineType("ClassExpression", { builder: ["id", "superClass", "body", "decorators"], visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"], aliases: ["Scopable", "Class", "Expression"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true } } }), defineType("ClassDeclaration", { inherits: "ClassExpression", aliases: ["Scopable", "Class", "Statement", "Declaration"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }, validate: function() {
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            process.env.BABEL_TYPES_8_BREAKING && ((0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id));
          };
        }() }), defineType("ExportAllDeclaration", { builder: ["source"], visitor: ["source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: { source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")), attributes: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) }, assertions: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) } } }), defineType("ExportDefaultDeclaration", { visitor: ["declaration"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: { declaration: { validate: (0, _utils.assertNodeType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression") }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value")) } }), defineType("ExportNamedDeclaration", { builder: ["declaration", "specifiers", "source"], visitor: ["declaration", "specifiers", "source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: { declaration: { optional: true, validate: (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && node.specifiers.length) throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
        }, { oneOfNodeTypes: ["Declaration"] }), function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && node.source) throw new TypeError("Cannot export a declaration from a source");
        }) }, attributes: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) }, assertions: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) }, specifiers: { default: [], validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)(function() {
          const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"), sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
          return process.env.BABEL_TYPES_8_BREAKING ? function(node, key, val) {
            (node.source ? sourced : sourceless)(node, key, val);
          } : sourced;
        }())) }, source: { validate: (0, _utils.assertNodeType)("StringLiteral"), optional: true }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) } }), defineType("ExportSpecifier", { visitor: ["local", "exported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, exported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, exportKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("ForOfStatement", { visitor: ["left", "right", "body"], builder: ["left", "right", "body", "await"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING) return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
          const declaration = (0, _utils.assertNodeType)("VariableDeclaration"), lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
          return function(node, key, val) {
            (0, _is.default)("VariableDeclaration", val) ? declaration(node, key, val) : lval(node, key, val);
          };
        }() }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") }, await: { default: false } } }), defineType("ImportDeclaration", { builder: ["specifiers", "source"], visitor: ["specifiers", "source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"], fields: { attributes: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) }, assertions: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) }, module: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, phase: { default: null, validate: (0, _utils.assertOneOf)("source", "defer") }, specifiers: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"))) }, source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } } }), defineType("ImportDefaultSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportNamespaceSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportSpecifier", { visitor: ["local", "imported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, imported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } } }), defineType("ImportExpression", { visitor: ["source", "options"], aliases: ["Expression"], fields: { phase: { default: null, validate: (0, _utils.assertOneOf)("source", "defer") }, source: { validate: (0, _utils.assertNodeType)("Expression") }, options: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("MetaProperty", { visitor: ["meta", "property"], aliases: ["Expression"], fields: { meta: { validate: (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          let property;
          switch (val.name) {
            case "function":
              property = "sent";
              break;
            case "new":
              property = "target";
              break;
            case "import":
              property = "meta";
          }
          if (!(0, _is.default)("Identifier", node.property, { name: property })) throw new TypeError("Unrecognised MetaProperty");
        }, { oneOfNodeTypes: ["Identifier"] })) }, property: { validate: (0, _utils.assertNodeType)("Identifier") } } });
        const classMethodOrPropertyCommon = () => ({ abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, static: { default: false }, override: { default: false }, computed: { default: false }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, key: { validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral"), computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression")) } });
        exports3.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
        const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), { params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"))) }, kind: { validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"), default: "method" }, access: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } });
        exports3.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon, defineType("ClassMethod", { aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"], builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"], visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("ObjectPattern", { visitor: ["properties", "typeAnnotation", "decorators"], builder: ["properties"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { properties: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("RestElement", "ObjectProperty"))) } }) }), defineType("SpreadElement", { visitor: ["argument"], aliases: ["UnaryLike"], deprecatedAlias: "SpreadProperty", fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Super", { aliases: ["Expression"] }), defineType("TaggedTemplateExpression", { visitor: ["tag", "quasi", "typeParameters"], builder: ["tag", "quasi"], aliases: ["Expression"], fields: { tag: { validate: (0, _utils.assertNodeType)("Expression") }, quasi: { validate: (0, _utils.assertNodeType)("TemplateLiteral") }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("TemplateElement", { builder: ["value", "tail"], fields: { value: { validate: (0, _utils.chain)((0, _utils.assertShape)({ raw: { validate: (0, _utils.assertValueType)("string") }, cooked: { validate: (0, _utils.assertValueType)("string"), optional: true } }), function(node) {
          const raw = node.value.raw;
          let unterminatedCalled = false;
          const error = () => {
            throw new Error("Internal @babel/types error.");
          }, { str, firstInvalidLoc } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, { unterminated() {
            unterminatedCalled = true;
          }, strictNumericEscape: error, invalidEscapeSequence: error, numericSeparatorInEscapeSequence: error, unexpectedNumericSeparator: error, invalidDigit: error, invalidCodePoint: error });
          if (!unterminatedCalled) throw new Error("Invalid raw");
          node.value.cooked = firstInvalidLoc ? null : str;
        }) }, tail: { default: false } } }), defineType("TemplateLiteral", { visitor: ["quasis", "expressions"], aliases: ["Expression", "Literal"], fields: { quasis: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TemplateElement"))) }, expressions: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node, key, val) {
          if (node.quasis.length !== val.length + 1) throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.
Expected ${val.length + 1} quasis but got ${node.quasis.length}`);
        }) } } }), defineType("YieldExpression", { builder: ["argument", "delegate"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { delegate: { validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && !node.argument) throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
        }, { type: "boolean" })), default: false }, argument: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("AwaitExpression", { builder: ["argument"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Import", { aliases: ["Expression"] }), defineType("BigIntLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("ExportNamespaceSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("OptionalMemberExpression", { builder: ["object", "property", "computed", "optional"], visitor: ["object", "property"], aliases: ["Expression"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, property: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier"), computed = (0, _utils.assertNodeType)("Expression");
          return Object.assign(function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "Identifier"] });
        }() }, computed: { default: false }, optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") } } }), defineType("OptionalCallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments", "optional"], aliases: ["Expression"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") }, arguments: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder"))) }, optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") }, typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } } }), defineType("ClassProperty", { visitor: ["key", "value", "typeAnnotation", "decorators"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property"], fields: Object.assign({}, classMethodOrPropertyCommon(), { value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassAccessorProperty", { visitor: ["key", "value", "typeAnnotation", "decorators"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property", "Accessor"], fields: Object.assign({}, classMethodOrPropertyCommon(), { key: { validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName")) }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassPrivateProperty", { visitor: ["key", "value", "decorators", "typeAnnotation"], builder: ["key", "value", "decorators", "static"], aliases: ["Property", "Private"], fields: { key: { validate: (0, _utils.assertNodeType)("PrivateName") }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, static: { validate: (0, _utils.assertValueType)("boolean"), default: false }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } } }), defineType("ClassPrivateMethod", { builder: ["kind", "key", "params", "body", "static"], visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"], aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { kind: { validate: (0, _utils.assertOneOf)("get", "set", "method"), default: "method" }, key: { validate: (0, _utils.assertNodeType)("PrivateName") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("PrivateName", { visitor: ["id"], aliases: ["Private"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("StaticBlock", { visitor: ["body"], fields: { body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } }, aliases: ["Scopable", "BlockParent", "FunctionParent"] });
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/deprecated-aliases.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.DEPRECATED_ALIASES = void 0;
        exports3.DEPRECATED_ALIASES = { ModuleDeclaration: "ImportOrExportDeclaration" };
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/experimental.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/utils.js");
        (0, _utils.default)("ArgumentPlaceholder", {}), (0, _utils.default)("BindExpression", { visitor: ["object", "callee"], aliases: ["Expression"], fields: process.env.BABEL_TYPES_8_BREAKING ? { object: { validate: (0, _utils.assertNodeType)("Expression") }, callee: { validate: (0, _utils.assertNodeType)("Expression") } } : { object: { validate: Object.assign(() => {
        }, { oneOfNodeTypes: ["Expression"] }) }, callee: { validate: Object.assign(() => {
        }, { oneOfNodeTypes: ["Expression"] }) } } }), (0, _utils.default)("ImportAttribute", { visitor: ["key", "value"], fields: { key: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, value: { validate: (0, _utils.assertNodeType)("StringLiteral") } } }), (0, _utils.default)("Decorator", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), (0, _utils.default)("DoExpression", { visitor: ["body"], builder: ["body", "async"], aliases: ["Expression"], fields: { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, async: { validate: (0, _utils.assertValueType)("boolean"), default: false } } }), (0, _utils.default)("ExportDefaultSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), (0, _utils.default)("RecordExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectProperty", "SpreadElement"))) } } }), (0, _utils.default)("TupleExpression", { fields: { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement"))), default: [] } }, visitor: ["elements"], aliases: ["Expression"] }), (0, _utils.default)("DecimalLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), (0, _utils.default)("ModuleExpression", { visitor: ["body"], fields: { body: { validate: (0, _utils.assertNodeType)("Program") } }, aliases: ["Expression"] }), (0, _utils.default)("TopicReference", { aliases: ["Expression"] }), (0, _utils.default)("PipelineTopicExpression", { builder: ["expression"], visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelineBareFunction", { builder: ["callee"], visitor: ["callee"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelinePrimaryTopicReference", { aliases: ["Expression"] });
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/flow.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("Flow"), defineInterfaceishType = (name) => {
          const isDeclareClass = "DeclareClass" === name;
          defineType(name, { builder: ["id", "typeParameters", "extends", "body"], visitor: ["id", "typeParameters", "extends", ...isDeclareClass ? ["mixins", "implements"] : [], "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: Object.assign({ id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")) }, isDeclareClass ? { mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements")) } : {}, { body: (0, _utils.validateType)("ObjectTypeAnnotation") }) });
        };
        defineType("AnyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ArrayTypeAnnotation", { visitor: ["elementType"], aliases: ["FlowType"], fields: { elementType: (0, _utils.validateType)("FlowType") } }), defineType("BooleanTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("BooleanLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("NullLiteralTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ClassImplements", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("DeclareClass"), defineType("DeclareFunction", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), predicate: (0, _utils.validateOptionalType)("DeclaredPredicate") } }), defineInterfaceishType("DeclareInterface"), defineType("DeclareModule", { builder: ["id", "body", "kind"], visitor: ["id", "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)(["Identifier", "StringLiteral"]), body: (0, _utils.validateType)("BlockStatement"), kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES")) } }), defineType("DeclareModuleExports", { visitor: ["typeAnnotation"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("DeclareTypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("DeclareOpaqueType", { visitor: ["id", "typeParameters", "supertype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateOptionalType)("FlowType") } }), defineType("DeclareVariable", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("DeclareExportDeclaration", { visitor: ["declaration", "specifiers", "source"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { declaration: (0, _utils.validateOptionalType)("Flow"), specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)(["ExportSpecifier", "ExportNamespaceSpecifier"])), source: (0, _utils.validateOptionalType)("StringLiteral"), default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("DeclareExportAllDeclaration", { visitor: ["source"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { source: (0, _utils.validateType)("StringLiteral"), exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) } }), defineType("DeclaredPredicate", { visitor: ["value"], aliases: ["FlowPredicate"], fields: { value: (0, _utils.validateType)("Flow") } }), defineType("ExistsTypeAnnotation", { aliases: ["FlowType"] }), defineType("FunctionTypeAnnotation", { visitor: ["typeParameters", "params", "rest", "returnType"], aliases: ["FlowType"], fields: { typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), params: (0, _utils.validate)((0, _utils.arrayOfType)("FunctionTypeParam")), rest: (0, _utils.validateOptionalType)("FunctionTypeParam"), this: (0, _utils.validateOptionalType)("FunctionTypeParam"), returnType: (0, _utils.validateType)("FlowType") } }), defineType("FunctionTypeParam", { visitor: ["name", "typeAnnotation"], fields: { name: (0, _utils.validateOptionalType)("Identifier"), typeAnnotation: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("GenericTypeAnnotation", { visitor: ["id", "typeParameters"], aliases: ["FlowType"], fields: { id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineType("InferredPredicate", { aliases: ["FlowPredicate"] }), defineType("InterfaceExtends", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("InterfaceDeclaration"), defineType("InterfaceTypeAnnotation", { visitor: ["extends", "body"], aliases: ["FlowType"], fields: { extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), body: (0, _utils.validateType)("ObjectTypeAnnotation") } }), defineType("IntersectionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("MixedTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EmptyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("NullableTypeAnnotation", { visitor: ["typeAnnotation"], aliases: ["FlowType"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("NumberLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("number")) } }), defineType("NumberTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ObjectTypeAnnotation", { visitor: ["properties", "indexers", "callProperties", "internalSlots"], aliases: ["FlowType"], builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"], fields: { properties: (0, _utils.validate)((0, _utils.arrayOfType)(["ObjectTypeProperty", "ObjectTypeSpreadProperty"])), indexers: { validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"), optional: true, default: [] }, callProperties: { validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"), optional: true, default: [] }, internalSlots: { validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"), optional: true, default: [] }, exact: { validate: (0, _utils.assertValueType)("boolean"), default: false }, inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeInternalSlot", { visitor: ["id", "value", "optional", "static", "method"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateType)("Identifier"), value: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeCallProperty", { visitor: ["value"], aliases: ["UserWhitespacable"], fields: { value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeIndexer", { visitor: ["id", "key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateOptionalType)("Identifier"), key: (0, _utils.validateType)("FlowType"), value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("ObjectTypeProperty", { visitor: ["key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { key: (0, _utils.validateType)(["Identifier", "StringLiteral"]), value: (0, _utils.validateType)("FlowType"), kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance"), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeSpreadProperty", { visitor: ["argument"], aliases: ["UserWhitespacable"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("OpaqueType", { visitor: ["id", "typeParameters", "supertype", "impltype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateType)("FlowType") } }), defineType("QualifiedTypeIdentifier", { visitor: ["id", "qualification"], fields: { id: (0, _utils.validateType)("Identifier"), qualification: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]) } }), defineType("StringLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("string")) } }), defineType("StringTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("SymbolTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ThisTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("TupleTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("TypeofTypeAnnotation", { visitor: ["argument"], aliases: ["FlowType"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("TypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("TypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("TypeCastExpression", { visitor: ["expression", "typeAnnotation"], aliases: ["ExpressionWrapper", "Expression"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("TypeParameter", { visitor: ["bound", "default", "variance"], fields: { name: (0, _utils.validate)((0, _utils.assertValueType)("string")), bound: (0, _utils.validateOptionalType)("TypeAnnotation"), default: (0, _utils.validateOptionalType)("FlowType"), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("TypeParameterDeclaration", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter")) } }), defineType("TypeParameterInstantiation", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("UnionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("Variance", { builder: ["kind"], fields: { kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus")) } }), defineType("VoidTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: { id: (0, _utils.validateType)("Identifier"), body: (0, _utils.validateType)(["EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody"]) } }), defineType("EnumBooleanBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumBooleanMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumNumberBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumNumberMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumStringBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)(["EnumStringMember", "EnumDefaultedMember"]), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumSymbolBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumBooleanMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("BooleanLiteral") } }), defineType("EnumNumberMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("NumericLiteral") } }), defineType("EnumStringMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("StringLiteral") } }), defineType("EnumDefaultedMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("IndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType") } }), defineType("OptionalIndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } });
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), Object.defineProperty(exports3, "ALIAS_KEYS", { enumerable: true, get: function() {
          return _utils.ALIAS_KEYS;
        } }), Object.defineProperty(exports3, "BUILDER_KEYS", { enumerable: true, get: function() {
          return _utils.BUILDER_KEYS;
        } }), Object.defineProperty(exports3, "DEPRECATED_ALIASES", { enumerable: true, get: function() {
          return _deprecatedAliases.DEPRECATED_ALIASES;
        } }), Object.defineProperty(exports3, "DEPRECATED_KEYS", { enumerable: true, get: function() {
          return _utils.DEPRECATED_KEYS;
        } }), Object.defineProperty(exports3, "FLIPPED_ALIAS_KEYS", { enumerable: true, get: function() {
          return _utils.FLIPPED_ALIAS_KEYS;
        } }), Object.defineProperty(exports3, "NODE_FIELDS", { enumerable: true, get: function() {
          return _utils.NODE_FIELDS;
        } }), Object.defineProperty(exports3, "NODE_PARENT_VALIDATIONS", { enumerable: true, get: function() {
          return _utils.NODE_PARENT_VALIDATIONS;
        } }), Object.defineProperty(exports3, "PLACEHOLDERS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS;
        } }), Object.defineProperty(exports3, "PLACEHOLDERS_ALIAS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS_ALIAS;
        } }), Object.defineProperty(exports3, "PLACEHOLDERS_FLIPPED_ALIAS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
        } }), exports3.TYPES = void 0, Object.defineProperty(exports3, "VISITOR_KEYS", { enumerable: true, get: function() {
          return _utils.VISITOR_KEYS;
        } });
        var _toFastProperties = __webpack_require__2("./node_modules/.pnpm/to-fast-properties@2.0.0/node_modules/to-fast-properties/index.js");
        __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/core.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/flow.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/jsx.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/misc.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/experimental.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/typescript.js");
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/placeholders.js"), _deprecatedAliases = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/deprecated-aliases.js");
        Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
          _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
        }), _toFastProperties(_utils.VISITOR_KEYS), _toFastProperties(_utils.ALIAS_KEYS), _toFastProperties(_utils.FLIPPED_ALIAS_KEYS), _toFastProperties(_utils.NODE_FIELDS), _toFastProperties(_utils.BUILDER_KEYS), _toFastProperties(_utils.DEPRECATED_KEYS), _toFastProperties(_placeholders.PLACEHOLDERS_ALIAS), _toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);
        const TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
        exports3.TYPES = TYPES;
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/jsx.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("JSX");
        defineType("JSXAttribute", { visitor: ["name", "value"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName") }, value: { optional: true, validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer") } } }), defineType("JSXClosingElement", { visitor: ["name"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") } } }), defineType("JSXElement", { builder: ["openingElement", "closingElement", "children", "selfClosing"], visitor: ["openingElement", "children", "closingElement"], aliases: ["Immutable", "Expression"], fields: Object.assign({ openingElement: { validate: (0, _utils.assertNodeType)("JSXOpeningElement") }, closingElement: { optional: true, validate: (0, _utils.assertNodeType)("JSXClosingElement") }, children: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment"))) } }, { selfClosing: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }) }), defineType("JSXEmptyExpression", {}), defineType("JSXExpressionContainer", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression") } } }), defineType("JSXSpreadChild", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXMemberExpression", { visitor: ["object", "property"], fields: { object: { validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier") }, property: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXNamespacedName", { visitor: ["namespace", "name"], fields: { namespace: { validate: (0, _utils.assertNodeType)("JSXIdentifier") }, name: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXOpeningElement", { builder: ["name", "attributes", "selfClosing"], visitor: ["name", "attributes"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") }, selfClosing: { default: false }, attributes: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXAttribute", "JSXSpreadAttribute"))) }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("JSXSpreadAttribute", { visitor: ["argument"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXText", { aliases: ["Immutable"], builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXFragment", { builder: ["openingFragment", "closingFragment", "children"], visitor: ["openingFragment", "children", "closingFragment"], aliases: ["Immutable", "Expression"], fields: { openingFragment: { validate: (0, _utils.assertNodeType)("JSXOpeningFragment") }, closingFragment: { validate: (0, _utils.assertNodeType)("JSXClosingFragment") }, children: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment"))) } } }), defineType("JSXOpeningFragment", { aliases: ["Immutable"] }), defineType("JSXClosingFragment", { aliases: ["Immutable"] });
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/misc.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/placeholders.js");
        const defineType = (0, _utils.defineAliasedType)("Miscellaneous");
        defineType("Noop", { visitor: [] }), defineType("Placeholder", { visitor: [], builder: ["expectedNode", "name"], fields: { name: { validate: (0, _utils.assertNodeType)("Identifier") }, expectedNode: { validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS) } } }), defineType("V8IntrinsicIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } });
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/placeholders.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.PLACEHOLDERS_FLIPPED_ALIAS = exports3.PLACEHOLDERS_ALIAS = exports3.PLACEHOLDERS = void 0;
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/utils.js");
        const PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
        exports3.PLACEHOLDERS = PLACEHOLDERS;
        const PLACEHOLDERS_ALIAS = { Declaration: ["Statement"], Pattern: ["PatternLike", "LVal"] };
        exports3.PLACEHOLDERS_ALIAS = PLACEHOLDERS_ALIAS;
        for (const type of PLACEHOLDERS) {
          const alias = _utils.ALIAS_KEYS[type];
          null != alias && alias.length && (PLACEHOLDERS_ALIAS[type] = alias);
        }
        const PLACEHOLDERS_FLIPPED_ALIAS = {};
        exports3.PLACEHOLDERS_FLIPPED_ALIAS = PLACEHOLDERS_FLIPPED_ALIAS, Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
          PLACEHOLDERS_ALIAS[type].forEach((alias) => {
            Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias) || (PLACEHOLDERS_FLIPPED_ALIAS[alias] = []), PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
          });
        });
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/typescript.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/utils.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/core.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/is.js");
        const defineType = (0, _utils.defineAliasedType)("TypeScript"), bool = (0, _utils.assertValueType)("boolean"), tSFunctionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"), optional: true } });
        defineType("TSParameterProperty", { aliases: ["LVal"], visitor: ["parameter"], fields: { accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, parameter: { validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern") }, override: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } } }), defineType("TSDeclareFunction", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSDeclareMethod", { visitor: ["decorators", "key", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSQualifiedName", { aliases: ["TSEntityName"], visitor: ["left", "right"], fields: { left: (0, _utils.validateType)("TSEntityName"), right: (0, _utils.validateType)("Identifier") } });
        const signatureDeclarationCommon = () => ({ typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), parameters: (0, _utils.validateArrayOfType)(["ArrayPattern", "Identifier", "ObjectPattern", "RestElement"]), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") }), callConstructSignatureDeclaration = { aliases: ["TSTypeElement"], visitor: ["typeParameters", "parameters", "typeAnnotation"], fields: signatureDeclarationCommon() };
        defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration), defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
        const namedTypeElementCommon = () => ({ key: (0, _utils.validateType)("Expression"), computed: { default: false }, optional: (0, _utils.validateOptional)(bool) });
        defineType("TSPropertySignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeAnnotation", "initializer"], fields: Object.assign({}, namedTypeElementCommon(), { readonly: (0, _utils.validateOptional)(bool), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), initializer: (0, _utils.validateOptionalType)("Expression"), kind: { validate: (0, _utils.assertOneOf)("get", "set") } }) }), defineType("TSMethodSignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeParameters", "parameters", "typeAnnotation"], fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), { kind: { validate: (0, _utils.assertOneOf)("method", "get", "set") } }) }), defineType("TSIndexSignature", { aliases: ["TSTypeElement"], visitor: ["parameters", "typeAnnotation"], fields: { readonly: (0, _utils.validateOptional)(bool), static: (0, _utils.validateOptional)(bool), parameters: (0, _utils.validateArrayOfType)("Identifier"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") } });
        const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
        for (const type of tsKeywordTypes) defineType(type, { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
        defineType("TSThisType", { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
        const fnOrCtrBase = { aliases: ["TSType"], visitor: ["typeParameters", "parameters", "typeAnnotation"] };
        defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, { fields: signatureDeclarationCommon() })), defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, { fields: Object.assign({}, signatureDeclarationCommon(), { abstract: (0, _utils.validateOptional)(bool) }) })), defineType("TSTypeReference", { aliases: ["TSType"], visitor: ["typeName", "typeParameters"], fields: { typeName: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypePredicate", { aliases: ["TSType"], visitor: ["parameterName", "typeAnnotation"], builder: ["parameterName", "typeAnnotation", "asserts"], fields: { parameterName: (0, _utils.validateType)(["Identifier", "TSThisType"]), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), asserts: (0, _utils.validateOptional)(bool) } }), defineType("TSTypeQuery", { aliases: ["TSType"], visitor: ["exprName", "typeParameters"], fields: { exprName: (0, _utils.validateType)(["TSEntityName", "TSImportType"]), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypeLiteral", { aliases: ["TSType"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSArrayType", { aliases: ["TSType"], visitor: ["elementType"], fields: { elementType: (0, _utils.validateType)("TSType") } }), defineType("TSTupleType", { aliases: ["TSType"], visitor: ["elementTypes"], fields: { elementTypes: (0, _utils.validateArrayOfType)(["TSType", "TSNamedTupleMember"]) } }), defineType("TSOptionalType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSRestType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSNamedTupleMember", { visitor: ["label", "elementType"], builder: ["label", "elementType", "optional"], fields: { label: (0, _utils.validateType)("Identifier"), optional: { validate: bool, default: false }, elementType: (0, _utils.validateType)("TSType") } });
        const unionOrIntersection = { aliases: ["TSType"], visitor: ["types"], fields: { types: (0, _utils.validateArrayOfType)("TSType") } };
        defineType("TSUnionType", unionOrIntersection), defineType("TSIntersectionType", unionOrIntersection), defineType("TSConditionalType", { aliases: ["TSType"], visitor: ["checkType", "extendsType", "trueType", "falseType"], fields: { checkType: (0, _utils.validateType)("TSType"), extendsType: (0, _utils.validateType)("TSType"), trueType: (0, _utils.validateType)("TSType"), falseType: (0, _utils.validateType)("TSType") } }), defineType("TSInferType", { aliases: ["TSType"], visitor: ["typeParameter"], fields: { typeParameter: (0, _utils.validateType)("TSTypeParameter") } }), defineType("TSParenthesizedType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSTypeOperator", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { operator: (0, _utils.validate)((0, _utils.assertValueType)("string")), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSIndexedAccessType", { aliases: ["TSType"], visitor: ["objectType", "indexType"], fields: { objectType: (0, _utils.validateType)("TSType"), indexType: (0, _utils.validateType)("TSType") } }), defineType("TSMappedType", { aliases: ["TSType"], visitor: ["typeParameter", "typeAnnotation", "nameType"], fields: { readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), typeParameter: (0, _utils.validateType)("TSTypeParameter"), optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), typeAnnotation: (0, _utils.validateOptionalType)("TSType"), nameType: (0, _utils.validateOptionalType)("TSType") } }), defineType("TSLiteralType", { aliases: ["TSType", "TSBaseType"], visitor: ["literal"], fields: { literal: { validate: function() {
          const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral"), unaryOperator = (0, _utils.assertOneOf)("-"), literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
          function validator(parent, key, node) {
            (0, _is.default)("UnaryExpression", node) ? (unaryOperator(node, "operator", node.operator), unaryExpression(node, "argument", node.argument)) : literal(parent, key, node);
          }
          return validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"], validator;
        }() } } }), defineType("TSExpressionWithTypeArguments", { aliases: ["TSType"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSInterfaceDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "extends", "body"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")), body: (0, _utils.validateType)("TSInterfaceBody") } }), defineType("TSInterfaceBody", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSTypeAliasDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "typeAnnotation"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSInstantiationExpression", { aliases: ["Expression"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("Expression"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } });
        const TSTypeExpression = { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression", "typeAnnotation"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TSType") } };
        defineType("TSAsExpression", TSTypeExpression), defineType("TSSatisfiesExpression", TSTypeExpression), defineType("TSTypeAssertion", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["typeAnnotation", "expression"], fields: { typeAnnotation: (0, _utils.validateType)("TSType"), expression: (0, _utils.validateType)("Expression") } }), defineType("TSEnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "members"], fields: { declare: (0, _utils.validateOptional)(bool), const: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), members: (0, _utils.validateArrayOfType)("TSEnumMember"), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSEnumMember", { visitor: ["id", "initializer"], fields: { id: (0, _utils.validateType)(["Identifier", "StringLiteral"]), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSModuleDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: { declare: (0, _utils.validateOptional)(bool), global: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)(["Identifier", "StringLiteral"]), body: (0, _utils.validateType)(["TSModuleBlock", "TSModuleDeclaration"]) } }), defineType("TSModuleBlock", { aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"], visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("Statement") } }), defineType("TSImportType", { aliases: ["TSType"], visitor: ["argument", "qualifier", "typeParameters"], fields: { argument: (0, _utils.validateType)("StringLiteral"), qualifier: (0, _utils.validateOptionalType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSImportEqualsDeclaration", { aliases: ["Statement"], visitor: ["id", "moduleReference"], fields: { isExport: (0, _utils.validate)(bool), id: (0, _utils.validateType)("Identifier"), moduleReference: (0, _utils.validateType)(["TSEntityName", "TSExternalModuleReference"]), importKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("TSExternalModuleReference", { visitor: ["expression"], fields: { expression: (0, _utils.validateType)("StringLiteral") } }), defineType("TSNonNullExpression", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSExportAssignment", { aliases: ["Statement"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSNamespaceExportDeclaration", { aliases: ["Statement"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("TSTypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: { validate: (0, _utils.assertNodeType)("TSType") } } }), defineType("TSTypeParameterInstantiation", { visitor: ["params"], fields: { params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType"))) } } }), defineType("TSTypeParameterDeclaration", { visitor: ["params"], fields: { params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSTypeParameter"))) } } }), defineType("TSTypeParameter", { builder: ["constraint", "default", "name"], visitor: ["constraint", "default"], fields: { name: { validate: (0, _utils.assertValueType)("string") }, in: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, out: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, const: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, constraint: { validate: (0, _utils.assertNodeType)("TSType"), optional: true }, default: { validate: (0, _utils.assertNodeType)("TSType"), optional: true } } });
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/utils.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.VISITOR_KEYS = exports3.NODE_PARENT_VALIDATIONS = exports3.NODE_FIELDS = exports3.FLIPPED_ALIAS_KEYS = exports3.DEPRECATED_KEYS = exports3.BUILDER_KEYS = exports3.ALIAS_KEYS = void 0, exports3.arrayOf = arrayOf, exports3.arrayOfType = arrayOfType, exports3.assertEach = assertEach, exports3.assertNodeOrValueType = function(...types) {
          function validate2(node, key, val) {
            for (const type of types) if (getType(val) === type || (0, _is.default)(type, val)) return void (0, _validate.validateChild)(node, key, val);
            throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
          }
          return validate2.oneOfNodeOrValueTypes = types, validate2;
        }, exports3.assertNodeType = assertNodeType, exports3.assertOneOf = function(...values) {
          function validate2(node, key, val) {
            if (values.indexOf(val) < 0) throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
          }
          return validate2.oneOf = values, validate2;
        }, exports3.assertOptionalChainStart = function() {
          return function(node) {
            var _current;
            let current = node;
            for (; node; ) {
              const { type } = current;
              if ("OptionalCallExpression" !== type) {
                if ("OptionalMemberExpression" !== type) break;
                if (current.optional) return;
                current = current.object;
              } else {
                if (current.optional) return;
                current = current.callee;
              }
            }
            throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${null == (_current = current) ? void 0 : _current.type}`);
          };
        }, exports3.assertShape = function(shape) {
          function validate2(node, key, val) {
            const errors = [];
            for (const property of Object.keys(shape)) try {
              (0, _validate.validateField)(node, property, val[property], shape[property]);
            } catch (error) {
              if (error instanceof TypeError) {
                errors.push(error.message);
                continue;
              }
              throw error;
            }
            if (errors.length) throw new TypeError(`Property ${key} of ${node.type} expected to have the following:
${errors.join("\n")}`);
          }
          return validate2.shapeOf = shape, validate2;
        }, exports3.assertValueType = assertValueType, exports3.chain = chain, exports3.default = defineType, exports3.defineAliasedType = function(...aliases2) {
          return (type, opts = {}) => {
            let defined = opts.aliases;
            var _store$opts$inherits$;
            defined || (opts.inherits && (defined = null == (_store$opts$inherits$ = store[opts.inherits].aliases) ? void 0 : _store$opts$inherits$.slice()), null != defined || (defined = []), opts.aliases = defined);
            const additional = aliases2.filter((a) => !defined.includes(a));
            defined.unshift(...additional), defineType(type, opts);
          };
        }, exports3.typeIs = typeIs, exports3.validate = validate, exports3.validateArrayOfType = function(typeName) {
          return validate(arrayOfType(typeName));
        }, exports3.validateOptional = function(validate2) {
          return { validate: validate2, optional: true };
        }, exports3.validateOptionalType = function(typeName) {
          return { validate: typeIs(typeName), optional: true };
        }, exports3.validateType = function(typeName) {
          return validate(typeIs(typeName));
        };
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/is.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/validate.js");
        const VISITOR_KEYS = {};
        exports3.VISITOR_KEYS = VISITOR_KEYS;
        const ALIAS_KEYS = {};
        exports3.ALIAS_KEYS = ALIAS_KEYS;
        const FLIPPED_ALIAS_KEYS = {};
        exports3.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;
        const NODE_FIELDS = {};
        exports3.NODE_FIELDS = NODE_FIELDS;
        const BUILDER_KEYS = {};
        exports3.BUILDER_KEYS = BUILDER_KEYS;
        const DEPRECATED_KEYS = {};
        exports3.DEPRECATED_KEYS = DEPRECATED_KEYS;
        const NODE_PARENT_VALIDATIONS = {};
        function getType(val) {
          return Array.isArray(val) ? "array" : null === val ? "null" : typeof val;
        }
        function validate(validate2) {
          return { validate: validate2 };
        }
        function typeIs(typeName) {
          return "string" == typeof typeName ? assertNodeType(typeName) : assertNodeType(...typeName);
        }
        function arrayOf(elementType) {
          return chain(assertValueType("array"), assertEach(elementType));
        }
        function arrayOfType(typeName) {
          return arrayOf(typeIs(typeName));
        }
        function assertEach(callback) {
          function validator(node, key, val) {
            if (Array.isArray(val)) for (let i = 0; i < val.length; i++) {
              const subkey = `${key}[${i}]`, v = val[i];
              callback(node, subkey, v), process.env.BABEL_TYPES_8_BREAKING && (0, _validate.validateChild)(node, subkey, v);
            }
          }
          return validator.each = callback, validator;
        }
        function assertNodeType(...types) {
          function validate2(node, key, val) {
            for (const type of types) if ((0, _is.default)(type, val)) return void (0, _validate.validateChild)(node, key, val);
            throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
          }
          return validate2.oneOfNodeTypes = types, validate2;
        }
        function assertValueType(type) {
          function validate2(node, key, val) {
            if (!(getType(val) === type)) throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
          }
          return validate2.type = type, validate2;
        }
        function chain(...fns) {
          function validate2(...args) {
            for (const fn of fns) fn(...args);
          }
          if (validate2.chainOf = fns, fns.length >= 2 && "type" in fns[0] && "array" === fns[0].type && !("each" in fns[1])) throw new Error('An assertValueType("array") validator can only be followed by an assertEach(...) validator.');
          return validate2;
        }
        exports3.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;
        const validTypeOpts = ["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"], validFieldKeys = ["default", "optional", "deprecated", "validate"], store = {};
        function defineType(type, opts = {}) {
          const inherits = opts.inherits && store[opts.inherits] || {};
          let fields = opts.fields;
          if (!fields && (fields = {}, inherits.fields)) {
            const keys = Object.getOwnPropertyNames(inherits.fields);
            for (const key of keys) {
              const field = inherits.fields[key], def = field.default;
              if (Array.isArray(def) ? def.length > 0 : def && "object" == typeof def) throw new Error("field defaults can only be primitives or empty arrays currently");
              fields[key] = { default: Array.isArray(def) ? [] : def, optional: field.optional, deprecated: field.deprecated, validate: field.validate };
            }
          }
          const visitor = opts.visitor || inherits.visitor || [], aliases2 = opts.aliases || inherits.aliases || [], builder = opts.builder || inherits.builder || opts.visitor || [];
          for (const k of Object.keys(opts)) if (-1 === validTypeOpts.indexOf(k)) throw new Error(`Unknown type option "${k}" on ${type}`);
          opts.deprecatedAlias && (DEPRECATED_KEYS[opts.deprecatedAlias] = type);
          for (const key of visitor.concat(builder)) fields[key] = fields[key] || {};
          for (const key of Object.keys(fields)) {
            const field = fields[key];
            void 0 !== field.default && -1 === builder.indexOf(key) && (field.optional = true), void 0 === field.default ? field.default = null : field.validate || null == field.default || (field.validate = assertValueType(getType(field.default)));
            for (const k of Object.keys(field)) if (-1 === validFieldKeys.indexOf(k)) throw new Error(`Unknown field key "${k}" on ${type}.${key}`);
          }
          VISITOR_KEYS[type] = opts.visitor = visitor, BUILDER_KEYS[type] = opts.builder = builder, NODE_FIELDS[type] = opts.fields = fields, ALIAS_KEYS[type] = opts.aliases = aliases2, aliases2.forEach((alias) => {
            FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [], FLIPPED_ALIAS_KEYS[alias].push(type);
          }), opts.validate && (NODE_PARENT_VALIDATIONS[type] = opts.validate), store[type] = opts;
        }
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true });
        var _exportNames = { react: true, assertNode: true, createTypeAnnotationBasedOnTypeof: true, createUnionTypeAnnotation: true, createFlowUnionType: true, createTSUnionType: true, cloneNode: true, clone: true, cloneDeep: true, cloneDeepWithoutLoc: true, cloneWithoutLoc: true, addComment: true, addComments: true, inheritInnerComments: true, inheritLeadingComments: true, inheritsComments: true, inheritTrailingComments: true, removeComments: true, ensureBlock: true, toBindingIdentifierName: true, toBlock: true, toComputedKey: true, toExpression: true, toIdentifier: true, toKeyAlias: true, toSequenceExpression: true, toStatement: true, valueToNode: true, appendToMemberExpression: true, inherits: true, prependToMemberExpression: true, removeProperties: true, removePropertiesDeep: true, removeTypeDuplicates: true, getBindingIdentifiers: true, getOuterBindingIdentifiers: true, traverse: true, traverseFast: true, shallowEqual: true, is: true, isBinding: true, isBlockScoped: true, isImmutable: true, isLet: true, isNode: true, isNodesEquivalent: true, isPlaceholderType: true, isReferenced: true, isScope: true, isSpecifierDefault: true, isType: true, isValidES3Identifier: true, isValidIdentifier: true, isVar: true, matchesPattern: true, validate: true, buildMatchMemberExpression: true, __internal__deprecationWarning: true };
        Object.defineProperty(exports3, "__internal__deprecationWarning", { enumerable: true, get: function() {
          return _deprecationWarning.default;
        } }), Object.defineProperty(exports3, "addComment", { enumerable: true, get: function() {
          return _addComment.default;
        } }), Object.defineProperty(exports3, "addComments", { enumerable: true, get: function() {
          return _addComments.default;
        } }), Object.defineProperty(exports3, "appendToMemberExpression", { enumerable: true, get: function() {
          return _appendToMemberExpression.default;
        } }), Object.defineProperty(exports3, "assertNode", { enumerable: true, get: function() {
          return _assertNode.default;
        } }), Object.defineProperty(exports3, "buildMatchMemberExpression", { enumerable: true, get: function() {
          return _buildMatchMemberExpression.default;
        } }), Object.defineProperty(exports3, "clone", { enumerable: true, get: function() {
          return _clone.default;
        } }), Object.defineProperty(exports3, "cloneDeep", { enumerable: true, get: function() {
          return _cloneDeep.default;
        } }), Object.defineProperty(exports3, "cloneDeepWithoutLoc", { enumerable: true, get: function() {
          return _cloneDeepWithoutLoc.default;
        } }), Object.defineProperty(exports3, "cloneNode", { enumerable: true, get: function() {
          return _cloneNode.default;
        } }), Object.defineProperty(exports3, "cloneWithoutLoc", { enumerable: true, get: function() {
          return _cloneWithoutLoc.default;
        } }), Object.defineProperty(exports3, "createFlowUnionType", { enumerable: true, get: function() {
          return _createFlowUnionType.default;
        } }), Object.defineProperty(exports3, "createTSUnionType", { enumerable: true, get: function() {
          return _createTSUnionType.default;
        } }), Object.defineProperty(exports3, "createTypeAnnotationBasedOnTypeof", { enumerable: true, get: function() {
          return _createTypeAnnotationBasedOnTypeof.default;
        } }), Object.defineProperty(exports3, "createUnionTypeAnnotation", { enumerable: true, get: function() {
          return _createFlowUnionType.default;
        } }), Object.defineProperty(exports3, "ensureBlock", { enumerable: true, get: function() {
          return _ensureBlock.default;
        } }), Object.defineProperty(exports3, "getBindingIdentifiers", { enumerable: true, get: function() {
          return _getBindingIdentifiers.default;
        } }), Object.defineProperty(exports3, "getOuterBindingIdentifiers", { enumerable: true, get: function() {
          return _getOuterBindingIdentifiers.default;
        } }), Object.defineProperty(exports3, "inheritInnerComments", { enumerable: true, get: function() {
          return _inheritInnerComments.default;
        } }), Object.defineProperty(exports3, "inheritLeadingComments", { enumerable: true, get: function() {
          return _inheritLeadingComments.default;
        } }), Object.defineProperty(exports3, "inheritTrailingComments", { enumerable: true, get: function() {
          return _inheritTrailingComments.default;
        } }), Object.defineProperty(exports3, "inherits", { enumerable: true, get: function() {
          return _inherits.default;
        } }), Object.defineProperty(exports3, "inheritsComments", { enumerable: true, get: function() {
          return _inheritsComments.default;
        } }), Object.defineProperty(exports3, "is", { enumerable: true, get: function() {
          return _is.default;
        } }), Object.defineProperty(exports3, "isBinding", { enumerable: true, get: function() {
          return _isBinding.default;
        } }), Object.defineProperty(exports3, "isBlockScoped", { enumerable: true, get: function() {
          return _isBlockScoped.default;
        } }), Object.defineProperty(exports3, "isImmutable", { enumerable: true, get: function() {
          return _isImmutable.default;
        } }), Object.defineProperty(exports3, "isLet", { enumerable: true, get: function() {
          return _isLet.default;
        } }), Object.defineProperty(exports3, "isNode", { enumerable: true, get: function() {
          return _isNode.default;
        } }), Object.defineProperty(exports3, "isNodesEquivalent", { enumerable: true, get: function() {
          return _isNodesEquivalent.default;
        } }), Object.defineProperty(exports3, "isPlaceholderType", { enumerable: true, get: function() {
          return _isPlaceholderType.default;
        } }), Object.defineProperty(exports3, "isReferenced", { enumerable: true, get: function() {
          return _isReferenced.default;
        } }), Object.defineProperty(exports3, "isScope", { enumerable: true, get: function() {
          return _isScope.default;
        } }), Object.defineProperty(exports3, "isSpecifierDefault", { enumerable: true, get: function() {
          return _isSpecifierDefault.default;
        } }), Object.defineProperty(exports3, "isType", { enumerable: true, get: function() {
          return _isType.default;
        } }), Object.defineProperty(exports3, "isValidES3Identifier", { enumerable: true, get: function() {
          return _isValidES3Identifier.default;
        } }), Object.defineProperty(exports3, "isValidIdentifier", { enumerable: true, get: function() {
          return _isValidIdentifier.default;
        } }), Object.defineProperty(exports3, "isVar", { enumerable: true, get: function() {
          return _isVar.default;
        } }), Object.defineProperty(exports3, "matchesPattern", { enumerable: true, get: function() {
          return _matchesPattern.default;
        } }), Object.defineProperty(exports3, "prependToMemberExpression", { enumerable: true, get: function() {
          return _prependToMemberExpression.default;
        } }), exports3.react = void 0, Object.defineProperty(exports3, "removeComments", { enumerable: true, get: function() {
          return _removeComments.default;
        } }), Object.defineProperty(exports3, "removeProperties", { enumerable: true, get: function() {
          return _removeProperties.default;
        } }), Object.defineProperty(exports3, "removePropertiesDeep", { enumerable: true, get: function() {
          return _removePropertiesDeep.default;
        } }), Object.defineProperty(exports3, "removeTypeDuplicates", { enumerable: true, get: function() {
          return _removeTypeDuplicates.default;
        } }), Object.defineProperty(exports3, "shallowEqual", { enumerable: true, get: function() {
          return _shallowEqual.default;
        } }), Object.defineProperty(exports3, "toBindingIdentifierName", { enumerable: true, get: function() {
          return _toBindingIdentifierName.default;
        } }), Object.defineProperty(exports3, "toBlock", { enumerable: true, get: function() {
          return _toBlock.default;
        } }), Object.defineProperty(exports3, "toComputedKey", { enumerable: true, get: function() {
          return _toComputedKey.default;
        } }), Object.defineProperty(exports3, "toExpression", { enumerable: true, get: function() {
          return _toExpression.default;
        } }), Object.defineProperty(exports3, "toIdentifier", { enumerable: true, get: function() {
          return _toIdentifier.default;
        } }), Object.defineProperty(exports3, "toKeyAlias", { enumerable: true, get: function() {
          return _toKeyAlias.default;
        } }), Object.defineProperty(exports3, "toSequenceExpression", { enumerable: true, get: function() {
          return _toSequenceExpression.default;
        } }), Object.defineProperty(exports3, "toStatement", { enumerable: true, get: function() {
          return _toStatement.default;
        } }), Object.defineProperty(exports3, "traverse", { enumerable: true, get: function() {
          return _traverse.default;
        } }), Object.defineProperty(exports3, "traverseFast", { enumerable: true, get: function() {
          return _traverseFast.default;
        } }), Object.defineProperty(exports3, "validate", { enumerable: true, get: function() {
          return _validate.default;
        } }), Object.defineProperty(exports3, "valueToNode", { enumerable: true, get: function() {
          return _valueToNode.default;
        } });
        var _isReactComponent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/react/isReactComponent.js"), _isCompatTag = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/react/isCompatTag.js"), _buildChildren = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/react/buildChildren.js"), _assertNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/asserts/assertNode.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/asserts/generated/index.js");
        Object.keys(_index).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index[key];
          } }));
        });
        var _createTypeAnnotationBasedOnTypeof = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"), _createFlowUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"), _createTSUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js");
        Object.keys(_index2).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index2[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index2[key];
          } }));
        });
        var _uppercase = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/uppercase.js");
        Object.keys(_uppercase).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _uppercase[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _uppercase[key];
          } }));
        });
        var _productions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/productions.js");
        Object.keys(_productions).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _productions[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _productions[key];
          } }));
        });
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneNode.js"), _clone = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/clone.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneDeep.js"), _cloneDeepWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"), _cloneWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"), _addComment = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/addComment.js"), _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/addComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritInnerComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritsComments.js"), _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _removeComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/removeComments.js"), _index3 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/constants/generated/index.js");
        Object.keys(_index3).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index3[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index3[key];
          } }));
        });
        var _index4 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/constants/index.js");
        Object.keys(_index4).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index4[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index4[key];
          } }));
        });
        var _ensureBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/ensureBlock.js"), _toBindingIdentifierName = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"), _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toBlock.js"), _toComputedKey = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toComputedKey.js"), _toExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toExpression.js"), _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toIdentifier.js"), _toKeyAlias = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toKeyAlias.js"), _toSequenceExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toSequenceExpression.js"), _toStatement = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/toStatement.js"), _valueToNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/converters/valueToNode.js"), _index5 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js");
        Object.keys(_index5).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index5[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index5[key];
          } }));
        });
        var _appendToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"), _inherits = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/inherits.js"), _prependToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/removeProperties.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"), _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _getOuterBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/traverse/traverse.js");
        Object.keys(_traverse).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _traverse[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _traverse[key];
          } }));
        });
        var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/traverse/traverseFast.js"), _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/shallowEqual.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/is.js"), _isBinding = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isBinding.js"), _isBlockScoped = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isBlockScoped.js"), _isImmutable = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isImmutable.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isLet.js"), _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isNode.js"), _isNodesEquivalent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isNodesEquivalent.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _isReferenced = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isReferenced.js"), _isScope = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isScope.js"), _isSpecifierDefault = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isSpecifierDefault.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isType.js"), _isValidES3Identifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isValidES3Identifier.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _isVar = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isVar.js"), _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/matchesPattern.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/validate.js"), _buildMatchMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"), _index6 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js");
        Object.keys(_index6).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports3 && exports3[key] === _index6[key] || Object.defineProperty(exports3, key, { enumerable: true, get: function() {
            return _index6[key];
          } }));
        });
        var _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        const react = { isReactComponent: _isReactComponent.default, isCompatTag: _isCompatTag.default, buildChildren: _buildChildren.default };
        exports3.react = react;
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(member, append, computed = false) {
          return member.object = (0, _index.memberExpression)(member.object, member.property, member.computed), member.property = append, member.computed = !!computed, member;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function removeTypeDuplicates(nodesIn) {
          const nodes = Array.from(nodesIn), generics = /* @__PURE__ */ new Map(), bases = /* @__PURE__ */ new Map(), typeGroups = /* @__PURE__ */ new Set(), types = [];
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (node && !(types.indexOf(node) >= 0)) {
              if ((0, _index.isAnyTypeAnnotation)(node)) return [node];
              if ((0, _index.isFlowBaseAnnotation)(node)) bases.set(node.type, node);
              else if ((0, _index.isUnionTypeAnnotation)(node)) typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
              else if ((0, _index.isGenericTypeAnnotation)(node)) {
                const name = getQualifiedName(node.id);
                if (generics.has(name)) {
                  let existing = generics.get(name);
                  existing.typeParameters ? node.typeParameters && (existing.typeParameters.params.push(...node.typeParameters.params), existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params)) : existing = node.typeParameters;
                } else generics.set(name, node);
              } else types.push(node);
            }
          }
          for (const [, baseType] of bases) types.push(baseType);
          for (const [, genericName] of generics) types.push(genericName);
          return types;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js");
        function getQualifiedName(node) {
          return (0, _index.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
        }
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/inherits.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, parent) {
          if (!child || !parent) return child;
          for (const key of _index.INHERIT_KEYS.optional) null == child[key] && (child[key] = parent[key]);
          for (const key of Object.keys(parent)) "_" === key[0] && "__clone" !== key && (child[key] = parent[key]);
          for (const key of _index.INHERIT_KEYS.force) child[key] = parent[key];
          return (0, _inheritsComments.default)(child, parent), child;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/constants/index.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/comments/inheritsComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(member, prepend) {
          if ((0, _index2.isSuper)(member.object)) throw new Error("Cannot prepend node to super property access (`super.foo`).");
          return member.object = (0, _index.memberExpression)(prepend, member.object), member;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/removeProperties.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, opts = {}) {
          const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
          for (const key of map) null != node[key] && (node[key] = void 0);
          for (const key of Object.keys(node)) "_" === key[0] && null != node[key] && (node[key] = void 0);
          const symbols = Object.getOwnPropertySymbols(node);
          for (const sym of symbols) node[sym] = null;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/constants/index.js");
        const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"], CLEAR_KEYS_PLUS_COMMENTS = [..._index.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(tree, opts) {
          return (0, _traverseFast.default)(tree, _removeProperties.default, opts), tree;
        };
        var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/traverse/traverseFast.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/removeProperties.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function removeTypeDuplicates(nodesIn) {
          const nodes = Array.from(nodesIn), generics = /* @__PURE__ */ new Map(), bases = /* @__PURE__ */ new Map(), typeGroups = /* @__PURE__ */ new Set(), types = [];
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (node && !(types.indexOf(node) >= 0)) {
              if ((0, _index.isTSAnyKeyword)(node)) return [node];
              if ((0, _index.isTSBaseType)(node)) bases.set(node.type, node);
              else if ((0, _index.isTSUnionType)(node)) typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
              else if ((0, _index.isTSTypeReference)(node) && node.typeParameters) {
                const name = getQualifiedName(node.typeName);
                if (generics.has(name)) {
                  let existing = generics.get(name);
                  existing.typeParameters ? node.typeParameters && (existing.typeParameters.params.push(...node.typeParameters.params), existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params)) : existing = node.typeParameters;
                } else generics.set(name, node);
              } else types.push(node);
            }
          }
          for (const [, baseType] of bases) types.push(baseType);
          for (const [, genericName] of generics) types.push(genericName);
          return types;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js");
        function getQualifiedName(node) {
          return (0, _index.isIdentifier)(node) ? node.name : `${node.right.name}.${getQualifiedName(node.left)}`;
        }
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = getBindingIdentifiers;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js");
        function getBindingIdentifiers(node, duplicates, outerOnly) {
          const search = [].concat(node), ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id) continue;
            const keys = getBindingIdentifiers.keys[id.type];
            if ((0, _index.isIdentifier)(id)) if (duplicates) {
              (ids[id.name] = ids[id.name] || []).push(id);
            } else ids[id.name] = id;
            else if (!(0, _index.isExportDeclaration)(id) || (0, _index.isExportAllDeclaration)(id)) {
              if (outerOnly) {
                if ((0, _index.isFunctionDeclaration)(id)) {
                  search.push(id.id);
                  continue;
                }
                if ((0, _index.isFunctionExpression)(id)) continue;
              }
              if (keys) for (let i = 0; i < keys.length; i++) {
                const nodes = id[keys[i]];
                nodes && (Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes));
              }
            } else (0, _index.isDeclaration)(id.declaration) && search.push(id.declaration);
          }
          return ids;
        }
        getBindingIdentifiers.keys = { DeclareClass: ["id"], DeclareFunction: ["id"], DeclareModule: ["id"], DeclareVariable: ["id"], DeclareInterface: ["id"], DeclareTypeAlias: ["id"], DeclareOpaqueType: ["id"], InterfaceDeclaration: ["id"], TypeAlias: ["id"], OpaqueType: ["id"], CatchClause: ["param"], LabeledStatement: ["label"], UnaryExpression: ["argument"], AssignmentExpression: ["left"], ImportSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportDefaultSpecifier: ["local"], ImportDeclaration: ["specifiers"], ExportSpecifier: ["exported"], ExportNamespaceSpecifier: ["exported"], ExportDefaultSpecifier: ["exported"], FunctionDeclaration: ["id", "params"], FunctionExpression: ["id", "params"], ArrowFunctionExpression: ["params"], ObjectMethod: ["params"], ClassMethod: ["params"], ClassPrivateMethod: ["params"], ForInStatement: ["left"], ForOfStatement: ["left"], ClassDeclaration: ["id"], ClassExpression: ["id"], RestElement: ["argument"], UpdateExpression: ["argument"], ObjectProperty: ["value"], AssignmentPattern: ["left"], ArrayPattern: ["elements"], ObjectPattern: ["properties"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id"] };
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _default = function(node, duplicates) {
          return (0, _getBindingIdentifiers.default)(node, duplicates, true);
        };
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/traverse/traverse.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, handlers, state) {
          "function" == typeof handlers && (handlers = { enter: handlers });
          const { enter, exit } = handlers;
          traverseSimpleImpl(node, enter, exit, state, []);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js");
        function traverseSimpleImpl(node, enter, exit, state, ancestors) {
          const keys = _index.VISITOR_KEYS[node.type];
          if (keys) {
            enter && enter(node, ancestors, state);
            for (const key of keys) {
              const subNode = node[key];
              if (Array.isArray(subNode)) for (let i = 0; i < subNode.length; i++) {
                const child = subNode[i];
                child && (ancestors.push({ node, key, index: i }), traverseSimpleImpl(child, enter, exit, state, ancestors), ancestors.pop());
              }
              else subNode && (ancestors.push({ node, key }), traverseSimpleImpl(subNode, enter, exit, state, ancestors), ancestors.pop());
            }
            exit && exit(node, ancestors, state);
          }
        }
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/traverse/traverseFast.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function traverseFast(node, enter, opts) {
          if (!node) return;
          const keys = _index.VISITOR_KEYS[node.type];
          if (!keys) return;
          enter(node, opts = opts || {});
          for (const key of keys) {
            const subNode = node[key];
            if (Array.isArray(subNode)) for (const node2 of subNode) traverseFast(node2, enter, opts);
            else traverseFast(subNode, enter, opts);
          }
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/deprecationWarning.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(oldName, newName, prefix = "") {
          if (warnings.has(oldName)) return;
          warnings.add(oldName);
          const { internal, trace } = function(skip, length) {
            const { stackTraceLimit, prepareStackTrace } = Error;
            let stackTrace;
            if (Error.stackTraceLimit = 1 + skip + length, Error.prepareStackTrace = function(err, stack) {
              stackTrace = stack;
            }, new Error().stack, Error.stackTraceLimit = stackTraceLimit, Error.prepareStackTrace = prepareStackTrace, !stackTrace) return { internal: false, trace: "" };
            const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
            return { internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()), trace: shortStackTrace.map((frame) => `    at ${frame}`).join("\n") };
          }(1, 2);
          if (internal) return;
          console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`
${trace}`);
        };
        const warnings = /* @__PURE__ */ new Set();
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/inherit.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(key, child, parent) {
          child && parent && (child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean))));
        };
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(child, args) {
          const lines = child.value.split(/\r\n|\n|\r/);
          let lastNonEmptyLine = 0;
          for (let i = 0; i < lines.length; i++) lines[i].match(/[^ \t]/) && (lastNonEmptyLine = i);
          let str = "";
          for (let i = 0; i < lines.length; i++) {
            const line = lines[i], isFirstLine = 0 === i, isLastLine = i === lines.length - 1, isLastNonEmptyLine = i === lastNonEmptyLine;
            let trimmedLine = line.replace(/\t/g, " ");
            isFirstLine || (trimmedLine = trimmedLine.replace(/^[ ]+/, "")), isLastLine || (trimmedLine = trimmedLine.replace(/[ ]+$/, "")), trimmedLine && (isLastNonEmptyLine || (trimmedLine += " "), str += trimmedLine);
          }
          str && args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child));
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/builders/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/shallowEqual.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(actual, expected) {
          const keys = Object.keys(expected);
          for (const key of keys) if (actual[key] !== expected[key]) return false;
          return true;
        };
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(match, allowPartial) {
          const parts = match.split(".");
          return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
        };
        var _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/matchesPattern.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.isAccessor = function(node, opts) {
          if (!node) return false;
          if ("ClassAccessorProperty" !== node.type) return false;
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isAnyTypeAnnotation = function(node, opts) {
          return !!node && ("AnyTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isArgumentPlaceholder = function(node, opts) {
          return !!node && ("ArgumentPlaceholder" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isArrayExpression = function(node, opts) {
          return !!node && ("ArrayExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isArrayPattern = function(node, opts) {
          return !!node && ("ArrayPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isArrayTypeAnnotation = function(node, opts) {
          return !!node && ("ArrayTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isArrowFunctionExpression = function(node, opts) {
          return !!node && ("ArrowFunctionExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isAssignmentExpression = function(node, opts) {
          return !!node && ("AssignmentExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isAssignmentPattern = function(node, opts) {
          return !!node && ("AssignmentPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isAwaitExpression = function(node, opts) {
          return !!node && ("AwaitExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBigIntLiteral = function(node, opts) {
          return !!node && ("BigIntLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBinary = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BinaryExpression":
            case "LogicalExpression":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isBinaryExpression = function(node, opts) {
          return !!node && ("BinaryExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBindExpression = function(node, opts) {
          return !!node && ("BindExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBlock = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "Program":
            case "TSModuleBlock":
              break;
            case "Placeholder":
              if ("BlockStatement" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isBlockParent = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "CatchClause":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "Program":
            case "ObjectMethod":
            case "SwitchStatement":
            case "WhileStatement":
            case "ArrowFunctionExpression":
            case "ForOfStatement":
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "StaticBlock":
            case "TSModuleBlock":
              break;
            case "Placeholder":
              if ("BlockStatement" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isBlockStatement = function(node, opts) {
          return !!node && ("BlockStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBooleanLiteral = function(node, opts) {
          return !!node && ("BooleanLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBooleanLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("BooleanLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBooleanTypeAnnotation = function(node, opts) {
          return !!node && ("BooleanTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isBreakStatement = function(node, opts) {
          return !!node && ("BreakStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isCallExpression = function(node, opts) {
          return !!node && ("CallExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isCatchClause = function(node, opts) {
          return !!node && ("CatchClause" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClass = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ClassExpression":
            case "ClassDeclaration":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isClassAccessorProperty = function(node, opts) {
          return !!node && ("ClassAccessorProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassBody = function(node, opts) {
          return !!node && ("ClassBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassDeclaration = function(node, opts) {
          return !!node && ("ClassDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassExpression = function(node, opts) {
          return !!node && ("ClassExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassImplements = function(node, opts) {
          return !!node && ("ClassImplements" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassMethod = function(node, opts) {
          return !!node && ("ClassMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassPrivateMethod = function(node, opts) {
          return !!node && ("ClassPrivateMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassPrivateProperty = function(node, opts) {
          return !!node && ("ClassPrivateProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isClassProperty = function(node, opts) {
          return !!node && ("ClassProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isCompletionStatement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BreakStatement":
            case "ContinueStatement":
            case "ReturnStatement":
            case "ThrowStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isConditional = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ConditionalExpression":
            case "IfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isConditionalExpression = function(node, opts) {
          return !!node && ("ConditionalExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isContinueStatement = function(node, opts) {
          return !!node && ("ContinueStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDebuggerStatement = function(node, opts) {
          return !!node && ("DebuggerStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDecimalLiteral = function(node, opts) {
          return !!node && ("DecimalLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclaration = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "VariableDeclaration":
            case "ClassDeclaration":
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "InterfaceDeclaration":
            case "OpaqueType":
            case "TypeAlias":
            case "EnumDeclaration":
            case "TSDeclareFunction":
            case "TSInterfaceDeclaration":
            case "TSTypeAliasDeclaration":
            case "TSEnumDeclaration":
            case "TSModuleDeclaration":
              break;
            case "Placeholder":
              if ("Declaration" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isDeclareClass = function(node, opts) {
          return !!node && ("DeclareClass" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareExportAllDeclaration = function(node, opts) {
          return !!node && ("DeclareExportAllDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareExportDeclaration = function(node, opts) {
          return !!node && ("DeclareExportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareFunction = function(node, opts) {
          return !!node && ("DeclareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareInterface = function(node, opts) {
          return !!node && ("DeclareInterface" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareModule = function(node, opts) {
          return !!node && ("DeclareModule" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareModuleExports = function(node, opts) {
          return !!node && ("DeclareModuleExports" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareOpaqueType = function(node, opts) {
          return !!node && ("DeclareOpaqueType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareTypeAlias = function(node, opts) {
          return !!node && ("DeclareTypeAlias" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclareVariable = function(node, opts) {
          return !!node && ("DeclareVariable" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDeclaredPredicate = function(node, opts) {
          return !!node && ("DeclaredPredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDecorator = function(node, opts) {
          return !!node && ("Decorator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDirective = function(node, opts) {
          return !!node && ("Directive" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDirectiveLiteral = function(node, opts) {
          return !!node && ("DirectiveLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDoExpression = function(node, opts) {
          return !!node && ("DoExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isDoWhileStatement = function(node, opts) {
          return !!node && ("DoWhileStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEmptyStatement = function(node, opts) {
          return !!node && ("EmptyStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEmptyTypeAnnotation = function(node, opts) {
          return !!node && ("EmptyTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumBody = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "EnumBooleanBody":
            case "EnumNumberBody":
            case "EnumStringBody":
            case "EnumSymbolBody":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isEnumBooleanBody = function(node, opts) {
          return !!node && ("EnumBooleanBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumBooleanMember = function(node, opts) {
          return !!node && ("EnumBooleanMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumDeclaration = function(node, opts) {
          return !!node && ("EnumDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumDefaultedMember = function(node, opts) {
          return !!node && ("EnumDefaultedMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumMember = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "EnumBooleanMember":
            case "EnumNumberMember":
            case "EnumStringMember":
            case "EnumDefaultedMember":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isEnumNumberBody = function(node, opts) {
          return !!node && ("EnumNumberBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumNumberMember = function(node, opts) {
          return !!node && ("EnumNumberMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumStringBody = function(node, opts) {
          return !!node && ("EnumStringBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumStringMember = function(node, opts) {
          return !!node && ("EnumStringMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isEnumSymbolBody = function(node, opts) {
          return !!node && ("EnumSymbolBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExistsTypeAnnotation = function(node, opts) {
          return !!node && ("ExistsTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportAllDeclaration = function(node, opts) {
          return !!node && ("ExportAllDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportDeclaration = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isExportDefaultDeclaration = function(node, opts) {
          return !!node && ("ExportDefaultDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportDefaultSpecifier = function(node, opts) {
          return !!node && ("ExportDefaultSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportNamedDeclaration = function(node, opts) {
          return !!node && ("ExportNamedDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportNamespaceSpecifier = function(node, opts) {
          return !!node && ("ExportNamespaceSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExportSpecifier = function(node, opts) {
          return !!node && ("ExportSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExpression = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ArrayExpression":
            case "AssignmentExpression":
            case "BinaryExpression":
            case "CallExpression":
            case "ConditionalExpression":
            case "FunctionExpression":
            case "Identifier":
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "LogicalExpression":
            case "MemberExpression":
            case "NewExpression":
            case "ObjectExpression":
            case "SequenceExpression":
            case "ParenthesizedExpression":
            case "ThisExpression":
            case "UnaryExpression":
            case "UpdateExpression":
            case "ArrowFunctionExpression":
            case "ClassExpression":
            case "ImportExpression":
            case "MetaProperty":
            case "Super":
            case "TaggedTemplateExpression":
            case "TemplateLiteral":
            case "YieldExpression":
            case "AwaitExpression":
            case "Import":
            case "BigIntLiteral":
            case "OptionalMemberExpression":
            case "OptionalCallExpression":
            case "TypeCastExpression":
            case "JSXElement":
            case "JSXFragment":
            case "BindExpression":
            case "DoExpression":
            case "RecordExpression":
            case "TupleExpression":
            case "DecimalLiteral":
            case "ModuleExpression":
            case "TopicReference":
            case "PipelineTopicExpression":
            case "PipelineBareFunction":
            case "PipelinePrimaryTopicReference":
            case "TSInstantiationExpression":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Expression":
                case "Identifier":
                case "StringLiteral":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isExpressionStatement = function(node, opts) {
          return !!node && ("ExpressionStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isExpressionWrapper = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExpressionStatement":
            case "ParenthesizedExpression":
            case "TypeCastExpression":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFile = function(node, opts) {
          return !!node && ("File" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isFlow = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AnyTypeAnnotation":
            case "ArrayTypeAnnotation":
            case "BooleanTypeAnnotation":
            case "BooleanLiteralTypeAnnotation":
            case "NullLiteralTypeAnnotation":
            case "ClassImplements":
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "DeclaredPredicate":
            case "ExistsTypeAnnotation":
            case "FunctionTypeAnnotation":
            case "FunctionTypeParam":
            case "GenericTypeAnnotation":
            case "InferredPredicate":
            case "InterfaceExtends":
            case "InterfaceDeclaration":
            case "InterfaceTypeAnnotation":
            case "IntersectionTypeAnnotation":
            case "MixedTypeAnnotation":
            case "EmptyTypeAnnotation":
            case "NullableTypeAnnotation":
            case "NumberLiteralTypeAnnotation":
            case "NumberTypeAnnotation":
            case "ObjectTypeAnnotation":
            case "ObjectTypeInternalSlot":
            case "ObjectTypeCallProperty":
            case "ObjectTypeIndexer":
            case "ObjectTypeProperty":
            case "ObjectTypeSpreadProperty":
            case "OpaqueType":
            case "QualifiedTypeIdentifier":
            case "StringLiteralTypeAnnotation":
            case "StringTypeAnnotation":
            case "SymbolTypeAnnotation":
            case "ThisTypeAnnotation":
            case "TupleTypeAnnotation":
            case "TypeofTypeAnnotation":
            case "TypeAlias":
            case "TypeAnnotation":
            case "TypeCastExpression":
            case "TypeParameter":
            case "TypeParameterDeclaration":
            case "TypeParameterInstantiation":
            case "UnionTypeAnnotation":
            case "Variance":
            case "VoidTypeAnnotation":
            case "EnumDeclaration":
            case "EnumBooleanBody":
            case "EnumNumberBody":
            case "EnumStringBody":
            case "EnumSymbolBody":
            case "EnumBooleanMember":
            case "EnumNumberMember":
            case "EnumStringMember":
            case "EnumDefaultedMember":
            case "IndexedAccessType":
            case "OptionalIndexedAccessType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFlowBaseAnnotation = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AnyTypeAnnotation":
            case "BooleanTypeAnnotation":
            case "NullLiteralTypeAnnotation":
            case "MixedTypeAnnotation":
            case "EmptyTypeAnnotation":
            case "NumberTypeAnnotation":
            case "StringTypeAnnotation":
            case "SymbolTypeAnnotation":
            case "ThisTypeAnnotation":
            case "VoidTypeAnnotation":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFlowDeclaration = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "InterfaceDeclaration":
            case "OpaqueType":
            case "TypeAlias":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFlowPredicate = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DeclaredPredicate":
            case "InferredPredicate":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFlowType = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AnyTypeAnnotation":
            case "ArrayTypeAnnotation":
            case "BooleanTypeAnnotation":
            case "BooleanLiteralTypeAnnotation":
            case "NullLiteralTypeAnnotation":
            case "ExistsTypeAnnotation":
            case "FunctionTypeAnnotation":
            case "GenericTypeAnnotation":
            case "InterfaceTypeAnnotation":
            case "IntersectionTypeAnnotation":
            case "MixedTypeAnnotation":
            case "EmptyTypeAnnotation":
            case "NullableTypeAnnotation":
            case "NumberLiteralTypeAnnotation":
            case "NumberTypeAnnotation":
            case "ObjectTypeAnnotation":
            case "StringLiteralTypeAnnotation":
            case "StringTypeAnnotation":
            case "SymbolTypeAnnotation":
            case "ThisTypeAnnotation":
            case "TupleTypeAnnotation":
            case "TypeofTypeAnnotation":
            case "UnionTypeAnnotation":
            case "VoidTypeAnnotation":
            case "IndexedAccessType":
            case "OptionalIndexedAccessType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFor = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ForInStatement":
            case "ForStatement":
            case "ForOfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isForInStatement = function(node, opts) {
          return !!node && ("ForInStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isForOfStatement = function(node, opts) {
          return !!node && ("ForOfStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isForStatement = function(node, opts) {
          return !!node && ("ForStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isForXStatement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ForInStatement":
            case "ForOfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFunction = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ObjectMethod":
            case "ArrowFunctionExpression":
            case "ClassMethod":
            case "ClassPrivateMethod":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFunctionDeclaration = function(node, opts) {
          return !!node && ("FunctionDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isFunctionExpression = function(node, opts) {
          return !!node && ("FunctionExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isFunctionParent = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ObjectMethod":
            case "ArrowFunctionExpression":
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "StaticBlock":
            case "TSModuleBlock":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isFunctionTypeAnnotation = function(node, opts) {
          return !!node && ("FunctionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isFunctionTypeParam = function(node, opts) {
          return !!node && ("FunctionTypeParam" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isGenericTypeAnnotation = function(node, opts) {
          return !!node && ("GenericTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isIdentifier = function(node, opts) {
          return !!node && ("Identifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isIfStatement = function(node, opts) {
          return !!node && ("IfStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImmutable = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "BigIntLiteral":
            case "JSXAttribute":
            case "JSXClosingElement":
            case "JSXElement":
            case "JSXExpressionContainer":
            case "JSXSpreadChild":
            case "JSXOpeningElement":
            case "JSXText":
            case "JSXFragment":
            case "JSXOpeningFragment":
            case "JSXClosingFragment":
            case "DecimalLiteral":
              break;
            case "Placeholder":
              if ("StringLiteral" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isImport = function(node, opts) {
          return !!node && ("Import" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportAttribute = function(node, opts) {
          return !!node && ("ImportAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportDeclaration = function(node, opts) {
          return !!node && ("ImportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportDefaultSpecifier = function(node, opts) {
          return !!node && ("ImportDefaultSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportExpression = function(node, opts) {
          return !!node && ("ImportExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportNamespaceSpecifier = function(node, opts) {
          return !!node && ("ImportNamespaceSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isImportOrExportDeclaration = isImportOrExportDeclaration, exports3.isImportSpecifier = function(node, opts) {
          return !!node && ("ImportSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isIndexedAccessType = function(node, opts) {
          return !!node && ("IndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isInferredPredicate = function(node, opts) {
          return !!node && ("InferredPredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isInterfaceDeclaration = function(node, opts) {
          return !!node && ("InterfaceDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isInterfaceExtends = function(node, opts) {
          return !!node && ("InterfaceExtends" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isInterfaceTypeAnnotation = function(node, opts) {
          return !!node && ("InterfaceTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isInterpreterDirective = function(node, opts) {
          return !!node && ("InterpreterDirective" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isIntersectionTypeAnnotation = function(node, opts) {
          return !!node && ("IntersectionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSX = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "JSXAttribute":
            case "JSXClosingElement":
            case "JSXElement":
            case "JSXEmptyExpression":
            case "JSXExpressionContainer":
            case "JSXSpreadChild":
            case "JSXIdentifier":
            case "JSXMemberExpression":
            case "JSXNamespacedName":
            case "JSXOpeningElement":
            case "JSXSpreadAttribute":
            case "JSXText":
            case "JSXFragment":
            case "JSXOpeningFragment":
            case "JSXClosingFragment":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isJSXAttribute = function(node, opts) {
          return !!node && ("JSXAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXClosingElement = function(node, opts) {
          return !!node && ("JSXClosingElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXClosingFragment = function(node, opts) {
          return !!node && ("JSXClosingFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXElement = function(node, opts) {
          return !!node && ("JSXElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXEmptyExpression = function(node, opts) {
          return !!node && ("JSXEmptyExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXExpressionContainer = function(node, opts) {
          return !!node && ("JSXExpressionContainer" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXFragment = function(node, opts) {
          return !!node && ("JSXFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXIdentifier = function(node, opts) {
          return !!node && ("JSXIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXMemberExpression = function(node, opts) {
          return !!node && ("JSXMemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXNamespacedName = function(node, opts) {
          return !!node && ("JSXNamespacedName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXOpeningElement = function(node, opts) {
          return !!node && ("JSXOpeningElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXOpeningFragment = function(node, opts) {
          return !!node && ("JSXOpeningFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXSpreadAttribute = function(node, opts) {
          return !!node && ("JSXSpreadAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXSpreadChild = function(node, opts) {
          return !!node && ("JSXSpreadChild" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isJSXText = function(node, opts) {
          return !!node && ("JSXText" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isLVal = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Identifier":
            case "MemberExpression":
            case "RestElement":
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ObjectPattern":
            case "TSParameterProperty":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Pattern":
                case "Identifier":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isLabeledStatement = function(node, opts) {
          return !!node && ("LabeledStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isLiteral = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "TemplateLiteral":
            case "BigIntLiteral":
            case "DecimalLiteral":
              break;
            case "Placeholder":
              if ("StringLiteral" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isLogicalExpression = function(node, opts) {
          return !!node && ("LogicalExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isLoop = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForStatement":
            case "WhileStatement":
            case "ForOfStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isMemberExpression = function(node, opts) {
          return !!node && ("MemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isMetaProperty = function(node, opts) {
          return !!node && ("MetaProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isMethod = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectMethod":
            case "ClassMethod":
            case "ClassPrivateMethod":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isMiscellaneous = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Noop":
            case "Placeholder":
            case "V8IntrinsicIdentifier":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isMixedTypeAnnotation = function(node, opts) {
          return !!node && ("MixedTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isModuleDeclaration = function(node, opts) {
          return (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration"), isImportOrExportDeclaration(node, opts);
        }, exports3.isModuleExpression = function(node, opts) {
          return !!node && ("ModuleExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isModuleSpecifier = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExportSpecifier":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isNewExpression = function(node, opts) {
          return !!node && ("NewExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNoop = function(node, opts) {
          return !!node && ("Noop" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNullLiteral = function(node, opts) {
          return !!node && ("NullLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNullLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("NullLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNullableTypeAnnotation = function(node, opts) {
          return !!node && ("NullableTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNumberLiteral = function(node, opts) {
          return (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral"), !!node && ("NumberLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNumberLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("NumberLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNumberTypeAnnotation = function(node, opts) {
          return !!node && ("NumberTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isNumericLiteral = function(node, opts) {
          return !!node && ("NumericLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectExpression = function(node, opts) {
          return !!node && ("ObjectExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectMember = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectMethod":
            case "ObjectProperty":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isObjectMethod = function(node, opts) {
          return !!node && ("ObjectMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectPattern = function(node, opts) {
          return !!node && ("ObjectPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectProperty = function(node, opts) {
          return !!node && ("ObjectProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeAnnotation = function(node, opts) {
          return !!node && ("ObjectTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeCallProperty = function(node, opts) {
          return !!node && ("ObjectTypeCallProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeIndexer = function(node, opts) {
          return !!node && ("ObjectTypeIndexer" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeInternalSlot = function(node, opts) {
          return !!node && ("ObjectTypeInternalSlot" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeProperty = function(node, opts) {
          return !!node && ("ObjectTypeProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isObjectTypeSpreadProperty = function(node, opts) {
          return !!node && ("ObjectTypeSpreadProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isOpaqueType = function(node, opts) {
          return !!node && ("OpaqueType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isOptionalCallExpression = function(node, opts) {
          return !!node && ("OptionalCallExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isOptionalIndexedAccessType = function(node, opts) {
          return !!node && ("OptionalIndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isOptionalMemberExpression = function(node, opts) {
          return !!node && ("OptionalMemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isParenthesizedExpression = function(node, opts) {
          return !!node && ("ParenthesizedExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isPattern = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ObjectPattern":
              break;
            case "Placeholder":
              if ("Pattern" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isPatternLike = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Identifier":
            case "RestElement":
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ObjectPattern":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Pattern":
                case "Identifier":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isPipelineBareFunction = function(node, opts) {
          return !!node && ("PipelineBareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isPipelinePrimaryTopicReference = function(node, opts) {
          return !!node && ("PipelinePrimaryTopicReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isPipelineTopicExpression = function(node, opts) {
          return !!node && ("PipelineTopicExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isPlaceholder = function(node, opts) {
          return !!node && ("Placeholder" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isPrivate = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
            case "PrivateName":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isPrivateName = function(node, opts) {
          return !!node && ("PrivateName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isProgram = function(node, opts) {
          return !!node && ("Program" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isProperty = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectProperty":
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "ClassPrivateProperty":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isPureish = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "ArrowFunctionExpression":
            case "BigIntLiteral":
            case "DecimalLiteral":
              break;
            case "Placeholder":
              if ("StringLiteral" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isQualifiedTypeIdentifier = function(node, opts) {
          return !!node && ("QualifiedTypeIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isRecordExpression = function(node, opts) {
          return !!node && ("RecordExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isRegExpLiteral = function(node, opts) {
          return !!node && ("RegExpLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isRegexLiteral = function(node, opts) {
          return (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral"), !!node && ("RegexLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isRestElement = function(node, opts) {
          return !!node && ("RestElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isRestProperty = function(node, opts) {
          return (0, _deprecationWarning.default)("isRestProperty", "isRestElement"), !!node && ("RestProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isReturnStatement = function(node, opts) {
          return !!node && ("ReturnStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isScopable = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "CatchClause":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "Program":
            case "ObjectMethod":
            case "SwitchStatement":
            case "WhileStatement":
            case "ArrowFunctionExpression":
            case "ClassExpression":
            case "ClassDeclaration":
            case "ForOfStatement":
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "StaticBlock":
            case "TSModuleBlock":
              break;
            case "Placeholder":
              if ("BlockStatement" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isSequenceExpression = function(node, opts) {
          return !!node && ("SequenceExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSpreadElement = function(node, opts) {
          return !!node && ("SpreadElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSpreadProperty = function(node, opts) {
          return (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement"), !!node && ("SpreadProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isStandardized = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ArrayExpression":
            case "AssignmentExpression":
            case "BinaryExpression":
            case "InterpreterDirective":
            case "Directive":
            case "DirectiveLiteral":
            case "BlockStatement":
            case "BreakStatement":
            case "CallExpression":
            case "CatchClause":
            case "ConditionalExpression":
            case "ContinueStatement":
            case "DebuggerStatement":
            case "DoWhileStatement":
            case "EmptyStatement":
            case "ExpressionStatement":
            case "File":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "Identifier":
            case "IfStatement":
            case "LabeledStatement":
            case "StringLiteral":
            case "NumericLiteral":
            case "NullLiteral":
            case "BooleanLiteral":
            case "RegExpLiteral":
            case "LogicalExpression":
            case "MemberExpression":
            case "NewExpression":
            case "Program":
            case "ObjectExpression":
            case "ObjectMethod":
            case "ObjectProperty":
            case "RestElement":
            case "ReturnStatement":
            case "SequenceExpression":
            case "ParenthesizedExpression":
            case "SwitchCase":
            case "SwitchStatement":
            case "ThisExpression":
            case "ThrowStatement":
            case "TryStatement":
            case "UnaryExpression":
            case "UpdateExpression":
            case "VariableDeclaration":
            case "VariableDeclarator":
            case "WhileStatement":
            case "WithStatement":
            case "AssignmentPattern":
            case "ArrayPattern":
            case "ArrowFunctionExpression":
            case "ClassBody":
            case "ClassExpression":
            case "ClassDeclaration":
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ExportSpecifier":
            case "ForOfStatement":
            case "ImportDeclaration":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ImportExpression":
            case "MetaProperty":
            case "ClassMethod":
            case "ObjectPattern":
            case "SpreadElement":
            case "Super":
            case "TaggedTemplateExpression":
            case "TemplateElement":
            case "TemplateLiteral":
            case "YieldExpression":
            case "AwaitExpression":
            case "Import":
            case "BigIntLiteral":
            case "ExportNamespaceSpecifier":
            case "OptionalMemberExpression":
            case "OptionalCallExpression":
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
            case "PrivateName":
            case "StaticBlock":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Identifier":
                case "StringLiteral":
                case "BlockStatement":
                case "ClassBody":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isStatement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BlockStatement":
            case "BreakStatement":
            case "ContinueStatement":
            case "DebuggerStatement":
            case "DoWhileStatement":
            case "EmptyStatement":
            case "ExpressionStatement":
            case "ForInStatement":
            case "ForStatement":
            case "FunctionDeclaration":
            case "IfStatement":
            case "LabeledStatement":
            case "ReturnStatement":
            case "SwitchStatement":
            case "ThrowStatement":
            case "TryStatement":
            case "VariableDeclaration":
            case "WhileStatement":
            case "WithStatement":
            case "ClassDeclaration":
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ForOfStatement":
            case "ImportDeclaration":
            case "DeclareClass":
            case "DeclareFunction":
            case "DeclareInterface":
            case "DeclareModule":
            case "DeclareModuleExports":
            case "DeclareTypeAlias":
            case "DeclareOpaqueType":
            case "DeclareVariable":
            case "DeclareExportDeclaration":
            case "DeclareExportAllDeclaration":
            case "InterfaceDeclaration":
            case "OpaqueType":
            case "TypeAlias":
            case "EnumDeclaration":
            case "TSDeclareFunction":
            case "TSInterfaceDeclaration":
            case "TSTypeAliasDeclaration":
            case "TSEnumDeclaration":
            case "TSModuleDeclaration":
            case "TSImportEqualsDeclaration":
            case "TSExportAssignment":
            case "TSNamespaceExportDeclaration":
              break;
            case "Placeholder":
              switch (node.expectedNode) {
                case "Statement":
                case "Declaration":
                case "BlockStatement":
                  break;
                default:
                  return false;
              }
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isStaticBlock = function(node, opts) {
          return !!node && ("StaticBlock" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isStringLiteral = function(node, opts) {
          return !!node && ("StringLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isStringLiteralTypeAnnotation = function(node, opts) {
          return !!node && ("StringLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isStringTypeAnnotation = function(node, opts) {
          return !!node && ("StringTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSuper = function(node, opts) {
          return !!node && ("Super" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSwitchCase = function(node, opts) {
          return !!node && ("SwitchCase" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSwitchStatement = function(node, opts) {
          return !!node && ("SwitchStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isSymbolTypeAnnotation = function(node, opts) {
          return !!node && ("SymbolTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSAnyKeyword = function(node, opts) {
          return !!node && ("TSAnyKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSArrayType = function(node, opts) {
          return !!node && ("TSArrayType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSAsExpression = function(node, opts) {
          return !!node && ("TSAsExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSBaseType = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSAnyKeyword":
            case "TSBooleanKeyword":
            case "TSBigIntKeyword":
            case "TSIntrinsicKeyword":
            case "TSNeverKeyword":
            case "TSNullKeyword":
            case "TSNumberKeyword":
            case "TSObjectKeyword":
            case "TSStringKeyword":
            case "TSSymbolKeyword":
            case "TSUndefinedKeyword":
            case "TSUnknownKeyword":
            case "TSVoidKeyword":
            case "TSThisType":
            case "TSLiteralType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isTSBigIntKeyword = function(node, opts) {
          return !!node && ("TSBigIntKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSBooleanKeyword = function(node, opts) {
          return !!node && ("TSBooleanKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSCallSignatureDeclaration = function(node, opts) {
          return !!node && ("TSCallSignatureDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSConditionalType = function(node, opts) {
          return !!node && ("TSConditionalType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSConstructSignatureDeclaration = function(node, opts) {
          return !!node && ("TSConstructSignatureDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSConstructorType = function(node, opts) {
          return !!node && ("TSConstructorType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSDeclareFunction = function(node, opts) {
          return !!node && ("TSDeclareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSDeclareMethod = function(node, opts) {
          return !!node && ("TSDeclareMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSEntityName = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "Identifier":
            case "TSQualifiedName":
              break;
            case "Placeholder":
              if ("Identifier" === node.expectedNode) break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isTSEnumDeclaration = function(node, opts) {
          return !!node && ("TSEnumDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSEnumMember = function(node, opts) {
          return !!node && ("TSEnumMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSExportAssignment = function(node, opts) {
          return !!node && ("TSExportAssignment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSExpressionWithTypeArguments = function(node, opts) {
          return !!node && ("TSExpressionWithTypeArguments" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSExternalModuleReference = function(node, opts) {
          return !!node && ("TSExternalModuleReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSFunctionType = function(node, opts) {
          return !!node && ("TSFunctionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSImportEqualsDeclaration = function(node, opts) {
          return !!node && ("TSImportEqualsDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSImportType = function(node, opts) {
          return !!node && ("TSImportType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSIndexSignature = function(node, opts) {
          return !!node && ("TSIndexSignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSIndexedAccessType = function(node, opts) {
          return !!node && ("TSIndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSInferType = function(node, opts) {
          return !!node && ("TSInferType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSInstantiationExpression = function(node, opts) {
          return !!node && ("TSInstantiationExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSInterfaceBody = function(node, opts) {
          return !!node && ("TSInterfaceBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSInterfaceDeclaration = function(node, opts) {
          return !!node && ("TSInterfaceDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSIntersectionType = function(node, opts) {
          return !!node && ("TSIntersectionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSIntrinsicKeyword = function(node, opts) {
          return !!node && ("TSIntrinsicKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSLiteralType = function(node, opts) {
          return !!node && ("TSLiteralType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSMappedType = function(node, opts) {
          return !!node && ("TSMappedType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSMethodSignature = function(node, opts) {
          return !!node && ("TSMethodSignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSModuleBlock = function(node, opts) {
          return !!node && ("TSModuleBlock" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSModuleDeclaration = function(node, opts) {
          return !!node && ("TSModuleDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNamedTupleMember = function(node, opts) {
          return !!node && ("TSNamedTupleMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNamespaceExportDeclaration = function(node, opts) {
          return !!node && ("TSNamespaceExportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNeverKeyword = function(node, opts) {
          return !!node && ("TSNeverKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNonNullExpression = function(node, opts) {
          return !!node && ("TSNonNullExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNullKeyword = function(node, opts) {
          return !!node && ("TSNullKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSNumberKeyword = function(node, opts) {
          return !!node && ("TSNumberKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSObjectKeyword = function(node, opts) {
          return !!node && ("TSObjectKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSOptionalType = function(node, opts) {
          return !!node && ("TSOptionalType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSParameterProperty = function(node, opts) {
          return !!node && ("TSParameterProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSParenthesizedType = function(node, opts) {
          return !!node && ("TSParenthesizedType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSPropertySignature = function(node, opts) {
          return !!node && ("TSPropertySignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSQualifiedName = function(node, opts) {
          return !!node && ("TSQualifiedName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSRestType = function(node, opts) {
          return !!node && ("TSRestType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSSatisfiesExpression = function(node, opts) {
          return !!node && ("TSSatisfiesExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSStringKeyword = function(node, opts) {
          return !!node && ("TSStringKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSSymbolKeyword = function(node, opts) {
          return !!node && ("TSSymbolKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSThisType = function(node, opts) {
          return !!node && ("TSThisType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTupleType = function(node, opts) {
          return !!node && ("TSTupleType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSType = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSAnyKeyword":
            case "TSBooleanKeyword":
            case "TSBigIntKeyword":
            case "TSIntrinsicKeyword":
            case "TSNeverKeyword":
            case "TSNullKeyword":
            case "TSNumberKeyword":
            case "TSObjectKeyword":
            case "TSStringKeyword":
            case "TSSymbolKeyword":
            case "TSUndefinedKeyword":
            case "TSUnknownKeyword":
            case "TSVoidKeyword":
            case "TSThisType":
            case "TSFunctionType":
            case "TSConstructorType":
            case "TSTypeReference":
            case "TSTypePredicate":
            case "TSTypeQuery":
            case "TSTypeLiteral":
            case "TSArrayType":
            case "TSTupleType":
            case "TSOptionalType":
            case "TSRestType":
            case "TSUnionType":
            case "TSIntersectionType":
            case "TSConditionalType":
            case "TSInferType":
            case "TSParenthesizedType":
            case "TSTypeOperator":
            case "TSIndexedAccessType":
            case "TSMappedType":
            case "TSLiteralType":
            case "TSExpressionWithTypeArguments":
            case "TSImportType":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isTSTypeAliasDeclaration = function(node, opts) {
          return !!node && ("TSTypeAliasDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeAnnotation = function(node, opts) {
          return !!node && ("TSTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeAssertion = function(node, opts) {
          return !!node && ("TSTypeAssertion" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeElement = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSCallSignatureDeclaration":
            case "TSConstructSignatureDeclaration":
            case "TSPropertySignature":
            case "TSMethodSignature":
            case "TSIndexSignature":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isTSTypeLiteral = function(node, opts) {
          return !!node && ("TSTypeLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeOperator = function(node, opts) {
          return !!node && ("TSTypeOperator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeParameter = function(node, opts) {
          return !!node && ("TSTypeParameter" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeParameterDeclaration = function(node, opts) {
          return !!node && ("TSTypeParameterDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeParameterInstantiation = function(node, opts) {
          return !!node && ("TSTypeParameterInstantiation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypePredicate = function(node, opts) {
          return !!node && ("TSTypePredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeQuery = function(node, opts) {
          return !!node && ("TSTypeQuery" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSTypeReference = function(node, opts) {
          return !!node && ("TSTypeReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSUndefinedKeyword = function(node, opts) {
          return !!node && ("TSUndefinedKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSUnionType = function(node, opts) {
          return !!node && ("TSUnionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSUnknownKeyword = function(node, opts) {
          return !!node && ("TSUnknownKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTSVoidKeyword = function(node, opts) {
          return !!node && ("TSVoidKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTaggedTemplateExpression = function(node, opts) {
          return !!node && ("TaggedTemplateExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTemplateElement = function(node, opts) {
          return !!node && ("TemplateElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTemplateLiteral = function(node, opts) {
          return !!node && ("TemplateLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTerminatorless = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "BreakStatement":
            case "ContinueStatement":
            case "ReturnStatement":
            case "ThrowStatement":
            case "YieldExpression":
            case "AwaitExpression":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isThisExpression = function(node, opts) {
          return !!node && ("ThisExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isThisTypeAnnotation = function(node, opts) {
          return !!node && ("ThisTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isThrowStatement = function(node, opts) {
          return !!node && ("ThrowStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTopicReference = function(node, opts) {
          return !!node && ("TopicReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTryStatement = function(node, opts) {
          return !!node && ("TryStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTupleExpression = function(node, opts) {
          return !!node && ("TupleExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTupleTypeAnnotation = function(node, opts) {
          return !!node && ("TupleTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeAlias = function(node, opts) {
          return !!node && ("TypeAlias" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeAnnotation = function(node, opts) {
          return !!node && ("TypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeCastExpression = function(node, opts) {
          return !!node && ("TypeCastExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeParameter = function(node, opts) {
          return !!node && ("TypeParameter" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeParameterDeclaration = function(node, opts) {
          return !!node && ("TypeParameterDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeParameterInstantiation = function(node, opts) {
          return !!node && ("TypeParameterInstantiation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isTypeScript = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "TSParameterProperty":
            case "TSDeclareFunction":
            case "TSDeclareMethod":
            case "TSQualifiedName":
            case "TSCallSignatureDeclaration":
            case "TSConstructSignatureDeclaration":
            case "TSPropertySignature":
            case "TSMethodSignature":
            case "TSIndexSignature":
            case "TSAnyKeyword":
            case "TSBooleanKeyword":
            case "TSBigIntKeyword":
            case "TSIntrinsicKeyword":
            case "TSNeverKeyword":
            case "TSNullKeyword":
            case "TSNumberKeyword":
            case "TSObjectKeyword":
            case "TSStringKeyword":
            case "TSSymbolKeyword":
            case "TSUndefinedKeyword":
            case "TSUnknownKeyword":
            case "TSVoidKeyword":
            case "TSThisType":
            case "TSFunctionType":
            case "TSConstructorType":
            case "TSTypeReference":
            case "TSTypePredicate":
            case "TSTypeQuery":
            case "TSTypeLiteral":
            case "TSArrayType":
            case "TSTupleType":
            case "TSOptionalType":
            case "TSRestType":
            case "TSNamedTupleMember":
            case "TSUnionType":
            case "TSIntersectionType":
            case "TSConditionalType":
            case "TSInferType":
            case "TSParenthesizedType":
            case "TSTypeOperator":
            case "TSIndexedAccessType":
            case "TSMappedType":
            case "TSLiteralType":
            case "TSExpressionWithTypeArguments":
            case "TSInterfaceDeclaration":
            case "TSInterfaceBody":
            case "TSTypeAliasDeclaration":
            case "TSInstantiationExpression":
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSEnumDeclaration":
            case "TSEnumMember":
            case "TSModuleDeclaration":
            case "TSModuleBlock":
            case "TSImportType":
            case "TSImportEqualsDeclaration":
            case "TSExternalModuleReference":
            case "TSNonNullExpression":
            case "TSExportAssignment":
            case "TSNamespaceExportDeclaration":
            case "TSTypeAnnotation":
            case "TSTypeParameterInstantiation":
            case "TSTypeParameterDeclaration":
            case "TSTypeParameter":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isTypeofTypeAnnotation = function(node, opts) {
          return !!node && ("TypeofTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isUnaryExpression = function(node, opts) {
          return !!node && ("UnaryExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isUnaryLike = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "UnaryExpression":
            case "SpreadElement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isUnionTypeAnnotation = function(node, opts) {
          return !!node && ("UnionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isUpdateExpression = function(node, opts) {
          return !!node && ("UpdateExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isUserWhitespacable = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ObjectMethod":
            case "ObjectProperty":
            case "ObjectTypeInternalSlot":
            case "ObjectTypeCallProperty":
            case "ObjectTypeIndexer":
            case "ObjectTypeProperty":
            case "ObjectTypeSpreadProperty":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isV8IntrinsicIdentifier = function(node, opts) {
          return !!node && ("V8IntrinsicIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isVariableDeclaration = function(node, opts) {
          return !!node && ("VariableDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isVariableDeclarator = function(node, opts) {
          return !!node && ("VariableDeclarator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isVariance = function(node, opts) {
          return !!node && ("Variance" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isVoidTypeAnnotation = function(node, opts) {
          return !!node && ("VoidTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isWhile = function(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "DoWhileStatement":
            case "WhileStatement":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }, exports3.isWhileStatement = function(node, opts) {
          return !!node && ("WhileStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isWithStatement = function(node, opts) {
          return !!node && ("WithStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        }, exports3.isYieldExpression = function(node, opts) {
          return !!node && ("YieldExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts)));
        };
        var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/shallowEqual.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        function isImportOrExportDeclaration(node, opts) {
          if (!node) return false;
          switch (node.type) {
            case "ExportAllDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
              break;
            default:
              return false;
          }
          return null == opts || (0, _shallowEqual.default)(node, opts);
        }
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/is.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(type, node, opts) {
          if (!node) return false;
          if (!(0, _isType.default)(node.type, type)) return !opts && "Placeholder" === node.type && type in _index.FLIPPED_ALIAS_KEYS && (0, _isPlaceholderType.default)(node.expectedNode, type);
          return void 0 === opts || (0, _shallowEqual.default)(node, opts);
        };
        var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/utils/shallowEqual.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isType.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isBinding.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, parent, grandparent) {
          if (grandparent && "Identifier" === node.type && "ObjectProperty" === parent.type && "ObjectExpression" === grandparent.type) return false;
          const keys = _getBindingIdentifiers.default.keys[parent.type];
          if (keys) for (let i = 0; i < keys.length; i++) {
            const val = parent[keys[i]];
            if (Array.isArray(val)) {
              if (val.indexOf(node) >= 0) return true;
            } else if (val === node) return true;
          }
          return false;
        };
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isBlockScoped.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _index.isFunctionDeclaration)(node) || (0, _index.isClassDeclaration)(node) || (0, _isLet.default)(node);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isLet.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isImmutable.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          if ((0, _isType.default)(node.type, "Immutable")) return true;
          if ((0, _index.isIdentifier)(node)) return "undefined" === node.name;
          return false;
        };
        var _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isType.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isLet.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _index.isVariableDeclaration)(node) && ("var" !== node.kind || node[_index2.BLOCK_SCOPED_SYMBOL]);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isNode.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return !(!node || !_index.VISITOR_KEYS[node.type]);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isNodesEquivalent.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function isNodesEquivalent(a, b) {
          if ("object" != typeof a || "object" != typeof b || null == a || null == b) return a === b;
          if (a.type !== b.type) return false;
          const fields = Object.keys(_index.NODE_FIELDS[a.type] || a.type), visitorKeys = _index.VISITOR_KEYS[a.type];
          for (const field of fields) {
            const val_a = a[field], val_b = b[field];
            if (typeof val_a != typeof val_b) return false;
            if (null != val_a || null != val_b) {
              if (null == val_a || null == val_b) return false;
              if (Array.isArray(val_a)) {
                if (!Array.isArray(val_b)) return false;
                if (val_a.length !== val_b.length) return false;
                for (let i = 0; i < val_a.length; i++) if (!isNodesEquivalent(val_a[i], val_b[i])) return false;
              } else if ("object" != typeof val_a || null != visitorKeys && visitorKeys.includes(field)) {
                if (!isNodesEquivalent(val_a, val_b)) return false;
              } else for (const key of Object.keys(val_a)) if (val_a[key] !== val_b[key]) return false;
            }
          }
          return true;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isPlaceholderType.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(placeholderType, targetType) {
          if (placeholderType === targetType) return true;
          const aliases2 = _index.PLACEHOLDERS_ALIAS[placeholderType];
          if (aliases2) {
            for (const alias of aliases2) if (targetType === alias) return true;
          }
          return false;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isReferenced.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, parent, grandparent) {
          switch (parent.type) {
            case "MemberExpression":
            case "OptionalMemberExpression":
              return parent.property === node ? !!parent.computed : parent.object === node;
            case "JSXMemberExpression":
              return parent.object === node;
            case "VariableDeclarator":
              return parent.init === node;
            case "ArrowFunctionExpression":
              return parent.body === node;
            case "PrivateName":
            case "LabeledStatement":
            case "CatchClause":
            case "RestElement":
            case "BreakStatement":
            case "ContinueStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ImportAttribute":
            case "JSXAttribute":
            case "ObjectPattern":
            case "ArrayPattern":
            case "MetaProperty":
              return false;
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "ObjectMethod":
              return parent.key === node && !!parent.computed;
            case "ObjectProperty":
              return parent.key === node ? !!parent.computed : !grandparent || "ObjectPattern" !== grandparent.type;
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "TSPropertySignature":
              return parent.key !== node || !!parent.computed;
            case "ClassPrivateProperty":
            case "ObjectTypeProperty":
              return parent.key !== node;
            case "ClassDeclaration":
            case "ClassExpression":
              return parent.superClass === node;
            case "AssignmentExpression":
            case "AssignmentPattern":
              return parent.right === node;
            case "ExportSpecifier":
              return (null == grandparent || !grandparent.source) && parent.local === node;
            case "TSEnumMember":
              return parent.id !== node;
          }
          return true;
        };
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isScope.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, parent) {
          if ((0, _index.isBlockStatement)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) return false;
          if ((0, _index.isPattern)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) return true;
          return (0, _index.isScopable)(node);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isSpecifierDefault.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(specifier) {
          return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, { name: "default" });
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isType.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(nodeType, targetType) {
          if (nodeType === targetType) return true;
          if (null == nodeType) return false;
          if (_index.ALIAS_KEYS[targetType]) return false;
          const aliases2 = _index.FLIPPED_ALIAS_KEYS[targetType];
          if (aliases2) {
            if (aliases2[0] === nodeType) return true;
            for (const alias of aliases2) if (nodeType === alias) return true;
          }
          return false;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isValidES3Identifier.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(name) {
          return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
        };
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js");
        const RESERVED_WORDS_ES3_ONLY = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(name, reserved = true) {
          if ("string" != typeof name) return false;
          if (reserved && ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true))) return false;
          return (0, _helperValidatorIdentifier.isIdentifierName)(name);
        };
        var _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.22.20/node_modules/@babel/helper-validator-identifier/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/isVar.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node) {
          return (0, _index.isVariableDeclaration)(node, { kind: "var" }) && !node[_index2.BLOCK_SCOPED_SYMBOL];
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/matchesPattern.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(member, match, allowPartial) {
          if (!(0, _index.isMemberExpression)(member)) return false;
          const parts = Array.isArray(match) ? match : match.split("."), nodes = [];
          let node;
          for (node = member; (0, _index.isMemberExpression)(node); node = node.object) nodes.push(node.property);
          if (nodes.push(node), nodes.length < parts.length) return false;
          if (!allowPartial && nodes.length > parts.length) return false;
          for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
            const node2 = nodes[j];
            let value2;
            if ((0, _index.isIdentifier)(node2)) value2 = node2.name;
            else if ((0, _index.isStringLiteral)(node2)) value2 = node2.value;
            else {
              if (!(0, _index.isThisExpression)(node2)) return false;
              value2 = "this";
            }
            if (parts[i] !== value2) return false;
          }
          return true;
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/react/isCompatTag.js": (__unused_webpack_module, exports3) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(tagName) {
          return !!tagName && /^[a-z]/.test(tagName);
        };
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/react/isReactComponent.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js").default)("React.Component");
        exports3.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/validators/validate.js": (__unused_webpack_module, exports3, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports3, "__esModule", { value: true }), exports3.default = function(node, key, val) {
          if (!node) return;
          const fields = _index.NODE_FIELDS[node.type];
          if (!fields) return;
          const field = fields[key];
          validateField(node, key, val, field), validateChild(node, key, val);
        }, exports3.validateChild = validateChild, exports3.validateField = validateField;
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.23.0/node_modules/@babel/types/lib/definitions/index.js");
        function validateField(node, key, val, field) {
          null != field && field.validate && (field.optional && null == val || field.validate(node, key, val));
        }
        function validateChild(node, key, val) {
          if (null == val) return;
          const validate = _index.NODE_PARENT_VALIDATIONS[val.type];
          validate && validate(node, key, val);
        }
      }, "./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => __WEBPACK_DEFAULT_EXPORT__ });
        var unicode = { Space_Separator: /[\u1680\u2000-\u200A\u202F\u205F\u3000]/, ID_Start: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/, ID_Continue: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ }, util = { isSpaceSeparator: (c2) => "string" == typeof c2 && unicode.Space_Separator.test(c2), isIdStartChar: (c2) => "string" == typeof c2 && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || "$" === c2 || "_" === c2 || unicode.ID_Start.test(c2)), isIdContinueChar: (c2) => "string" == typeof c2 && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 >= "0" && c2 <= "9" || "$" === c2 || "_" === c2 || "\u200C" === c2 || "\u200D" === c2 || unicode.ID_Continue.test(c2)), isDigit: (c2) => "string" == typeof c2 && /[0-9]/.test(c2), isHexDigit: (c2) => "string" == typeof c2 && /[0-9A-Fa-f]/.test(c2) };
        let source, parseState, stack, pos, line, column, token, key, root;
        function internalize(holder, name, reviver) {
          const value2 = holder[name];
          if (null != value2 && "object" == typeof value2) if (Array.isArray(value2)) for (let i = 0; i < value2.length; i++) {
            const key2 = String(i), replacement = internalize(value2, key2, reviver);
            void 0 === replacement ? delete value2[key2] : Object.defineProperty(value2, key2, { value: replacement, writable: true, enumerable: true, configurable: true });
          }
          else for (const key2 in value2) {
            const replacement = internalize(value2, key2, reviver);
            void 0 === replacement ? delete value2[key2] : Object.defineProperty(value2, key2, { value: replacement, writable: true, enumerable: true, configurable: true });
          }
          return reviver.call(holder, name, value2);
        }
        let lexState, buffer, doubleQuote, sign, c;
        function lex() {
          for (lexState = "default", buffer = "", doubleQuote = false, sign = 1; ; ) {
            c = peek();
            const token2 = lexStates[lexState]();
            if (token2) return token2;
          }
        }
        function peek() {
          if (source[pos]) return String.fromCodePoint(source.codePointAt(pos));
        }
        function read() {
          const c2 = peek();
          return "\n" === c2 ? (line++, column = 0) : c2 ? column += c2.length : column++, c2 && (pos += c2.length), c2;
        }
        const lexStates = { default() {
          switch (c) {
            case "	":
            case "\v":
            case "\f":
            case " ":
            case "\xA0":
            case "\uFEFF":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return void read();
            case "/":
              return read(), void (lexState = "comment");
            case void 0:
              return read(), newToken("eof");
          }
          if (!util.isSpaceSeparator(c)) return lexStates[parseState]();
          read();
        }, comment() {
          switch (c) {
            case "*":
              return read(), void (lexState = "multiLineComment");
            case "/":
              return read(), void (lexState = "singleLineComment");
          }
          throw invalidChar(read());
        }, multiLineComment() {
          switch (c) {
            case "*":
              return read(), void (lexState = "multiLineCommentAsterisk");
            case void 0:
              throw invalidChar(read());
          }
          read();
        }, multiLineCommentAsterisk() {
          switch (c) {
            case "*":
              return void read();
            case "/":
              return read(), void (lexState = "default");
            case void 0:
              throw invalidChar(read());
          }
          read(), lexState = "multiLineComment";
        }, singleLineComment() {
          switch (c) {
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return read(), void (lexState = "default");
            case void 0:
              return read(), newToken("eof");
          }
          read();
        }, value() {
          switch (c) {
            case "{":
            case "[":
              return newToken("punctuator", read());
            case "n":
              return read(), literal("ull"), newToken("null", null);
            case "t":
              return read(), literal("rue"), newToken("boolean", true);
            case "f":
              return read(), literal("alse"), newToken("boolean", false);
            case "-":
            case "+":
              return "-" === read() && (sign = -1), void (lexState = "sign");
            case ".":
              return buffer = read(), void (lexState = "decimalPointLeading");
            case "0":
              return buffer = read(), void (lexState = "zero");
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return buffer = read(), void (lexState = "decimalInteger");
            case "I":
              return read(), literal("nfinity"), newToken("numeric", 1 / 0);
            case "N":
              return read(), literal("aN"), newToken("numeric", NaN);
            case '"':
            case "'":
              return doubleQuote = '"' === read(), buffer = "", void (lexState = "string");
          }
          throw invalidChar(read());
        }, identifierNameStartEscape() {
          if ("u" !== c) throw invalidChar(read());
          read();
          const u = unicodeEscape();
          switch (u) {
            case "$":
            case "_":
              break;
            default:
              if (!util.isIdStartChar(u)) throw invalidIdentifier();
          }
          buffer += u, lexState = "identifierName";
        }, identifierName() {
          switch (c) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              return void (buffer += read());
            case "\\":
              return read(), void (lexState = "identifierNameEscape");
          }
          if (!util.isIdContinueChar(c)) return newToken("identifier", buffer);
          buffer += read();
        }, identifierNameEscape() {
          if ("u" !== c) throw invalidChar(read());
          read();
          const u = unicodeEscape();
          switch (u) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              break;
            default:
              if (!util.isIdContinueChar(u)) throw invalidIdentifier();
          }
          buffer += u, lexState = "identifierName";
        }, sign() {
          switch (c) {
            case ".":
              return buffer = read(), void (lexState = "decimalPointLeading");
            case "0":
              return buffer = read(), void (lexState = "zero");
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return buffer = read(), void (lexState = "decimalInteger");
            case "I":
              return read(), literal("nfinity"), newToken("numeric", sign * (1 / 0));
            case "N":
              return read(), literal("aN"), newToken("numeric", NaN);
          }
          throw invalidChar(read());
        }, zero() {
          switch (c) {
            case ".":
              return buffer += read(), void (lexState = "decimalPoint");
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
            case "x":
            case "X":
              return buffer += read(), void (lexState = "hexadecimal");
          }
          return newToken("numeric", 0 * sign);
        }, decimalInteger() {
          switch (c) {
            case ".":
              return buffer += read(), void (lexState = "decimalPoint");
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
          }
          if (!util.isDigit(c)) return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, decimalPointLeading() {
          if (util.isDigit(c)) return buffer += read(), void (lexState = "decimalFraction");
          throw invalidChar(read());
        }, decimalPoint() {
          switch (c) {
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
          }
          return util.isDigit(c) ? (buffer += read(), void (lexState = "decimalFraction")) : newToken("numeric", sign * Number(buffer));
        }, decimalFraction() {
          switch (c) {
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
          }
          if (!util.isDigit(c)) return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, decimalExponent() {
          switch (c) {
            case "+":
            case "-":
              return buffer += read(), void (lexState = "decimalExponentSign");
          }
          if (util.isDigit(c)) return buffer += read(), void (lexState = "decimalExponentInteger");
          throw invalidChar(read());
        }, decimalExponentSign() {
          if (util.isDigit(c)) return buffer += read(), void (lexState = "decimalExponentInteger");
          throw invalidChar(read());
        }, decimalExponentInteger() {
          if (!util.isDigit(c)) return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, hexadecimal() {
          if (util.isHexDigit(c)) return buffer += read(), void (lexState = "hexadecimalInteger");
          throw invalidChar(read());
        }, hexadecimalInteger() {
          if (!util.isHexDigit(c)) return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, string() {
          switch (c) {
            case "\\":
              return read(), void (buffer += function() {
                switch (peek()) {
                  case "b":
                    return read(), "\b";
                  case "f":
                    return read(), "\f";
                  case "n":
                    return read(), "\n";
                  case "r":
                    return read(), "\r";
                  case "t":
                    return read(), "	";
                  case "v":
                    return read(), "\v";
                  case "0":
                    if (read(), util.isDigit(peek())) throw invalidChar(read());
                    return "\0";
                  case "x":
                    return read(), function() {
                      let buffer2 = "", c2 = peek();
                      if (!util.isHexDigit(c2)) throw invalidChar(read());
                      if (buffer2 += read(), c2 = peek(), !util.isHexDigit(c2)) throw invalidChar(read());
                      return buffer2 += read(), String.fromCodePoint(parseInt(buffer2, 16));
                    }();
                  case "u":
                    return read(), unicodeEscape();
                  case "\n":
                  case "\u2028":
                  case "\u2029":
                    return read(), "";
                  case "\r":
                    return read(), "\n" === peek() && read(), "";
                  case "1":
                  case "2":
                  case "3":
                  case "4":
                  case "5":
                  case "6":
                  case "7":
                  case "8":
                  case "9":
                  case void 0:
                    throw invalidChar(read());
                }
                return read();
              }());
            case '"':
              return doubleQuote ? (read(), newToken("string", buffer)) : void (buffer += read());
            case "'":
              return doubleQuote ? void (buffer += read()) : (read(), newToken("string", buffer));
            case "\n":
            case "\r":
              throw invalidChar(read());
            case "\u2028":
            case "\u2029":
              !function(c2) {
                console.warn(`JSON5: '${formatChar(c2)}' in strings is not valid ECMAScript; consider escaping`);
              }(c);
              break;
            case void 0:
              throw invalidChar(read());
          }
          buffer += read();
        }, start() {
          switch (c) {
            case "{":
            case "[":
              return newToken("punctuator", read());
          }
          lexState = "value";
        }, beforePropertyName() {
          switch (c) {
            case "$":
            case "_":
              return buffer = read(), void (lexState = "identifierName");
            case "\\":
              return read(), void (lexState = "identifierNameStartEscape");
            case "}":
              return newToken("punctuator", read());
            case '"':
            case "'":
              return doubleQuote = '"' === read(), void (lexState = "string");
          }
          if (util.isIdStartChar(c)) return buffer += read(), void (lexState = "identifierName");
          throw invalidChar(read());
        }, afterPropertyName() {
          if (":" === c) return newToken("punctuator", read());
          throw invalidChar(read());
        }, beforePropertyValue() {
          lexState = "value";
        }, afterPropertyValue() {
          switch (c) {
            case ",":
            case "}":
              return newToken("punctuator", read());
          }
          throw invalidChar(read());
        }, beforeArrayValue() {
          if ("]" === c) return newToken("punctuator", read());
          lexState = "value";
        }, afterArrayValue() {
          switch (c) {
            case ",":
            case "]":
              return newToken("punctuator", read());
          }
          throw invalidChar(read());
        }, end() {
          throw invalidChar(read());
        } };
        function newToken(type, value2) {
          return { type, value: value2, line, column };
        }
        function literal(s) {
          for (const c2 of s) {
            if (peek() !== c2) throw invalidChar(read());
            read();
          }
        }
        function unicodeEscape() {
          let buffer2 = "", count = 4;
          for (; count-- > 0; ) {
            const c2 = peek();
            if (!util.isHexDigit(c2)) throw invalidChar(read());
            buffer2 += read();
          }
          return String.fromCodePoint(parseInt(buffer2, 16));
        }
        const parseStates = { start() {
          if ("eof" === token.type) throw invalidEOF();
          push();
        }, beforePropertyName() {
          switch (token.type) {
            case "identifier":
            case "string":
              return key = token.value, void (parseState = "afterPropertyName");
            case "punctuator":
              return void pop();
            case "eof":
              throw invalidEOF();
          }
        }, afterPropertyName() {
          if ("eof" === token.type) throw invalidEOF();
          parseState = "beforePropertyValue";
        }, beforePropertyValue() {
          if ("eof" === token.type) throw invalidEOF();
          push();
        }, beforeArrayValue() {
          if ("eof" === token.type) throw invalidEOF();
          "punctuator" !== token.type || "]" !== token.value ? push() : pop();
        }, afterPropertyValue() {
          if ("eof" === token.type) throw invalidEOF();
          switch (token.value) {
            case ",":
              return void (parseState = "beforePropertyName");
            case "}":
              pop();
          }
        }, afterArrayValue() {
          if ("eof" === token.type) throw invalidEOF();
          switch (token.value) {
            case ",":
              return void (parseState = "beforeArrayValue");
            case "]":
              pop();
          }
        }, end() {
        } };
        function push() {
          let value2;
          switch (token.type) {
            case "punctuator":
              switch (token.value) {
                case "{":
                  value2 = {};
                  break;
                case "[":
                  value2 = [];
              }
              break;
            case "null":
            case "boolean":
            case "numeric":
            case "string":
              value2 = token.value;
          }
          if (void 0 === root) root = value2;
          else {
            const parent = stack[stack.length - 1];
            Array.isArray(parent) ? parent.push(value2) : Object.defineProperty(parent, key, { value: value2, writable: true, enumerable: true, configurable: true });
          }
          if (null !== value2 && "object" == typeof value2) stack.push(value2), parseState = Array.isArray(value2) ? "beforeArrayValue" : "beforePropertyName";
          else {
            const current = stack[stack.length - 1];
            parseState = null == current ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
          }
        }
        function pop() {
          stack.pop();
          const current = stack[stack.length - 1];
          parseState = null == current ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
        }
        function invalidChar(c2) {
          return syntaxError(void 0 === c2 ? `JSON5: invalid end of input at ${line}:${column}` : `JSON5: invalid character '${formatChar(c2)}' at ${line}:${column}`);
        }
        function invalidEOF() {
          return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
        }
        function invalidIdentifier() {
          return column -= 5, syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);
        }
        function formatChar(c2) {
          const replacements = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
          if (replacements[c2]) return replacements[c2];
          if (c2 < " ") {
            const hexString = c2.charCodeAt(0).toString(16);
            return "\\x" + ("00" + hexString).substring(hexString.length);
          }
          return c2;
        }
        function syntaxError(message) {
          const err = new SyntaxError(message);
          return err.lineNumber = line, err.columnNumber = column, err;
        }
        const JSON5 = { parse: function(text, reviver) {
          source = String(text), parseState = "start", stack = [], pos = 0, line = 1, column = 0, token = void 0, key = void 0, root = void 0;
          do {
            token = lex(), parseStates[parseState]();
          } while ("eof" !== token.type);
          return "function" == typeof reviver ? internalize({ "": root }, "", reviver) : root;
        }, stringify: function(value2, replacer, space) {
          const stack2 = [];
          let propertyList, replacerFunc, quote, indent = "", gap = "";
          if (null == replacer || "object" != typeof replacer || Array.isArray(replacer) || (space = replacer.space, quote = replacer.quote, replacer = replacer.replacer), "function" == typeof replacer) replacerFunc = replacer;
          else if (Array.isArray(replacer)) {
            propertyList = [];
            for (const v of replacer) {
              let item;
              "string" == typeof v ? item = v : ("number" == typeof v || v instanceof String || v instanceof Number) && (item = String(v)), void 0 !== item && propertyList.indexOf(item) < 0 && propertyList.push(item);
            }
          }
          return space instanceof Number ? space = Number(space) : space instanceof String && (space = String(space)), "number" == typeof space ? space > 0 && (space = Math.min(10, Math.floor(space)), gap = "          ".substr(0, space)) : "string" == typeof space && (gap = space.substr(0, 10)), serializeProperty("", { "": value2 });
          function serializeProperty(key2, holder) {
            let value3 = holder[key2];
            switch (null != value3 && ("function" == typeof value3.toJSON5 ? value3 = value3.toJSON5(key2) : "function" == typeof value3.toJSON && (value3 = value3.toJSON(key2))), replacerFunc && (value3 = replacerFunc.call(holder, key2, value3)), value3 instanceof Number ? value3 = Number(value3) : value3 instanceof String ? value3 = String(value3) : value3 instanceof Boolean && (value3 = value3.valueOf()), value3) {
              case null:
                return "null";
              case true:
                return "true";
              case false:
                return "false";
            }
            return "string" == typeof value3 ? quoteString(value3) : "number" == typeof value3 ? String(value3) : "object" == typeof value3 ? Array.isArray(value3) ? function(value4) {
              if (stack2.indexOf(value4) >= 0) throw TypeError("Converting circular structure to JSON5");
              stack2.push(value4);
              let stepback = indent;
              indent += gap;
              let final, partial = [];
              for (let i = 0; i < value4.length; i++) {
                const propertyString = serializeProperty(String(i), value4);
                partial.push(void 0 !== propertyString ? propertyString : "null");
              }
              if (0 === partial.length) final = "[]";
              else if ("" === gap) {
                final = "[" + partial.join(",") + "]";
              } else {
                let separator = ",\n" + indent, properties = partial.join(separator);
                final = "[\n" + indent + properties + ",\n" + stepback + "]";
              }
              return stack2.pop(), indent = stepback, final;
            }(value3) : function(value4) {
              if (stack2.indexOf(value4) >= 0) throw TypeError("Converting circular structure to JSON5");
              stack2.push(value4);
              let stepback = indent;
              indent += gap;
              let final, keys = propertyList || Object.keys(value4), partial = [];
              for (const key3 of keys) {
                const propertyString = serializeProperty(key3, value4);
                if (void 0 !== propertyString) {
                  let member = serializeKey(key3) + ":";
                  "" !== gap && (member += " "), member += propertyString, partial.push(member);
                }
              }
              if (0 === partial.length) final = "{}";
              else {
                let properties;
                if ("" === gap) properties = partial.join(","), final = "{" + properties + "}";
                else {
                  let separator = ",\n" + indent;
                  properties = partial.join(separator), final = "{\n" + indent + properties + ",\n" + stepback + "}";
                }
              }
              return stack2.pop(), indent = stepback, final;
            }(value3) : void 0;
          }
          function quoteString(value3) {
            const quotes = { "'": 0.1, '"': 0.2 }, replacements = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
            let product = "";
            for (let i = 0; i < value3.length; i++) {
              const c2 = value3[i];
              switch (c2) {
                case "'":
                case '"':
                  quotes[c2]++, product += c2;
                  continue;
                case "\0":
                  if (util.isDigit(value3[i + 1])) {
                    product += "\\x00";
                    continue;
                  }
              }
              if (replacements[c2]) product += replacements[c2];
              else if (c2 < " ") {
                let hexString = c2.charCodeAt(0).toString(16);
                product += "\\x" + ("00" + hexString).substring(hexString.length);
              } else product += c2;
            }
            const quoteChar = quote || Object.keys(quotes).reduce((a, b) => quotes[a] < quotes[b] ? a : b);
            return product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]), quoteChar + product + quoteChar;
          }
          function serializeKey(key2) {
            if (0 === key2.length) return quoteString(key2);
            const firstChar = String.fromCodePoint(key2.codePointAt(0));
            if (!util.isIdStartChar(firstChar)) return quoteString(key2);
            for (let i = firstChar.length; i < key2.length; i++) if (!util.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i)))) return quoteString(key2);
            return key2;
          }
        } };
        const __WEBPACK_DEFAULT_EXPORT__ = JSON5;
      }, "./node_modules/.pnpm/@babel+preset-typescript@7.23.2_@babel+core@7.23.2/node_modules/@babel/preset-typescript/package.json": (module3) => {
        "use strict";
        module3.exports = JSON.parse('{"name":"@babel/preset-typescript","version":"7.23.2","description":"Babel preset for TypeScript.","repository":{"type":"git","url":"https://github.com/babel/babel.git","directory":"packages/babel-preset-typescript"},"license":"MIT","publishConfig":{"access":"public"},"main":"./lib/index.js","keywords":["babel-preset","typescript"],"dependencies":{"@babel/helper-plugin-utils":"^7.22.5","@babel/helper-validator-option":"^7.22.15","@babel/plugin-syntax-jsx":"^7.22.5","@babel/plugin-transform-modules-commonjs":"^7.23.0","@babel/plugin-transform-typescript":"^7.22.15"},"peerDependencies":{"@babel/core":"^7.0.0-0"},"devDependencies":{"@babel/core":"^7.23.0","@babel/helper-plugin-test-runner":"^7.22.5"},"homepage":"https://babel.dev/docs/en/next/babel-preset-typescript","bugs":"https://github.com/babel/babel/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3A%22area%3A%20typescript%22+is%3Aopen","engines":{"node":">=6.9.0"},"author":"The Babel Team (https://babel.dev/team)","type":"commonjs"}');
      }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json": (module3) => {
        "use strict";
        module3.exports = JSON.parse('{"builtin":{"Array":false,"ArrayBuffer":false,"Atomics":false,"BigInt":false,"BigInt64Array":false,"BigUint64Array":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"globalThis":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es5":{"Array":false,"Boolean":false,"constructor":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"propertyIsEnumerable":false,"RangeError":false,"ReferenceError":false,"RegExp":false,"String":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false},"es2015":{"Array":false,"ArrayBuffer":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es2017":{"Array":false,"ArrayBuffer":false,"Atomics":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"browser":{"AbortController":false,"AbortSignal":false,"addEventListener":false,"alert":false,"AnalyserNode":false,"Animation":false,"AnimationEffectReadOnly":false,"AnimationEffectTiming":false,"AnimationEffectTimingReadOnly":false,"AnimationEvent":false,"AnimationPlaybackEvent":false,"AnimationTimeline":false,"applicationCache":false,"ApplicationCache":false,"ApplicationCacheErrorEvent":false,"atob":false,"Attr":false,"Audio":false,"AudioBuffer":false,"AudioBufferSourceNode":false,"AudioContext":false,"AudioDestinationNode":false,"AudioListener":false,"AudioNode":false,"AudioParam":false,"AudioProcessingEvent":false,"AudioScheduledSourceNode":false,"AudioWorkletGlobalScope ":false,"AudioWorkletNode":false,"AudioWorkletProcessor":false,"BarProp":false,"BaseAudioContext":false,"BatteryManager":false,"BeforeUnloadEvent":false,"BiquadFilterNode":false,"Blob":false,"BlobEvent":false,"blur":false,"BroadcastChannel":false,"btoa":false,"BudgetService":false,"ByteLengthQueuingStrategy":false,"Cache":false,"caches":false,"CacheStorage":false,"cancelAnimationFrame":false,"cancelIdleCallback":false,"CanvasCaptureMediaStreamTrack":false,"CanvasGradient":false,"CanvasPattern":false,"CanvasRenderingContext2D":false,"ChannelMergerNode":false,"ChannelSplitterNode":false,"CharacterData":false,"clearInterval":false,"clearTimeout":false,"clientInformation":false,"ClipboardEvent":false,"close":false,"closed":false,"CloseEvent":false,"Comment":false,"CompositionEvent":false,"confirm":false,"console":false,"ConstantSourceNode":false,"ConvolverNode":false,"CountQueuingStrategy":false,"createImageBitmap":false,"Credential":false,"CredentialsContainer":false,"crypto":false,"Crypto":false,"CryptoKey":false,"CSS":false,"CSSConditionRule":false,"CSSFontFaceRule":false,"CSSGroupingRule":false,"CSSImportRule":false,"CSSKeyframeRule":false,"CSSKeyframesRule":false,"CSSMediaRule":false,"CSSNamespaceRule":false,"CSSPageRule":false,"CSSRule":false,"CSSRuleList":false,"CSSStyleDeclaration":false,"CSSStyleRule":false,"CSSStyleSheet":false,"CSSSupportsRule":false,"CustomElementRegistry":false,"customElements":false,"CustomEvent":false,"DataTransfer":false,"DataTransferItem":false,"DataTransferItemList":false,"defaultstatus":false,"defaultStatus":false,"DelayNode":false,"DeviceMotionEvent":false,"DeviceOrientationEvent":false,"devicePixelRatio":false,"dispatchEvent":false,"document":false,"Document":false,"DocumentFragment":false,"DocumentType":false,"DOMError":false,"DOMException":false,"DOMImplementation":false,"DOMMatrix":false,"DOMMatrixReadOnly":false,"DOMParser":false,"DOMPoint":false,"DOMPointReadOnly":false,"DOMQuad":false,"DOMRect":false,"DOMRectReadOnly":false,"DOMStringList":false,"DOMStringMap":false,"DOMTokenList":false,"DragEvent":false,"DynamicsCompressorNode":false,"Element":false,"ErrorEvent":false,"event":false,"Event":false,"EventSource":false,"EventTarget":false,"external":false,"fetch":false,"File":false,"FileList":false,"FileReader":false,"find":false,"focus":false,"FocusEvent":false,"FontFace":false,"FontFaceSetLoadEvent":false,"FormData":false,"frameElement":false,"frames":false,"GainNode":false,"Gamepad":false,"GamepadButton":false,"GamepadEvent":false,"getComputedStyle":false,"getSelection":false,"HashChangeEvent":false,"Headers":false,"history":false,"History":false,"HTMLAllCollection":false,"HTMLAnchorElement":false,"HTMLAreaElement":false,"HTMLAudioElement":false,"HTMLBaseElement":false,"HTMLBodyElement":false,"HTMLBRElement":false,"HTMLButtonElement":false,"HTMLCanvasElement":false,"HTMLCollection":false,"HTMLContentElement":false,"HTMLDataElement":false,"HTMLDataListElement":false,"HTMLDetailsElement":false,"HTMLDialogElement":false,"HTMLDirectoryElement":false,"HTMLDivElement":false,"HTMLDListElement":false,"HTMLDocument":false,"HTMLElement":false,"HTMLEmbedElement":false,"HTMLFieldSetElement":false,"HTMLFontElement":false,"HTMLFormControlsCollection":false,"HTMLFormElement":false,"HTMLFrameElement":false,"HTMLFrameSetElement":false,"HTMLHeadElement":false,"HTMLHeadingElement":false,"HTMLHRElement":false,"HTMLHtmlElement":false,"HTMLIFrameElement":false,"HTMLImageElement":false,"HTMLInputElement":false,"HTMLLabelElement":false,"HTMLLegendElement":false,"HTMLLIElement":false,"HTMLLinkElement":false,"HTMLMapElement":false,"HTMLMarqueeElement":false,"HTMLMediaElement":false,"HTMLMenuElement":false,"HTMLMetaElement":false,"HTMLMeterElement":false,"HTMLModElement":false,"HTMLObjectElement":false,"HTMLOListElement":false,"HTMLOptGroupElement":false,"HTMLOptionElement":false,"HTMLOptionsCollection":false,"HTMLOutputElement":false,"HTMLParagraphElement":false,"HTMLParamElement":false,"HTMLPictureElement":false,"HTMLPreElement":false,"HTMLProgressElement":false,"HTMLQuoteElement":false,"HTMLScriptElement":false,"HTMLSelectElement":false,"HTMLShadowElement":false,"HTMLSlotElement":false,"HTMLSourceElement":false,"HTMLSpanElement":false,"HTMLStyleElement":false,"HTMLTableCaptionElement":false,"HTMLTableCellElement":false,"HTMLTableColElement":false,"HTMLTableElement":false,"HTMLTableRowElement":false,"HTMLTableSectionElement":false,"HTMLTemplateElement":false,"HTMLTextAreaElement":false,"HTMLTimeElement":false,"HTMLTitleElement":false,"HTMLTrackElement":false,"HTMLUListElement":false,"HTMLUnknownElement":false,"HTMLVideoElement":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"IdleDeadline":false,"IIRFilterNode":false,"Image":false,"ImageBitmap":false,"ImageBitmapRenderingContext":false,"ImageCapture":false,"ImageData":false,"indexedDB":false,"innerHeight":false,"innerWidth":false,"InputEvent":false,"IntersectionObserver":false,"IntersectionObserverEntry":false,"Intl":false,"isSecureContext":false,"KeyboardEvent":false,"KeyframeEffect":false,"KeyframeEffectReadOnly":false,"length":false,"localStorage":false,"location":true,"Location":false,"locationbar":false,"matchMedia":false,"MediaDeviceInfo":false,"MediaDevices":false,"MediaElementAudioSourceNode":false,"MediaEncryptedEvent":false,"MediaError":false,"MediaKeyMessageEvent":false,"MediaKeySession":false,"MediaKeyStatusMap":false,"MediaKeySystemAccess":false,"MediaList":false,"MediaQueryList":false,"MediaQueryListEvent":false,"MediaRecorder":false,"MediaSettingsRange":false,"MediaSource":false,"MediaStream":false,"MediaStreamAudioDestinationNode":false,"MediaStreamAudioSourceNode":false,"MediaStreamEvent":false,"MediaStreamTrack":false,"MediaStreamTrackEvent":false,"menubar":false,"MessageChannel":false,"MessageEvent":false,"MessagePort":false,"MIDIAccess":false,"MIDIConnectionEvent":false,"MIDIInput":false,"MIDIInputMap":false,"MIDIMessageEvent":false,"MIDIOutput":false,"MIDIOutputMap":false,"MIDIPort":false,"MimeType":false,"MimeTypeArray":false,"MouseEvent":false,"moveBy":false,"moveTo":false,"MutationEvent":false,"MutationObserver":false,"MutationRecord":false,"name":false,"NamedNodeMap":false,"NavigationPreloadManager":false,"navigator":false,"Navigator":false,"NetworkInformation":false,"Node":false,"NodeFilter":false,"NodeIterator":false,"NodeList":false,"Notification":false,"OfflineAudioCompletionEvent":false,"OfflineAudioContext":false,"offscreenBuffering":false,"OffscreenCanvas":true,"onabort":true,"onafterprint":true,"onanimationend":true,"onanimationiteration":true,"onanimationstart":true,"onappinstalled":true,"onauxclick":true,"onbeforeinstallprompt":true,"onbeforeprint":true,"onbeforeunload":true,"onblur":true,"oncancel":true,"oncanplay":true,"oncanplaythrough":true,"onchange":true,"onclick":true,"onclose":true,"oncontextmenu":true,"oncuechange":true,"ondblclick":true,"ondevicemotion":true,"ondeviceorientation":true,"ondeviceorientationabsolute":true,"ondrag":true,"ondragend":true,"ondragenter":true,"ondragleave":true,"ondragover":true,"ondragstart":true,"ondrop":true,"ondurationchange":true,"onemptied":true,"onended":true,"onerror":true,"onfocus":true,"ongotpointercapture":true,"onhashchange":true,"oninput":true,"oninvalid":true,"onkeydown":true,"onkeypress":true,"onkeyup":true,"onlanguagechange":true,"onload":true,"onloadeddata":true,"onloadedmetadata":true,"onloadstart":true,"onlostpointercapture":true,"onmessage":true,"onmessageerror":true,"onmousedown":true,"onmouseenter":true,"onmouseleave":true,"onmousemove":true,"onmouseout":true,"onmouseover":true,"onmouseup":true,"onmousewheel":true,"onoffline":true,"ononline":true,"onpagehide":true,"onpageshow":true,"onpause":true,"onplay":true,"onplaying":true,"onpointercancel":true,"onpointerdown":true,"onpointerenter":true,"onpointerleave":true,"onpointermove":true,"onpointerout":true,"onpointerover":true,"onpointerup":true,"onpopstate":true,"onprogress":true,"onratechange":true,"onrejectionhandled":true,"onreset":true,"onresize":true,"onscroll":true,"onsearch":true,"onseeked":true,"onseeking":true,"onselect":true,"onstalled":true,"onstorage":true,"onsubmit":true,"onsuspend":true,"ontimeupdate":true,"ontoggle":true,"ontransitionend":true,"onunhandledrejection":true,"onunload":true,"onvolumechange":true,"onwaiting":true,"onwheel":true,"open":false,"openDatabase":false,"opener":false,"Option":false,"origin":false,"OscillatorNode":false,"outerHeight":false,"outerWidth":false,"PageTransitionEvent":false,"pageXOffset":false,"pageYOffset":false,"PannerNode":false,"parent":false,"Path2D":false,"PaymentAddress":false,"PaymentRequest":false,"PaymentRequestUpdateEvent":false,"PaymentResponse":false,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceLongTaskTiming":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceNavigationTiming":false,"PerformanceObserver":false,"PerformanceObserverEntryList":false,"PerformancePaintTiming":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"PeriodicWave":false,"Permissions":false,"PermissionStatus":false,"personalbar":false,"PhotoCapabilities":false,"Plugin":false,"PluginArray":false,"PointerEvent":false,"PopStateEvent":false,"postMessage":false,"Presentation":false,"PresentationAvailability":false,"PresentationConnection":false,"PresentationConnectionAvailableEvent":false,"PresentationConnectionCloseEvent":false,"PresentationConnectionList":false,"PresentationReceiver":false,"PresentationRequest":false,"print":false,"ProcessingInstruction":false,"ProgressEvent":false,"PromiseRejectionEvent":false,"prompt":false,"PushManager":false,"PushSubscription":false,"PushSubscriptionOptions":false,"queueMicrotask":false,"RadioNodeList":false,"Range":false,"ReadableStream":false,"registerProcessor":false,"RemotePlayback":false,"removeEventListener":false,"Request":false,"requestAnimationFrame":false,"requestIdleCallback":false,"resizeBy":false,"ResizeObserver":false,"ResizeObserverEntry":false,"resizeTo":false,"Response":false,"RTCCertificate":false,"RTCDataChannel":false,"RTCDataChannelEvent":false,"RTCDtlsTransport":false,"RTCIceCandidate":false,"RTCIceGatherer":false,"RTCIceTransport":false,"RTCPeerConnection":false,"RTCPeerConnectionIceEvent":false,"RTCRtpContributingSource":false,"RTCRtpReceiver":false,"RTCRtpSender":false,"RTCSctpTransport":false,"RTCSessionDescription":false,"RTCStatsReport":false,"RTCTrackEvent":false,"screen":false,"Screen":false,"screenLeft":false,"ScreenOrientation":false,"screenTop":false,"screenX":false,"screenY":false,"ScriptProcessorNode":false,"scroll":false,"scrollbars":false,"scrollBy":false,"scrollTo":false,"scrollX":false,"scrollY":false,"SecurityPolicyViolationEvent":false,"Selection":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerRegistration":false,"sessionStorage":false,"setInterval":false,"setTimeout":false,"ShadowRoot":false,"SharedWorker":false,"SourceBuffer":false,"SourceBufferList":false,"speechSynthesis":false,"SpeechSynthesisEvent":false,"SpeechSynthesisUtterance":false,"StaticRange":false,"status":false,"statusbar":false,"StereoPannerNode":false,"stop":false,"Storage":false,"StorageEvent":false,"StorageManager":false,"styleMedia":false,"StyleSheet":false,"StyleSheetList":false,"SubtleCrypto":false,"SVGAElement":false,"SVGAngle":false,"SVGAnimatedAngle":false,"SVGAnimatedBoolean":false,"SVGAnimatedEnumeration":false,"SVGAnimatedInteger":false,"SVGAnimatedLength":false,"SVGAnimatedLengthList":false,"SVGAnimatedNumber":false,"SVGAnimatedNumberList":false,"SVGAnimatedPreserveAspectRatio":false,"SVGAnimatedRect":false,"SVGAnimatedString":false,"SVGAnimatedTransformList":false,"SVGAnimateElement":false,"SVGAnimateMotionElement":false,"SVGAnimateTransformElement":false,"SVGAnimationElement":false,"SVGCircleElement":false,"SVGClipPathElement":false,"SVGComponentTransferFunctionElement":false,"SVGDefsElement":false,"SVGDescElement":false,"SVGDiscardElement":false,"SVGElement":false,"SVGEllipseElement":false,"SVGFEBlendElement":false,"SVGFEColorMatrixElement":false,"SVGFEComponentTransferElement":false,"SVGFECompositeElement":false,"SVGFEConvolveMatrixElement":false,"SVGFEDiffuseLightingElement":false,"SVGFEDisplacementMapElement":false,"SVGFEDistantLightElement":false,"SVGFEDropShadowElement":false,"SVGFEFloodElement":false,"SVGFEFuncAElement":false,"SVGFEFuncBElement":false,"SVGFEFuncGElement":false,"SVGFEFuncRElement":false,"SVGFEGaussianBlurElement":false,"SVGFEImageElement":false,"SVGFEMergeElement":false,"SVGFEMergeNodeElement":false,"SVGFEMorphologyElement":false,"SVGFEOffsetElement":false,"SVGFEPointLightElement":false,"SVGFESpecularLightingElement":false,"SVGFESpotLightElement":false,"SVGFETileElement":false,"SVGFETurbulenceElement":false,"SVGFilterElement":false,"SVGForeignObjectElement":false,"SVGGElement":false,"SVGGeometryElement":false,"SVGGradientElement":false,"SVGGraphicsElement":false,"SVGImageElement":false,"SVGLength":false,"SVGLengthList":false,"SVGLinearGradientElement":false,"SVGLineElement":false,"SVGMarkerElement":false,"SVGMaskElement":false,"SVGMatrix":false,"SVGMetadataElement":false,"SVGMPathElement":false,"SVGNumber":false,"SVGNumberList":false,"SVGPathElement":false,"SVGPatternElement":false,"SVGPoint":false,"SVGPointList":false,"SVGPolygonElement":false,"SVGPolylineElement":false,"SVGPreserveAspectRatio":false,"SVGRadialGradientElement":false,"SVGRect":false,"SVGRectElement":false,"SVGScriptElement":false,"SVGSetElement":false,"SVGStopElement":false,"SVGStringList":false,"SVGStyleElement":false,"SVGSVGElement":false,"SVGSwitchElement":false,"SVGSymbolElement":false,"SVGTextContentElement":false,"SVGTextElement":false,"SVGTextPathElement":false,"SVGTextPositioningElement":false,"SVGTitleElement":false,"SVGTransform":false,"SVGTransformList":false,"SVGTSpanElement":false,"SVGUnitTypes":false,"SVGUseElement":false,"SVGViewElement":false,"TaskAttributionTiming":false,"Text":false,"TextDecoder":false,"TextEncoder":false,"TextEvent":false,"TextMetrics":false,"TextTrack":false,"TextTrackCue":false,"TextTrackCueList":false,"TextTrackList":false,"TimeRanges":false,"toolbar":false,"top":false,"Touch":false,"TouchEvent":false,"TouchList":false,"TrackEvent":false,"TransitionEvent":false,"TreeWalker":false,"UIEvent":false,"URL":false,"URLSearchParams":false,"ValidityState":false,"visualViewport":false,"VisualViewport":false,"VTTCue":false,"WaveShaperNode":false,"WebAssembly":false,"WebGL2RenderingContext":false,"WebGLActiveInfo":false,"WebGLBuffer":false,"WebGLContextEvent":false,"WebGLFramebuffer":false,"WebGLProgram":false,"WebGLQuery":false,"WebGLRenderbuffer":false,"WebGLRenderingContext":false,"WebGLSampler":false,"WebGLShader":false,"WebGLShaderPrecisionFormat":false,"WebGLSync":false,"WebGLTexture":false,"WebGLTransformFeedback":false,"WebGLUniformLocation":false,"WebGLVertexArrayObject":false,"WebSocket":false,"WheelEvent":false,"window":false,"Window":false,"Worker":false,"WritableStream":false,"XMLDocument":false,"XMLHttpRequest":false,"XMLHttpRequestEventTarget":false,"XMLHttpRequestUpload":false,"XMLSerializer":false,"XPathEvaluator":false,"XPathExpression":false,"XPathResult":false,"XSLTProcessor":false},"worker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"clearInterval":false,"clearTimeout":false,"close":true,"console":false,"fetch":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":true,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onlanguagechange":true,"onmessage":true,"onoffline":true,"ononline":true,"onrejectionhandled":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"removeEventListener":false,"Request":false,"Response":false,"self":true,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"node":{"__dirname":false,"__filename":false,"Buffer":false,"clearImmediate":false,"clearInterval":false,"clearTimeout":false,"console":false,"exports":true,"global":false,"Intl":false,"module":false,"process":false,"queueMicrotask":false,"require":false,"setImmediate":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false},"commonjs":{"exports":true,"global":false,"module":false,"require":false},"amd":{"define":false,"require":false},"mocha":{"after":false,"afterEach":false,"before":false,"beforeEach":false,"context":false,"describe":false,"it":false,"mocha":false,"run":false,"setup":false,"specify":false,"suite":false,"suiteSetup":false,"suiteTeardown":false,"teardown":false,"test":false,"xcontext":false,"xdescribe":false,"xit":false,"xspecify":false},"jasmine":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fail":false,"fdescribe":false,"fit":false,"it":false,"jasmine":false,"pending":false,"runs":false,"spyOn":false,"spyOnProperty":false,"waits":false,"waitsFor":false,"xdescribe":false,"xit":false},"jest":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fdescribe":false,"fit":false,"it":false,"jest":false,"pit":false,"require":false,"test":false,"xdescribe":false,"xit":false,"xtest":false},"qunit":{"asyncTest":false,"deepEqual":false,"equal":false,"expect":false,"module":false,"notDeepEqual":false,"notEqual":false,"notOk":false,"notPropEqual":false,"notStrictEqual":false,"ok":false,"propEqual":false,"QUnit":false,"raises":false,"start":false,"stop":false,"strictEqual":false,"test":false,"throws":false},"phantomjs":{"console":true,"exports":true,"phantom":true,"require":true,"WebPage":true},"couch":{"emit":false,"exports":false,"getRow":false,"log":false,"module":false,"provides":false,"require":false,"respond":false,"send":false,"start":false,"sum":false},"rhino":{"defineClass":false,"deserialize":false,"gc":false,"help":false,"importClass":false,"importPackage":false,"java":false,"load":false,"loadClass":false,"Packages":false,"print":false,"quit":false,"readFile":false,"readUrl":false,"runCommand":false,"seal":false,"serialize":false,"spawn":false,"sync":false,"toint32":false,"version":false},"nashorn":{"__DIR__":false,"__FILE__":false,"__LINE__":false,"com":false,"edu":false,"exit":false,"java":false,"Java":false,"javafx":false,"JavaImporter":false,"javax":false,"JSAdapter":false,"load":false,"loadWithNewGlobal":false,"org":false,"Packages":false,"print":false,"quit":false},"wsh":{"ActiveXObject":true,"Enumerator":true,"GetObject":true,"ScriptEngine":true,"ScriptEngineBuildVersion":true,"ScriptEngineMajorVersion":true,"ScriptEngineMinorVersion":true,"VBArray":true,"WScript":true,"WSH":true,"XDomainRequest":true},"jquery":{"$":false,"jQuery":false},"yui":{"YAHOO":false,"YAHOO_config":false,"YUI":false,"YUI_config":false},"shelljs":{"cat":false,"cd":false,"chmod":false,"config":false,"cp":false,"dirs":false,"echo":false,"env":false,"error":false,"exec":false,"exit":false,"find":false,"grep":false,"ln":false,"ls":false,"mkdir":false,"mv":false,"popd":false,"pushd":false,"pwd":false,"rm":false,"sed":false,"set":false,"target":false,"tempdir":false,"test":false,"touch":false,"which":false},"prototypejs":{"$":false,"$$":false,"$A":false,"$break":false,"$continue":false,"$F":false,"$H":false,"$R":false,"$w":false,"Abstract":false,"Ajax":false,"Autocompleter":false,"Builder":false,"Class":false,"Control":false,"Draggable":false,"Draggables":false,"Droppables":false,"Effect":false,"Element":false,"Enumerable":false,"Event":false,"Field":false,"Form":false,"Hash":false,"Insertion":false,"ObjectRange":false,"PeriodicalExecuter":false,"Position":false,"Prototype":false,"Scriptaculous":false,"Selector":false,"Sortable":false,"SortableObserver":false,"Sound":false,"Template":false,"Toggle":false,"Try":false},"meteor":{"_":false,"$":false,"Accounts":false,"AccountsClient":false,"AccountsCommon":false,"AccountsServer":false,"App":false,"Assets":false,"Blaze":false,"check":false,"Cordova":false,"DDP":false,"DDPRateLimiter":false,"DDPServer":false,"Deps":false,"EJSON":false,"Email":false,"HTTP":false,"Log":false,"Match":false,"Meteor":false,"Mongo":false,"MongoInternals":false,"Npm":false,"Package":false,"Plugin":false,"process":false,"Random":false,"ReactiveDict":false,"ReactiveVar":false,"Router":false,"ServiceConfiguration":false,"Session":false,"share":false,"Spacebars":false,"Template":false,"Tinytest":false,"Tracker":false,"UI":false,"Utils":false,"WebApp":false,"WebAppInternals":false},"mongo":{"_isWindows":false,"_rand":false,"BulkWriteResult":false,"cat":false,"cd":false,"connect":false,"db":false,"getHostName":false,"getMemInfo":false,"hostname":false,"ISODate":false,"listFiles":false,"load":false,"ls":false,"md5sumFile":false,"mkdir":false,"Mongo":false,"NumberInt":false,"NumberLong":false,"ObjectId":false,"PlanCache":false,"print":false,"printjson":false,"pwd":false,"quit":false,"removeFile":false,"rs":false,"sh":false,"UUID":false,"version":false,"WriteResult":false},"applescript":{"$":false,"Application":false,"Automation":false,"console":false,"delay":false,"Library":false,"ObjC":false,"ObjectSpecifier":false,"Path":false,"Progress":false,"Ref":false},"serviceworker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"CacheStorage":false,"clearInterval":false,"clearTimeout":false,"Client":false,"clients":false,"Clients":false,"close":true,"console":false,"ExtendableEvent":false,"ExtendableMessageEvent":false,"fetch":false,"FetchEvent":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":false,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onfetch":true,"oninstall":true,"onlanguagechange":true,"onmessage":true,"onmessageerror":true,"onnotificationclick":true,"onnotificationclose":true,"onoffline":true,"ononline":true,"onpush":true,"onpushsubscriptionchange":true,"onrejectionhandled":true,"onsync":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"registration":false,"removeEventListener":false,"Request":false,"Response":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerGlobalScope":false,"ServiceWorkerMessageEvent":false,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"skipWaiting":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"WindowClient":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"atomtest":{"advanceClock":false,"fakeClearInterval":false,"fakeClearTimeout":false,"fakeSetInterval":false,"fakeSetTimeout":false,"resetTimeouts":false,"waitsForPromise":false},"embertest":{"andThen":false,"click":false,"currentPath":false,"currentRouteName":false,"currentURL":false,"fillIn":false,"find":false,"findAll":false,"findWithAssert":false,"keyEvent":false,"pauseTest":false,"resumeTest":false,"triggerEvent":false,"visit":false,"wait":false},"protractor":{"$":false,"$$":false,"browser":false,"by":false,"By":false,"DartObject":false,"element":false,"protractor":false},"shared-node-browser":{"clearInterval":false,"clearTimeout":false,"console":false,"setInterval":false,"setTimeout":false,"URL":false,"URLSearchParams":false},"webextensions":{"browser":false,"chrome":false,"opr":false},"greasemonkey":{"cloneInto":false,"createObjectIn":false,"exportFunction":false,"GM":false,"GM_addStyle":false,"GM_deleteValue":false,"GM_getResourceText":false,"GM_getResourceURL":false,"GM_getValue":false,"GM_info":false,"GM_listValues":false,"GM_log":false,"GM_openInTab":false,"GM_registerMenuCommand":false,"GM_setClipboard":false,"GM_setValue":false,"GM_xmlhttpRequest":false,"unsafeWindow":false},"devtools":{"$":false,"$_":false,"$$":false,"$0":false,"$1":false,"$2":false,"$3":false,"$4":false,"$x":false,"chrome":false,"clear":false,"copy":false,"debug":false,"dir":false,"dirxml":false,"getEventListeners":false,"inspect":false,"keys":false,"monitor":false,"monitorEvents":false,"profile":false,"profileEnd":false,"queryObjects":false,"table":false,"undebug":false,"unmonitor":false,"unmonitorEvents":false,"values":false}}');
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule) return cachedModule.exports;
        var module3 = __webpack_module_cache__[moduleId] = { exports: {} };
        return __webpack_modules__[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__), module3.exports;
      }
      __webpack_require__.d = (exports3, definition) => {
        for (var key in definition) __webpack_require__.o(definition, key) && !__webpack_require__.o(exports3, key) && Object.defineProperty(exports3, key, { enumerable: true, get: definition[key] });
      }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.r = (exports3) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(exports3, "__esModule", { value: true });
      };
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, { default: () => transform2 });
        var lib = __webpack_require__("./node_modules/.pnpm/@babel+core@7.23.2/node_modules/@babel/core/lib/index.js"), external_url_ = __webpack_require__("url"), template_lib = __webpack_require__("./node_modules/.pnpm/@babel+template@7.22.15/node_modules/@babel/template/lib/index.js");
        function TransformImportMetaPlugin(_ctx, opts) {
          return { name: "transform-import-meta", visitor: { Program(path3) {
            const metas = [];
            if (path3.traverse({ MemberExpression(memberExpPath) {
              const { node } = memberExpPath;
              "MetaProperty" === node.object.type && "import" === node.object.meta.name && "meta" === node.object.property.name && "Identifier" === node.property.type && "url" === node.property.name && metas.push(memberExpPath);
            } }), 0 !== metas.length) for (const meta of metas) meta.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify((0, external_url_.pathToFileURL)(opts.filename)) : "require('url').pathToFileURL(__filename).toString()"}`);
          } } };
        }
        function importMetaEnvPlugin({ template, types }) {
          return { name: "@import-meta-env/babel", visitor: { Identifier(path3) {
            if (!types.isIdentifier(path3)) return;
            if (!types.isMemberExpression(path3.parentPath) && !types.isOptionalMemberExpression(path3.parentPath)) return;
            if (!types.isMemberExpression(path3.parentPath.node)) return;
            const parentNode = path3.parentPath.node;
            if (!types.isMetaProperty(parentNode.object)) return;
            const parentNodeObjMeta = parentNode.object;
            "import" === parentNodeObjMeta.meta.name && "meta" === parentNodeObjMeta.property.name && "env" === parentNode.property.name && path3.parentPath.replaceWith(template.expression.ast("process.env"));
          } } };
        }
        function transform2(opts) {
          var _a, _b, _c, _d, _e, _f;
          const _opts = Object.assign(Object.assign({ babelrc: false, configFile: false, compact: false, retainLines: "boolean" != typeof opts.retainLines || opts.retainLines, filename: "", cwd: "/" }, opts.babel), { plugins: [[__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"), { allowTopLevelThis: true }], [__webpack_require__("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/index.js"), { noInterop: true }], [TransformImportMetaPlugin, { filename: opts.filename }], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-class-properties/lib/index.js")], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-export-namespace-from@7.22.11_@babel+core@7.23.2/node_modules/@babel/plugin-transform-export-namespace-from/lib/index.js")], [importMetaEnvPlugin]] });
          opts.ts && (_opts.plugins.push([__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.22.15_@babel+core@7.23.2/node_modules/@babel/plugin-transform-typescript/lib/index.js"), { allowDeclareFields: true }]), _opts.plugins.unshift([__webpack_require__("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2_@babel+core@7.23.2/node_modules/babel-plugin-transform-typescript-metadata/lib/plugin.js")], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.23.2_@babel+core@7.23.2/node_modules/@babel/plugin-proposal-decorators/lib/index.js"), { legacy: true }]), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js")), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.22.5_@babel+core@7.23.2/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js"))), opts.legacy && (_opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-nullish-coalescing-operator@7.22.11_@babel+core@7.23.2/node_modules/@babel/plugin-transform-nullish-coalescing-operator/lib/index.js")), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-optional-chaining@7.23.0_@babel+core@7.23.2/node_modules/@babel/plugin-transform-optional-chaining/lib/index.js"))), opts.babel && Array.isArray(opts.babel.plugins) && (null === (_a = _opts.plugins) || void 0 === _a || _a.push(...opts.babel.plugins));
          try {
            return { code: (null === (_b = (0, lib.transformSync)(opts.source, _opts)) || void 0 === _b ? void 0 : _b.code) || "" };
          } catch (error) {
            return { error, code: "exports.__JITI_ERROR__ = " + JSON.stringify({ filename: opts.filename, line: (null === (_c = error.loc) || void 0 === _c ? void 0 : _c.line) || 0, column: (null === (_d = error.loc) || void 0 === _d ? void 0 : _d.column) || 0, code: null === (_e = error.code) || void 0 === _e ? void 0 : _e.replace("BABEL_", "").replace("PARSE_ERROR", "ParseError"), message: null === (_f = error.message) || void 0 === _f ? void 0 : _f.replace("/: ", "").replace(/\(.+\)\s*$/, "") }) };
          }
        }
      })(), module2.exports = __webpack_exports__.default;
    })();
  }
});

// ../../../node_modules/.pnpm/jiti@1.21.0/node_modules/jiti/lib/index.js
var require_lib = __commonJS({
  "../../../node_modules/.pnpm/jiti@1.21.0/node_modules/jiti/lib/index.js"(exports2, module2) {
    function onError(err) {
      throw err;
    }
    module2.exports = function(filename, opts) {
      const jiti2 = require_jiti();
      opts = { onError, ...opts };
      if (!opts.transform) {
        opts.transform = require_babel();
      }
      return jiti2(filename, opts);
    };
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/keywords.js
var require_keywords = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/keywords.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ContextualKeyword;
    (function(ContextualKeyword2) {
      const NONE = 0;
      ContextualKeyword2[ContextualKeyword2["NONE"] = NONE] = "NONE";
      const _abstract = NONE + 1;
      ContextualKeyword2[ContextualKeyword2["_abstract"] = _abstract] = "_abstract";
      const _accessor = _abstract + 1;
      ContextualKeyword2[ContextualKeyword2["_accessor"] = _accessor] = "_accessor";
      const _as = _accessor + 1;
      ContextualKeyword2[ContextualKeyword2["_as"] = _as] = "_as";
      const _assert = _as + 1;
      ContextualKeyword2[ContextualKeyword2["_assert"] = _assert] = "_assert";
      const _asserts = _assert + 1;
      ContextualKeyword2[ContextualKeyword2["_asserts"] = _asserts] = "_asserts";
      const _async = _asserts + 1;
      ContextualKeyword2[ContextualKeyword2["_async"] = _async] = "_async";
      const _await = _async + 1;
      ContextualKeyword2[ContextualKeyword2["_await"] = _await] = "_await";
      const _checks = _await + 1;
      ContextualKeyword2[ContextualKeyword2["_checks"] = _checks] = "_checks";
      const _constructor = _checks + 1;
      ContextualKeyword2[ContextualKeyword2["_constructor"] = _constructor] = "_constructor";
      const _declare = _constructor + 1;
      ContextualKeyword2[ContextualKeyword2["_declare"] = _declare] = "_declare";
      const _enum = _declare + 1;
      ContextualKeyword2[ContextualKeyword2["_enum"] = _enum] = "_enum";
      const _exports = _enum + 1;
      ContextualKeyword2[ContextualKeyword2["_exports"] = _exports] = "_exports";
      const _from = _exports + 1;
      ContextualKeyword2[ContextualKeyword2["_from"] = _from] = "_from";
      const _get = _from + 1;
      ContextualKeyword2[ContextualKeyword2["_get"] = _get] = "_get";
      const _global = _get + 1;
      ContextualKeyword2[ContextualKeyword2["_global"] = _global] = "_global";
      const _implements = _global + 1;
      ContextualKeyword2[ContextualKeyword2["_implements"] = _implements] = "_implements";
      const _infer = _implements + 1;
      ContextualKeyword2[ContextualKeyword2["_infer"] = _infer] = "_infer";
      const _interface = _infer + 1;
      ContextualKeyword2[ContextualKeyword2["_interface"] = _interface] = "_interface";
      const _is = _interface + 1;
      ContextualKeyword2[ContextualKeyword2["_is"] = _is] = "_is";
      const _keyof = _is + 1;
      ContextualKeyword2[ContextualKeyword2["_keyof"] = _keyof] = "_keyof";
      const _mixins = _keyof + 1;
      ContextualKeyword2[ContextualKeyword2["_mixins"] = _mixins] = "_mixins";
      const _module = _mixins + 1;
      ContextualKeyword2[ContextualKeyword2["_module"] = _module] = "_module";
      const _namespace = _module + 1;
      ContextualKeyword2[ContextualKeyword2["_namespace"] = _namespace] = "_namespace";
      const _of = _namespace + 1;
      ContextualKeyword2[ContextualKeyword2["_of"] = _of] = "_of";
      const _opaque = _of + 1;
      ContextualKeyword2[ContextualKeyword2["_opaque"] = _opaque] = "_opaque";
      const _out = _opaque + 1;
      ContextualKeyword2[ContextualKeyword2["_out"] = _out] = "_out";
      const _override = _out + 1;
      ContextualKeyword2[ContextualKeyword2["_override"] = _override] = "_override";
      const _private = _override + 1;
      ContextualKeyword2[ContextualKeyword2["_private"] = _private] = "_private";
      const _protected = _private + 1;
      ContextualKeyword2[ContextualKeyword2["_protected"] = _protected] = "_protected";
      const _proto = _protected + 1;
      ContextualKeyword2[ContextualKeyword2["_proto"] = _proto] = "_proto";
      const _public = _proto + 1;
      ContextualKeyword2[ContextualKeyword2["_public"] = _public] = "_public";
      const _readonly = _public + 1;
      ContextualKeyword2[ContextualKeyword2["_readonly"] = _readonly] = "_readonly";
      const _require = _readonly + 1;
      ContextualKeyword2[ContextualKeyword2["_require"] = _require] = "_require";
      const _satisfies = _require + 1;
      ContextualKeyword2[ContextualKeyword2["_satisfies"] = _satisfies] = "_satisfies";
      const _set = _satisfies + 1;
      ContextualKeyword2[ContextualKeyword2["_set"] = _set] = "_set";
      const _static = _set + 1;
      ContextualKeyword2[ContextualKeyword2["_static"] = _static] = "_static";
      const _symbol = _static + 1;
      ContextualKeyword2[ContextualKeyword2["_symbol"] = _symbol] = "_symbol";
      const _type = _symbol + 1;
      ContextualKeyword2[ContextualKeyword2["_type"] = _type] = "_type";
      const _unique = _type + 1;
      ContextualKeyword2[ContextualKeyword2["_unique"] = _unique] = "_unique";
      const _using = _unique + 1;
      ContextualKeyword2[ContextualKeyword2["_using"] = _using] = "_using";
    })(ContextualKeyword || (exports2.ContextualKeyword = ContextualKeyword = {}));
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/types.js
var require_types = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var TokenType;
    (function(TokenType2) {
      const PRECEDENCE_MASK = 15;
      TokenType2[TokenType2["PRECEDENCE_MASK"] = PRECEDENCE_MASK] = "PRECEDENCE_MASK";
      const IS_KEYWORD = 1 << 4;
      TokenType2[TokenType2["IS_KEYWORD"] = IS_KEYWORD] = "IS_KEYWORD";
      const IS_ASSIGN = 1 << 5;
      TokenType2[TokenType2["IS_ASSIGN"] = IS_ASSIGN] = "IS_ASSIGN";
      const IS_RIGHT_ASSOCIATIVE = 1 << 6;
      TokenType2[TokenType2["IS_RIGHT_ASSOCIATIVE"] = IS_RIGHT_ASSOCIATIVE] = "IS_RIGHT_ASSOCIATIVE";
      const IS_PREFIX = 1 << 7;
      TokenType2[TokenType2["IS_PREFIX"] = IS_PREFIX] = "IS_PREFIX";
      const IS_POSTFIX = 1 << 8;
      TokenType2[TokenType2["IS_POSTFIX"] = IS_POSTFIX] = "IS_POSTFIX";
      const IS_EXPRESSION_START = 1 << 9;
      TokenType2[TokenType2["IS_EXPRESSION_START"] = IS_EXPRESSION_START] = "IS_EXPRESSION_START";
      const num = 512;
      TokenType2[TokenType2["num"] = num] = "num";
      const bigint = 1536;
      TokenType2[TokenType2["bigint"] = bigint] = "bigint";
      const decimal = 2560;
      TokenType2[TokenType2["decimal"] = decimal] = "decimal";
      const regexp = 3584;
      TokenType2[TokenType2["regexp"] = regexp] = "regexp";
      const string = 4608;
      TokenType2[TokenType2["string"] = string] = "string";
      const name = 5632;
      TokenType2[TokenType2["name"] = name] = "name";
      const eof = 6144;
      TokenType2[TokenType2["eof"] = eof] = "eof";
      const bracketL = 7680;
      TokenType2[TokenType2["bracketL"] = bracketL] = "bracketL";
      const bracketR = 8192;
      TokenType2[TokenType2["bracketR"] = bracketR] = "bracketR";
      const braceL = 9728;
      TokenType2[TokenType2["braceL"] = braceL] = "braceL";
      const braceBarL = 10752;
      TokenType2[TokenType2["braceBarL"] = braceBarL] = "braceBarL";
      const braceR = 11264;
      TokenType2[TokenType2["braceR"] = braceR] = "braceR";
      const braceBarR = 12288;
      TokenType2[TokenType2["braceBarR"] = braceBarR] = "braceBarR";
      const parenL = 13824;
      TokenType2[TokenType2["parenL"] = parenL] = "parenL";
      const parenR = 14336;
      TokenType2[TokenType2["parenR"] = parenR] = "parenR";
      const comma = 15360;
      TokenType2[TokenType2["comma"] = comma] = "comma";
      const semi = 16384;
      TokenType2[TokenType2["semi"] = semi] = "semi";
      const colon = 17408;
      TokenType2[TokenType2["colon"] = colon] = "colon";
      const doubleColon = 18432;
      TokenType2[TokenType2["doubleColon"] = doubleColon] = "doubleColon";
      const dot = 19456;
      TokenType2[TokenType2["dot"] = dot] = "dot";
      const question = 20480;
      TokenType2[TokenType2["question"] = question] = "question";
      const questionDot = 21504;
      TokenType2[TokenType2["questionDot"] = questionDot] = "questionDot";
      const arrow = 22528;
      TokenType2[TokenType2["arrow"] = arrow] = "arrow";
      const template = 23552;
      TokenType2[TokenType2["template"] = template] = "template";
      const ellipsis = 24576;
      TokenType2[TokenType2["ellipsis"] = ellipsis] = "ellipsis";
      const backQuote = 25600;
      TokenType2[TokenType2["backQuote"] = backQuote] = "backQuote";
      const dollarBraceL = 27136;
      TokenType2[TokenType2["dollarBraceL"] = dollarBraceL] = "dollarBraceL";
      const at = 27648;
      TokenType2[TokenType2["at"] = at] = "at";
      const hash = 29184;
      TokenType2[TokenType2["hash"] = hash] = "hash";
      const eq = 29728;
      TokenType2[TokenType2["eq"] = eq] = "eq";
      const assign = 30752;
      TokenType2[TokenType2["assign"] = assign] = "assign";
      const preIncDec = 32640;
      TokenType2[TokenType2["preIncDec"] = preIncDec] = "preIncDec";
      const postIncDec = 33664;
      TokenType2[TokenType2["postIncDec"] = postIncDec] = "postIncDec";
      const bang = 34432;
      TokenType2[TokenType2["bang"] = bang] = "bang";
      const tilde = 35456;
      TokenType2[TokenType2["tilde"] = tilde] = "tilde";
      const pipeline = 35841;
      TokenType2[TokenType2["pipeline"] = pipeline] = "pipeline";
      const nullishCoalescing = 36866;
      TokenType2[TokenType2["nullishCoalescing"] = nullishCoalescing] = "nullishCoalescing";
      const logicalOR = 37890;
      TokenType2[TokenType2["logicalOR"] = logicalOR] = "logicalOR";
      const logicalAND = 38915;
      TokenType2[TokenType2["logicalAND"] = logicalAND] = "logicalAND";
      const bitwiseOR = 39940;
      TokenType2[TokenType2["bitwiseOR"] = bitwiseOR] = "bitwiseOR";
      const bitwiseXOR = 40965;
      TokenType2[TokenType2["bitwiseXOR"] = bitwiseXOR] = "bitwiseXOR";
      const bitwiseAND = 41990;
      TokenType2[TokenType2["bitwiseAND"] = bitwiseAND] = "bitwiseAND";
      const equality = 43015;
      TokenType2[TokenType2["equality"] = equality] = "equality";
      const lessThan = 44040;
      TokenType2[TokenType2["lessThan"] = lessThan] = "lessThan";
      const greaterThan = 45064;
      TokenType2[TokenType2["greaterThan"] = greaterThan] = "greaterThan";
      const relationalOrEqual = 46088;
      TokenType2[TokenType2["relationalOrEqual"] = relationalOrEqual] = "relationalOrEqual";
      const bitShiftL = 47113;
      TokenType2[TokenType2["bitShiftL"] = bitShiftL] = "bitShiftL";
      const bitShiftR = 48137;
      TokenType2[TokenType2["bitShiftR"] = bitShiftR] = "bitShiftR";
      const plus = 49802;
      TokenType2[TokenType2["plus"] = plus] = "plus";
      const minus = 50826;
      TokenType2[TokenType2["minus"] = minus] = "minus";
      const modulo = 51723;
      TokenType2[TokenType2["modulo"] = modulo] = "modulo";
      const star = 52235;
      TokenType2[TokenType2["star"] = star] = "star";
      const slash = 53259;
      TokenType2[TokenType2["slash"] = slash] = "slash";
      const exponent = 54348;
      TokenType2[TokenType2["exponent"] = exponent] = "exponent";
      const jsxName = 55296;
      TokenType2[TokenType2["jsxName"] = jsxName] = "jsxName";
      const jsxText = 56320;
      TokenType2[TokenType2["jsxText"] = jsxText] = "jsxText";
      const jsxEmptyText = 57344;
      TokenType2[TokenType2["jsxEmptyText"] = jsxEmptyText] = "jsxEmptyText";
      const jsxTagStart = 58880;
      TokenType2[TokenType2["jsxTagStart"] = jsxTagStart] = "jsxTagStart";
      const jsxTagEnd = 59392;
      TokenType2[TokenType2["jsxTagEnd"] = jsxTagEnd] = "jsxTagEnd";
      const typeParameterStart = 60928;
      TokenType2[TokenType2["typeParameterStart"] = typeParameterStart] = "typeParameterStart";
      const nonNullAssertion = 61440;
      TokenType2[TokenType2["nonNullAssertion"] = nonNullAssertion] = "nonNullAssertion";
      const _break = 62480;
      TokenType2[TokenType2["_break"] = _break] = "_break";
      const _case = 63504;
      TokenType2[TokenType2["_case"] = _case] = "_case";
      const _catch = 64528;
      TokenType2[TokenType2["_catch"] = _catch] = "_catch";
      const _continue = 65552;
      TokenType2[TokenType2["_continue"] = _continue] = "_continue";
      const _debugger = 66576;
      TokenType2[TokenType2["_debugger"] = _debugger] = "_debugger";
      const _default = 67600;
      TokenType2[TokenType2["_default"] = _default] = "_default";
      const _do = 68624;
      TokenType2[TokenType2["_do"] = _do] = "_do";
      const _else = 69648;
      TokenType2[TokenType2["_else"] = _else] = "_else";
      const _finally = 70672;
      TokenType2[TokenType2["_finally"] = _finally] = "_finally";
      const _for = 71696;
      TokenType2[TokenType2["_for"] = _for] = "_for";
      const _function = 73232;
      TokenType2[TokenType2["_function"] = _function] = "_function";
      const _if = 73744;
      TokenType2[TokenType2["_if"] = _if] = "_if";
      const _return = 74768;
      TokenType2[TokenType2["_return"] = _return] = "_return";
      const _switch = 75792;
      TokenType2[TokenType2["_switch"] = _switch] = "_switch";
      const _throw = 77456;
      TokenType2[TokenType2["_throw"] = _throw] = "_throw";
      const _try = 77840;
      TokenType2[TokenType2["_try"] = _try] = "_try";
      const _var = 78864;
      TokenType2[TokenType2["_var"] = _var] = "_var";
      const _let = 79888;
      TokenType2[TokenType2["_let"] = _let] = "_let";
      const _const = 80912;
      TokenType2[TokenType2["_const"] = _const] = "_const";
      const _while = 81936;
      TokenType2[TokenType2["_while"] = _while] = "_while";
      const _with = 82960;
      TokenType2[TokenType2["_with"] = _with] = "_with";
      const _new = 84496;
      TokenType2[TokenType2["_new"] = _new] = "_new";
      const _this = 85520;
      TokenType2[TokenType2["_this"] = _this] = "_this";
      const _super = 86544;
      TokenType2[TokenType2["_super"] = _super] = "_super";
      const _class = 87568;
      TokenType2[TokenType2["_class"] = _class] = "_class";
      const _extends = 88080;
      TokenType2[TokenType2["_extends"] = _extends] = "_extends";
      const _export = 89104;
      TokenType2[TokenType2["_export"] = _export] = "_export";
      const _import = 90640;
      TokenType2[TokenType2["_import"] = _import] = "_import";
      const _yield = 91664;
      TokenType2[TokenType2["_yield"] = _yield] = "_yield";
      const _null = 92688;
      TokenType2[TokenType2["_null"] = _null] = "_null";
      const _true = 93712;
      TokenType2[TokenType2["_true"] = _true] = "_true";
      const _false = 94736;
      TokenType2[TokenType2["_false"] = _false] = "_false";
      const _in = 95256;
      TokenType2[TokenType2["_in"] = _in] = "_in";
      const _instanceof = 96280;
      TokenType2[TokenType2["_instanceof"] = _instanceof] = "_instanceof";
      const _typeof = 97936;
      TokenType2[TokenType2["_typeof"] = _typeof] = "_typeof";
      const _void = 98960;
      TokenType2[TokenType2["_void"] = _void] = "_void";
      const _delete = 99984;
      TokenType2[TokenType2["_delete"] = _delete] = "_delete";
      const _async = 100880;
      TokenType2[TokenType2["_async"] = _async] = "_async";
      const _get = 101904;
      TokenType2[TokenType2["_get"] = _get] = "_get";
      const _set = 102928;
      TokenType2[TokenType2["_set"] = _set] = "_set";
      const _declare = 103952;
      TokenType2[TokenType2["_declare"] = _declare] = "_declare";
      const _readonly = 104976;
      TokenType2[TokenType2["_readonly"] = _readonly] = "_readonly";
      const _abstract = 106e3;
      TokenType2[TokenType2["_abstract"] = _abstract] = "_abstract";
      const _static = 107024;
      TokenType2[TokenType2["_static"] = _static] = "_static";
      const _public = 107536;
      TokenType2[TokenType2["_public"] = _public] = "_public";
      const _private = 108560;
      TokenType2[TokenType2["_private"] = _private] = "_private";
      const _protected = 109584;
      TokenType2[TokenType2["_protected"] = _protected] = "_protected";
      const _override = 110608;
      TokenType2[TokenType2["_override"] = _override] = "_override";
      const _as = 112144;
      TokenType2[TokenType2["_as"] = _as] = "_as";
      const _enum = 113168;
      TokenType2[TokenType2["_enum"] = _enum] = "_enum";
      const _type = 114192;
      TokenType2[TokenType2["_type"] = _type] = "_type";
      const _implements = 115216;
      TokenType2[TokenType2["_implements"] = _implements] = "_implements";
    })(TokenType || (exports2.TokenType = TokenType = {}));
    function formatTokenType(tokenType) {
      switch (tokenType) {
        case TokenType.num:
          return "num";
        case TokenType.bigint:
          return "bigint";
        case TokenType.decimal:
          return "decimal";
        case TokenType.regexp:
          return "regexp";
        case TokenType.string:
          return "string";
        case TokenType.name:
          return "name";
        case TokenType.eof:
          return "eof";
        case TokenType.bracketL:
          return "[";
        case TokenType.bracketR:
          return "]";
        case TokenType.braceL:
          return "{";
        case TokenType.braceBarL:
          return "{|";
        case TokenType.braceR:
          return "}";
        case TokenType.braceBarR:
          return "|}";
        case TokenType.parenL:
          return "(";
        case TokenType.parenR:
          return ")";
        case TokenType.comma:
          return ",";
        case TokenType.semi:
          return ";";
        case TokenType.colon:
          return ":";
        case TokenType.doubleColon:
          return "::";
        case TokenType.dot:
          return ".";
        case TokenType.question:
          return "?";
        case TokenType.questionDot:
          return "?.";
        case TokenType.arrow:
          return "=>";
        case TokenType.template:
          return "template";
        case TokenType.ellipsis:
          return "...";
        case TokenType.backQuote:
          return "`";
        case TokenType.dollarBraceL:
          return "${";
        case TokenType.at:
          return "@";
        case TokenType.hash:
          return "#";
        case TokenType.eq:
          return "=";
        case TokenType.assign:
          return "_=";
        case TokenType.preIncDec:
          return "++/--";
        case TokenType.postIncDec:
          return "++/--";
        case TokenType.bang:
          return "!";
        case TokenType.tilde:
          return "~";
        case TokenType.pipeline:
          return "|>";
        case TokenType.nullishCoalescing:
          return "??";
        case TokenType.logicalOR:
          return "||";
        case TokenType.logicalAND:
          return "&&";
        case TokenType.bitwiseOR:
          return "|";
        case TokenType.bitwiseXOR:
          return "^";
        case TokenType.bitwiseAND:
          return "&";
        case TokenType.equality:
          return "==/!=";
        case TokenType.lessThan:
          return "<";
        case TokenType.greaterThan:
          return ">";
        case TokenType.relationalOrEqual:
          return "<=/>=";
        case TokenType.bitShiftL:
          return "<<";
        case TokenType.bitShiftR:
          return ">>/>>>";
        case TokenType.plus:
          return "+";
        case TokenType.minus:
          return "-";
        case TokenType.modulo:
          return "%";
        case TokenType.star:
          return "*";
        case TokenType.slash:
          return "/";
        case TokenType.exponent:
          return "**";
        case TokenType.jsxName:
          return "jsxName";
        case TokenType.jsxText:
          return "jsxText";
        case TokenType.jsxEmptyText:
          return "jsxEmptyText";
        case TokenType.jsxTagStart:
          return "jsxTagStart";
        case TokenType.jsxTagEnd:
          return "jsxTagEnd";
        case TokenType.typeParameterStart:
          return "typeParameterStart";
        case TokenType.nonNullAssertion:
          return "nonNullAssertion";
        case TokenType._break:
          return "break";
        case TokenType._case:
          return "case";
        case TokenType._catch:
          return "catch";
        case TokenType._continue:
          return "continue";
        case TokenType._debugger:
          return "debugger";
        case TokenType._default:
          return "default";
        case TokenType._do:
          return "do";
        case TokenType._else:
          return "else";
        case TokenType._finally:
          return "finally";
        case TokenType._for:
          return "for";
        case TokenType._function:
          return "function";
        case TokenType._if:
          return "if";
        case TokenType._return:
          return "return";
        case TokenType._switch:
          return "switch";
        case TokenType._throw:
          return "throw";
        case TokenType._try:
          return "try";
        case TokenType._var:
          return "var";
        case TokenType._let:
          return "let";
        case TokenType._const:
          return "const";
        case TokenType._while:
          return "while";
        case TokenType._with:
          return "with";
        case TokenType._new:
          return "new";
        case TokenType._this:
          return "this";
        case TokenType._super:
          return "super";
        case TokenType._class:
          return "class";
        case TokenType._extends:
          return "extends";
        case TokenType._export:
          return "export";
        case TokenType._import:
          return "import";
        case TokenType._yield:
          return "yield";
        case TokenType._null:
          return "null";
        case TokenType._true:
          return "true";
        case TokenType._false:
          return "false";
        case TokenType._in:
          return "in";
        case TokenType._instanceof:
          return "instanceof";
        case TokenType._typeof:
          return "typeof";
        case TokenType._void:
          return "void";
        case TokenType._delete:
          return "delete";
        case TokenType._async:
          return "async";
        case TokenType._get:
          return "get";
        case TokenType._set:
          return "set";
        case TokenType._declare:
          return "declare";
        case TokenType._readonly:
          return "readonly";
        case TokenType._abstract:
          return "abstract";
        case TokenType._static:
          return "static";
        case TokenType._public:
          return "public";
        case TokenType._private:
          return "private";
        case TokenType._protected:
          return "protected";
        case TokenType._override:
          return "override";
        case TokenType._as:
          return "as";
        case TokenType._enum:
          return "enum";
        case TokenType._type:
          return "type";
        case TokenType._implements:
          return "implements";
        default:
          return "";
      }
    }
    exports2.formatTokenType = formatTokenType;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/state.js
var require_state = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/state.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _keywords = require_keywords();
    var _types = require_types();
    var Scope = class {
      constructor(startTokenIndex, endTokenIndex, isFunctionScope) {
        this.startTokenIndex = startTokenIndex;
        this.endTokenIndex = endTokenIndex;
        this.isFunctionScope = isFunctionScope;
      }
    };
    exports2.Scope = Scope;
    var StateSnapshot = class {
      constructor(potentialArrowAt, noAnonFunctionType, inDisallowConditionalTypesContext, tokensLength, scopesLength, pos, type, contextualKeyword, start, end, isType, scopeDepth, error) {
        ;
        this.potentialArrowAt = potentialArrowAt;
        this.noAnonFunctionType = noAnonFunctionType;
        this.inDisallowConditionalTypesContext = inDisallowConditionalTypesContext;
        this.tokensLength = tokensLength;
        this.scopesLength = scopesLength;
        this.pos = pos;
        this.type = type;
        this.contextualKeyword = contextualKeyword;
        this.start = start;
        this.end = end;
        this.isType = isType;
        this.scopeDepth = scopeDepth;
        this.error = error;
      }
    };
    exports2.StateSnapshot = StateSnapshot;
    var State = class _State {
      constructor() {
        _State.prototype.__init.call(this);
        _State.prototype.__init2.call(this);
        _State.prototype.__init3.call(this);
        _State.prototype.__init4.call(this);
        _State.prototype.__init5.call(this);
        _State.prototype.__init6.call(this);
        _State.prototype.__init7.call(this);
        _State.prototype.__init8.call(this);
        _State.prototype.__init9.call(this);
        _State.prototype.__init10.call(this);
        _State.prototype.__init11.call(this);
        _State.prototype.__init12.call(this);
        _State.prototype.__init13.call(this);
      }
      // Used to signify the start of a potential arrow function
      __init() {
        this.potentialArrowAt = -1;
      }
      // Used by Flow to handle an edge case involving function type parsing.
      __init2() {
        this.noAnonFunctionType = false;
      }
      // Used by TypeScript to handle ambiguities when parsing conditional types.
      __init3() {
        this.inDisallowConditionalTypesContext = false;
      }
      // Token store.
      __init4() {
        this.tokens = [];
      }
      // Array of all observed scopes, ordered by their ending position.
      __init5() {
        this.scopes = [];
      }
      // The current position of the tokenizer in the input.
      __init6() {
        this.pos = 0;
      }
      // Information about the current token.
      __init7() {
        this.type = _types.TokenType.eof;
      }
      __init8() {
        this.contextualKeyword = _keywords.ContextualKeyword.NONE;
      }
      __init9() {
        this.start = 0;
      }
      __init10() {
        this.end = 0;
      }
      __init11() {
        this.isType = false;
      }
      __init12() {
        this.scopeDepth = 0;
      }
      /**
       * If the parser is in an error state, then the token is always tt.eof and all functions can
       * keep executing but should be written so they don't get into an infinite loop in this situation.
       *
       * This approach, combined with the ability to snapshot and restore state, allows us to implement
       * backtracking without exceptions and without needing to explicitly propagate error states
       * everywhere.
       */
      __init13() {
        this.error = null;
      }
      snapshot() {
        return new StateSnapshot(
          this.potentialArrowAt,
          this.noAnonFunctionType,
          this.inDisallowConditionalTypesContext,
          this.tokens.length,
          this.scopes.length,
          this.pos,
          this.type,
          this.contextualKeyword,
          this.start,
          this.end,
          this.isType,
          this.scopeDepth,
          this.error
        );
      }
      restoreFromSnapshot(snapshot) {
        this.potentialArrowAt = snapshot.potentialArrowAt;
        this.noAnonFunctionType = snapshot.noAnonFunctionType;
        this.inDisallowConditionalTypesContext = snapshot.inDisallowConditionalTypesContext;
        this.tokens.length = snapshot.tokensLength;
        this.scopes.length = snapshot.scopesLength;
        this.pos = snapshot.pos;
        this.type = snapshot.type;
        this.contextualKeyword = snapshot.contextualKeyword;
        this.start = snapshot.start;
        this.end = snapshot.end;
        this.isType = snapshot.isType;
        this.scopeDepth = snapshot.scopeDepth;
        this.error = snapshot.error;
      }
    };
    exports2.default = State;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/util/charcodes.js
var require_charcodes = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/util/charcodes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var charCodes;
    (function(charCodes2) {
      const backSpace = 8;
      charCodes2[charCodes2["backSpace"] = backSpace] = "backSpace";
      const lineFeed = 10;
      charCodes2[charCodes2["lineFeed"] = lineFeed] = "lineFeed";
      const tab = 9;
      charCodes2[charCodes2["tab"] = tab] = "tab";
      const carriageReturn = 13;
      charCodes2[charCodes2["carriageReturn"] = carriageReturn] = "carriageReturn";
      const shiftOut = 14;
      charCodes2[charCodes2["shiftOut"] = shiftOut] = "shiftOut";
      const space = 32;
      charCodes2[charCodes2["space"] = space] = "space";
      const exclamationMark = 33;
      charCodes2[charCodes2["exclamationMark"] = exclamationMark] = "exclamationMark";
      const quotationMark = 34;
      charCodes2[charCodes2["quotationMark"] = quotationMark] = "quotationMark";
      const numberSign = 35;
      charCodes2[charCodes2["numberSign"] = numberSign] = "numberSign";
      const dollarSign = 36;
      charCodes2[charCodes2["dollarSign"] = dollarSign] = "dollarSign";
      const percentSign = 37;
      charCodes2[charCodes2["percentSign"] = percentSign] = "percentSign";
      const ampersand = 38;
      charCodes2[charCodes2["ampersand"] = ampersand] = "ampersand";
      const apostrophe = 39;
      charCodes2[charCodes2["apostrophe"] = apostrophe] = "apostrophe";
      const leftParenthesis = 40;
      charCodes2[charCodes2["leftParenthesis"] = leftParenthesis] = "leftParenthesis";
      const rightParenthesis = 41;
      charCodes2[charCodes2["rightParenthesis"] = rightParenthesis] = "rightParenthesis";
      const asterisk = 42;
      charCodes2[charCodes2["asterisk"] = asterisk] = "asterisk";
      const plusSign = 43;
      charCodes2[charCodes2["plusSign"] = plusSign] = "plusSign";
      const comma = 44;
      charCodes2[charCodes2["comma"] = comma] = "comma";
      const dash = 45;
      charCodes2[charCodes2["dash"] = dash] = "dash";
      const dot = 46;
      charCodes2[charCodes2["dot"] = dot] = "dot";
      const slash = 47;
      charCodes2[charCodes2["slash"] = slash] = "slash";
      const digit0 = 48;
      charCodes2[charCodes2["digit0"] = digit0] = "digit0";
      const digit1 = 49;
      charCodes2[charCodes2["digit1"] = digit1] = "digit1";
      const digit2 = 50;
      charCodes2[charCodes2["digit2"] = digit2] = "digit2";
      const digit3 = 51;
      charCodes2[charCodes2["digit3"] = digit3] = "digit3";
      const digit4 = 52;
      charCodes2[charCodes2["digit4"] = digit4] = "digit4";
      const digit5 = 53;
      charCodes2[charCodes2["digit5"] = digit5] = "digit5";
      const digit6 = 54;
      charCodes2[charCodes2["digit6"] = digit6] = "digit6";
      const digit7 = 55;
      charCodes2[charCodes2["digit7"] = digit7] = "digit7";
      const digit8 = 56;
      charCodes2[charCodes2["digit8"] = digit8] = "digit8";
      const digit9 = 57;
      charCodes2[charCodes2["digit9"] = digit9] = "digit9";
      const colon = 58;
      charCodes2[charCodes2["colon"] = colon] = "colon";
      const semicolon = 59;
      charCodes2[charCodes2["semicolon"] = semicolon] = "semicolon";
      const lessThan = 60;
      charCodes2[charCodes2["lessThan"] = lessThan] = "lessThan";
      const equalsTo = 61;
      charCodes2[charCodes2["equalsTo"] = equalsTo] = "equalsTo";
      const greaterThan = 62;
      charCodes2[charCodes2["greaterThan"] = greaterThan] = "greaterThan";
      const questionMark = 63;
      charCodes2[charCodes2["questionMark"] = questionMark] = "questionMark";
      const atSign = 64;
      charCodes2[charCodes2["atSign"] = atSign] = "atSign";
      const uppercaseA = 65;
      charCodes2[charCodes2["uppercaseA"] = uppercaseA] = "uppercaseA";
      const uppercaseB = 66;
      charCodes2[charCodes2["uppercaseB"] = uppercaseB] = "uppercaseB";
      const uppercaseC = 67;
      charCodes2[charCodes2["uppercaseC"] = uppercaseC] = "uppercaseC";
      const uppercaseD = 68;
      charCodes2[charCodes2["uppercaseD"] = uppercaseD] = "uppercaseD";
      const uppercaseE = 69;
      charCodes2[charCodes2["uppercaseE"] = uppercaseE] = "uppercaseE";
      const uppercaseF = 70;
      charCodes2[charCodes2["uppercaseF"] = uppercaseF] = "uppercaseF";
      const uppercaseG = 71;
      charCodes2[charCodes2["uppercaseG"] = uppercaseG] = "uppercaseG";
      const uppercaseH = 72;
      charCodes2[charCodes2["uppercaseH"] = uppercaseH] = "uppercaseH";
      const uppercaseI = 73;
      charCodes2[charCodes2["uppercaseI"] = uppercaseI] = "uppercaseI";
      const uppercaseJ = 74;
      charCodes2[charCodes2["uppercaseJ"] = uppercaseJ] = "uppercaseJ";
      const uppercaseK = 75;
      charCodes2[charCodes2["uppercaseK"] = uppercaseK] = "uppercaseK";
      const uppercaseL = 76;
      charCodes2[charCodes2["uppercaseL"] = uppercaseL] = "uppercaseL";
      const uppercaseM = 77;
      charCodes2[charCodes2["uppercaseM"] = uppercaseM] = "uppercaseM";
      const uppercaseN = 78;
      charCodes2[charCodes2["uppercaseN"] = uppercaseN] = "uppercaseN";
      const uppercaseO = 79;
      charCodes2[charCodes2["uppercaseO"] = uppercaseO] = "uppercaseO";
      const uppercaseP = 80;
      charCodes2[charCodes2["uppercaseP"] = uppercaseP] = "uppercaseP";
      const uppercaseQ = 81;
      charCodes2[charCodes2["uppercaseQ"] = uppercaseQ] = "uppercaseQ";
      const uppercaseR = 82;
      charCodes2[charCodes2["uppercaseR"] = uppercaseR] = "uppercaseR";
      const uppercaseS = 83;
      charCodes2[charCodes2["uppercaseS"] = uppercaseS] = "uppercaseS";
      const uppercaseT = 84;
      charCodes2[charCodes2["uppercaseT"] = uppercaseT] = "uppercaseT";
      const uppercaseU = 85;
      charCodes2[charCodes2["uppercaseU"] = uppercaseU] = "uppercaseU";
      const uppercaseV = 86;
      charCodes2[charCodes2["uppercaseV"] = uppercaseV] = "uppercaseV";
      const uppercaseW = 87;
      charCodes2[charCodes2["uppercaseW"] = uppercaseW] = "uppercaseW";
      const uppercaseX = 88;
      charCodes2[charCodes2["uppercaseX"] = uppercaseX] = "uppercaseX";
      const uppercaseY = 89;
      charCodes2[charCodes2["uppercaseY"] = uppercaseY] = "uppercaseY";
      const uppercaseZ = 90;
      charCodes2[charCodes2["uppercaseZ"] = uppercaseZ] = "uppercaseZ";
      const leftSquareBracket = 91;
      charCodes2[charCodes2["leftSquareBracket"] = leftSquareBracket] = "leftSquareBracket";
      const backslash = 92;
      charCodes2[charCodes2["backslash"] = backslash] = "backslash";
      const rightSquareBracket = 93;
      charCodes2[charCodes2["rightSquareBracket"] = rightSquareBracket] = "rightSquareBracket";
      const caret = 94;
      charCodes2[charCodes2["caret"] = caret] = "caret";
      const underscore = 95;
      charCodes2[charCodes2["underscore"] = underscore] = "underscore";
      const graveAccent = 96;
      charCodes2[charCodes2["graveAccent"] = graveAccent] = "graveAccent";
      const lowercaseA = 97;
      charCodes2[charCodes2["lowercaseA"] = lowercaseA] = "lowercaseA";
      const lowercaseB = 98;
      charCodes2[charCodes2["lowercaseB"] = lowercaseB] = "lowercaseB";
      const lowercaseC = 99;
      charCodes2[charCodes2["lowercaseC"] = lowercaseC] = "lowercaseC";
      const lowercaseD = 100;
      charCodes2[charCodes2["lowercaseD"] = lowercaseD] = "lowercaseD";
      const lowercaseE = 101;
      charCodes2[charCodes2["lowercaseE"] = lowercaseE] = "lowercaseE";
      const lowercaseF = 102;
      charCodes2[charCodes2["lowercaseF"] = lowercaseF] = "lowercaseF";
      const lowercaseG = 103;
      charCodes2[charCodes2["lowercaseG"] = lowercaseG] = "lowercaseG";
      const lowercaseH = 104;
      charCodes2[charCodes2["lowercaseH"] = lowercaseH] = "lowercaseH";
      const lowercaseI = 105;
      charCodes2[charCodes2["lowercaseI"] = lowercaseI] = "lowercaseI";
      const lowercaseJ = 106;
      charCodes2[charCodes2["lowercaseJ"] = lowercaseJ] = "lowercaseJ";
      const lowercaseK = 107;
      charCodes2[charCodes2["lowercaseK"] = lowercaseK] = "lowercaseK";
      const lowercaseL = 108;
      charCodes2[charCodes2["lowercaseL"] = lowercaseL] = "lowercaseL";
      const lowercaseM = 109;
      charCodes2[charCodes2["lowercaseM"] = lowercaseM] = "lowercaseM";
      const lowercaseN = 110;
      charCodes2[charCodes2["lowercaseN"] = lowercaseN] = "lowercaseN";
      const lowercaseO = 111;
      charCodes2[charCodes2["lowercaseO"] = lowercaseO] = "lowercaseO";
      const lowercaseP = 112;
      charCodes2[charCodes2["lowercaseP"] = lowercaseP] = "lowercaseP";
      const lowercaseQ = 113;
      charCodes2[charCodes2["lowercaseQ"] = lowercaseQ] = "lowercaseQ";
      const lowercaseR = 114;
      charCodes2[charCodes2["lowercaseR"] = lowercaseR] = "lowercaseR";
      const lowercaseS = 115;
      charCodes2[charCodes2["lowercaseS"] = lowercaseS] = "lowercaseS";
      const lowercaseT = 116;
      charCodes2[charCodes2["lowercaseT"] = lowercaseT] = "lowercaseT";
      const lowercaseU = 117;
      charCodes2[charCodes2["lowercaseU"] = lowercaseU] = "lowercaseU";
      const lowercaseV = 118;
      charCodes2[charCodes2["lowercaseV"] = lowercaseV] = "lowercaseV";
      const lowercaseW = 119;
      charCodes2[charCodes2["lowercaseW"] = lowercaseW] = "lowercaseW";
      const lowercaseX = 120;
      charCodes2[charCodes2["lowercaseX"] = lowercaseX] = "lowercaseX";
      const lowercaseY = 121;
      charCodes2[charCodes2["lowercaseY"] = lowercaseY] = "lowercaseY";
      const lowercaseZ = 122;
      charCodes2[charCodes2["lowercaseZ"] = lowercaseZ] = "lowercaseZ";
      const leftCurlyBrace = 123;
      charCodes2[charCodes2["leftCurlyBrace"] = leftCurlyBrace] = "leftCurlyBrace";
      const verticalBar = 124;
      charCodes2[charCodes2["verticalBar"] = verticalBar] = "verticalBar";
      const rightCurlyBrace = 125;
      charCodes2[charCodes2["rightCurlyBrace"] = rightCurlyBrace] = "rightCurlyBrace";
      const tilde = 126;
      charCodes2[charCodes2["tilde"] = tilde] = "tilde";
      const nonBreakingSpace = 160;
      charCodes2[charCodes2["nonBreakingSpace"] = nonBreakingSpace] = "nonBreakingSpace";
      const oghamSpaceMark = 5760;
      charCodes2[charCodes2["oghamSpaceMark"] = oghamSpaceMark] = "oghamSpaceMark";
      const lineSeparator = 8232;
      charCodes2[charCodes2["lineSeparator"] = lineSeparator] = "lineSeparator";
      const paragraphSeparator = 8233;
      charCodes2[charCodes2["paragraphSeparator"] = paragraphSeparator] = "paragraphSeparator";
    })(charCodes || (exports2.charCodes = charCodes = {}));
    function isDigit(code) {
      return code >= charCodes.digit0 && code <= charCodes.digit9 || code >= charCodes.lowercaseA && code <= charCodes.lowercaseF || code >= charCodes.uppercaseA && code <= charCodes.uppercaseF;
    }
    exports2.isDigit = isDigit;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/base.js
var require_base = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/base.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _state = require_state();
    var _state2 = _interopRequireDefault(_state);
    var _charcodes = require_charcodes();
    exports2.isJSXEnabled;
    exports2.isTypeScriptEnabled;
    exports2.isFlowEnabled;
    exports2.state;
    exports2.input;
    exports2.nextContextId;
    function getNextContextId() {
      return exports2.nextContextId++;
    }
    exports2.getNextContextId = getNextContextId;
    function augmentError(error) {
      if ("pos" in error) {
        const loc = locationForIndex(error.pos);
        error.message += ` (${loc.line}:${loc.column})`;
        error.loc = loc;
      }
      return error;
    }
    exports2.augmentError = augmentError;
    var Loc = class {
      constructor(line, column) {
        this.line = line;
        this.column = column;
      }
    };
    exports2.Loc = Loc;
    function locationForIndex(pos) {
      let line = 1;
      let column = 1;
      for (let i = 0; i < pos; i++) {
        if (exports2.input.charCodeAt(i) === _charcodes.charCodes.lineFeed) {
          line++;
          column = 1;
        } else {
          column++;
        }
      }
      return new Loc(line, column);
    }
    exports2.locationForIndex = locationForIndex;
    function initParser(inputCode, isJSXEnabledArg, isTypeScriptEnabledArg, isFlowEnabledArg) {
      exports2.input = inputCode;
      exports2.state = new (0, _state2.default)();
      exports2.nextContextId = 1;
      exports2.isJSXEnabled = isJSXEnabledArg;
      exports2.isTypeScriptEnabled = isTypeScriptEnabledArg;
      exports2.isFlowEnabled = isFlowEnabledArg;
    }
    exports2.initParser = initParser;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/util.js
var require_util = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _index = require_tokenizer();
    var _types = require_types();
    var _charcodes = require_charcodes();
    var _base = require_base();
    function isContextual(contextualKeyword) {
      return _base.state.contextualKeyword === contextualKeyword;
    }
    exports2.isContextual = isContextual;
    function isLookaheadContextual(contextualKeyword) {
      const l = _index.lookaheadTypeAndKeyword.call(void 0);
      return l.type === _types.TokenType.name && l.contextualKeyword === contextualKeyword;
    }
    exports2.isLookaheadContextual = isLookaheadContextual;
    function eatContextual(contextualKeyword) {
      return _base.state.contextualKeyword === contextualKeyword && _index.eat.call(void 0, _types.TokenType.name);
    }
    exports2.eatContextual = eatContextual;
    function expectContextual(contextualKeyword) {
      if (!eatContextual(contextualKeyword)) {
        unexpected();
      }
    }
    exports2.expectContextual = expectContextual;
    function canInsertSemicolon() {
      return _index.match.call(void 0, _types.TokenType.eof) || _index.match.call(void 0, _types.TokenType.braceR) || hasPrecedingLineBreak();
    }
    exports2.canInsertSemicolon = canInsertSemicolon;
    function hasPrecedingLineBreak() {
      const prevToken = _base.state.tokens[_base.state.tokens.length - 1];
      const lastTokEnd = prevToken ? prevToken.end : 0;
      for (let i = lastTokEnd; i < _base.state.start; i++) {
        const code = _base.input.charCodeAt(i);
        if (code === _charcodes.charCodes.lineFeed || code === _charcodes.charCodes.carriageReturn || code === 8232 || code === 8233) {
          return true;
        }
      }
      return false;
    }
    exports2.hasPrecedingLineBreak = hasPrecedingLineBreak;
    function hasFollowingLineBreak() {
      const nextStart = _index.nextTokenStart.call(void 0);
      for (let i = _base.state.end; i < nextStart; i++) {
        const code = _base.input.charCodeAt(i);
        if (code === _charcodes.charCodes.lineFeed || code === _charcodes.charCodes.carriageReturn || code === 8232 || code === 8233) {
          return true;
        }
      }
      return false;
    }
    exports2.hasFollowingLineBreak = hasFollowingLineBreak;
    function isLineTerminator() {
      return _index.eat.call(void 0, _types.TokenType.semi) || canInsertSemicolon();
    }
    exports2.isLineTerminator = isLineTerminator;
    function semicolon() {
      if (!isLineTerminator()) {
        unexpected('Unexpected token, expected ";"');
      }
    }
    exports2.semicolon = semicolon;
    function expect(type) {
      const matched = _index.eat.call(void 0, type);
      if (!matched) {
        unexpected(`Unexpected token, expected "${_types.formatTokenType.call(void 0, type)}"`);
      }
    }
    exports2.expect = expect;
    function unexpected(message = "Unexpected token", pos = _base.state.start) {
      if (_base.state.error) {
        return;
      }
      const err = new SyntaxError(message);
      err.pos = pos;
      _base.state.error = err;
      _base.state.pos = _base.input.length;
      _index.finishToken.call(void 0, _types.TokenType.eof);
    }
    exports2.unexpected = unexpected;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/util/whitespace.js
var require_whitespace = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/util/whitespace.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _charcodes = require_charcodes();
    var WHITESPACE_CHARS = [
      9,
      11,
      12,
      _charcodes.charCodes.space,
      _charcodes.charCodes.nonBreakingSpace,
      _charcodes.charCodes.oghamSpaceMark,
      8192,
      // EN QUAD
      8193,
      // EM QUAD
      8194,
      // EN SPACE
      8195,
      // EM SPACE
      8196,
      // THREE-PER-EM SPACE
      8197,
      // FOUR-PER-EM SPACE
      8198,
      // SIX-PER-EM SPACE
      8199,
      // FIGURE SPACE
      8200,
      // PUNCTUATION SPACE
      8201,
      // THIN SPACE
      8202,
      // HAIR SPACE
      8239,
      // NARROW NO-BREAK SPACE
      8287,
      // MEDIUM MATHEMATICAL SPACE
      12288,
      // IDEOGRAPHIC SPACE
      65279
      // ZERO WIDTH NO-BREAK SPACE
    ];
    exports2.WHITESPACE_CHARS = WHITESPACE_CHARS;
    var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
    exports2.skipWhiteSpace = skipWhiteSpace;
    var IS_WHITESPACE = new Uint8Array(65536);
    exports2.IS_WHITESPACE = IS_WHITESPACE;
    for (const char of exports2.WHITESPACE_CHARS) {
      exports2.IS_WHITESPACE[char] = 1;
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/util/identifier.js
var require_identifier = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/util/identifier.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _charcodes = require_charcodes();
    var _whitespace = require_whitespace();
    function computeIsIdentifierChar(code) {
      if (code < 48) return code === 36;
      if (code < 58) return true;
      if (code < 65) return false;
      if (code < 91) return true;
      if (code < 97) return code === 95;
      if (code < 123) return true;
      if (code < 128) return false;
      throw new Error("Should not be called with non-ASCII char code.");
    }
    var IS_IDENTIFIER_CHAR = new Uint8Array(65536);
    exports2.IS_IDENTIFIER_CHAR = IS_IDENTIFIER_CHAR;
    for (let i = 0; i < 128; i++) {
      exports2.IS_IDENTIFIER_CHAR[i] = computeIsIdentifierChar(i) ? 1 : 0;
    }
    for (let i = 128; i < 65536; i++) {
      exports2.IS_IDENTIFIER_CHAR[i] = 1;
    }
    for (const whitespaceChar of _whitespace.WHITESPACE_CHARS) {
      exports2.IS_IDENTIFIER_CHAR[whitespaceChar] = 0;
    }
    exports2.IS_IDENTIFIER_CHAR[8232] = 0;
    exports2.IS_IDENTIFIER_CHAR[8233] = 0;
    var IS_IDENTIFIER_START = exports2.IS_IDENTIFIER_CHAR.slice();
    exports2.IS_IDENTIFIER_START = IS_IDENTIFIER_START;
    for (let numChar = _charcodes.charCodes.digit0; numChar <= _charcodes.charCodes.digit9; numChar++) {
      exports2.IS_IDENTIFIER_START[numChar] = 0;
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/readWordTree.js
var require_readWordTree = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/readWordTree.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _keywords = require_keywords();
    var _types = require_types();
    var READ_WORD_TREE = new Int32Array([
      // ""
      -1,
      27,
      783,
      918,
      1755,
      2376,
      2862,
      3483,
      -1,
      3699,
      -1,
      4617,
      4752,
      4833,
      5130,
      5508,
      5940,
      -1,
      6480,
      6939,
      7749,
      8181,
      8451,
      8613,
      -1,
      8829,
      -1,
      // "a"
      -1,
      -1,
      54,
      243,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      432,
      -1,
      -1,
      -1,
      675,
      -1,
      -1,
      -1,
      // "ab"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      81,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "abs"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      108,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "abst"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      135,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "abstr"
      -1,
      162,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "abstra"
      -1,
      -1,
      -1,
      189,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "abstrac"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      216,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "abstract"
      _keywords.ContextualKeyword._abstract << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ac"
      -1,
      -1,
      -1,
      270,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "acc"
      -1,
      -1,
      -1,
      -1,
      -1,
      297,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "acce"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      324,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "acces"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      351,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "access"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      378,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "accesso"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      405,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "accessor"
      _keywords.ContextualKeyword._accessor << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "as"
      _keywords.ContextualKeyword._as << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      459,
      -1,
      -1,
      -1,
      -1,
      -1,
      594,
      -1,
      // "ass"
      -1,
      -1,
      -1,
      -1,
      -1,
      486,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "asse"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      513,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "asser"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      540,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "assert"
      _keywords.ContextualKeyword._assert << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      567,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "asserts"
      _keywords.ContextualKeyword._asserts << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "asy"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      621,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "asyn"
      -1,
      -1,
      -1,
      648,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "async"
      _keywords.ContextualKeyword._async << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "aw"
      -1,
      702,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "awa"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      729,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "awai"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      756,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "await"
      _keywords.ContextualKeyword._await << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "b"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      810,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "br"
      -1,
      -1,
      -1,
      -1,
      -1,
      837,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "bre"
      -1,
      864,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "brea"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      891,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "break"
      (_types.TokenType._break << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "c"
      -1,
      945,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1107,
      -1,
      -1,
      -1,
      1242,
      -1,
      -1,
      1350,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ca"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      972,
      1026,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "cas"
      -1,
      -1,
      -1,
      -1,
      -1,
      999,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "case"
      (_types.TokenType._case << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "cat"
      -1,
      -1,
      -1,
      1053,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "catc"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1080,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "catch"
      (_types.TokenType._catch << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ch"
      -1,
      -1,
      -1,
      -1,
      -1,
      1134,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "che"
      -1,
      -1,
      -1,
      1161,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "chec"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1188,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "check"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1215,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "checks"
      _keywords.ContextualKeyword._checks << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "cl"
      -1,
      1269,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "cla"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1296,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "clas"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1323,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "class"
      (_types.TokenType._class << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "co"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1377,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "con"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1404,
      1620,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "cons"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1431,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "const"
      (_types.TokenType._const << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1458,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "constr"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1485,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "constru"
      -1,
      -1,
      -1,
      1512,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "construc"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1539,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "construct"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1566,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "constructo"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1593,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "constructor"
      _keywords.ContextualKeyword._constructor << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "cont"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1647,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "conti"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1674,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "contin"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1701,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "continu"
      -1,
      -1,
      -1,
      -1,
      -1,
      1728,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "continue"
      (_types.TokenType._continue << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "d"
      -1,
      -1,
      -1,
      -1,
      -1,
      1782,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2349,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "de"
      -1,
      -1,
      1809,
      1971,
      -1,
      -1,
      2106,
      -1,
      -1,
      -1,
      -1,
      -1,
      2241,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "deb"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1836,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "debu"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1863,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "debug"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1890,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "debugg"
      -1,
      -1,
      -1,
      -1,
      -1,
      1917,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "debugge"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1944,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "debugger"
      (_types.TokenType._debugger << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "dec"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      1998,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "decl"
      -1,
      2025,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "decla"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2052,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "declar"
      -1,
      -1,
      -1,
      -1,
      -1,
      2079,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "declare"
      _keywords.ContextualKeyword._declare << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "def"
      -1,
      2133,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "defa"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2160,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "defau"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2187,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "defaul"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2214,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "default"
      (_types.TokenType._default << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "del"
      -1,
      -1,
      -1,
      -1,
      -1,
      2268,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "dele"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2295,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "delet"
      -1,
      -1,
      -1,
      -1,
      -1,
      2322,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "delete"
      (_types.TokenType._delete << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "do"
      (_types.TokenType._do << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "e"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2403,
      -1,
      2484,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2565,
      -1,
      -1,
      // "el"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2430,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "els"
      -1,
      -1,
      -1,
      -1,
      -1,
      2457,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "else"
      (_types.TokenType._else << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "en"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2511,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "enu"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2538,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "enum"
      _keywords.ContextualKeyword._enum << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ex"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2592,
      -1,
      -1,
      -1,
      2727,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "exp"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2619,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "expo"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2646,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "expor"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2673,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "export"
      (_types.TokenType._export << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2700,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "exports"
      _keywords.ContextualKeyword._exports << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ext"
      -1,
      -1,
      -1,
      -1,
      -1,
      2754,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "exte"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2781,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "exten"
      -1,
      -1,
      -1,
      -1,
      2808,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "extend"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2835,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "extends"
      (_types.TokenType._extends << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "f"
      -1,
      2889,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2997,
      -1,
      -1,
      -1,
      -1,
      -1,
      3159,
      -1,
      -1,
      3213,
      -1,
      -1,
      3294,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fa"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2916,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fal"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      2943,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fals"
      -1,
      -1,
      -1,
      -1,
      -1,
      2970,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "false"
      (_types.TokenType._false << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fi"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3024,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fin"
      -1,
      3051,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fina"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3078,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "final"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3105,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "finall"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3132,
      -1,
      // "finally"
      (_types.TokenType._finally << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fo"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3186,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "for"
      (_types.TokenType._for << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fr"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3240,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fro"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3267,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "from"
      _keywords.ContextualKeyword._from << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fu"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3321,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "fun"
      -1,
      -1,
      -1,
      3348,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "func"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3375,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "funct"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3402,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "functi"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3429,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "functio"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3456,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "function"
      (_types.TokenType._function << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "g"
      -1,
      -1,
      -1,
      -1,
      -1,
      3510,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3564,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ge"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3537,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "get"
      _keywords.ContextualKeyword._get << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "gl"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3591,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "glo"
      -1,
      -1,
      3618,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "glob"
      -1,
      3645,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "globa"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3672,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "global"
      _keywords.ContextualKeyword._global << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "i"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3726,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3753,
      4077,
      -1,
      -1,
      -1,
      -1,
      4590,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "if"
      (_types.TokenType._if << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "im"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3780,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "imp"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3807,
      -1,
      -1,
      3996,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "impl"
      -1,
      -1,
      -1,
      -1,
      -1,
      3834,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "imple"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3861,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "implem"
      -1,
      -1,
      -1,
      -1,
      -1,
      3888,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "impleme"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3915,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "implemen"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3942,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "implement"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      3969,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "implements"
      _keywords.ContextualKeyword._implements << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "impo"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4023,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "impor"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4050,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "import"
      (_types.TokenType._import << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "in"
      (_types.TokenType._in << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4104,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4185,
      4401,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "inf"
      -1,
      -1,
      -1,
      -1,
      -1,
      4131,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "infe"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4158,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "infer"
      _keywords.ContextualKeyword._infer << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ins"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4212,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "inst"
      -1,
      4239,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "insta"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4266,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "instan"
      -1,
      -1,
      -1,
      4293,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "instanc"
      -1,
      -1,
      -1,
      -1,
      -1,
      4320,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "instance"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4347,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "instanceo"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4374,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "instanceof"
      (_types.TokenType._instanceof << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "int"
      -1,
      -1,
      -1,
      -1,
      -1,
      4428,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "inte"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4455,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "inter"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4482,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "interf"
      -1,
      4509,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "interfa"
      -1,
      -1,
      -1,
      4536,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "interfac"
      -1,
      -1,
      -1,
      -1,
      -1,
      4563,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "interface"
      _keywords.ContextualKeyword._interface << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "is"
      _keywords.ContextualKeyword._is << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "k"
      -1,
      -1,
      -1,
      -1,
      -1,
      4644,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ke"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4671,
      -1,
      // "key"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4698,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "keyo"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4725,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "keyof"
      _keywords.ContextualKeyword._keyof << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "l"
      -1,
      -1,
      -1,
      -1,
      -1,
      4779,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "le"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4806,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "let"
      (_types.TokenType._let << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "m"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4860,
      -1,
      -1,
      -1,
      -1,
      -1,
      4995,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "mi"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4887,
      -1,
      -1,
      // "mix"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4914,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "mixi"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4941,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "mixin"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      4968,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "mixins"
      _keywords.ContextualKeyword._mixins << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "mo"
      -1,
      -1,
      -1,
      -1,
      5022,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "mod"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5049,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "modu"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5076,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "modul"
      -1,
      -1,
      -1,
      -1,
      -1,
      5103,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "module"
      _keywords.ContextualKeyword._module << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "n"
      -1,
      5157,
      -1,
      -1,
      -1,
      5373,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5427,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "na"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5184,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "nam"
      -1,
      -1,
      -1,
      -1,
      -1,
      5211,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "name"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5238,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "names"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5265,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "namesp"
      -1,
      5292,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "namespa"
      -1,
      -1,
      -1,
      5319,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "namespac"
      -1,
      -1,
      -1,
      -1,
      -1,
      5346,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "namespace"
      _keywords.ContextualKeyword._namespace << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ne"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5400,
      -1,
      -1,
      -1,
      // "new"
      (_types.TokenType._new << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "nu"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5454,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "nul"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5481,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "null"
      (_types.TokenType._null << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "o"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5535,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5562,
      -1,
      -1,
      -1,
      -1,
      5697,
      5751,
      -1,
      -1,
      -1,
      -1,
      // "of"
      _keywords.ContextualKeyword._of << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "op"
      -1,
      5589,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "opa"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5616,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "opaq"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5643,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "opaqu"
      -1,
      -1,
      -1,
      -1,
      -1,
      5670,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "opaque"
      _keywords.ContextualKeyword._opaque << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ou"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5724,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "out"
      _keywords.ContextualKeyword._out << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ov"
      -1,
      -1,
      -1,
      -1,
      -1,
      5778,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ove"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5805,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "over"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5832,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "overr"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5859,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "overri"
      -1,
      -1,
      -1,
      -1,
      5886,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "overrid"
      -1,
      -1,
      -1,
      -1,
      -1,
      5913,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "override"
      _keywords.ContextualKeyword._override << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "p"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5967,
      -1,
      -1,
      6345,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "pr"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      5994,
      -1,
      -1,
      -1,
      -1,
      -1,
      6129,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "pri"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6021,
      -1,
      -1,
      -1,
      -1,
      // "priv"
      -1,
      6048,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "priva"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6075,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "privat"
      -1,
      -1,
      -1,
      -1,
      -1,
      6102,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "private"
      _keywords.ContextualKeyword._private << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "pro"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6156,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "prot"
      -1,
      -1,
      -1,
      -1,
      -1,
      6183,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6318,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "prote"
      -1,
      -1,
      -1,
      6210,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "protec"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6237,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "protect"
      -1,
      -1,
      -1,
      -1,
      -1,
      6264,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "protecte"
      -1,
      -1,
      -1,
      -1,
      6291,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "protected"
      _keywords.ContextualKeyword._protected << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "proto"
      _keywords.ContextualKeyword._proto << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "pu"
      -1,
      -1,
      6372,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "pub"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6399,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "publ"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6426,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "publi"
      -1,
      -1,
      -1,
      6453,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "public"
      _keywords.ContextualKeyword._public << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "r"
      -1,
      -1,
      -1,
      -1,
      -1,
      6507,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "re"
      -1,
      6534,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6696,
      -1,
      -1,
      6831,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "rea"
      -1,
      -1,
      -1,
      -1,
      6561,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "read"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6588,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "reado"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6615,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "readon"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6642,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "readonl"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6669,
      -1,
      // "readonly"
      _keywords.ContextualKeyword._readonly << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "req"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6723,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "requ"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6750,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "requi"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6777,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "requir"
      -1,
      -1,
      -1,
      -1,
      -1,
      6804,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "require"
      _keywords.ContextualKeyword._require << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ret"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6858,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "retu"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6885,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "retur"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6912,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "return"
      (_types.TokenType._return << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "s"
      -1,
      6966,
      -1,
      -1,
      -1,
      7182,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7236,
      7371,
      -1,
      7479,
      -1,
      7614,
      -1,
      // "sa"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      6993,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "sat"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7020,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "sati"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7047,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "satis"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7074,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "satisf"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7101,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "satisfi"
      -1,
      -1,
      -1,
      -1,
      -1,
      7128,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "satisfie"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7155,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "satisfies"
      _keywords.ContextualKeyword._satisfies << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "se"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7209,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "set"
      _keywords.ContextualKeyword._set << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "st"
      -1,
      7263,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "sta"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7290,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "stat"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7317,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "stati"
      -1,
      -1,
      -1,
      7344,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "static"
      _keywords.ContextualKeyword._static << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "su"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7398,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "sup"
      -1,
      -1,
      -1,
      -1,
      -1,
      7425,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "supe"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7452,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "super"
      (_types.TokenType._super << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "sw"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7506,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "swi"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7533,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "swit"
      -1,
      -1,
      -1,
      7560,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "switc"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7587,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "switch"
      (_types.TokenType._switch << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "sy"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7641,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "sym"
      -1,
      -1,
      7668,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "symb"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7695,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "symbo"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7722,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "symbol"
      _keywords.ContextualKeyword._symbol << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "t"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7776,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7938,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8046,
      -1,
      // "th"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7803,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7857,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "thi"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7830,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "this"
      (_types.TokenType._this << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "thr"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7884,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "thro"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7911,
      -1,
      -1,
      -1,
      // "throw"
      (_types.TokenType._throw << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "tr"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      7965,
      -1,
      -1,
      -1,
      8019,
      -1,
      // "tru"
      -1,
      -1,
      -1,
      -1,
      -1,
      7992,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "true"
      (_types.TokenType._true << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "try"
      (_types.TokenType._try << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "ty"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8073,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "typ"
      -1,
      -1,
      -1,
      -1,
      -1,
      8100,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "type"
      _keywords.ContextualKeyword._type << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8127,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "typeo"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8154,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "typeof"
      (_types.TokenType._typeof << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "u"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8208,
      -1,
      -1,
      -1,
      -1,
      8343,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "un"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8235,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "uni"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8262,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "uniq"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8289,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "uniqu"
      -1,
      -1,
      -1,
      -1,
      -1,
      8316,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "unique"
      _keywords.ContextualKeyword._unique << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "us"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8370,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "usi"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8397,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "usin"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8424,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "using"
      _keywords.ContextualKeyword._using << 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "v"
      -1,
      8478,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8532,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "va"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8505,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "var"
      (_types.TokenType._var << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "vo"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8559,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "voi"
      -1,
      -1,
      -1,
      -1,
      8586,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "void"
      (_types.TokenType._void << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "w"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8640,
      8748,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "wh"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8667,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "whi"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8694,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "whil"
      -1,
      -1,
      -1,
      -1,
      -1,
      8721,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "while"
      (_types.TokenType._while << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "wi"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8775,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "wit"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8802,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "with"
      (_types.TokenType._with << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "y"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8856,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "yi"
      -1,
      -1,
      -1,
      -1,
      -1,
      8883,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "yie"
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      8910,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "yiel"
      -1,
      -1,
      -1,
      -1,
      8937,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      // "yield"
      (_types.TokenType._yield << 1) + 1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1
    ]);
    exports2.READ_WORD_TREE = READ_WORD_TREE;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/readWord.js
var require_readWord = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/readWord.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _base = require_base();
    var _charcodes = require_charcodes();
    var _identifier = require_identifier();
    var _index = require_tokenizer();
    var _readWordTree = require_readWordTree();
    var _types = require_types();
    function readWord() {
      let treePos = 0;
      let code = 0;
      let pos = _base.state.pos;
      while (pos < _base.input.length) {
        code = _base.input.charCodeAt(pos);
        if (code < _charcodes.charCodes.lowercaseA || code > _charcodes.charCodes.lowercaseZ) {
          break;
        }
        const next = _readWordTree.READ_WORD_TREE[treePos + (code - _charcodes.charCodes.lowercaseA) + 1];
        if (next === -1) {
          break;
        } else {
          treePos = next;
          pos++;
        }
      }
      const keywordValue = _readWordTree.READ_WORD_TREE[treePos];
      if (keywordValue > -1 && !_identifier.IS_IDENTIFIER_CHAR[code]) {
        _base.state.pos = pos;
        if (keywordValue & 1) {
          _index.finishToken.call(void 0, keywordValue >>> 1);
        } else {
          _index.finishToken.call(void 0, _types.TokenType.name, keywordValue >>> 1);
        }
        return;
      }
      while (pos < _base.input.length) {
        const ch = _base.input.charCodeAt(pos);
        if (_identifier.IS_IDENTIFIER_CHAR[ch]) {
          pos++;
        } else if (ch === _charcodes.charCodes.backslash) {
          pos += 2;
          if (_base.input.charCodeAt(pos) === _charcodes.charCodes.leftCurlyBrace) {
            while (pos < _base.input.length && _base.input.charCodeAt(pos) !== _charcodes.charCodes.rightCurlyBrace) {
              pos++;
            }
            pos++;
          }
        } else if (ch === _charcodes.charCodes.atSign && _base.input.charCodeAt(pos + 1) === _charcodes.charCodes.atSign) {
          pos += 2;
        } else {
          break;
        }
      }
      _base.state.pos = pos;
      _index.finishToken.call(void 0, _types.TokenType.name);
    }
    exports2.default = readWord;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/index.js
var require_tokenizer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/tokenizer/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _base = require_base();
    var _util = require_util();
    var _charcodes = require_charcodes();
    var _identifier = require_identifier();
    var _whitespace = require_whitespace();
    var _keywords = require_keywords();
    var _readWord = require_readWord();
    var _readWord2 = _interopRequireDefault(_readWord);
    var _types = require_types();
    var IdentifierRole;
    (function(IdentifierRole2) {
      const Access = 0;
      IdentifierRole2[IdentifierRole2["Access"] = Access] = "Access";
      const ExportAccess = Access + 1;
      IdentifierRole2[IdentifierRole2["ExportAccess"] = ExportAccess] = "ExportAccess";
      const TopLevelDeclaration = ExportAccess + 1;
      IdentifierRole2[IdentifierRole2["TopLevelDeclaration"] = TopLevelDeclaration] = "TopLevelDeclaration";
      const FunctionScopedDeclaration = TopLevelDeclaration + 1;
      IdentifierRole2[IdentifierRole2["FunctionScopedDeclaration"] = FunctionScopedDeclaration] = "FunctionScopedDeclaration";
      const BlockScopedDeclaration = FunctionScopedDeclaration + 1;
      IdentifierRole2[IdentifierRole2["BlockScopedDeclaration"] = BlockScopedDeclaration] = "BlockScopedDeclaration";
      const ObjectShorthandTopLevelDeclaration = BlockScopedDeclaration + 1;
      IdentifierRole2[IdentifierRole2["ObjectShorthandTopLevelDeclaration"] = ObjectShorthandTopLevelDeclaration] = "ObjectShorthandTopLevelDeclaration";
      const ObjectShorthandFunctionScopedDeclaration = ObjectShorthandTopLevelDeclaration + 1;
      IdentifierRole2[IdentifierRole2["ObjectShorthandFunctionScopedDeclaration"] = ObjectShorthandFunctionScopedDeclaration] = "ObjectShorthandFunctionScopedDeclaration";
      const ObjectShorthandBlockScopedDeclaration = ObjectShorthandFunctionScopedDeclaration + 1;
      IdentifierRole2[IdentifierRole2["ObjectShorthandBlockScopedDeclaration"] = ObjectShorthandBlockScopedDeclaration] = "ObjectShorthandBlockScopedDeclaration";
      const ObjectShorthand = ObjectShorthandBlockScopedDeclaration + 1;
      IdentifierRole2[IdentifierRole2["ObjectShorthand"] = ObjectShorthand] = "ObjectShorthand";
      const ImportDeclaration = ObjectShorthand + 1;
      IdentifierRole2[IdentifierRole2["ImportDeclaration"] = ImportDeclaration] = "ImportDeclaration";
      const ObjectKey = ImportDeclaration + 1;
      IdentifierRole2[IdentifierRole2["ObjectKey"] = ObjectKey] = "ObjectKey";
      const ImportAccess = ObjectKey + 1;
      IdentifierRole2[IdentifierRole2["ImportAccess"] = ImportAccess] = "ImportAccess";
    })(IdentifierRole || (exports2.IdentifierRole = IdentifierRole = {}));
    var JSXRole;
    (function(JSXRole2) {
      const NoChildren = 0;
      JSXRole2[JSXRole2["NoChildren"] = NoChildren] = "NoChildren";
      const OneChild = NoChildren + 1;
      JSXRole2[JSXRole2["OneChild"] = OneChild] = "OneChild";
      const StaticChildren = OneChild + 1;
      JSXRole2[JSXRole2["StaticChildren"] = StaticChildren] = "StaticChildren";
      const KeyAfterPropSpread = StaticChildren + 1;
      JSXRole2[JSXRole2["KeyAfterPropSpread"] = KeyAfterPropSpread] = "KeyAfterPropSpread";
    })(JSXRole || (exports2.JSXRole = JSXRole = {}));
    function isDeclaration(token) {
      const role = token.identifierRole;
      return role === IdentifierRole.TopLevelDeclaration || role === IdentifierRole.FunctionScopedDeclaration || role === IdentifierRole.BlockScopedDeclaration || role === IdentifierRole.ObjectShorthandTopLevelDeclaration || role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration || role === IdentifierRole.ObjectShorthandBlockScopedDeclaration;
    }
    exports2.isDeclaration = isDeclaration;
    function isNonTopLevelDeclaration(token) {
      const role = token.identifierRole;
      return role === IdentifierRole.FunctionScopedDeclaration || role === IdentifierRole.BlockScopedDeclaration || role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration || role === IdentifierRole.ObjectShorthandBlockScopedDeclaration;
    }
    exports2.isNonTopLevelDeclaration = isNonTopLevelDeclaration;
    function isTopLevelDeclaration(token) {
      const role = token.identifierRole;
      return role === IdentifierRole.TopLevelDeclaration || role === IdentifierRole.ObjectShorthandTopLevelDeclaration || role === IdentifierRole.ImportDeclaration;
    }
    exports2.isTopLevelDeclaration = isTopLevelDeclaration;
    function isBlockScopedDeclaration(token) {
      const role = token.identifierRole;
      return role === IdentifierRole.TopLevelDeclaration || role === IdentifierRole.BlockScopedDeclaration || role === IdentifierRole.ObjectShorthandTopLevelDeclaration || role === IdentifierRole.ObjectShorthandBlockScopedDeclaration;
    }
    exports2.isBlockScopedDeclaration = isBlockScopedDeclaration;
    function isFunctionScopedDeclaration(token) {
      const role = token.identifierRole;
      return role === IdentifierRole.FunctionScopedDeclaration || role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration;
    }
    exports2.isFunctionScopedDeclaration = isFunctionScopedDeclaration;
    function isObjectShorthandDeclaration(token) {
      return token.identifierRole === IdentifierRole.ObjectShorthandTopLevelDeclaration || token.identifierRole === IdentifierRole.ObjectShorthandBlockScopedDeclaration || token.identifierRole === IdentifierRole.ObjectShorthandFunctionScopedDeclaration;
    }
    exports2.isObjectShorthandDeclaration = isObjectShorthandDeclaration;
    var Token = class {
      constructor() {
        this.type = _base.state.type;
        this.contextualKeyword = _base.state.contextualKeyword;
        this.start = _base.state.start;
        this.end = _base.state.end;
        this.scopeDepth = _base.state.scopeDepth;
        this.isType = _base.state.isType;
        this.identifierRole = null;
        this.jsxRole = null;
        this.shadowsGlobal = false;
        this.isAsyncOperation = false;
        this.contextId = null;
        this.rhsEndIndex = null;
        this.isExpression = false;
        this.numNullishCoalesceStarts = 0;
        this.numNullishCoalesceEnds = 0;
        this.isOptionalChainStart = false;
        this.isOptionalChainEnd = false;
        this.subscriptStartIndex = null;
        this.nullishStartIndex = null;
      }
      // Initially false for all tokens, then may be computed in a follow-up step that does scope
      // analysis.
      // Initially false for all tokens, but may be set during transform to mark it as containing an
      // await operation.
      // For assignments, the index of the RHS. For export tokens, the end of the export.
      // For class tokens, records if the class is a class expression or a class statement.
      // Number of times to insert a `nullishCoalesce(` snippet before this token.
      // Number of times to insert a `)` snippet after this token.
      // If true, insert an `optionalChain([` snippet before this token.
      // If true, insert a `])` snippet after this token.
      // Tag for `.`, `?.`, `[`, `?.[`, `(`, and `?.(` to denote the "root" token for this
      // subscript chain. This can be used to determine if this chain is an optional chain.
      // Tag for `??` operators to denote the root token for this nullish coalescing call.
    };
    exports2.Token = Token;
    function next() {
      _base.state.tokens.push(new Token());
      nextToken();
    }
    exports2.next = next;
    function nextTemplateToken() {
      _base.state.tokens.push(new Token());
      _base.state.start = _base.state.pos;
      readTmplToken();
    }
    exports2.nextTemplateToken = nextTemplateToken;
    function retokenizeSlashAsRegex() {
      if (_base.state.type === _types.TokenType.assign) {
        --_base.state.pos;
      }
      readRegexp();
    }
    exports2.retokenizeSlashAsRegex = retokenizeSlashAsRegex;
    function pushTypeContext(existingTokensInType) {
      for (let i = _base.state.tokens.length - existingTokensInType; i < _base.state.tokens.length; i++) {
        _base.state.tokens[i].isType = true;
      }
      const oldIsType = _base.state.isType;
      _base.state.isType = true;
      return oldIsType;
    }
    exports2.pushTypeContext = pushTypeContext;
    function popTypeContext(oldIsType) {
      _base.state.isType = oldIsType;
    }
    exports2.popTypeContext = popTypeContext;
    function eat(type) {
      if (match(type)) {
        next();
        return true;
      } else {
        return false;
      }
    }
    exports2.eat = eat;
    function eatTypeToken(tokenType) {
      const oldIsType = _base.state.isType;
      _base.state.isType = true;
      eat(tokenType);
      _base.state.isType = oldIsType;
    }
    exports2.eatTypeToken = eatTypeToken;
    function match(type) {
      return _base.state.type === type;
    }
    exports2.match = match;
    function lookaheadType() {
      const snapshot = _base.state.snapshot();
      next();
      const type = _base.state.type;
      _base.state.restoreFromSnapshot(snapshot);
      return type;
    }
    exports2.lookaheadType = lookaheadType;
    var TypeAndKeyword = class {
      constructor(type, contextualKeyword) {
        this.type = type;
        this.contextualKeyword = contextualKeyword;
      }
    };
    exports2.TypeAndKeyword = TypeAndKeyword;
    function lookaheadTypeAndKeyword() {
      const snapshot = _base.state.snapshot();
      next();
      const type = _base.state.type;
      const contextualKeyword = _base.state.contextualKeyword;
      _base.state.restoreFromSnapshot(snapshot);
      return new TypeAndKeyword(type, contextualKeyword);
    }
    exports2.lookaheadTypeAndKeyword = lookaheadTypeAndKeyword;
    function nextTokenStart() {
      return nextTokenStartSince(_base.state.pos);
    }
    exports2.nextTokenStart = nextTokenStart;
    function nextTokenStartSince(pos) {
      _whitespace.skipWhiteSpace.lastIndex = pos;
      const skip = _whitespace.skipWhiteSpace.exec(_base.input);
      return pos + skip[0].length;
    }
    exports2.nextTokenStartSince = nextTokenStartSince;
    function lookaheadCharCode() {
      return _base.input.charCodeAt(nextTokenStart());
    }
    exports2.lookaheadCharCode = lookaheadCharCode;
    function nextToken() {
      skipSpace();
      _base.state.start = _base.state.pos;
      if (_base.state.pos >= _base.input.length) {
        const tokens = _base.state.tokens;
        if (tokens.length >= 2 && tokens[tokens.length - 1].start >= _base.input.length && tokens[tokens.length - 2].start >= _base.input.length) {
          _util.unexpected.call(void 0, "Unexpectedly reached the end of input.");
        }
        finishToken(_types.TokenType.eof);
        return;
      }
      readToken(_base.input.charCodeAt(_base.state.pos));
    }
    exports2.nextToken = nextToken;
    function readToken(code) {
      if (_identifier.IS_IDENTIFIER_START[code] || code === _charcodes.charCodes.backslash || code === _charcodes.charCodes.atSign && _base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.atSign) {
        _readWord2.default.call(void 0);
      } else {
        getTokenFromCode(code);
      }
    }
    function skipBlockComment() {
      while (_base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.asterisk || _base.input.charCodeAt(_base.state.pos + 1) !== _charcodes.charCodes.slash) {
        _base.state.pos++;
        if (_base.state.pos > _base.input.length) {
          _util.unexpected.call(void 0, "Unterminated comment", _base.state.pos - 2);
          return;
        }
      }
      _base.state.pos += 2;
    }
    function skipLineComment(startSkip) {
      let ch = _base.input.charCodeAt(_base.state.pos += startSkip);
      if (_base.state.pos < _base.input.length) {
        while (ch !== _charcodes.charCodes.lineFeed && ch !== _charcodes.charCodes.carriageReturn && ch !== _charcodes.charCodes.lineSeparator && ch !== _charcodes.charCodes.paragraphSeparator && ++_base.state.pos < _base.input.length) {
          ch = _base.input.charCodeAt(_base.state.pos);
        }
      }
    }
    exports2.skipLineComment = skipLineComment;
    function skipSpace() {
      while (_base.state.pos < _base.input.length) {
        const ch = _base.input.charCodeAt(_base.state.pos);
        switch (ch) {
          case _charcodes.charCodes.carriageReturn:
            if (_base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.lineFeed) {
              ++_base.state.pos;
            }
          case _charcodes.charCodes.lineFeed:
          case _charcodes.charCodes.lineSeparator:
          case _charcodes.charCodes.paragraphSeparator:
            ++_base.state.pos;
            break;
          case _charcodes.charCodes.slash:
            switch (_base.input.charCodeAt(_base.state.pos + 1)) {
              case _charcodes.charCodes.asterisk:
                _base.state.pos += 2;
                skipBlockComment();
                break;
              case _charcodes.charCodes.slash:
                skipLineComment(2);
                break;
              default:
                return;
            }
            break;
          default:
            if (_whitespace.IS_WHITESPACE[ch]) {
              ++_base.state.pos;
            } else {
              return;
            }
        }
      }
    }
    exports2.skipSpace = skipSpace;
    function finishToken(type, contextualKeyword = _keywords.ContextualKeyword.NONE) {
      _base.state.end = _base.state.pos;
      _base.state.type = type;
      _base.state.contextualKeyword = contextualKeyword;
    }
    exports2.finishToken = finishToken;
    function readToken_dot() {
      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);
      if (nextChar >= _charcodes.charCodes.digit0 && nextChar <= _charcodes.charCodes.digit9) {
        readNumber(true);
        return;
      }
      if (nextChar === _charcodes.charCodes.dot && _base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.dot) {
        _base.state.pos += 3;
        finishToken(_types.TokenType.ellipsis);
      } else {
        ++_base.state.pos;
        finishToken(_types.TokenType.dot);
      }
    }
    function readToken_slash() {
      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);
      if (nextChar === _charcodes.charCodes.equalsTo) {
        finishOp(_types.TokenType.assign, 2);
      } else {
        finishOp(_types.TokenType.slash, 1);
      }
    }
    function readToken_mult_modulo(code) {
      let tokenType = code === _charcodes.charCodes.asterisk ? _types.TokenType.star : _types.TokenType.modulo;
      let width = 1;
      let nextChar = _base.input.charCodeAt(_base.state.pos + 1);
      if (code === _charcodes.charCodes.asterisk && nextChar === _charcodes.charCodes.asterisk) {
        width++;
        nextChar = _base.input.charCodeAt(_base.state.pos + 2);
        tokenType = _types.TokenType.exponent;
      }
      if (nextChar === _charcodes.charCodes.equalsTo && _base.input.charCodeAt(_base.state.pos + 2) !== _charcodes.charCodes.greaterThan) {
        width++;
        tokenType = _types.TokenType.assign;
      }
      finishOp(tokenType, width);
    }
    function readToken_pipe_amp(code) {
      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);
      if (nextChar === code) {
        if (_base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.equalsTo) {
          finishOp(_types.TokenType.assign, 3);
        } else {
          finishOp(code === _charcodes.charCodes.verticalBar ? _types.TokenType.logicalOR : _types.TokenType.logicalAND, 2);
        }
        return;
      }
      if (code === _charcodes.charCodes.verticalBar) {
        if (nextChar === _charcodes.charCodes.greaterThan) {
          finishOp(_types.TokenType.pipeline, 2);
          return;
        } else if (nextChar === _charcodes.charCodes.rightCurlyBrace && _base.isFlowEnabled) {
          finishOp(_types.TokenType.braceBarR, 2);
          return;
        }
      }
      if (nextChar === _charcodes.charCodes.equalsTo) {
        finishOp(_types.TokenType.assign, 2);
        return;
      }
      finishOp(code === _charcodes.charCodes.verticalBar ? _types.TokenType.bitwiseOR : _types.TokenType.bitwiseAND, 1);
    }
    function readToken_caret() {
      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);
      if (nextChar === _charcodes.charCodes.equalsTo) {
        finishOp(_types.TokenType.assign, 2);
      } else {
        finishOp(_types.TokenType.bitwiseXOR, 1);
      }
    }
    function readToken_plus_min(code) {
      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);
      if (nextChar === code) {
        finishOp(_types.TokenType.preIncDec, 2);
        return;
      }
      if (nextChar === _charcodes.charCodes.equalsTo) {
        finishOp(_types.TokenType.assign, 2);
      } else if (code === _charcodes.charCodes.plusSign) {
        finishOp(_types.TokenType.plus, 1);
      } else {
        finishOp(_types.TokenType.minus, 1);
      }
    }
    function readToken_lt() {
      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);
      if (nextChar === _charcodes.charCodes.lessThan) {
        if (_base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.equalsTo) {
          finishOp(_types.TokenType.assign, 3);
          return;
        }
        if (_base.state.isType) {
          finishOp(_types.TokenType.lessThan, 1);
        } else {
          finishOp(_types.TokenType.bitShiftL, 2);
        }
        return;
      }
      if (nextChar === _charcodes.charCodes.equalsTo) {
        finishOp(_types.TokenType.relationalOrEqual, 2);
      } else {
        finishOp(_types.TokenType.lessThan, 1);
      }
    }
    function readToken_gt() {
      if (_base.state.isType) {
        finishOp(_types.TokenType.greaterThan, 1);
        return;
      }
      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);
      if (nextChar === _charcodes.charCodes.greaterThan) {
        const size = _base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.greaterThan ? 3 : 2;
        if (_base.input.charCodeAt(_base.state.pos + size) === _charcodes.charCodes.equalsTo) {
          finishOp(_types.TokenType.assign, size + 1);
          return;
        }
        finishOp(_types.TokenType.bitShiftR, size);
        return;
      }
      if (nextChar === _charcodes.charCodes.equalsTo) {
        finishOp(_types.TokenType.relationalOrEqual, 2);
      } else {
        finishOp(_types.TokenType.greaterThan, 1);
      }
    }
    function rescan_gt() {
      if (_base.state.type === _types.TokenType.greaterThan) {
        _base.state.pos -= 1;
        readToken_gt();
      }
    }
    exports2.rescan_gt = rescan_gt;
    function readToken_eq_excl(code) {
      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);
      if (nextChar === _charcodes.charCodes.equalsTo) {
        finishOp(_types.TokenType.equality, _base.input.charCodeAt(_base.state.pos + 2) === _charcodes.charCodes.equalsTo ? 3 : 2);
        return;
      }
      if (code === _charcodes.charCodes.equalsTo && nextChar === _charcodes.charCodes.greaterThan) {
        _base.state.pos += 2;
        finishToken(_types.TokenType.arrow);
        return;
      }
      finishOp(code === _charcodes.charCodes.equalsTo ? _types.TokenType.eq : _types.TokenType.bang, 1);
    }
    function readToken_question() {
      const nextChar = _base.input.charCodeAt(_base.state.pos + 1);
      const nextChar2 = _base.input.charCodeAt(_base.state.pos + 2);
      if (nextChar === _charcodes.charCodes.questionMark && // In Flow (but not TypeScript), ??string is a valid type that should be
      // tokenized as two individual ? tokens.
      !(_base.isFlowEnabled && _base.state.isType)) {
        if (nextChar2 === _charcodes.charCodes.equalsTo) {
          finishOp(_types.TokenType.assign, 3);
        } else {
          finishOp(_types.TokenType.nullishCoalescing, 2);
        }
      } else if (nextChar === _charcodes.charCodes.dot && !(nextChar2 >= _charcodes.charCodes.digit0 && nextChar2 <= _charcodes.charCodes.digit9)) {
        _base.state.pos += 2;
        finishToken(_types.TokenType.questionDot);
      } else {
        ++_base.state.pos;
        finishToken(_types.TokenType.question);
      }
    }
    function getTokenFromCode(code) {
      switch (code) {
        case _charcodes.charCodes.numberSign:
          ++_base.state.pos;
          finishToken(_types.TokenType.hash);
          return;
        case _charcodes.charCodes.dot:
          readToken_dot();
          return;
        case _charcodes.charCodes.leftParenthesis:
          ++_base.state.pos;
          finishToken(_types.TokenType.parenL);
          return;
        case _charcodes.charCodes.rightParenthesis:
          ++_base.state.pos;
          finishToken(_types.TokenType.parenR);
          return;
        case _charcodes.charCodes.semicolon:
          ++_base.state.pos;
          finishToken(_types.TokenType.semi);
          return;
        case _charcodes.charCodes.comma:
          ++_base.state.pos;
          finishToken(_types.TokenType.comma);
          return;
        case _charcodes.charCodes.leftSquareBracket:
          ++_base.state.pos;
          finishToken(_types.TokenType.bracketL);
          return;
        case _charcodes.charCodes.rightSquareBracket:
          ++_base.state.pos;
          finishToken(_types.TokenType.bracketR);
          return;
        case _charcodes.charCodes.leftCurlyBrace:
          if (_base.isFlowEnabled && _base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.verticalBar) {
            finishOp(_types.TokenType.braceBarL, 2);
          } else {
            ++_base.state.pos;
            finishToken(_types.TokenType.braceL);
          }
          return;
        case _charcodes.charCodes.rightCurlyBrace:
          ++_base.state.pos;
          finishToken(_types.TokenType.braceR);
          return;
        case _charcodes.charCodes.colon:
          if (_base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.colon) {
            finishOp(_types.TokenType.doubleColon, 2);
          } else {
            ++_base.state.pos;
            finishToken(_types.TokenType.colon);
          }
          return;
        case _charcodes.charCodes.questionMark:
          readToken_question();
          return;
        case _charcodes.charCodes.atSign:
          ++_base.state.pos;
          finishToken(_types.TokenType.at);
          return;
        case _charcodes.charCodes.graveAccent:
          ++_base.state.pos;
          finishToken(_types.TokenType.backQuote);
          return;
        case _charcodes.charCodes.digit0: {
          const nextChar = _base.input.charCodeAt(_base.state.pos + 1);
          if (nextChar === _charcodes.charCodes.lowercaseX || nextChar === _charcodes.charCodes.uppercaseX || nextChar === _charcodes.charCodes.lowercaseO || nextChar === _charcodes.charCodes.uppercaseO || nextChar === _charcodes.charCodes.lowercaseB || nextChar === _charcodes.charCodes.uppercaseB) {
            readRadixNumber();
            return;
          }
        }
        case _charcodes.charCodes.digit1:
        case _charcodes.charCodes.digit2:
        case _charcodes.charCodes.digit3:
        case _charcodes.charCodes.digit4:
        case _charcodes.charCodes.digit5:
        case _charcodes.charCodes.digit6:
        case _charcodes.charCodes.digit7:
        case _charcodes.charCodes.digit8:
        case _charcodes.charCodes.digit9:
          readNumber(false);
          return;
        case _charcodes.charCodes.quotationMark:
        case _charcodes.charCodes.apostrophe:
          readString(code);
          return;
        case _charcodes.charCodes.slash:
          readToken_slash();
          return;
        case _charcodes.charCodes.percentSign:
        case _charcodes.charCodes.asterisk:
          readToken_mult_modulo(code);
          return;
        case _charcodes.charCodes.verticalBar:
        case _charcodes.charCodes.ampersand:
          readToken_pipe_amp(code);
          return;
        case _charcodes.charCodes.caret:
          readToken_caret();
          return;
        case _charcodes.charCodes.plusSign:
        case _charcodes.charCodes.dash:
          readToken_plus_min(code);
          return;
        case _charcodes.charCodes.lessThan:
          readToken_lt();
          return;
        case _charcodes.charCodes.greaterThan:
          readToken_gt();
          return;
        case _charcodes.charCodes.equalsTo:
        case _charcodes.charCodes.exclamationMark:
          readToken_eq_excl(code);
          return;
        case _charcodes.charCodes.tilde:
          finishOp(_types.TokenType.tilde, 1);
          return;
        default:
          break;
      }
      _util.unexpected.call(void 0, `Unexpected character '${String.fromCharCode(code)}'`, _base.state.pos);
    }
    exports2.getTokenFromCode = getTokenFromCode;
    function finishOp(type, size) {
      _base.state.pos += size;
      finishToken(type);
    }
    function readRegexp() {
      const start = _base.state.pos;
      let escaped = false;
      let inClass = false;
      for (; ; ) {
        if (_base.state.pos >= _base.input.length) {
          _util.unexpected.call(void 0, "Unterminated regular expression", start);
          return;
        }
        const code = _base.input.charCodeAt(_base.state.pos);
        if (escaped) {
          escaped = false;
        } else {
          if (code === _charcodes.charCodes.leftSquareBracket) {
            inClass = true;
          } else if (code === _charcodes.charCodes.rightSquareBracket && inClass) {
            inClass = false;
          } else if (code === _charcodes.charCodes.slash && !inClass) {
            break;
          }
          escaped = code === _charcodes.charCodes.backslash;
        }
        ++_base.state.pos;
      }
      ++_base.state.pos;
      skipWord();
      finishToken(_types.TokenType.regexp);
    }
    function readInt() {
      while (true) {
        const code = _base.input.charCodeAt(_base.state.pos);
        if (code >= _charcodes.charCodes.digit0 && code <= _charcodes.charCodes.digit9 || code === _charcodes.charCodes.underscore) {
          _base.state.pos++;
        } else {
          break;
        }
      }
    }
    function readRadixNumber() {
      _base.state.pos += 2;
      while (true) {
        const code = _base.input.charCodeAt(_base.state.pos);
        if (code >= _charcodes.charCodes.digit0 && code <= _charcodes.charCodes.digit9 || code >= _charcodes.charCodes.lowercaseA && code <= _charcodes.charCodes.lowercaseF || code >= _charcodes.charCodes.uppercaseA && code <= _charcodes.charCodes.uppercaseF || code === _charcodes.charCodes.underscore) {
          _base.state.pos++;
        } else {
          break;
        }
      }
      const nextChar = _base.input.charCodeAt(_base.state.pos);
      if (nextChar === _charcodes.charCodes.lowercaseN) {
        ++_base.state.pos;
        finishToken(_types.TokenType.bigint);
      } else {
        finishToken(_types.TokenType.num);
      }
    }
    function readNumber(startsWithDot) {
      let isBigInt = false;
      let isDecimal = false;
      if (!startsWithDot) {
        readInt();
      }
      let nextChar = _base.input.charCodeAt(_base.state.pos);
      if (nextChar === _charcodes.charCodes.dot) {
        ++_base.state.pos;
        readInt();
        nextChar = _base.input.charCodeAt(_base.state.pos);
      }
      if (nextChar === _charcodes.charCodes.uppercaseE || nextChar === _charcodes.charCodes.lowercaseE) {
        nextChar = _base.input.charCodeAt(++_base.state.pos);
        if (nextChar === _charcodes.charCodes.plusSign || nextChar === _charcodes.charCodes.dash) {
          ++_base.state.pos;
        }
        readInt();
        nextChar = _base.input.charCodeAt(_base.state.pos);
      }
      if (nextChar === _charcodes.charCodes.lowercaseN) {
        ++_base.state.pos;
        isBigInt = true;
      } else if (nextChar === _charcodes.charCodes.lowercaseM) {
        ++_base.state.pos;
        isDecimal = true;
      }
      if (isBigInt) {
        finishToken(_types.TokenType.bigint);
        return;
      }
      if (isDecimal) {
        finishToken(_types.TokenType.decimal);
        return;
      }
      finishToken(_types.TokenType.num);
    }
    function readString(quote) {
      _base.state.pos++;
      for (; ; ) {
        if (_base.state.pos >= _base.input.length) {
          _util.unexpected.call(void 0, "Unterminated string constant");
          return;
        }
        const ch = _base.input.charCodeAt(_base.state.pos);
        if (ch === _charcodes.charCodes.backslash) {
          _base.state.pos++;
        } else if (ch === quote) {
          break;
        }
        _base.state.pos++;
      }
      _base.state.pos++;
      finishToken(_types.TokenType.string);
    }
    function readTmplToken() {
      for (; ; ) {
        if (_base.state.pos >= _base.input.length) {
          _util.unexpected.call(void 0, "Unterminated template");
          return;
        }
        const ch = _base.input.charCodeAt(_base.state.pos);
        if (ch === _charcodes.charCodes.graveAccent || ch === _charcodes.charCodes.dollarSign && _base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.leftCurlyBrace) {
          if (_base.state.pos === _base.state.start && match(_types.TokenType.template)) {
            if (ch === _charcodes.charCodes.dollarSign) {
              _base.state.pos += 2;
              finishToken(_types.TokenType.dollarBraceL);
              return;
            } else {
              ++_base.state.pos;
              finishToken(_types.TokenType.backQuote);
              return;
            }
          }
          finishToken(_types.TokenType.template);
          return;
        }
        if (ch === _charcodes.charCodes.backslash) {
          _base.state.pos++;
        }
        _base.state.pos++;
      }
    }
    function skipWord() {
      while (_base.state.pos < _base.input.length) {
        const ch = _base.input.charCodeAt(_base.state.pos);
        if (_identifier.IS_IDENTIFIER_CHAR[ch]) {
          _base.state.pos++;
        } else if (ch === _charcodes.charCodes.backslash) {
          _base.state.pos += 2;
          if (_base.input.charCodeAt(_base.state.pos) === _charcodes.charCodes.leftCurlyBrace) {
            while (_base.state.pos < _base.input.length && _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.rightCurlyBrace) {
              _base.state.pos++;
            }
            _base.state.pos++;
          }
        } else {
          break;
        }
      }
    }
    exports2.skipWord = skipWord;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getImportExportSpecifierInfo.js
var require_getImportExportSpecifierInfo = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getImportExportSpecifierInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _types = require_types();
    function getImportExportSpecifierInfo(tokens, index = tokens.currentIndex()) {
      let endIndex = index + 1;
      if (isSpecifierEnd(tokens, endIndex)) {
        const name = tokens.identifierNameAtIndex(index);
        return {
          isType: false,
          leftName: name,
          rightName: name,
          endIndex
        };
      }
      endIndex++;
      if (isSpecifierEnd(tokens, endIndex)) {
        return {
          isType: true,
          leftName: null,
          rightName: null,
          endIndex
        };
      }
      endIndex++;
      if (isSpecifierEnd(tokens, endIndex)) {
        return {
          isType: false,
          leftName: tokens.identifierNameAtIndex(index),
          rightName: tokens.identifierNameAtIndex(index + 2),
          endIndex
        };
      }
      endIndex++;
      if (isSpecifierEnd(tokens, endIndex)) {
        return {
          isType: true,
          leftName: null,
          rightName: null,
          endIndex
        };
      }
      throw new Error(`Unexpected import/export specifier at ${index}`);
    }
    exports2.default = getImportExportSpecifierInfo;
    function isSpecifierEnd(tokens, index) {
      const token = tokens.tokens[index];
      return token.type === _types.TokenType.braceR || token.type === _types.TokenType.comma;
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/plugins/jsx/xhtml.js
var require_xhtml = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/plugins/jsx/xhtml.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = /* @__PURE__ */ new Map([
      ["quot", '"'],
      ["amp", "&"],
      ["apos", "'"],
      ["lt", "<"],
      ["gt", ">"],
      ["nbsp", "\xA0"],
      ["iexcl", "\xA1"],
      ["cent", "\xA2"],
      ["pound", "\xA3"],
      ["curren", "\xA4"],
      ["yen", "\xA5"],
      ["brvbar", "\xA6"],
      ["sect", "\xA7"],
      ["uml", "\xA8"],
      ["copy", "\xA9"],
      ["ordf", "\xAA"],
      ["laquo", "\xAB"],
      ["not", "\xAC"],
      ["shy", "\xAD"],
      ["reg", "\xAE"],
      ["macr", "\xAF"],
      ["deg", "\xB0"],
      ["plusmn", "\xB1"],
      ["sup2", "\xB2"],
      ["sup3", "\xB3"],
      ["acute", "\xB4"],
      ["micro", "\xB5"],
      ["para", "\xB6"],
      ["middot", "\xB7"],
      ["cedil", "\xB8"],
      ["sup1", "\xB9"],
      ["ordm", "\xBA"],
      ["raquo", "\xBB"],
      ["frac14", "\xBC"],
      ["frac12", "\xBD"],
      ["frac34", "\xBE"],
      ["iquest", "\xBF"],
      ["Agrave", "\xC0"],
      ["Aacute", "\xC1"],
      ["Acirc", "\xC2"],
      ["Atilde", "\xC3"],
      ["Auml", "\xC4"],
      ["Aring", "\xC5"],
      ["AElig", "\xC6"],
      ["Ccedil", "\xC7"],
      ["Egrave", "\xC8"],
      ["Eacute", "\xC9"],
      ["Ecirc", "\xCA"],
      ["Euml", "\xCB"],
      ["Igrave", "\xCC"],
      ["Iacute", "\xCD"],
      ["Icirc", "\xCE"],
      ["Iuml", "\xCF"],
      ["ETH", "\xD0"],
      ["Ntilde", "\xD1"],
      ["Ograve", "\xD2"],
      ["Oacute", "\xD3"],
      ["Ocirc", "\xD4"],
      ["Otilde", "\xD5"],
      ["Ouml", "\xD6"],
      ["times", "\xD7"],
      ["Oslash", "\xD8"],
      ["Ugrave", "\xD9"],
      ["Uacute", "\xDA"],
      ["Ucirc", "\xDB"],
      ["Uuml", "\xDC"],
      ["Yacute", "\xDD"],
      ["THORN", "\xDE"],
      ["szlig", "\xDF"],
      ["agrave", "\xE0"],
      ["aacute", "\xE1"],
      ["acirc", "\xE2"],
      ["atilde", "\xE3"],
      ["auml", "\xE4"],
      ["aring", "\xE5"],
      ["aelig", "\xE6"],
      ["ccedil", "\xE7"],
      ["egrave", "\xE8"],
      ["eacute", "\xE9"],
      ["ecirc", "\xEA"],
      ["euml", "\xEB"],
      ["igrave", "\xEC"],
      ["iacute", "\xED"],
      ["icirc", "\xEE"],
      ["iuml", "\xEF"],
      ["eth", "\xF0"],
      ["ntilde", "\xF1"],
      ["ograve", "\xF2"],
      ["oacute", "\xF3"],
      ["ocirc", "\xF4"],
      ["otilde", "\xF5"],
      ["ouml", "\xF6"],
      ["divide", "\xF7"],
      ["oslash", "\xF8"],
      ["ugrave", "\xF9"],
      ["uacute", "\xFA"],
      ["ucirc", "\xFB"],
      ["uuml", "\xFC"],
      ["yacute", "\xFD"],
      ["thorn", "\xFE"],
      ["yuml", "\xFF"],
      ["OElig", "\u0152"],
      ["oelig", "\u0153"],
      ["Scaron", "\u0160"],
      ["scaron", "\u0161"],
      ["Yuml", "\u0178"],
      ["fnof", "\u0192"],
      ["circ", "\u02C6"],
      ["tilde", "\u02DC"],
      ["Alpha", "\u0391"],
      ["Beta", "\u0392"],
      ["Gamma", "\u0393"],
      ["Delta", "\u0394"],
      ["Epsilon", "\u0395"],
      ["Zeta", "\u0396"],
      ["Eta", "\u0397"],
      ["Theta", "\u0398"],
      ["Iota", "\u0399"],
      ["Kappa", "\u039A"],
      ["Lambda", "\u039B"],
      ["Mu", "\u039C"],
      ["Nu", "\u039D"],
      ["Xi", "\u039E"],
      ["Omicron", "\u039F"],
      ["Pi", "\u03A0"],
      ["Rho", "\u03A1"],
      ["Sigma", "\u03A3"],
      ["Tau", "\u03A4"],
      ["Upsilon", "\u03A5"],
      ["Phi", "\u03A6"],
      ["Chi", "\u03A7"],
      ["Psi", "\u03A8"],
      ["Omega", "\u03A9"],
      ["alpha", "\u03B1"],
      ["beta", "\u03B2"],
      ["gamma", "\u03B3"],
      ["delta", "\u03B4"],
      ["epsilon", "\u03B5"],
      ["zeta", "\u03B6"],
      ["eta", "\u03B7"],
      ["theta", "\u03B8"],
      ["iota", "\u03B9"],
      ["kappa", "\u03BA"],
      ["lambda", "\u03BB"],
      ["mu", "\u03BC"],
      ["nu", "\u03BD"],
      ["xi", "\u03BE"],
      ["omicron", "\u03BF"],
      ["pi", "\u03C0"],
      ["rho", "\u03C1"],
      ["sigmaf", "\u03C2"],
      ["sigma", "\u03C3"],
      ["tau", "\u03C4"],
      ["upsilon", "\u03C5"],
      ["phi", "\u03C6"],
      ["chi", "\u03C7"],
      ["psi", "\u03C8"],
      ["omega", "\u03C9"],
      ["thetasym", "\u03D1"],
      ["upsih", "\u03D2"],
      ["piv", "\u03D6"],
      ["ensp", "\u2002"],
      ["emsp", "\u2003"],
      ["thinsp", "\u2009"],
      ["zwnj", "\u200C"],
      ["zwj", "\u200D"],
      ["lrm", "\u200E"],
      ["rlm", "\u200F"],
      ["ndash", "\u2013"],
      ["mdash", "\u2014"],
      ["lsquo", "\u2018"],
      ["rsquo", "\u2019"],
      ["sbquo", "\u201A"],
      ["ldquo", "\u201C"],
      ["rdquo", "\u201D"],
      ["bdquo", "\u201E"],
      ["dagger", "\u2020"],
      ["Dagger", "\u2021"],
      ["bull", "\u2022"],
      ["hellip", "\u2026"],
      ["permil", "\u2030"],
      ["prime", "\u2032"],
      ["Prime", "\u2033"],
      ["lsaquo", "\u2039"],
      ["rsaquo", "\u203A"],
      ["oline", "\u203E"],
      ["frasl", "\u2044"],
      ["euro", "\u20AC"],
      ["image", "\u2111"],
      ["weierp", "\u2118"],
      ["real", "\u211C"],
      ["trade", "\u2122"],
      ["alefsym", "\u2135"],
      ["larr", "\u2190"],
      ["uarr", "\u2191"],
      ["rarr", "\u2192"],
      ["darr", "\u2193"],
      ["harr", "\u2194"],
      ["crarr", "\u21B5"],
      ["lArr", "\u21D0"],
      ["uArr", "\u21D1"],
      ["rArr", "\u21D2"],
      ["dArr", "\u21D3"],
      ["hArr", "\u21D4"],
      ["forall", "\u2200"],
      ["part", "\u2202"],
      ["exist", "\u2203"],
      ["empty", "\u2205"],
      ["nabla", "\u2207"],
      ["isin", "\u2208"],
      ["notin", "\u2209"],
      ["ni", "\u220B"],
      ["prod", "\u220F"],
      ["sum", "\u2211"],
      ["minus", "\u2212"],
      ["lowast", "\u2217"],
      ["radic", "\u221A"],
      ["prop", "\u221D"],
      ["infin", "\u221E"],
      ["ang", "\u2220"],
      ["and", "\u2227"],
      ["or", "\u2228"],
      ["cap", "\u2229"],
      ["cup", "\u222A"],
      ["int", "\u222B"],
      ["there4", "\u2234"],
      ["sim", "\u223C"],
      ["cong", "\u2245"],
      ["asymp", "\u2248"],
      ["ne", "\u2260"],
      ["equiv", "\u2261"],
      ["le", "\u2264"],
      ["ge", "\u2265"],
      ["sub", "\u2282"],
      ["sup", "\u2283"],
      ["nsub", "\u2284"],
      ["sube", "\u2286"],
      ["supe", "\u2287"],
      ["oplus", "\u2295"],
      ["otimes", "\u2297"],
      ["perp", "\u22A5"],
      ["sdot", "\u22C5"],
      ["lceil", "\u2308"],
      ["rceil", "\u2309"],
      ["lfloor", "\u230A"],
      ["rfloor", "\u230B"],
      ["lang", "\u2329"],
      ["rang", "\u232A"],
      ["loz", "\u25CA"],
      ["spades", "\u2660"],
      ["clubs", "\u2663"],
      ["hearts", "\u2665"],
      ["diams", "\u2666"]
    ]);
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getJSXPragmaInfo.js
var require_getJSXPragmaInfo = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getJSXPragmaInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function getJSXPragmaInfo(options) {
      const [base, suffix] = splitPragma(options.jsxPragma || "React.createElement");
      const [fragmentBase, fragmentSuffix] = splitPragma(options.jsxFragmentPragma || "React.Fragment");
      return { base, suffix, fragmentBase, fragmentSuffix };
    }
    exports2.default = getJSXPragmaInfo;
    function splitPragma(pragma) {
      let dotIndex = pragma.indexOf(".");
      if (dotIndex === -1) {
        dotIndex = pragma.length;
      }
      return [pragma.slice(0, dotIndex), pragma.slice(dotIndex)];
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/Transformer.js
var require_Transformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/Transformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var Transformer = class {
      // Return true if anything was processed, false otherwise.
      getPrefixCode() {
        return "";
      }
      getHoistedCode() {
        return "";
      }
      getSuffixCode() {
        return "";
      }
    };
    exports2.default = Transformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/JSXTransformer.js
var require_JSXTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/JSXTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _xhtml = require_xhtml();
    var _xhtml2 = _interopRequireDefault(_xhtml);
    var _tokenizer = require_tokenizer();
    var _types = require_types();
    var _charcodes = require_charcodes();
    var _getJSXPragmaInfo = require_getJSXPragmaInfo();
    var _getJSXPragmaInfo2 = _interopRequireDefault(_getJSXPragmaInfo);
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var JSXTransformer = class _JSXTransformer extends _Transformer2.default {
      // State for calculating the line number of each JSX tag in development.
      __init() {
        this.lastLineNumber = 1;
      }
      __init2() {
        this.lastIndex = 0;
      }
      // In development, variable name holding the name of the current file.
      __init3() {
        this.filenameVarName = null;
      }
      // Mapping of claimed names for imports in the automatic transform, e,g.
      // {jsx: "_jsx"}. This determines which imports to generate in the prefix.
      __init4() {
        this.esmAutomaticImportNameResolutions = {};
      }
      // When automatically adding imports in CJS mode, we store the variable name
      // holding the imported CJS module so we can require it in the prefix.
      __init5() {
        this.cjsAutomaticModuleNameResolutions = {};
      }
      constructor(rootTransformer, tokens, importProcessor, nameManager, options) {
        super();
        this.rootTransformer = rootTransformer;
        this.tokens = tokens;
        this.importProcessor = importProcessor;
        this.nameManager = nameManager;
        this.options = options;
        _JSXTransformer.prototype.__init.call(this);
        _JSXTransformer.prototype.__init2.call(this);
        _JSXTransformer.prototype.__init3.call(this);
        _JSXTransformer.prototype.__init4.call(this);
        _JSXTransformer.prototype.__init5.call(this);
        ;
        this.jsxPragmaInfo = _getJSXPragmaInfo2.default.call(void 0, options);
        this.isAutomaticRuntime = options.jsxRuntime === "automatic";
        this.jsxImportSource = options.jsxImportSource || "react";
      }
      process() {
        if (this.tokens.matches1(_types.TokenType.jsxTagStart)) {
          this.processJSXTag();
          return true;
        }
        return false;
      }
      getPrefixCode() {
        let prefix = "";
        if (this.filenameVarName) {
          prefix += `const ${this.filenameVarName} = ${JSON.stringify(this.options.filePath || "")};`;
        }
        if (this.isAutomaticRuntime) {
          if (this.importProcessor) {
            for (const [path3, resolvedName] of Object.entries(this.cjsAutomaticModuleNameResolutions)) {
              prefix += `var ${resolvedName} = require("${path3}");`;
            }
          } else {
            const { createElement: createElementResolution, ...otherResolutions } = this.esmAutomaticImportNameResolutions;
            if (createElementResolution) {
              prefix += `import {createElement as ${createElementResolution}} from "${this.jsxImportSource}";`;
            }
            const importSpecifiers = Object.entries(otherResolutions).map(([name, resolvedName]) => `${name} as ${resolvedName}`).join(", ");
            if (importSpecifiers) {
              const importPath = this.jsxImportSource + (this.options.production ? "/jsx-runtime" : "/jsx-dev-runtime");
              prefix += `import {${importSpecifiers}} from "${importPath}";`;
            }
          }
        }
        return prefix;
      }
      processJSXTag() {
        const { jsxRole, start } = this.tokens.currentToken();
        const elementLocationCode = this.options.production ? null : this.getElementLocationCode(start);
        if (this.isAutomaticRuntime && jsxRole !== _tokenizer.JSXRole.KeyAfterPropSpread) {
          this.transformTagToJSXFunc(elementLocationCode, jsxRole);
        } else {
          this.transformTagToCreateElement(elementLocationCode);
        }
      }
      getElementLocationCode(firstTokenStart) {
        const lineNumber = this.getLineNumberForIndex(firstTokenStart);
        return `lineNumber: ${lineNumber}`;
      }
      /**
       * Get the line number for this source position. This is calculated lazily and
       * must be called in increasing order by index.
       */
      getLineNumberForIndex(index) {
        const code = this.tokens.code;
        while (this.lastIndex < index && this.lastIndex < code.length) {
          if (code[this.lastIndex] === "\n") {
            this.lastLineNumber++;
          }
          this.lastIndex++;
        }
        return this.lastLineNumber;
      }
      /**
       * Convert the current JSX element to a call to jsx, jsxs, or jsxDEV. This is
       * the primary transformation for the automatic transform.
       *
       * Example:
       * <div a={1} key={2}>Hello{x}</div>
       * becomes
       * jsxs('div', {a: 1, children: ["Hello", x]}, 2)
       */
      transformTagToJSXFunc(elementLocationCode, jsxRole) {
        const isStatic = jsxRole === _tokenizer.JSXRole.StaticChildren;
        this.tokens.replaceToken(this.getJSXFuncInvocationCode(isStatic));
        let keyCode = null;
        if (this.tokens.matches1(_types.TokenType.jsxTagEnd)) {
          this.tokens.replaceToken(`${this.getFragmentCode()}, {`);
          this.processAutomaticChildrenAndEndProps(jsxRole);
        } else {
          this.processTagIntro();
          this.tokens.appendCode(", {");
          keyCode = this.processProps(true);
          if (this.tokens.matches2(_types.TokenType.slash, _types.TokenType.jsxTagEnd)) {
            this.tokens.appendCode("}");
          } else if (this.tokens.matches1(_types.TokenType.jsxTagEnd)) {
            this.tokens.removeToken();
            this.processAutomaticChildrenAndEndProps(jsxRole);
          } else {
            throw new Error("Expected either /> or > at the end of the tag.");
          }
          if (keyCode) {
            this.tokens.appendCode(`, ${keyCode}`);
          }
        }
        if (!this.options.production) {
          if (keyCode === null) {
            this.tokens.appendCode(", void 0");
          }
          this.tokens.appendCode(`, ${isStatic}, ${this.getDevSource(elementLocationCode)}, this`);
        }
        this.tokens.removeInitialToken();
        while (!this.tokens.matches1(_types.TokenType.jsxTagEnd)) {
          this.tokens.removeToken();
        }
        this.tokens.replaceToken(")");
      }
      /**
       * Convert the current JSX element to a createElement call. In the classic
       * runtime, this is the only case. In the automatic runtime, this is called
       * as a fallback in some situations.
       *
       * Example:
       * <div a={1} key={2}>Hello{x}</div>
       * becomes
       * React.createElement('div', {a: 1, key: 2}, "Hello", x)
       */
      transformTagToCreateElement(elementLocationCode) {
        this.tokens.replaceToken(this.getCreateElementInvocationCode());
        if (this.tokens.matches1(_types.TokenType.jsxTagEnd)) {
          this.tokens.replaceToken(`${this.getFragmentCode()}, null`);
          this.processChildren(true);
        } else {
          this.processTagIntro();
          this.processPropsObjectWithDevInfo(elementLocationCode);
          if (this.tokens.matches2(_types.TokenType.slash, _types.TokenType.jsxTagEnd)) {
          } else if (this.tokens.matches1(_types.TokenType.jsxTagEnd)) {
            this.tokens.removeToken();
            this.processChildren(true);
          } else {
            throw new Error("Expected either /> or > at the end of the tag.");
          }
        }
        this.tokens.removeInitialToken();
        while (!this.tokens.matches1(_types.TokenType.jsxTagEnd)) {
          this.tokens.removeToken();
        }
        this.tokens.replaceToken(")");
      }
      /**
       * Get the code for the relevant function for this context: jsx, jsxs,
       * or jsxDEV. The following open-paren is included as well.
       *
       * These functions are only used for the automatic runtime, so they are always
       * auto-imported, but the auto-import will be either CJS or ESM based on the
       * target module format.
       */
      getJSXFuncInvocationCode(isStatic) {
        if (this.options.production) {
          if (isStatic) {
            return this.claimAutoImportedFuncInvocation("jsxs", "/jsx-runtime");
          } else {
            return this.claimAutoImportedFuncInvocation("jsx", "/jsx-runtime");
          }
        } else {
          return this.claimAutoImportedFuncInvocation("jsxDEV", "/jsx-dev-runtime");
        }
      }
      /**
       * Return the code to use for the createElement function, e.g.
       * `React.createElement`, including the following open-paren.
       *
       * This is the main function to use for the classic runtime. For the
       * automatic runtime, this function is used as a fallback function to
       * preserve behavior when there is a prop spread followed by an explicit
       * key. In that automatic runtime case, the function should be automatically
       * imported.
       */
      getCreateElementInvocationCode() {
        if (this.isAutomaticRuntime) {
          return this.claimAutoImportedFuncInvocation("createElement", "");
        } else {
          const { jsxPragmaInfo } = this;
          const resolvedPragmaBaseName = this.importProcessor ? this.importProcessor.getIdentifierReplacement(jsxPragmaInfo.base) || jsxPragmaInfo.base : jsxPragmaInfo.base;
          return `${resolvedPragmaBaseName}${jsxPragmaInfo.suffix}(`;
        }
      }
      /**
       * Return the code to use as the component when compiling a shorthand
       * fragment, e.g. `React.Fragment`.
       *
       * This may be called from either the classic or automatic runtime, and
       * the value should be auto-imported for the automatic runtime.
       */
      getFragmentCode() {
        if (this.isAutomaticRuntime) {
          return this.claimAutoImportedName(
            "Fragment",
            this.options.production ? "/jsx-runtime" : "/jsx-dev-runtime"
          );
        } else {
          const { jsxPragmaInfo } = this;
          const resolvedFragmentPragmaBaseName = this.importProcessor ? this.importProcessor.getIdentifierReplacement(jsxPragmaInfo.fragmentBase) || jsxPragmaInfo.fragmentBase : jsxPragmaInfo.fragmentBase;
          return resolvedFragmentPragmaBaseName + jsxPragmaInfo.fragmentSuffix;
        }
      }
      /**
       * Return code that invokes the given function.
       *
       * When the imports transform is enabled, use the CJSImportTransformer
       * strategy of using `.call(void 0, ...` to avoid passing a `this` value in a
       * situation that would otherwise look like a method call.
       */
      claimAutoImportedFuncInvocation(funcName, importPathSuffix) {
        const funcCode = this.claimAutoImportedName(funcName, importPathSuffix);
        if (this.importProcessor) {
          return `${funcCode}.call(void 0, `;
        } else {
          return `${funcCode}(`;
        }
      }
      claimAutoImportedName(funcName, importPathSuffix) {
        if (this.importProcessor) {
          const path3 = this.jsxImportSource + importPathSuffix;
          if (!this.cjsAutomaticModuleNameResolutions[path3]) {
            this.cjsAutomaticModuleNameResolutions[path3] = this.importProcessor.getFreeIdentifierForPath(path3);
          }
          return `${this.cjsAutomaticModuleNameResolutions[path3]}.${funcName}`;
        } else {
          if (!this.esmAutomaticImportNameResolutions[funcName]) {
            this.esmAutomaticImportNameResolutions[funcName] = this.nameManager.claimFreeName(
              `_${funcName}`
            );
          }
          return this.esmAutomaticImportNameResolutions[funcName];
        }
      }
      /**
       * Process the first part of a tag, before any props.
       */
      processTagIntro() {
        let introEnd = this.tokens.currentIndex() + 1;
        while (this.tokens.tokens[introEnd].isType || !this.tokens.matches2AtIndex(introEnd - 1, _types.TokenType.jsxName, _types.TokenType.jsxName) && !this.tokens.matches2AtIndex(introEnd - 1, _types.TokenType.greaterThan, _types.TokenType.jsxName) && !this.tokens.matches1AtIndex(introEnd, _types.TokenType.braceL) && !this.tokens.matches1AtIndex(introEnd, _types.TokenType.jsxTagEnd) && !this.tokens.matches2AtIndex(introEnd, _types.TokenType.slash, _types.TokenType.jsxTagEnd)) {
          introEnd++;
        }
        if (introEnd === this.tokens.currentIndex() + 1) {
          const tagName = this.tokens.identifierName();
          if (startsWithLowerCase(tagName)) {
            this.tokens.replaceToken(`'${tagName}'`);
          }
        }
        while (this.tokens.currentIndex() < introEnd) {
          this.rootTransformer.processToken();
        }
      }
      /**
       * Starting at the beginning of the props, add the props argument to
       * React.createElement, including the comma before it.
       */
      processPropsObjectWithDevInfo(elementLocationCode) {
        const devProps = this.options.production ? "" : `__self: this, __source: ${this.getDevSource(elementLocationCode)}`;
        if (!this.tokens.matches1(_types.TokenType.jsxName) && !this.tokens.matches1(_types.TokenType.braceL)) {
          if (devProps) {
            this.tokens.appendCode(`, {${devProps}}`);
          } else {
            this.tokens.appendCode(`, null`);
          }
          return;
        }
        this.tokens.appendCode(`, {`);
        this.processProps(false);
        if (devProps) {
          this.tokens.appendCode(` ${devProps}}`);
        } else {
          this.tokens.appendCode("}");
        }
      }
      /**
       * Transform the core part of the props, assuming that a { has already been
       * inserted before us and that a } will be inserted after us.
       *
       * If extractKeyCode is true (i.e. when using any jsx... function), any prop
       * named "key" has its code captured and returned rather than being emitted to
       * the output code. This shifts line numbers, and emitting the code later will
       * correct line numbers again. If no key is found or if extractKeyCode is
       * false, this function returns null.
       */
      processProps(extractKeyCode) {
        let keyCode = null;
        while (true) {
          if (this.tokens.matches2(_types.TokenType.jsxName, _types.TokenType.eq)) {
            const propName = this.tokens.identifierName();
            if (extractKeyCode && propName === "key") {
              if (keyCode !== null) {
                this.tokens.appendCode(keyCode.replace(/[^\n]/g, ""));
              }
              this.tokens.removeToken();
              this.tokens.removeToken();
              const snapshot = this.tokens.snapshot();
              this.processPropValue();
              keyCode = this.tokens.dangerouslyGetAndRemoveCodeSinceSnapshot(snapshot);
              continue;
            } else {
              this.processPropName(propName);
              this.tokens.replaceToken(": ");
              this.processPropValue();
            }
          } else if (this.tokens.matches1(_types.TokenType.jsxName)) {
            const propName = this.tokens.identifierName();
            this.processPropName(propName);
            this.tokens.appendCode(": true");
          } else if (this.tokens.matches1(_types.TokenType.braceL)) {
            this.tokens.replaceToken("");
            this.rootTransformer.processBalancedCode();
            this.tokens.replaceToken("");
          } else {
            break;
          }
          this.tokens.appendCode(",");
        }
        return keyCode;
      }
      processPropName(propName) {
        if (propName.includes("-")) {
          this.tokens.replaceToken(`'${propName}'`);
        } else {
          this.tokens.copyToken();
        }
      }
      processPropValue() {
        if (this.tokens.matches1(_types.TokenType.braceL)) {
          this.tokens.replaceToken("");
          this.rootTransformer.processBalancedCode();
          this.tokens.replaceToken("");
        } else if (this.tokens.matches1(_types.TokenType.jsxTagStart)) {
          this.processJSXTag();
        } else {
          this.processStringPropValue();
        }
      }
      processStringPropValue() {
        const token = this.tokens.currentToken();
        const valueCode = this.tokens.code.slice(token.start + 1, token.end - 1);
        const replacementCode = formatJSXTextReplacement(valueCode);
        const literalCode = formatJSXStringValueLiteral(valueCode);
        this.tokens.replaceToken(literalCode + replacementCode);
      }
      /**
       * Starting in the middle of the props object literal, produce an additional
       * prop for the children and close the object literal.
       */
      processAutomaticChildrenAndEndProps(jsxRole) {
        if (jsxRole === _tokenizer.JSXRole.StaticChildren) {
          this.tokens.appendCode(" children: [");
          this.processChildren(false);
          this.tokens.appendCode("]}");
        } else {
          if (jsxRole === _tokenizer.JSXRole.OneChild) {
            this.tokens.appendCode(" children: ");
          }
          this.processChildren(false);
          this.tokens.appendCode("}");
        }
      }
      /**
       * Transform children into a comma-separated list, which will be either
       * arguments to createElement or array elements of a children prop.
       */
      processChildren(needsInitialComma) {
        let needsComma = needsInitialComma;
        while (true) {
          if (this.tokens.matches2(_types.TokenType.jsxTagStart, _types.TokenType.slash)) {
            return;
          }
          let didEmitElement = false;
          if (this.tokens.matches1(_types.TokenType.braceL)) {
            if (this.tokens.matches2(_types.TokenType.braceL, _types.TokenType.braceR)) {
              this.tokens.replaceToken("");
              this.tokens.replaceToken("");
            } else {
              this.tokens.replaceToken(needsComma ? ", " : "");
              this.rootTransformer.processBalancedCode();
              this.tokens.replaceToken("");
              didEmitElement = true;
            }
          } else if (this.tokens.matches1(_types.TokenType.jsxTagStart)) {
            this.tokens.appendCode(needsComma ? ", " : "");
            this.processJSXTag();
            didEmitElement = true;
          } else if (this.tokens.matches1(_types.TokenType.jsxText) || this.tokens.matches1(_types.TokenType.jsxEmptyText)) {
            didEmitElement = this.processChildTextElement(needsComma);
          } else {
            throw new Error("Unexpected token when processing JSX children.");
          }
          if (didEmitElement) {
            needsComma = true;
          }
        }
      }
      /**
       * Turn a JSX text element into a string literal, or nothing at all if the JSX
       * text resolves to the empty string.
       *
       * Returns true if a string literal is emitted, false otherwise.
       */
      processChildTextElement(needsComma) {
        const token = this.tokens.currentToken();
        const valueCode = this.tokens.code.slice(token.start, token.end);
        const replacementCode = formatJSXTextReplacement(valueCode);
        const literalCode = formatJSXTextLiteral(valueCode);
        if (literalCode === '""') {
          this.tokens.replaceToken(replacementCode);
          return false;
        } else {
          this.tokens.replaceToken(`${needsComma ? ", " : ""}${literalCode}${replacementCode}`);
          return true;
        }
      }
      getDevSource(elementLocationCode) {
        return `{fileName: ${this.getFilenameVarName()}, ${elementLocationCode}}`;
      }
      getFilenameVarName() {
        if (!this.filenameVarName) {
          this.filenameVarName = this.nameManager.claimFreeName("_jsxFileName");
        }
        return this.filenameVarName;
      }
    };
    exports2.default = JSXTransformer;
    function startsWithLowerCase(s) {
      const firstChar = s.charCodeAt(0);
      return firstChar >= _charcodes.charCodes.lowercaseA && firstChar <= _charcodes.charCodes.lowercaseZ;
    }
    exports2.startsWithLowerCase = startsWithLowerCase;
    function formatJSXTextLiteral(text) {
      let result = "";
      let whitespace = "";
      let isInInitialLineWhitespace = false;
      let seenNonWhitespace = false;
      for (let i = 0; i < text.length; i++) {
        const c = text[i];
        if (c === " " || c === "	" || c === "\r") {
          if (!isInInitialLineWhitespace) {
            whitespace += c;
          }
        } else if (c === "\n") {
          whitespace = "";
          isInInitialLineWhitespace = true;
        } else {
          if (seenNonWhitespace && isInInitialLineWhitespace) {
            result += " ";
          }
          result += whitespace;
          whitespace = "";
          if (c === "&") {
            const { entity, newI } = processEntity(text, i + 1);
            i = newI - 1;
            result += entity;
          } else {
            result += c;
          }
          seenNonWhitespace = true;
          isInInitialLineWhitespace = false;
        }
      }
      if (!isInInitialLineWhitespace) {
        result += whitespace;
      }
      return JSON.stringify(result);
    }
    function formatJSXTextReplacement(text) {
      let numNewlines = 0;
      let numSpaces = 0;
      for (const c of text) {
        if (c === "\n") {
          numNewlines++;
          numSpaces = 0;
        } else if (c === " ") {
          numSpaces++;
        }
      }
      return "\n".repeat(numNewlines) + " ".repeat(numSpaces);
    }
    function formatJSXStringValueLiteral(text) {
      let result = "";
      for (let i = 0; i < text.length; i++) {
        const c = text[i];
        if (c === "\n") {
          if (/\s/.test(text[i + 1])) {
            result += " ";
            while (i < text.length && /\s/.test(text[i + 1])) {
              i++;
            }
          } else {
            result += "\n";
          }
        } else if (c === "&") {
          const { entity, newI } = processEntity(text, i + 1);
          result += entity;
          i = newI - 1;
        } else {
          result += c;
        }
      }
      return JSON.stringify(result);
    }
    function processEntity(text, indexAfterAmpersand) {
      let str = "";
      let count = 0;
      let entity;
      let i = indexAfterAmpersand;
      if (text[i] === "#") {
        let radix = 10;
        i++;
        let numStart;
        if (text[i] === "x") {
          radix = 16;
          i++;
          numStart = i;
          while (i < text.length && isHexDigit(text.charCodeAt(i))) {
            i++;
          }
        } else {
          numStart = i;
          while (i < text.length && isDecimalDigit(text.charCodeAt(i))) {
            i++;
          }
        }
        if (text[i] === ";") {
          const numStr = text.slice(numStart, i);
          if (numStr) {
            i++;
            entity = String.fromCodePoint(parseInt(numStr, radix));
          }
        }
      } else {
        while (i < text.length && count++ < 10) {
          const ch = text[i];
          i++;
          if (ch === ";") {
            entity = _xhtml2.default.get(str);
            break;
          }
          str += ch;
        }
      }
      if (!entity) {
        return { entity: "&", newI: indexAfterAmpersand };
      }
      return { entity, newI: i };
    }
    function isDecimalDigit(code) {
      return code >= _charcodes.charCodes.digit0 && code <= _charcodes.charCodes.digit9;
    }
    function isHexDigit(code) {
      return code >= _charcodes.charCodes.digit0 && code <= _charcodes.charCodes.digit9 || code >= _charcodes.charCodes.lowercaseA && code <= _charcodes.charCodes.lowercaseF || code >= _charcodes.charCodes.uppercaseA && code <= _charcodes.charCodes.uppercaseF;
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getNonTypeIdentifiers.js
var require_getNonTypeIdentifiers = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getNonTypeIdentifiers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _tokenizer = require_tokenizer();
    var _types = require_types();
    var _JSXTransformer = require_JSXTransformer();
    var _getJSXPragmaInfo = require_getJSXPragmaInfo();
    var _getJSXPragmaInfo2 = _interopRequireDefault(_getJSXPragmaInfo);
    function getNonTypeIdentifiers(tokens, options) {
      const jsxPragmaInfo = _getJSXPragmaInfo2.default.call(void 0, options);
      const nonTypeIdentifiers = /* @__PURE__ */ new Set();
      for (let i = 0; i < tokens.tokens.length; i++) {
        const token = tokens.tokens[i];
        if (token.type === _types.TokenType.name && !token.isType && (token.identifierRole === _tokenizer.IdentifierRole.Access || token.identifierRole === _tokenizer.IdentifierRole.ObjectShorthand || token.identifierRole === _tokenizer.IdentifierRole.ExportAccess) && !token.shadowsGlobal) {
          nonTypeIdentifiers.add(tokens.identifierNameForToken(token));
        }
        if (token.type === _types.TokenType.jsxTagStart) {
          nonTypeIdentifiers.add(jsxPragmaInfo.base);
        }
        if (token.type === _types.TokenType.jsxTagStart && i + 1 < tokens.tokens.length && tokens.tokens[i + 1].type === _types.TokenType.jsxTagEnd) {
          nonTypeIdentifiers.add(jsxPragmaInfo.base);
          nonTypeIdentifiers.add(jsxPragmaInfo.fragmentBase);
        }
        if (token.type === _types.TokenType.jsxName && token.identifierRole === _tokenizer.IdentifierRole.Access) {
          const identifierName = tokens.identifierNameForToken(token);
          if (!_JSXTransformer.startsWithLowerCase.call(void 0, identifierName) || tokens.tokens[i + 1].type === _types.TokenType.dot) {
            nonTypeIdentifiers.add(tokens.identifierNameForToken(token));
          }
        }
      }
      return nonTypeIdentifiers;
    }
    exports2.getNonTypeIdentifiers = getNonTypeIdentifiers;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/CJSImportProcessor.js
var require_CJSImportProcessor = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/CJSImportProcessor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _tokenizer = require_tokenizer();
    var _keywords = require_keywords();
    var _types = require_types();
    var _getImportExportSpecifierInfo = require_getImportExportSpecifierInfo();
    var _getImportExportSpecifierInfo2 = _interopRequireDefault(_getImportExportSpecifierInfo);
    var _getNonTypeIdentifiers = require_getNonTypeIdentifiers();
    var CJSImportProcessor = class _CJSImportProcessor {
      __init() {
        this.nonTypeIdentifiers = /* @__PURE__ */ new Set();
      }
      __init2() {
        this.importInfoByPath = /* @__PURE__ */ new Map();
      }
      __init3() {
        this.importsToReplace = /* @__PURE__ */ new Map();
      }
      __init4() {
        this.identifierReplacements = /* @__PURE__ */ new Map();
      }
      __init5() {
        this.exportBindingsByLocalName = /* @__PURE__ */ new Map();
      }
      constructor(nameManager, tokens, enableLegacyTypeScriptModuleInterop, options, isTypeScriptTransformEnabled, keepUnusedImports, helperManager) {
        ;
        this.nameManager = nameManager;
        this.tokens = tokens;
        this.enableLegacyTypeScriptModuleInterop = enableLegacyTypeScriptModuleInterop;
        this.options = options;
        this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;
        this.keepUnusedImports = keepUnusedImports;
        this.helperManager = helperManager;
        _CJSImportProcessor.prototype.__init.call(this);
        _CJSImportProcessor.prototype.__init2.call(this);
        _CJSImportProcessor.prototype.__init3.call(this);
        _CJSImportProcessor.prototype.__init4.call(this);
        _CJSImportProcessor.prototype.__init5.call(this);
      }
      preprocessTokens() {
        for (let i = 0; i < this.tokens.tokens.length; i++) {
          if (this.tokens.matches1AtIndex(i, _types.TokenType._import) && !this.tokens.matches3AtIndex(i, _types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)) {
            this.preprocessImportAtIndex(i);
          }
          if (this.tokens.matches1AtIndex(i, _types.TokenType._export) && !this.tokens.matches2AtIndex(i, _types.TokenType._export, _types.TokenType.eq)) {
            this.preprocessExportAtIndex(i);
          }
        }
        this.generateImportReplacements();
      }
      /**
       * In TypeScript, import statements that only import types should be removed.
       * This includes `import {} from 'foo';`, but not `import 'foo';`.
       */
      pruneTypeOnlyImports() {
        this.nonTypeIdentifiers = _getNonTypeIdentifiers.getNonTypeIdentifiers.call(void 0, this.tokens, this.options);
        for (const [path3, importInfo] of this.importInfoByPath.entries()) {
          if (importInfo.hasBareImport || importInfo.hasStarExport || importInfo.exportStarNames.length > 0 || importInfo.namedExports.length > 0) {
            continue;
          }
          const names = [
            ...importInfo.defaultNames,
            ...importInfo.wildcardNames,
            ...importInfo.namedImports.map(({ localName }) => localName)
          ];
          if (names.every((name) => this.shouldAutomaticallyElideImportedName(name))) {
            this.importsToReplace.set(path3, "");
          }
        }
      }
      shouldAutomaticallyElideImportedName(name) {
        return this.isTypeScriptTransformEnabled && !this.keepUnusedImports && !this.nonTypeIdentifiers.has(name);
      }
      generateImportReplacements() {
        for (const [path3, importInfo] of this.importInfoByPath.entries()) {
          const {
            defaultNames,
            wildcardNames,
            namedImports,
            namedExports,
            exportStarNames,
            hasStarExport
          } = importInfo;
          if (defaultNames.length === 0 && wildcardNames.length === 0 && namedImports.length === 0 && namedExports.length === 0 && exportStarNames.length === 0 && !hasStarExport) {
            this.importsToReplace.set(path3, `require('${path3}');`);
            continue;
          }
          const primaryImportName = this.getFreeIdentifierForPath(path3);
          let secondaryImportName;
          if (this.enableLegacyTypeScriptModuleInterop) {
            secondaryImportName = primaryImportName;
          } else {
            secondaryImportName = wildcardNames.length > 0 ? wildcardNames[0] : this.getFreeIdentifierForPath(path3);
          }
          let requireCode = `var ${primaryImportName} = require('${path3}');`;
          if (wildcardNames.length > 0) {
            for (const wildcardName of wildcardNames) {
              const moduleExpr = this.enableLegacyTypeScriptModuleInterop ? primaryImportName : `${this.helperManager.getHelperName("interopRequireWildcard")}(${primaryImportName})`;
              requireCode += ` var ${wildcardName} = ${moduleExpr};`;
            }
          } else if (exportStarNames.length > 0 && secondaryImportName !== primaryImportName) {
            requireCode += ` var ${secondaryImportName} = ${this.helperManager.getHelperName(
              "interopRequireWildcard"
            )}(${primaryImportName});`;
          } else if (defaultNames.length > 0 && secondaryImportName !== primaryImportName) {
            requireCode += ` var ${secondaryImportName} = ${this.helperManager.getHelperName(
              "interopRequireDefault"
            )}(${primaryImportName});`;
          }
          for (const { importedName, localName } of namedExports) {
            requireCode += ` ${this.helperManager.getHelperName(
              "createNamedExportFrom"
            )}(${primaryImportName}, '${localName}', '${importedName}');`;
          }
          for (const exportStarName of exportStarNames) {
            requireCode += ` exports.${exportStarName} = ${secondaryImportName};`;
          }
          if (hasStarExport) {
            requireCode += ` ${this.helperManager.getHelperName(
              "createStarExport"
            )}(${primaryImportName});`;
          }
          this.importsToReplace.set(path3, requireCode);
          for (const defaultName of defaultNames) {
            this.identifierReplacements.set(defaultName, `${secondaryImportName}.default`);
          }
          for (const { importedName, localName } of namedImports) {
            this.identifierReplacements.set(localName, `${primaryImportName}.${importedName}`);
          }
        }
      }
      getFreeIdentifierForPath(path3) {
        const components = path3.split("/");
        const lastComponent = components[components.length - 1];
        const baseName = lastComponent.replace(/\W/g, "");
        return this.nameManager.claimFreeName(`_${baseName}`);
      }
      preprocessImportAtIndex(index) {
        const defaultNames = [];
        const wildcardNames = [];
        const namedImports = [];
        index++;
        if ((this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._type) || this.tokens.matches1AtIndex(index, _types.TokenType._typeof)) && !this.tokens.matches1AtIndex(index + 1, _types.TokenType.comma) && !this.tokens.matchesContextualAtIndex(index + 1, _keywords.ContextualKeyword._from)) {
          return;
        }
        if (this.tokens.matches1AtIndex(index, _types.TokenType.parenL)) {
          return;
        }
        if (this.tokens.matches1AtIndex(index, _types.TokenType.name)) {
          defaultNames.push(this.tokens.identifierNameAtIndex(index));
          index++;
          if (this.tokens.matches1AtIndex(index, _types.TokenType.comma)) {
            index++;
          }
        }
        if (this.tokens.matches1AtIndex(index, _types.TokenType.star)) {
          index += 2;
          wildcardNames.push(this.tokens.identifierNameAtIndex(index));
          index++;
        }
        if (this.tokens.matches1AtIndex(index, _types.TokenType.braceL)) {
          const result = this.getNamedImports(index + 1);
          index = result.newIndex;
          for (const namedImport of result.namedImports) {
            if (namedImport.importedName === "default") {
              defaultNames.push(namedImport.localName);
            } else {
              namedImports.push(namedImport);
            }
          }
        }
        if (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._from)) {
          index++;
        }
        if (!this.tokens.matches1AtIndex(index, _types.TokenType.string)) {
          throw new Error("Expected string token at the end of import statement.");
        }
        const path3 = this.tokens.stringValueAtIndex(index);
        const importInfo = this.getImportInfo(path3);
        importInfo.defaultNames.push(...defaultNames);
        importInfo.wildcardNames.push(...wildcardNames);
        importInfo.namedImports.push(...namedImports);
        if (defaultNames.length === 0 && wildcardNames.length === 0 && namedImports.length === 0) {
          importInfo.hasBareImport = true;
        }
      }
      preprocessExportAtIndex(index) {
        if (this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._var) || this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._let) || this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._const)) {
          this.preprocessVarExportAtIndex(index);
        } else if (this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._function) || this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType._class)) {
          const exportName = this.tokens.identifierNameAtIndex(index + 2);
          this.addExportBinding(exportName, exportName);
        } else if (this.tokens.matches3AtIndex(index, _types.TokenType._export, _types.TokenType.name, _types.TokenType._function)) {
          const exportName = this.tokens.identifierNameAtIndex(index + 3);
          this.addExportBinding(exportName, exportName);
        } else if (this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType.braceL)) {
          this.preprocessNamedExportAtIndex(index);
        } else if (this.tokens.matches2AtIndex(index, _types.TokenType._export, _types.TokenType.star)) {
          this.preprocessExportStarAtIndex(index);
        }
      }
      preprocessVarExportAtIndex(index) {
        let depth = 0;
        for (let i = index + 2; ; i++) {
          if (this.tokens.matches1AtIndex(i, _types.TokenType.braceL) || this.tokens.matches1AtIndex(i, _types.TokenType.dollarBraceL) || this.tokens.matches1AtIndex(i, _types.TokenType.bracketL)) {
            depth++;
          } else if (this.tokens.matches1AtIndex(i, _types.TokenType.braceR) || this.tokens.matches1AtIndex(i, _types.TokenType.bracketR)) {
            depth--;
          } else if (depth === 0 && !this.tokens.matches1AtIndex(i, _types.TokenType.name)) {
            break;
          } else if (this.tokens.matches1AtIndex(1, _types.TokenType.eq)) {
            const endIndex = this.tokens.currentToken().rhsEndIndex;
            if (endIndex == null) {
              throw new Error("Expected = token with an end index.");
            }
            i = endIndex - 1;
          } else {
            const token = this.tokens.tokens[i];
            if (_tokenizer.isDeclaration.call(void 0, token)) {
              const exportName = this.tokens.identifierNameAtIndex(i);
              this.identifierReplacements.set(exportName, `exports.${exportName}`);
            }
          }
        }
      }
      /**
       * Walk this export statement just in case it's an export...from statement.
       * If it is, combine it into the import info for that path. Otherwise, just
       * bail out; it'll be handled later.
       */
      preprocessNamedExportAtIndex(index) {
        index += 2;
        const { newIndex, namedImports } = this.getNamedImports(index);
        index = newIndex;
        if (this.tokens.matchesContextualAtIndex(index, _keywords.ContextualKeyword._from)) {
          index++;
        } else {
          for (const { importedName: localName, localName: exportedName } of namedImports) {
            this.addExportBinding(localName, exportedName);
          }
          return;
        }
        if (!this.tokens.matches1AtIndex(index, _types.TokenType.string)) {
          throw new Error("Expected string token at the end of import statement.");
        }
        const path3 = this.tokens.stringValueAtIndex(index);
        const importInfo = this.getImportInfo(path3);
        importInfo.namedExports.push(...namedImports);
      }
      preprocessExportStarAtIndex(index) {
        let exportedName = null;
        if (this.tokens.matches3AtIndex(index, _types.TokenType._export, _types.TokenType.star, _types.TokenType._as)) {
          index += 3;
          exportedName = this.tokens.identifierNameAtIndex(index);
          index += 2;
        } else {
          index += 3;
        }
        if (!this.tokens.matches1AtIndex(index, _types.TokenType.string)) {
          throw new Error("Expected string token at the end of star export statement.");
        }
        const path3 = this.tokens.stringValueAtIndex(index);
        const importInfo = this.getImportInfo(path3);
        if (exportedName !== null) {
          importInfo.exportStarNames.push(exportedName);
        } else {
          importInfo.hasStarExport = true;
        }
      }
      getNamedImports(index) {
        const namedImports = [];
        while (true) {
          if (this.tokens.matches1AtIndex(index, _types.TokenType.braceR)) {
            index++;
            break;
          }
          const specifierInfo = _getImportExportSpecifierInfo2.default.call(void 0, this.tokens, index);
          index = specifierInfo.endIndex;
          if (!specifierInfo.isType) {
            namedImports.push({
              importedName: specifierInfo.leftName,
              localName: specifierInfo.rightName
            });
          }
          if (this.tokens.matches2AtIndex(index, _types.TokenType.comma, _types.TokenType.braceR)) {
            index += 2;
            break;
          } else if (this.tokens.matches1AtIndex(index, _types.TokenType.braceR)) {
            index++;
            break;
          } else if (this.tokens.matches1AtIndex(index, _types.TokenType.comma)) {
            index++;
          } else {
            throw new Error(`Unexpected token: ${JSON.stringify(this.tokens.tokens[index])}`);
          }
        }
        return { newIndex: index, namedImports };
      }
      /**
       * Get a mutable import info object for this path, creating one if it doesn't
       * exist yet.
       */
      getImportInfo(path3) {
        const existingInfo = this.importInfoByPath.get(path3);
        if (existingInfo) {
          return existingInfo;
        }
        const newInfo = {
          defaultNames: [],
          wildcardNames: [],
          namedImports: [],
          namedExports: [],
          hasBareImport: false,
          exportStarNames: [],
          hasStarExport: false
        };
        this.importInfoByPath.set(path3, newInfo);
        return newInfo;
      }
      addExportBinding(localName, exportedName) {
        if (!this.exportBindingsByLocalName.has(localName)) {
          this.exportBindingsByLocalName.set(localName, []);
        }
        this.exportBindingsByLocalName.get(localName).push(exportedName);
      }
      /**
       * Return the code to use for the import for this path, or the empty string if
       * the code has already been "claimed" by a previous import.
       */
      claimImportCode(importPath) {
        const result = this.importsToReplace.get(importPath);
        this.importsToReplace.set(importPath, "");
        return result || "";
      }
      getIdentifierReplacement(identifierName) {
        return this.identifierReplacements.get(identifierName) || null;
      }
      /**
       * Return a string like `exports.foo = exports.bar`.
       */
      resolveExportBinding(assignedName) {
        const exportedNames = this.exportBindingsByLocalName.get(assignedName);
        if (!exportedNames || exportedNames.length === 0) {
          return null;
        }
        return exportedNames.map((exportedName) => `exports.${exportedName}`).join(" = ");
      }
      /**
       * Return all imported/exported names where we might be interested in whether usages of those
       * names are shadowed.
       */
      getGlobalNames() {
        return /* @__PURE__ */ new Set([
          ...this.identifierReplacements.keys(),
          ...this.exportBindingsByLocalName.keys()
        ]);
      }
    };
    exports2.default = CJSImportProcessor;
  }
});

// ../../../node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js
var require_set_array_umd = __commonJS({
  "../../../node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js"(exports2, module2) {
    (function(global3, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global3 = typeof globalThis !== "undefined" ? globalThis : global3 || self, factory(global3.setArray = {}));
    })(exports2, function(exports3) {
      "use strict";
      class SetArray {
        constructor() {
          this._indexes = { __proto__: null };
          this.array = [];
        }
      }
      function cast(set) {
        return set;
      }
      function get(setarr, key) {
        return cast(setarr)._indexes[key];
      }
      function put(setarr, key) {
        const index = get(setarr, key);
        if (index !== void 0)
          return index;
        const { array, _indexes: indexes } = cast(setarr);
        const length = array.push(key);
        return indexes[key] = length - 1;
      }
      function pop(setarr) {
        const { array, _indexes: indexes } = cast(setarr);
        if (array.length === 0)
          return;
        const last = array.pop();
        indexes[last] = void 0;
      }
      function remove(setarr, key) {
        const index = get(setarr, key);
        if (index === void 0)
          return;
        const { array, _indexes: indexes } = cast(setarr);
        for (let i = index + 1; i < array.length; i++) {
          const k = array[i];
          array[i - 1] = k;
          indexes[k]--;
        }
        indexes[key] = void 0;
        array.pop();
      }
      exports3.SetArray = SetArray;
      exports3.get = get;
      exports3.pop = pop;
      exports3.put = put;
      exports3.remove = remove;
      Object.defineProperty(exports3, "__esModule", { value: true });
    });
  }
});

// ../../../node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.15/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js
var require_sourcemap_codec_umd = __commonJS({
  "../../../node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.15/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"(exports2, module2) {
    (function(global3, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global3 = typeof globalThis !== "undefined" ? globalThis : global3 || self, factory(global3.sourcemapCodec = {}));
    })(exports2, function(exports3) {
      "use strict";
      const comma = ",".charCodeAt(0);
      const semicolon = ";".charCodeAt(0);
      const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      const intToChar = new Uint8Array(64);
      const charToInt = new Uint8Array(128);
      for (let i = 0; i < chars.length; i++) {
        const c = chars.charCodeAt(i);
        intToChar[i] = c;
        charToInt[c] = i;
      }
      const td = typeof TextDecoder !== "undefined" ? /* @__PURE__ */ new TextDecoder() : typeof Buffer !== "undefined" ? {
        decode(buf) {
          const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);
          return out.toString();
        }
      } : {
        decode(buf) {
          let out = "";
          for (let i = 0; i < buf.length; i++) {
            out += String.fromCharCode(buf[i]);
          }
          return out;
        }
      };
      function decode(mappings) {
        const state = new Int32Array(5);
        const decoded = [];
        let index = 0;
        do {
          const semi = indexOf(mappings, index);
          const line = [];
          let sorted = true;
          let lastCol = 0;
          state[0] = 0;
          for (let i = index; i < semi; i++) {
            let seg;
            i = decodeInteger(mappings, i, state, 0);
            const col = state[0];
            if (col < lastCol)
              sorted = false;
            lastCol = col;
            if (hasMoreVlq(mappings, i, semi)) {
              i = decodeInteger(mappings, i, state, 1);
              i = decodeInteger(mappings, i, state, 2);
              i = decodeInteger(mappings, i, state, 3);
              if (hasMoreVlq(mappings, i, semi)) {
                i = decodeInteger(mappings, i, state, 4);
                seg = [col, state[1], state[2], state[3], state[4]];
              } else {
                seg = [col, state[1], state[2], state[3]];
              }
            } else {
              seg = [col];
            }
            line.push(seg);
          }
          if (!sorted)
            sort(line);
          decoded.push(line);
          index = semi + 1;
        } while (index <= mappings.length);
        return decoded;
      }
      function indexOf(mappings, index) {
        const idx = mappings.indexOf(";", index);
        return idx === -1 ? mappings.length : idx;
      }
      function decodeInteger(mappings, pos, state, j) {
        let value2 = 0;
        let shift = 0;
        let integer = 0;
        do {
          const c = mappings.charCodeAt(pos++);
          integer = charToInt[c];
          value2 |= (integer & 31) << shift;
          shift += 5;
        } while (integer & 32);
        const shouldNegate = value2 & 1;
        value2 >>>= 1;
        if (shouldNegate) {
          value2 = -2147483648 | -value2;
        }
        state[j] += value2;
        return pos;
      }
      function hasMoreVlq(mappings, i, length) {
        if (i >= length)
          return false;
        return mappings.charCodeAt(i) !== comma;
      }
      function sort(line) {
        line.sort(sortComparator);
      }
      function sortComparator(a, b) {
        return a[0] - b[0];
      }
      function encode(decoded) {
        const state = new Int32Array(5);
        const bufLength = 1024 * 16;
        const subLength = bufLength - 36;
        const buf = new Uint8Array(bufLength);
        const sub = buf.subarray(0, subLength);
        let pos = 0;
        let out = "";
        for (let i = 0; i < decoded.length; i++) {
          const line = decoded[i];
          if (i > 0) {
            if (pos === bufLength) {
              out += td.decode(buf);
              pos = 0;
            }
            buf[pos++] = semicolon;
          }
          if (line.length === 0)
            continue;
          state[0] = 0;
          for (let j = 0; j < line.length; j++) {
            const segment = line[j];
            if (pos > subLength) {
              out += td.decode(sub);
              buf.copyWithin(0, subLength, pos);
              pos -= subLength;
            }
            if (j > 0)
              buf[pos++] = comma;
            pos = encodeInteger(buf, pos, state, segment, 0);
            if (segment.length === 1)
              continue;
            pos = encodeInteger(buf, pos, state, segment, 1);
            pos = encodeInteger(buf, pos, state, segment, 2);
            pos = encodeInteger(buf, pos, state, segment, 3);
            if (segment.length === 4)
              continue;
            pos = encodeInteger(buf, pos, state, segment, 4);
          }
        }
        return out + td.decode(buf.subarray(0, pos));
      }
      function encodeInteger(buf, pos, state, segment, j) {
        const next = segment[j];
        let num = next - state[j];
        state[j] = next;
        num = num < 0 ? -num << 1 | 1 : num << 1;
        do {
          let clamped = num & 31;
          num >>>= 5;
          if (num > 0)
            clamped |= 32;
          buf[pos++] = intToChar[clamped];
        } while (num > 0);
        return pos;
      }
      exports3.decode = decode;
      exports3.encode = encode;
      Object.defineProperty(exports3, "__esModule", { value: true });
    });
  }
});

// ../../../node_modules/.pnpm/@jridgewell+resolve-uri@3.1.2/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js
var require_resolve_uri_umd = __commonJS({
  "../../../node_modules/.pnpm/@jridgewell+resolve-uri@3.1.2/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"(exports2, module2) {
    (function(global3, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global3 = typeof globalThis !== "undefined" ? globalThis : global3 || self, global3.resolveURI = factory());
    })(exports2, function() {
      "use strict";
      const schemeRegex = /^[\w+.-]+:\/\//;
      const urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/;
      const fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
      function isAbsoluteUrl(input) {
        return schemeRegex.test(input);
      }
      function isSchemeRelativeUrl(input) {
        return input.startsWith("//");
      }
      function isAbsolutePath(input) {
        return input.startsWith("/");
      }
      function isFileUrl(input) {
        return input.startsWith("file:");
      }
      function isRelative(input) {
        return /^[.?#]/.test(input);
      }
      function parseAbsoluteUrl(input) {
        const match = urlRegex.exec(input);
        return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
      }
      function parseFileUrl(input) {
        const match = fileRegex.exec(input);
        const path3 = match[2];
        return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path3) ? path3 : "/" + path3, match[3] || "", match[4] || "");
      }
      function makeUrl(scheme, user, host, port, path3, query, hash) {
        return {
          scheme,
          user,
          host,
          port,
          path: path3,
          query,
          hash,
          type: 7
        };
      }
      function parseUrl(input) {
        if (isSchemeRelativeUrl(input)) {
          const url3 = parseAbsoluteUrl("http:" + input);
          url3.scheme = "";
          url3.type = 6;
          return url3;
        }
        if (isAbsolutePath(input)) {
          const url3 = parseAbsoluteUrl("http://foo.com" + input);
          url3.scheme = "";
          url3.host = "";
          url3.type = 5;
          return url3;
        }
        if (isFileUrl(input))
          return parseFileUrl(input);
        if (isAbsoluteUrl(input))
          return parseAbsoluteUrl(input);
        const url2 = parseAbsoluteUrl("http://foo.com/" + input);
        url2.scheme = "";
        url2.host = "";
        url2.type = input ? input.startsWith("?") ? 3 : input.startsWith("#") ? 2 : 4 : 1;
        return url2;
      }
      function stripPathFilename(path3) {
        if (path3.endsWith("/.."))
          return path3;
        const index = path3.lastIndexOf("/");
        return path3.slice(0, index + 1);
      }
      function mergePaths(url2, base) {
        normalizePath(base, base.type);
        if (url2.path === "/") {
          url2.path = base.path;
        } else {
          url2.path = stripPathFilename(base.path) + url2.path;
        }
      }
      function normalizePath(url2, type) {
        const rel = type <= 4;
        const pieces = url2.path.split("/");
        let pointer = 1;
        let positive = 0;
        let addTrailingSlash = false;
        for (let i = 1; i < pieces.length; i++) {
          const piece = pieces[i];
          if (!piece) {
            addTrailingSlash = true;
            continue;
          }
          addTrailingSlash = false;
          if (piece === ".")
            continue;
          if (piece === "..") {
            if (positive) {
              addTrailingSlash = true;
              positive--;
              pointer--;
            } else if (rel) {
              pieces[pointer++] = piece;
            }
            continue;
          }
          pieces[pointer++] = piece;
          positive++;
        }
        let path3 = "";
        for (let i = 1; i < pointer; i++) {
          path3 += "/" + pieces[i];
        }
        if (!path3 || addTrailingSlash && !path3.endsWith("/..")) {
          path3 += "/";
        }
        url2.path = path3;
      }
      function resolve(input, base) {
        if (!input && !base)
          return "";
        const url2 = parseUrl(input);
        let inputType = url2.type;
        if (base && inputType !== 7) {
          const baseUrl = parseUrl(base);
          const baseType = baseUrl.type;
          switch (inputType) {
            case 1:
              url2.hash = baseUrl.hash;
            case 2:
              url2.query = baseUrl.query;
            case 3:
            case 4:
              mergePaths(url2, baseUrl);
            case 5:
              url2.user = baseUrl.user;
              url2.host = baseUrl.host;
              url2.port = baseUrl.port;
            case 6:
              url2.scheme = baseUrl.scheme;
          }
          if (baseType > inputType)
            inputType = baseType;
        }
        normalizePath(url2, inputType);
        const queryHash = url2.query + url2.hash;
        switch (inputType) {
          case 2:
          case 3:
            return queryHash;
          case 4: {
            const path3 = url2.path.slice(1);
            if (!path3)
              return queryHash || ".";
            if (isRelative(base || input) && !isRelative(path3)) {
              return "./" + path3 + queryHash;
            }
            return path3 + queryHash;
          }
          case 5:
            return url2.path + queryHash;
          default:
            return url2.scheme + "//" + url2.user + url2.host + url2.port + url2.path + queryHash;
        }
      }
      return resolve;
    });
  }
});

// ../../../node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js
var require_trace_mapping_umd = __commonJS({
  "../../../node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"(exports2, module2) {
    (function(global3, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2, require_sourcemap_codec_umd(), require_resolve_uri_umd()) : typeof define === "function" && define.amd ? define(["exports", "@jridgewell/sourcemap-codec", "@jridgewell/resolve-uri"], factory) : (global3 = typeof globalThis !== "undefined" ? globalThis : global3 || self, factory(global3.traceMapping = {}, global3.sourcemapCodec, global3.resolveURI));
    })(exports2, function(exports3, sourcemapCodec, resolveUri) {
      "use strict";
      function resolve(input, base) {
        if (base && !base.endsWith("/"))
          base += "/";
        return resolveUri(input, base);
      }
      function stripFilename(path3) {
        if (!path3)
          return "";
        const index = path3.lastIndexOf("/");
        return path3.slice(0, index + 1);
      }
      const COLUMN = 0;
      const SOURCES_INDEX = 1;
      const SOURCE_LINE = 2;
      const SOURCE_COLUMN = 3;
      const NAMES_INDEX = 4;
      const REV_GENERATED_LINE = 1;
      const REV_GENERATED_COLUMN = 2;
      function maybeSort(mappings, owned) {
        const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
        if (unsortedIndex === mappings.length)
          return mappings;
        if (!owned)
          mappings = mappings.slice();
        for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {
          mappings[i] = sortSegments(mappings[i], owned);
        }
        return mappings;
      }
      function nextUnsortedSegmentLine(mappings, start) {
        for (let i = start; i < mappings.length; i++) {
          if (!isSorted(mappings[i]))
            return i;
        }
        return mappings.length;
      }
      function isSorted(line) {
        for (let j = 1; j < line.length; j++) {
          if (line[j][COLUMN] < line[j - 1][COLUMN]) {
            return false;
          }
        }
        return true;
      }
      function sortSegments(line, owned) {
        if (!owned)
          line = line.slice();
        return line.sort(sortComparator);
      }
      function sortComparator(a, b) {
        return a[COLUMN] - b[COLUMN];
      }
      let found = false;
      function binarySearch(haystack, needle, low, high) {
        while (low <= high) {
          const mid = low + (high - low >> 1);
          const cmp = haystack[mid][COLUMN] - needle;
          if (cmp === 0) {
            found = true;
            return mid;
          }
          if (cmp < 0) {
            low = mid + 1;
          } else {
            high = mid - 1;
          }
        }
        found = false;
        return low - 1;
      }
      function upperBound(haystack, needle, index) {
        for (let i = index + 1; i < haystack.length; index = i++) {
          if (haystack[i][COLUMN] !== needle)
            break;
        }
        return index;
      }
      function lowerBound(haystack, needle, index) {
        for (let i = index - 1; i >= 0; index = i--) {
          if (haystack[i][COLUMN] !== needle)
            break;
        }
        return index;
      }
      function memoizedState() {
        return {
          lastKey: -1,
          lastNeedle: -1,
          lastIndex: -1
        };
      }
      function memoizedBinarySearch(haystack, needle, state, key) {
        const { lastKey, lastNeedle, lastIndex } = state;
        let low = 0;
        let high = haystack.length - 1;
        if (key === lastKey) {
          if (needle === lastNeedle) {
            found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;
            return lastIndex;
          }
          if (needle >= lastNeedle) {
            low = lastIndex === -1 ? 0 : lastIndex;
          } else {
            high = lastIndex;
          }
        }
        state.lastKey = key;
        state.lastNeedle = needle;
        return state.lastIndex = binarySearch(haystack, needle, low, high);
      }
      function buildBySources(decoded, memos) {
        const sources = memos.map(buildNullArray);
        for (let i = 0; i < decoded.length; i++) {
          const line = decoded[i];
          for (let j = 0; j < line.length; j++) {
            const seg = line[j];
            if (seg.length === 1)
              continue;
            const sourceIndex2 = seg[SOURCES_INDEX];
            const sourceLine = seg[SOURCE_LINE];
            const sourceColumn = seg[SOURCE_COLUMN];
            const originalSource = sources[sourceIndex2];
            const originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []);
            const memo = memos[sourceIndex2];
            let index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
            memo.lastIndex = ++index;
            insert(originalLine, index, [sourceColumn, i, seg[COLUMN]]);
          }
        }
        return sources;
      }
      function insert(array, index, value2) {
        for (let i = array.length; i > index; i--) {
          array[i] = array[i - 1];
        }
        array[index] = value2;
      }
      function buildNullArray() {
        return { __proto__: null };
      }
      const AnyMap = function(map, mapUrl) {
        const parsed = parse(map);
        if (!("sections" in parsed)) {
          return new TraceMap(parsed, mapUrl);
        }
        const mappings = [];
        const sources = [];
        const sourcesContent = [];
        const names = [];
        const ignoreList = [];
        recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, ignoreList, 0, 0, Infinity, Infinity);
        const joined = {
          version: 3,
          file: parsed.file,
          names,
          sources,
          sourcesContent,
          mappings,
          ignoreList
        };
        return presortedDecodedMap(joined);
      };
      function parse(map) {
        return typeof map === "string" ? JSON.parse(map) : map;
      }
      function recurse(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
        const { sections } = input;
        for (let i = 0; i < sections.length; i++) {
          const { map, offset } = sections[i];
          let sl = stopLine;
          let sc = stopColumn;
          if (i + 1 < sections.length) {
            const nextOffset = sections[i + 1].offset;
            sl = Math.min(stopLine, lineOffset + nextOffset.line);
            if (sl === stopLine) {
              sc = Math.min(stopColumn, columnOffset + nextOffset.column);
            } else if (sl < stopLine) {
              sc = columnOffset + nextOffset.column;
            }
          }
          addSection(map, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
        }
      }
      function addSection(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
        const parsed = parse(input);
        if ("sections" in parsed)
          return recurse(...arguments);
        const map = new TraceMap(parsed, mapUrl);
        const sourcesOffset = sources.length;
        const namesOffset = names.length;
        const decoded = decodedMappings(map);
        const { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;
        append(sources, resolvedSources);
        append(names, map.names);
        if (contents)
          append(sourcesContent, contents);
        else
          for (let i = 0; i < resolvedSources.length; i++)
            sourcesContent.push(null);
        if (ignores)
          for (let i = 0; i < ignores.length; i++)
            ignoreList.push(ignores[i] + sourcesOffset);
        for (let i = 0; i < decoded.length; i++) {
          const lineI = lineOffset + i;
          if (lineI > stopLine)
            return;
          const out = getLine(mappings, lineI);
          const cOffset = i === 0 ? columnOffset : 0;
          const line = decoded[i];
          for (let j = 0; j < line.length; j++) {
            const seg = line[j];
            const column = cOffset + seg[COLUMN];
            if (lineI === stopLine && column >= stopColumn)
              return;
            if (seg.length === 1) {
              out.push([column]);
              continue;
            }
            const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];
            const sourceLine = seg[SOURCE_LINE];
            const sourceColumn = seg[SOURCE_COLUMN];
            out.push(seg.length === 4 ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
          }
        }
      }
      function append(arr, other) {
        for (let i = 0; i < other.length; i++)
          arr.push(other[i]);
      }
      function getLine(arr, index) {
        for (let i = arr.length; i <= index; i++)
          arr[i] = [];
        return arr[index];
      }
      const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)";
      const COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)";
      const LEAST_UPPER_BOUND = -1;
      const GREATEST_LOWER_BOUND = 1;
      class TraceMap {
        constructor(map, mapUrl) {
          const isString = typeof map === "string";
          if (!isString && map._decodedMemo)
            return map;
          const parsed = isString ? JSON.parse(map) : map;
          const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;
          this.version = version;
          this.file = file;
          this.names = names || [];
          this.sourceRoot = sourceRoot;
          this.sources = sources;
          this.sourcesContent = sourcesContent;
          this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || void 0;
          const from = resolve(sourceRoot || "", stripFilename(mapUrl));
          this.resolvedSources = sources.map((s) => resolve(s || "", from));
          const { mappings } = parsed;
          if (typeof mappings === "string") {
            this._encoded = mappings;
            this._decoded = void 0;
          } else {
            this._encoded = void 0;
            this._decoded = maybeSort(mappings, isString);
          }
          this._decodedMemo = memoizedState();
          this._bySources = void 0;
          this._bySourceMemos = void 0;
        }
      }
      function cast(map) {
        return map;
      }
      function encodedMappings(map) {
        var _a;
        var _b;
        return (_a = (_b = cast(map))._encoded) !== null && _a !== void 0 ? _a : _b._encoded = sourcemapCodec.encode(cast(map)._decoded);
      }
      function decodedMappings(map) {
        var _a;
        return (_a = cast(map))._decoded || (_a._decoded = sourcemapCodec.decode(cast(map)._encoded));
      }
      function traceSegment(map, line, column) {
        const decoded = decodedMappings(map);
        if (line >= decoded.length)
          return null;
        const segments = decoded[line];
        const index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, GREATEST_LOWER_BOUND);
        return index === -1 ? null : segments[index];
      }
      function originalPositionFor(map, needle) {
        let { line, column, bias } = needle;
        line--;
        if (line < 0)
          throw new Error(LINE_GTR_ZERO);
        if (column < 0)
          throw new Error(COL_GTR_EQ_ZERO);
        const decoded = decodedMappings(map);
        if (line >= decoded.length)
          return OMapping(null, null, null, null);
        const segments = decoded[line];
        const index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
        if (index === -1)
          return OMapping(null, null, null, null);
        const segment = segments[index];
        if (segment.length === 1)
          return OMapping(null, null, null, null);
        const { names, resolvedSources } = map;
        return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);
      }
      function generatedPositionFor(map, needle) {
        const { source, line, column, bias } = needle;
        return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);
      }
      function allGeneratedPositionsFor(map, needle) {
        const { source, line, column, bias } = needle;
        return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);
      }
      function eachMapping(map, cb) {
        const decoded = decodedMappings(map);
        const { names, resolvedSources } = map;
        for (let i = 0; i < decoded.length; i++) {
          const line = decoded[i];
          for (let j = 0; j < line.length; j++) {
            const seg = line[j];
            const generatedLine = i + 1;
            const generatedColumn = seg[0];
            let source = null;
            let originalLine = null;
            let originalColumn = null;
            let name = null;
            if (seg.length !== 1) {
              source = resolvedSources[seg[1]];
              originalLine = seg[2] + 1;
              originalColumn = seg[3];
            }
            if (seg.length === 5)
              name = names[seg[4]];
            cb({
              generatedLine,
              generatedColumn,
              source,
              originalLine,
              originalColumn,
              name
            });
          }
        }
      }
      function sourceIndex(map, source) {
        const { sources, resolvedSources } = map;
        let index = sources.indexOf(source);
        if (index === -1)
          index = resolvedSources.indexOf(source);
        return index;
      }
      function sourceContentFor(map, source) {
        const { sourcesContent } = map;
        if (sourcesContent == null)
          return null;
        const index = sourceIndex(map, source);
        return index === -1 ? null : sourcesContent[index];
      }
      function isIgnored(map, source) {
        const { ignoreList } = map;
        if (ignoreList == null)
          return false;
        const index = sourceIndex(map, source);
        return index === -1 ? false : ignoreList.includes(index);
      }
      function presortedDecodedMap(map, mapUrl) {
        const tracer = new TraceMap(clone(map, []), mapUrl);
        cast(tracer)._decoded = map.mappings;
        return tracer;
      }
      function decodedMap(map) {
        return clone(map, decodedMappings(map));
      }
      function encodedMap(map) {
        return clone(map, encodedMappings(map));
      }
      function clone(map, mappings) {
        return {
          version: map.version,
          file: map.file,
          names: map.names,
          sourceRoot: map.sourceRoot,
          sources: map.sources,
          sourcesContent: map.sourcesContent,
          mappings,
          ignoreList: map.ignoreList || map.x_google_ignoreList
        };
      }
      function OMapping(source, line, column, name) {
        return { source, line, column, name };
      }
      function GMapping(line, column) {
        return { line, column };
      }
      function traceSegmentInternal(segments, memo, line, column, bias) {
        let index = memoizedBinarySearch(segments, column, memo, line);
        if (found) {
          index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);
        } else if (bias === LEAST_UPPER_BOUND)
          index++;
        if (index === -1 || index === segments.length)
          return -1;
        return index;
      }
      function sliceGeneratedPositions(segments, memo, line, column, bias) {
        let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
        if (!found && bias === LEAST_UPPER_BOUND)
          min++;
        if (min === -1 || min === segments.length)
          return [];
        const matchedColumn = found ? column : segments[min][COLUMN];
        if (!found)
          min = lowerBound(segments, matchedColumn, min);
        const max = upperBound(segments, matchedColumn, min);
        const result = [];
        for (; min <= max; min++) {
          const segment = segments[min];
          result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
        }
        return result;
      }
      function generatedPosition(map, source, line, column, bias, all) {
        var _a;
        line--;
        if (line < 0)
          throw new Error(LINE_GTR_ZERO);
        if (column < 0)
          throw new Error(COL_GTR_EQ_ZERO);
        const { sources, resolvedSources } = map;
        let sourceIndex2 = sources.indexOf(source);
        if (sourceIndex2 === -1)
          sourceIndex2 = resolvedSources.indexOf(source);
        if (sourceIndex2 === -1)
          return all ? [] : GMapping(null, null);
        const generated = (_a = cast(map))._bySources || (_a._bySources = buildBySources(decodedMappings(map), cast(map)._bySourceMemos = sources.map(memoizedState)));
        const segments = generated[sourceIndex2][line];
        if (segments == null)
          return all ? [] : GMapping(null, null);
        const memo = cast(map)._bySourceMemos[sourceIndex2];
        if (all)
          return sliceGeneratedPositions(segments, memo, line, column, bias);
        const index = traceSegmentInternal(segments, memo, line, column, bias);
        if (index === -1)
          return GMapping(null, null);
        const segment = segments[index];
        return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
      }
      exports3.AnyMap = AnyMap;
      exports3.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND;
      exports3.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND;
      exports3.TraceMap = TraceMap;
      exports3.allGeneratedPositionsFor = allGeneratedPositionsFor;
      exports3.decodedMap = decodedMap;
      exports3.decodedMappings = decodedMappings;
      exports3.eachMapping = eachMapping;
      exports3.encodedMap = encodedMap;
      exports3.encodedMappings = encodedMappings;
      exports3.generatedPositionFor = generatedPositionFor;
      exports3.isIgnored = isIgnored;
      exports3.originalPositionFor = originalPositionFor;
      exports3.presortedDecodedMap = presortedDecodedMap;
      exports3.sourceContentFor = sourceContentFor;
      exports3.traceSegment = traceSegment;
    });
  }
});

// ../../../node_modules/.pnpm/@jridgewell+gen-mapping@0.3.5/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js
var require_gen_mapping_umd = __commonJS({
  "../../../node_modules/.pnpm/@jridgewell+gen-mapping@0.3.5/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"(exports2, module2) {
    (function(global3, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2, require_set_array_umd(), require_sourcemap_codec_umd(), require_trace_mapping_umd()) : typeof define === "function" && define.amd ? define(["exports", "@jridgewell/set-array", "@jridgewell/sourcemap-codec", "@jridgewell/trace-mapping"], factory) : (global3 = typeof globalThis !== "undefined" ? globalThis : global3 || self, factory(global3.genMapping = {}, global3.setArray, global3.sourcemapCodec, global3.traceMapping));
    })(exports2, function(exports3, setArray, sourcemapCodec, traceMapping) {
      "use strict";
      const COLUMN = 0;
      const SOURCES_INDEX = 1;
      const SOURCE_LINE = 2;
      const SOURCE_COLUMN = 3;
      const NAMES_INDEX = 4;
      const NO_NAME = -1;
      class GenMapping {
        constructor({ file, sourceRoot } = {}) {
          this._names = new setArray.SetArray();
          this._sources = new setArray.SetArray();
          this._sourcesContent = [];
          this._mappings = [];
          this.file = file;
          this.sourceRoot = sourceRoot;
          this._ignoreList = new setArray.SetArray();
        }
      }
      function cast(map) {
        return map;
      }
      function addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
        return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
      }
      function addMapping(map, mapping) {
        return addMappingInternal(false, map, mapping);
      }
      const maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
        return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
      };
      const maybeAddMapping = (map, mapping) => {
        return addMappingInternal(true, map, mapping);
      };
      function setSourceContent(map, source, content) {
        const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);
        const index = setArray.put(sources, source);
        sourcesContent[index] = content;
      }
      function setIgnore(map, source, ignore = true) {
        const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map);
        const index = setArray.put(sources, source);
        if (index === sourcesContent.length)
          sourcesContent[index] = null;
        if (ignore)
          setArray.put(ignoreList, index);
        else
          setArray.remove(ignoreList, index);
      }
      function toDecodedMap(map) {
        const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList } = cast(map);
        removeEmptyFinalLines(mappings);
        return {
          version: 3,
          file: map.file || void 0,
          names: names.array,
          sourceRoot: map.sourceRoot || void 0,
          sources: sources.array,
          sourcesContent,
          mappings,
          ignoreList: ignoreList.array
        };
      }
      function toEncodedMap(map) {
        const decoded = toDecodedMap(map);
        return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
      }
      function fromMap(input) {
        const map = new traceMapping.TraceMap(input);
        const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
        putAll(cast(gen)._names, map.names);
        putAll(cast(gen)._sources, map.sources);
        cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);
        cast(gen)._mappings = traceMapping.decodedMappings(map);
        if (map.ignoreList)
          putAll(cast(gen)._ignoreList, map.ignoreList);
        return gen;
      }
      function allMappings(map) {
        const out = [];
        const { _mappings: mappings, _sources: sources, _names: names } = cast(map);
        for (let i = 0; i < mappings.length; i++) {
          const line = mappings[i];
          for (let j = 0; j < line.length; j++) {
            const seg = line[j];
            const generated = { line: i + 1, column: seg[COLUMN] };
            let source = void 0;
            let original = void 0;
            let name = void 0;
            if (seg.length !== 1) {
              source = sources.array[seg[SOURCES_INDEX]];
              original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };
              if (seg.length === 5)
                name = names.array[seg[NAMES_INDEX]];
            }
            out.push({ generated, source, original, name });
          }
        }
        return out;
      }
      function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
        const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = cast(map);
        const line = getLine(mappings, genLine);
        const index = getColumnIndex(line, genColumn);
        if (!source) {
          if (skipable && skipSourceless(line, index))
            return;
          return insert(line, index, [genColumn]);
        }
        const sourcesIndex = setArray.put(sources, source);
        const namesIndex = name ? setArray.put(names, name) : NO_NAME;
        if (sourcesIndex === sourcesContent.length)
          sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;
        if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {
          return;
        }
        return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
      }
      function getLine(mappings, index) {
        for (let i = mappings.length; i <= index; i++) {
          mappings[i] = [];
        }
        return mappings[index];
      }
      function getColumnIndex(line, genColumn) {
        let index = line.length;
        for (let i = index - 1; i >= 0; index = i--) {
          const current = line[i];
          if (genColumn >= current[COLUMN])
            break;
        }
        return index;
      }
      function insert(array, index, value2) {
        for (let i = array.length; i > index; i--) {
          array[i] = array[i - 1];
        }
        array[index] = value2;
      }
      function removeEmptyFinalLines(mappings) {
        const { length } = mappings;
        let len = length;
        for (let i = len - 1; i >= 0; len = i, i--) {
          if (mappings[i].length > 0)
            break;
        }
        if (len < length)
          mappings.length = len;
      }
      function putAll(setarr, array) {
        for (let i = 0; i < array.length; i++)
          setArray.put(setarr, array[i]);
      }
      function skipSourceless(line, index) {
        if (index === 0)
          return true;
        const prev = line[index - 1];
        return prev.length === 1;
      }
      function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
        if (index === 0)
          return false;
        const prev = line[index - 1];
        if (prev.length === 1)
          return false;
        return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);
      }
      function addMappingInternal(skipable, map, mapping) {
        const { generated, source, original, name, content } = mapping;
        if (!source) {
          return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
        }
        return addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content);
      }
      exports3.GenMapping = GenMapping;
      exports3.addMapping = addMapping;
      exports3.addSegment = addSegment;
      exports3.allMappings = allMappings;
      exports3.fromMap = fromMap;
      exports3.maybeAddMapping = maybeAddMapping;
      exports3.maybeAddSegment = maybeAddSegment;
      exports3.setIgnore = setIgnore;
      exports3.setSourceContent = setSourceContent;
      exports3.toDecodedMap = toDecodedMap;
      exports3.toEncodedMap = toEncodedMap;
      Object.defineProperty(exports3, "__esModule", { value: true });
    });
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/computeSourceMap.js
var require_computeSourceMap = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/computeSourceMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _genmapping = require_gen_mapping_umd();
    var _charcodes = require_charcodes();
    function computeSourceMap({ code: generatedCode, mappings: rawMappings }, filePath, options, source, tokens) {
      const sourceColumns = computeSourceColumns(source, tokens);
      const map = new (0, _genmapping.GenMapping)({ file: options.compiledFilename });
      let tokenIndex = 0;
      let currentMapping = rawMappings[0];
      while (currentMapping === void 0 && tokenIndex < rawMappings.length - 1) {
        tokenIndex++;
        currentMapping = rawMappings[tokenIndex];
      }
      let line = 0;
      let lineStart = 0;
      if (currentMapping !== lineStart) {
        _genmapping.maybeAddSegment.call(void 0, map, line, 0, filePath, line, 0);
      }
      for (let i = 0; i < generatedCode.length; i++) {
        if (i === currentMapping) {
          const genColumn = currentMapping - lineStart;
          const sourceColumn = sourceColumns[tokenIndex];
          _genmapping.maybeAddSegment.call(void 0, map, line, genColumn, filePath, line, sourceColumn);
          while ((currentMapping === i || currentMapping === void 0) && tokenIndex < rawMappings.length - 1) {
            tokenIndex++;
            currentMapping = rawMappings[tokenIndex];
          }
        }
        if (generatedCode.charCodeAt(i) === _charcodes.charCodes.lineFeed) {
          line++;
          lineStart = i + 1;
          if (currentMapping !== lineStart) {
            _genmapping.maybeAddSegment.call(void 0, map, line, 0, filePath, line, 0);
          }
        }
      }
      const { sourceRoot, sourcesContent, ...sourceMap } = _genmapping.toEncodedMap.call(void 0, map);
      return sourceMap;
    }
    exports2.default = computeSourceMap;
    function computeSourceColumns(code, tokens) {
      const sourceColumns = new Array(tokens.length);
      let tokenIndex = 0;
      let currentMapping = tokens[tokenIndex].start;
      let lineStart = 0;
      for (let i = 0; i < code.length; i++) {
        if (i === currentMapping) {
          sourceColumns[tokenIndex] = currentMapping - lineStart;
          tokenIndex++;
          currentMapping = tokens[tokenIndex].start;
        }
        if (code.charCodeAt(i) === _charcodes.charCodes.lineFeed) {
          lineStart = i + 1;
        }
      }
      return sourceColumns;
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/HelperManager.js
var require_HelperManager = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/HelperManager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var HELPERS = {
      require: `
    import {createRequire as CREATE_REQUIRE_NAME} from "module";
    const require = CREATE_REQUIRE_NAME(import.meta.url);
  `,
      interopRequireWildcard: `
    function interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
  `,
      interopRequireDefault: `
    function interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  `,
      createNamedExportFrom: `
    function createNamedExportFrom(obj, localName, importedName) {
      Object.defineProperty(exports, localName, {enumerable: true, configurable: true, get: () => obj[importedName]});
    }
  `,
      // Note that TypeScript and Babel do this differently; TypeScript does a simple existence
      // check in the exports object and does a plain assignment, whereas Babel uses
      // defineProperty and builds an object of explicitly-exported names so that star exports can
      // always take lower precedence. For now, we do the easier TypeScript thing.
      createStarExport: `
    function createStarExport(obj) {
      Object.keys(obj)
        .filter((key) => key !== "default" && key !== "__esModule")
        .forEach((key) => {
          if (exports.hasOwnProperty(key)) {
            return;
          }
          Object.defineProperty(exports, key, {enumerable: true, configurable: true, get: () => obj[key]});
        });
    }
  `,
      nullishCoalesce: `
    function nullishCoalesce(lhs, rhsFn) {
      if (lhs != null) {
        return lhs;
      } else {
        return rhsFn();
      }
    }
  `,
      asyncNullishCoalesce: `
    async function asyncNullishCoalesce(lhs, rhsFn) {
      if (lhs != null) {
        return lhs;
      } else {
        return await rhsFn();
      }
    }
  `,
      optionalChain: `
    function optionalChain(ops) {
      let lastAccessLHS = undefined;
      let value = ops[0];
      let i = 1;
      while (i < ops.length) {
        const op = ops[i];
        const fn = ops[i + 1];
        i += 2;
        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
          return undefined;
        }
        if (op === 'access' || op === 'optionalAccess') {
          lastAccessLHS = value;
          value = fn(value);
        } else if (op === 'call' || op === 'optionalCall') {
          value = fn((...args) => value.call(lastAccessLHS, ...args));
          lastAccessLHS = undefined;
        }
      }
      return value;
    }
  `,
      asyncOptionalChain: `
    async function asyncOptionalChain(ops) {
      let lastAccessLHS = undefined;
      let value = ops[0];
      let i = 1;
      while (i < ops.length) {
        const op = ops[i];
        const fn = ops[i + 1];
        i += 2;
        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
          return undefined;
        }
        if (op === 'access' || op === 'optionalAccess') {
          lastAccessLHS = value;
          value = await fn(value);
        } else if (op === 'call' || op === 'optionalCall') {
          value = await fn((...args) => value.call(lastAccessLHS, ...args));
          lastAccessLHS = undefined;
        }
      }
      return value;
    }
  `,
      optionalChainDelete: `
    function optionalChainDelete(ops) {
      const result = OPTIONAL_CHAIN_NAME(ops);
      return result == null ? true : result;
    }
  `,
      asyncOptionalChainDelete: `
    async function asyncOptionalChainDelete(ops) {
      const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);
      return result == null ? true : result;
    }
  `
    };
    var HelperManager = class _HelperManager {
      __init() {
        this.helperNames = {};
      }
      __init2() {
        this.createRequireName = null;
      }
      constructor(nameManager) {
        ;
        this.nameManager = nameManager;
        _HelperManager.prototype.__init.call(this);
        _HelperManager.prototype.__init2.call(this);
      }
      getHelperName(baseName) {
        let helperName = this.helperNames[baseName];
        if (helperName) {
          return helperName;
        }
        helperName = this.nameManager.claimFreeName(`_${baseName}`);
        this.helperNames[baseName] = helperName;
        return helperName;
      }
      emitHelpers() {
        let resultCode = "";
        if (this.helperNames.optionalChainDelete) {
          this.getHelperName("optionalChain");
        }
        if (this.helperNames.asyncOptionalChainDelete) {
          this.getHelperName("asyncOptionalChain");
        }
        for (const [baseName, helperCodeTemplate] of Object.entries(HELPERS)) {
          const helperName = this.helperNames[baseName];
          let helperCode = helperCodeTemplate;
          if (baseName === "optionalChainDelete") {
            helperCode = helperCode.replace("OPTIONAL_CHAIN_NAME", this.helperNames.optionalChain);
          } else if (baseName === "asyncOptionalChainDelete") {
            helperCode = helperCode.replace(
              "ASYNC_OPTIONAL_CHAIN_NAME",
              this.helperNames.asyncOptionalChain
            );
          } else if (baseName === "require") {
            if (this.createRequireName === null) {
              this.createRequireName = this.nameManager.claimFreeName("_createRequire");
            }
            helperCode = helperCode.replace(/CREATE_REQUIRE_NAME/g, this.createRequireName);
          }
          if (helperName) {
            resultCode += " ";
            resultCode += helperCode.replace(baseName, helperName).replace(/\s+/g, " ").trim();
          }
        }
        return resultCode;
      }
    };
    exports2.HelperManager = HelperManager;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/identifyShadowedGlobals.js
var require_identifyShadowedGlobals = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/identifyShadowedGlobals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _tokenizer = require_tokenizer();
    var _types = require_types();
    function identifyShadowedGlobals(tokens, scopes, globalNames) {
      if (!hasShadowedGlobals(tokens, globalNames)) {
        return;
      }
      markShadowedGlobals(tokens, scopes, globalNames);
    }
    exports2.default = identifyShadowedGlobals;
    function hasShadowedGlobals(tokens, globalNames) {
      for (const token of tokens.tokens) {
        if (token.type === _types.TokenType.name && !token.isType && _tokenizer.isNonTopLevelDeclaration.call(void 0, token) && globalNames.has(tokens.identifierNameForToken(token))) {
          return true;
        }
      }
      return false;
    }
    exports2.hasShadowedGlobals = hasShadowedGlobals;
    function markShadowedGlobals(tokens, scopes, globalNames) {
      const scopeStack = [];
      let scopeIndex = scopes.length - 1;
      for (let i = tokens.tokens.length - 1; ; i--) {
        while (scopeStack.length > 0 && scopeStack[scopeStack.length - 1].startTokenIndex === i + 1) {
          scopeStack.pop();
        }
        while (scopeIndex >= 0 && scopes[scopeIndex].endTokenIndex === i + 1) {
          scopeStack.push(scopes[scopeIndex]);
          scopeIndex--;
        }
        if (i < 0) {
          break;
        }
        const token = tokens.tokens[i];
        const name = tokens.identifierNameForToken(token);
        if (scopeStack.length > 1 && !token.isType && token.type === _types.TokenType.name && globalNames.has(name)) {
          if (_tokenizer.isBlockScopedDeclaration.call(void 0, token)) {
            markShadowedForScope(scopeStack[scopeStack.length - 1], tokens, name);
          } else if (_tokenizer.isFunctionScopedDeclaration.call(void 0, token)) {
            let stackIndex = scopeStack.length - 1;
            while (stackIndex > 0 && !scopeStack[stackIndex].isFunctionScope) {
              stackIndex--;
            }
            if (stackIndex < 0) {
              throw new Error("Did not find parent function scope.");
            }
            markShadowedForScope(scopeStack[stackIndex], tokens, name);
          }
        }
      }
      if (scopeStack.length > 0) {
        throw new Error("Expected empty scope stack after processing file.");
      }
    }
    function markShadowedForScope(scope, tokens, name) {
      for (let i = scope.startTokenIndex; i < scope.endTokenIndex; i++) {
        const token = tokens.tokens[i];
        if ((token.type === _types.TokenType.name || token.type === _types.TokenType.jsxName) && tokens.identifierNameForToken(token) === name) {
          token.shadowsGlobal = true;
        }
      }
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getIdentifierNames.js
var require_getIdentifierNames = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getIdentifierNames.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _types = require_types();
    function getIdentifierNames(code, tokens) {
      const names = [];
      for (const token of tokens) {
        if (token.type === _types.TokenType.name) {
          names.push(code.slice(token.start, token.end));
        }
      }
      return names;
    }
    exports2.default = getIdentifierNames;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/NameManager.js
var require_NameManager = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/NameManager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _getIdentifierNames = require_getIdentifierNames();
    var _getIdentifierNames2 = _interopRequireDefault(_getIdentifierNames);
    var NameManager = class _NameManager {
      __init() {
        this.usedNames = /* @__PURE__ */ new Set();
      }
      constructor(code, tokens) {
        ;
        _NameManager.prototype.__init.call(this);
        this.usedNames = new Set(_getIdentifierNames2.default.call(void 0, code, tokens));
      }
      claimFreeName(name) {
        const newName = this.findFreeName(name);
        this.usedNames.add(newName);
        return newName;
      }
      findFreeName(name) {
        if (!this.usedNames.has(name)) {
          return name;
        }
        let suffixNum = 2;
        while (this.usedNames.has(name + String(suffixNum))) {
          suffixNum++;
        }
        return name + String(suffixNum);
      }
    };
    exports2.default = NameManager;
  }
});

// ../../../node_modules/.pnpm/ts-interface-checker@0.1.13/node_modules/ts-interface-checker/dist/util.js
var require_util2 = __commonJS({
  "../../../node_modules/.pnpm/ts-interface-checker@0.1.13/node_modules/ts-interface-checker/dist/util.js"(exports2) {
    "use strict";
    var __extends = exports2 && exports2.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DetailContext = exports2.NoopContext = exports2.VError = void 0;
    var VError = (
      /** @class */
      function(_super) {
        __extends(VError2, _super);
        function VError2(path3, message) {
          var _this = _super.call(this, message) || this;
          _this.path = path3;
          Object.setPrototypeOf(_this, VError2.prototype);
          return _this;
        }
        return VError2;
      }(Error)
    );
    exports2.VError = VError;
    var NoopContext = (
      /** @class */
      function() {
        function NoopContext2() {
        }
        NoopContext2.prototype.fail = function(relPath, message, score) {
          return false;
        };
        NoopContext2.prototype.unionResolver = function() {
          return this;
        };
        NoopContext2.prototype.createContext = function() {
          return this;
        };
        NoopContext2.prototype.resolveUnion = function(ur) {
        };
        return NoopContext2;
      }()
    );
    exports2.NoopContext = NoopContext;
    var DetailContext = (
      /** @class */
      function() {
        function DetailContext2() {
          this._propNames = [""];
          this._messages = [null];
          this._score = 0;
        }
        DetailContext2.prototype.fail = function(relPath, message, score) {
          this._propNames.push(relPath);
          this._messages.push(message);
          this._score += score;
          return false;
        };
        DetailContext2.prototype.unionResolver = function() {
          return new DetailUnionResolver();
        };
        DetailContext2.prototype.resolveUnion = function(unionResolver) {
          var _a, _b;
          var u = unionResolver;
          var best = null;
          for (var _i = 0, _c = u.contexts; _i < _c.length; _i++) {
            var ctx = _c[_i];
            if (!best || ctx._score >= best._score) {
              best = ctx;
            }
          }
          if (best && best._score > 0) {
            (_a = this._propNames).push.apply(_a, best._propNames);
            (_b = this._messages).push.apply(_b, best._messages);
          }
        };
        DetailContext2.prototype.getError = function(path3) {
          var msgParts = [];
          for (var i = this._propNames.length - 1; i >= 0; i--) {
            var p = this._propNames[i];
            path3 += typeof p === "number" ? "[" + p + "]" : p ? "." + p : "";
            var m = this._messages[i];
            if (m) {
              msgParts.push(path3 + " " + m);
            }
          }
          return new VError(path3, msgParts.join("; "));
        };
        DetailContext2.prototype.getErrorDetail = function(path3) {
          var details = [];
          for (var i = this._propNames.length - 1; i >= 0; i--) {
            var p = this._propNames[i];
            path3 += typeof p === "number" ? "[" + p + "]" : p ? "." + p : "";
            var message = this._messages[i];
            if (message) {
              details.push({ path: path3, message });
            }
          }
          var detail = null;
          for (var i = details.length - 1; i >= 0; i--) {
            if (detail) {
              details[i].nested = [detail];
            }
            detail = details[i];
          }
          return detail;
        };
        return DetailContext2;
      }()
    );
    exports2.DetailContext = DetailContext;
    var DetailUnionResolver = (
      /** @class */
      function() {
        function DetailUnionResolver2() {
          this.contexts = [];
        }
        DetailUnionResolver2.prototype.createContext = function() {
          var ctx = new DetailContext();
          this.contexts.push(ctx);
          return ctx;
        };
        return DetailUnionResolver2;
      }()
    );
  }
});

// ../../../node_modules/.pnpm/ts-interface-checker@0.1.13/node_modules/ts-interface-checker/dist/types.js
var require_types2 = __commonJS({
  "../../../node_modules/.pnpm/ts-interface-checker@0.1.13/node_modules/ts-interface-checker/dist/types.js"(exports2) {
    "use strict";
    var __extends = exports2 && exports2.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.basicTypes = exports2.BasicType = exports2.TParamList = exports2.TParam = exports2.param = exports2.TFunc = exports2.func = exports2.TProp = exports2.TOptional = exports2.opt = exports2.TIface = exports2.iface = exports2.TEnumLiteral = exports2.enumlit = exports2.TEnumType = exports2.enumtype = exports2.TIntersection = exports2.intersection = exports2.TUnion = exports2.union = exports2.TTuple = exports2.tuple = exports2.TArray = exports2.array = exports2.TLiteral = exports2.lit = exports2.TName = exports2.name = exports2.TType = void 0;
    var util_1 = require_util2();
    var TType = (
      /** @class */
      /* @__PURE__ */ function() {
        function TType2() {
        }
        return TType2;
      }()
    );
    exports2.TType = TType;
    function parseSpec(typeSpec) {
      return typeof typeSpec === "string" ? name(typeSpec) : typeSpec;
    }
    function getNamedType(suite, name2) {
      var ttype = suite[name2];
      if (!ttype) {
        throw new Error("Unknown type " + name2);
      }
      return ttype;
    }
    function name(value2) {
      return new TName(value2);
    }
    exports2.name = name;
    var TName = (
      /** @class */
      function(_super) {
        __extends(TName2, _super);
        function TName2(name2) {
          var _this = _super.call(this) || this;
          _this.name = name2;
          _this._failMsg = "is not a " + name2;
          return _this;
        }
        TName2.prototype.getChecker = function(suite, strict, allowedProps) {
          var _this = this;
          var ttype = getNamedType(suite, this.name);
          var checker = ttype.getChecker(suite, strict, allowedProps);
          if (ttype instanceof BasicType || ttype instanceof TName2) {
            return checker;
          }
          return function(value2, ctx) {
            return checker(value2, ctx) ? true : ctx.fail(null, _this._failMsg, 0);
          };
        };
        return TName2;
      }(TType)
    );
    exports2.TName = TName;
    function lit(value2) {
      return new TLiteral(value2);
    }
    exports2.lit = lit;
    var TLiteral = (
      /** @class */
      function(_super) {
        __extends(TLiteral2, _super);
        function TLiteral2(value2) {
          var _this = _super.call(this) || this;
          _this.value = value2;
          _this.name = JSON.stringify(value2);
          _this._failMsg = "is not " + _this.name;
          return _this;
        }
        TLiteral2.prototype.getChecker = function(suite, strict) {
          var _this = this;
          return function(value2, ctx) {
            return value2 === _this.value ? true : ctx.fail(null, _this._failMsg, -1);
          };
        };
        return TLiteral2;
      }(TType)
    );
    exports2.TLiteral = TLiteral;
    function array(typeSpec) {
      return new TArray(parseSpec(typeSpec));
    }
    exports2.array = array;
    var TArray = (
      /** @class */
      function(_super) {
        __extends(TArray2, _super);
        function TArray2(ttype) {
          var _this = _super.call(this) || this;
          _this.ttype = ttype;
          return _this;
        }
        TArray2.prototype.getChecker = function(suite, strict) {
          var itemChecker = this.ttype.getChecker(suite, strict);
          return function(value2, ctx) {
            if (!Array.isArray(value2)) {
              return ctx.fail(null, "is not an array", 0);
            }
            for (var i = 0; i < value2.length; i++) {
              var ok = itemChecker(value2[i], ctx);
              if (!ok) {
                return ctx.fail(i, null, 1);
              }
            }
            return true;
          };
        };
        return TArray2;
      }(TType)
    );
    exports2.TArray = TArray;
    function tuple() {
      var typeSpec = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        typeSpec[_i2] = arguments[_i2];
      }
      return new TTuple(typeSpec.map(function(t) {
        return parseSpec(t);
      }));
    }
    exports2.tuple = tuple;
    var TTuple = (
      /** @class */
      function(_super) {
        __extends(TTuple2, _super);
        function TTuple2(ttypes) {
          var _this = _super.call(this) || this;
          _this.ttypes = ttypes;
          return _this;
        }
        TTuple2.prototype.getChecker = function(suite, strict) {
          var itemCheckers = this.ttypes.map(function(t) {
            return t.getChecker(suite, strict);
          });
          var checker = function(value2, ctx) {
            if (!Array.isArray(value2)) {
              return ctx.fail(null, "is not an array", 0);
            }
            for (var i = 0; i < itemCheckers.length; i++) {
              var ok = itemCheckers[i](value2[i], ctx);
              if (!ok) {
                return ctx.fail(i, null, 1);
              }
            }
            return true;
          };
          if (!strict) {
            return checker;
          }
          return function(value2, ctx) {
            if (!checker(value2, ctx)) {
              return false;
            }
            return value2.length <= itemCheckers.length ? true : ctx.fail(itemCheckers.length, "is extraneous", 2);
          };
        };
        return TTuple2;
      }(TType)
    );
    exports2.TTuple = TTuple;
    function union() {
      var typeSpec = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        typeSpec[_i2] = arguments[_i2];
      }
      return new TUnion(typeSpec.map(function(t) {
        return parseSpec(t);
      }));
    }
    exports2.union = union;
    var TUnion = (
      /** @class */
      function(_super) {
        __extends(TUnion2, _super);
        function TUnion2(ttypes) {
          var _this = _super.call(this) || this;
          _this.ttypes = ttypes;
          var names = ttypes.map(function(t) {
            return t instanceof TName || t instanceof TLiteral ? t.name : null;
          }).filter(function(n) {
            return n;
          });
          var otherTypes = ttypes.length - names.length;
          if (names.length) {
            if (otherTypes > 0) {
              names.push(otherTypes + " more");
            }
            _this._failMsg = "is none of " + names.join(", ");
          } else {
            _this._failMsg = "is none of " + otherTypes + " types";
          }
          return _this;
        }
        TUnion2.prototype.getChecker = function(suite, strict) {
          var _this = this;
          var itemCheckers = this.ttypes.map(function(t) {
            return t.getChecker(suite, strict);
          });
          return function(value2, ctx) {
            var ur = ctx.unionResolver();
            for (var i = 0; i < itemCheckers.length; i++) {
              var ok = itemCheckers[i](value2, ur.createContext());
              if (ok) {
                return true;
              }
            }
            ctx.resolveUnion(ur);
            return ctx.fail(null, _this._failMsg, 0);
          };
        };
        return TUnion2;
      }(TType)
    );
    exports2.TUnion = TUnion;
    function intersection() {
      var typeSpec = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        typeSpec[_i2] = arguments[_i2];
      }
      return new TIntersection(typeSpec.map(function(t) {
        return parseSpec(t);
      }));
    }
    exports2.intersection = intersection;
    var TIntersection = (
      /** @class */
      function(_super) {
        __extends(TIntersection2, _super);
        function TIntersection2(ttypes) {
          var _this = _super.call(this) || this;
          _this.ttypes = ttypes;
          return _this;
        }
        TIntersection2.prototype.getChecker = function(suite, strict) {
          var allowedProps = /* @__PURE__ */ new Set();
          var itemCheckers = this.ttypes.map(function(t) {
            return t.getChecker(suite, strict, allowedProps);
          });
          return function(value2, ctx) {
            var ok = itemCheckers.every(function(checker) {
              return checker(value2, ctx);
            });
            if (ok) {
              return true;
            }
            return ctx.fail(null, null, 0);
          };
        };
        return TIntersection2;
      }(TType)
    );
    exports2.TIntersection = TIntersection;
    function enumtype(values) {
      return new TEnumType(values);
    }
    exports2.enumtype = enumtype;
    var TEnumType = (
      /** @class */
      function(_super) {
        __extends(TEnumType2, _super);
        function TEnumType2(members) {
          var _this = _super.call(this) || this;
          _this.members = members;
          _this.validValues = /* @__PURE__ */ new Set();
          _this._failMsg = "is not a valid enum value";
          _this.validValues = new Set(Object.keys(members).map(function(name2) {
            return members[name2];
          }));
          return _this;
        }
        TEnumType2.prototype.getChecker = function(suite, strict) {
          var _this = this;
          return function(value2, ctx) {
            return _this.validValues.has(value2) ? true : ctx.fail(null, _this._failMsg, 0);
          };
        };
        return TEnumType2;
      }(TType)
    );
    exports2.TEnumType = TEnumType;
    function enumlit(name2, prop) {
      return new TEnumLiteral(name2, prop);
    }
    exports2.enumlit = enumlit;
    var TEnumLiteral = (
      /** @class */
      function(_super) {
        __extends(TEnumLiteral2, _super);
        function TEnumLiteral2(enumName, prop) {
          var _this = _super.call(this) || this;
          _this.enumName = enumName;
          _this.prop = prop;
          _this._failMsg = "is not " + enumName + "." + prop;
          return _this;
        }
        TEnumLiteral2.prototype.getChecker = function(suite, strict) {
          var _this = this;
          var ttype = getNamedType(suite, this.enumName);
          if (!(ttype instanceof TEnumType)) {
            throw new Error("Type " + this.enumName + " used in enumlit is not an enum type");
          }
          var val = ttype.members[this.prop];
          if (!ttype.members.hasOwnProperty(this.prop)) {
            throw new Error("Unknown value " + this.enumName + "." + this.prop + " used in enumlit");
          }
          return function(value2, ctx) {
            return value2 === val ? true : ctx.fail(null, _this._failMsg, -1);
          };
        };
        return TEnumLiteral2;
      }(TType)
    );
    exports2.TEnumLiteral = TEnumLiteral;
    function makeIfaceProps(props) {
      return Object.keys(props).map(function(name2) {
        return makeIfaceProp(name2, props[name2]);
      });
    }
    function makeIfaceProp(name2, prop) {
      return prop instanceof TOptional ? new TProp(name2, prop.ttype, true) : new TProp(name2, parseSpec(prop), false);
    }
    function iface(bases, props) {
      return new TIface(bases, makeIfaceProps(props));
    }
    exports2.iface = iface;
    var TIface = (
      /** @class */
      function(_super) {
        __extends(TIface2, _super);
        function TIface2(bases, props) {
          var _this = _super.call(this) || this;
          _this.bases = bases;
          _this.props = props;
          _this.propSet = new Set(props.map(function(p) {
            return p.name;
          }));
          return _this;
        }
        TIface2.prototype.getChecker = function(suite, strict, allowedProps) {
          var _this = this;
          var baseCheckers = this.bases.map(function(b) {
            return getNamedType(suite, b).getChecker(suite, strict);
          });
          var propCheckers = this.props.map(function(prop) {
            return prop.ttype.getChecker(suite, strict);
          });
          var testCtx = new util_1.NoopContext();
          var isPropRequired = this.props.map(function(prop, i) {
            return !prop.isOpt && !propCheckers[i](void 0, testCtx);
          });
          var checker = function(value2, ctx) {
            if (typeof value2 !== "object" || value2 === null) {
              return ctx.fail(null, "is not an object", 0);
            }
            for (var i = 0; i < baseCheckers.length; i++) {
              if (!baseCheckers[i](value2, ctx)) {
                return false;
              }
            }
            for (var i = 0; i < propCheckers.length; i++) {
              var name_1 = _this.props[i].name;
              var v = value2[name_1];
              if (v === void 0) {
                if (isPropRequired[i]) {
                  return ctx.fail(name_1, "is missing", 1);
                }
              } else {
                var ok = propCheckers[i](v, ctx);
                if (!ok) {
                  return ctx.fail(name_1, null, 1);
                }
              }
            }
            return true;
          };
          if (!strict) {
            return checker;
          }
          var propSet = this.propSet;
          if (allowedProps) {
            this.propSet.forEach(function(prop) {
              return allowedProps.add(prop);
            });
            propSet = allowedProps;
          }
          return function(value2, ctx) {
            if (!checker(value2, ctx)) {
              return false;
            }
            for (var prop in value2) {
              if (!propSet.has(prop)) {
                return ctx.fail(prop, "is extraneous", 2);
              }
            }
            return true;
          };
        };
        return TIface2;
      }(TType)
    );
    exports2.TIface = TIface;
    function opt(typeSpec) {
      return new TOptional(parseSpec(typeSpec));
    }
    exports2.opt = opt;
    var TOptional = (
      /** @class */
      function(_super) {
        __extends(TOptional2, _super);
        function TOptional2(ttype) {
          var _this = _super.call(this) || this;
          _this.ttype = ttype;
          return _this;
        }
        TOptional2.prototype.getChecker = function(suite, strict) {
          var itemChecker = this.ttype.getChecker(suite, strict);
          return function(value2, ctx) {
            return value2 === void 0 || itemChecker(value2, ctx);
          };
        };
        return TOptional2;
      }(TType)
    );
    exports2.TOptional = TOptional;
    var TProp = (
      /** @class */
      /* @__PURE__ */ function() {
        function TProp2(name2, ttype, isOpt) {
          this.name = name2;
          this.ttype = ttype;
          this.isOpt = isOpt;
        }
        return TProp2;
      }()
    );
    exports2.TProp = TProp;
    function func(resultSpec) {
      var params = [];
      for (var _i2 = 1; _i2 < arguments.length; _i2++) {
        params[_i2 - 1] = arguments[_i2];
      }
      return new TFunc(new TParamList(params), parseSpec(resultSpec));
    }
    exports2.func = func;
    var TFunc = (
      /** @class */
      function(_super) {
        __extends(TFunc2, _super);
        function TFunc2(paramList, result) {
          var _this = _super.call(this) || this;
          _this.paramList = paramList;
          _this.result = result;
          return _this;
        }
        TFunc2.prototype.getChecker = function(suite, strict) {
          return function(value2, ctx) {
            return typeof value2 === "function" ? true : ctx.fail(null, "is not a function", 0);
          };
        };
        return TFunc2;
      }(TType)
    );
    exports2.TFunc = TFunc;
    function param(name2, typeSpec, isOpt) {
      return new TParam(name2, parseSpec(typeSpec), Boolean(isOpt));
    }
    exports2.param = param;
    var TParam = (
      /** @class */
      /* @__PURE__ */ function() {
        function TParam2(name2, ttype, isOpt) {
          this.name = name2;
          this.ttype = ttype;
          this.isOpt = isOpt;
        }
        return TParam2;
      }()
    );
    exports2.TParam = TParam;
    var TParamList = (
      /** @class */
      function(_super) {
        __extends(TParamList2, _super);
        function TParamList2(params) {
          var _this = _super.call(this) || this;
          _this.params = params;
          return _this;
        }
        TParamList2.prototype.getChecker = function(suite, strict) {
          var _this = this;
          var itemCheckers = this.params.map(function(t) {
            return t.ttype.getChecker(suite, strict);
          });
          var testCtx = new util_1.NoopContext();
          var isParamRequired = this.params.map(function(param2, i) {
            return !param2.isOpt && !itemCheckers[i](void 0, testCtx);
          });
          var checker = function(value2, ctx) {
            if (!Array.isArray(value2)) {
              return ctx.fail(null, "is not an array", 0);
            }
            for (var i = 0; i < itemCheckers.length; i++) {
              var p = _this.params[i];
              if (value2[i] === void 0) {
                if (isParamRequired[i]) {
                  return ctx.fail(p.name, "is missing", 1);
                }
              } else {
                var ok = itemCheckers[i](value2[i], ctx);
                if (!ok) {
                  return ctx.fail(p.name, null, 1);
                }
              }
            }
            return true;
          };
          if (!strict) {
            return checker;
          }
          return function(value2, ctx) {
            if (!checker(value2, ctx)) {
              return false;
            }
            return value2.length <= itemCheckers.length ? true : ctx.fail(itemCheckers.length, "is extraneous", 2);
          };
        };
        return TParamList2;
      }(TType)
    );
    exports2.TParamList = TParamList;
    var BasicType = (
      /** @class */
      function(_super) {
        __extends(BasicType2, _super);
        function BasicType2(validator, message) {
          var _this = _super.call(this) || this;
          _this.validator = validator;
          _this.message = message;
          return _this;
        }
        BasicType2.prototype.getChecker = function(suite, strict) {
          var _this = this;
          return function(value2, ctx) {
            return _this.validator(value2) ? true : ctx.fail(null, _this.message, 0);
          };
        };
        return BasicType2;
      }(TType)
    );
    exports2.BasicType = BasicType;
    exports2.basicTypes = {
      any: new BasicType(function(v) {
        return true;
      }, "is invalid"),
      number: new BasicType(function(v) {
        return typeof v === "number";
      }, "is not a number"),
      object: new BasicType(function(v) {
        return typeof v === "object" && v;
      }, "is not an object"),
      boolean: new BasicType(function(v) {
        return typeof v === "boolean";
      }, "is not a boolean"),
      string: new BasicType(function(v) {
        return typeof v === "string";
      }, "is not a string"),
      symbol: new BasicType(function(v) {
        return typeof v === "symbol";
      }, "is not a symbol"),
      void: new BasicType(function(v) {
        return v == null;
      }, "is not void"),
      undefined: new BasicType(function(v) {
        return v === void 0;
      }, "is not undefined"),
      null: new BasicType(function(v) {
        return v === null;
      }, "is not null"),
      never: new BasicType(function(v) {
        return false;
      }, "is unexpected"),
      Date: new BasicType(getIsNativeChecker("[object Date]"), "is not a Date"),
      RegExp: new BasicType(getIsNativeChecker("[object RegExp]"), "is not a RegExp")
    };
    var nativeToString = Object.prototype.toString;
    function getIsNativeChecker(tag) {
      return function(v) {
        return typeof v === "object" && v && nativeToString.call(v) === tag;
      };
    }
    if (typeof Buffer !== "undefined") {
      exports2.basicTypes.Buffer = new BasicType(function(v) {
        return Buffer.isBuffer(v);
      }, "is not a Buffer");
    }
    var _loop_1 = function(array_12) {
      exports2.basicTypes[array_12.name] = new BasicType(function(v) {
        return v instanceof array_12;
      }, "is not a " + array_12.name);
    };
    for (_i = 0, _a = [
      Int8Array,
      Uint8Array,
      Uint8ClampedArray,
      Int16Array,
      Uint16Array,
      Int32Array,
      Uint32Array,
      Float32Array,
      Float64Array,
      ArrayBuffer
    ]; _i < _a.length; _i++) {
      array_1 = _a[_i];
      _loop_1(array_1);
    }
    var array_1;
    var _i;
    var _a;
  }
});

// ../../../node_modules/.pnpm/ts-interface-checker@0.1.13/node_modules/ts-interface-checker/dist/index.js
var require_dist = __commonJS({
  "../../../node_modules/.pnpm/ts-interface-checker@0.1.13/node_modules/ts-interface-checker/dist/index.js"(exports2) {
    "use strict";
    var __spreadArrays = exports2 && exports2.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Checker = exports2.createCheckers = void 0;
    var types_1 = require_types2();
    var util_1 = require_util2();
    var types_2 = require_types2();
    Object.defineProperty(exports2, "TArray", { enumerable: true, get: function() {
      return types_2.TArray;
    } });
    Object.defineProperty(exports2, "TEnumType", { enumerable: true, get: function() {
      return types_2.TEnumType;
    } });
    Object.defineProperty(exports2, "TEnumLiteral", { enumerable: true, get: function() {
      return types_2.TEnumLiteral;
    } });
    Object.defineProperty(exports2, "TFunc", { enumerable: true, get: function() {
      return types_2.TFunc;
    } });
    Object.defineProperty(exports2, "TIface", { enumerable: true, get: function() {
      return types_2.TIface;
    } });
    Object.defineProperty(exports2, "TLiteral", { enumerable: true, get: function() {
      return types_2.TLiteral;
    } });
    Object.defineProperty(exports2, "TName", { enumerable: true, get: function() {
      return types_2.TName;
    } });
    Object.defineProperty(exports2, "TOptional", { enumerable: true, get: function() {
      return types_2.TOptional;
    } });
    Object.defineProperty(exports2, "TParam", { enumerable: true, get: function() {
      return types_2.TParam;
    } });
    Object.defineProperty(exports2, "TParamList", { enumerable: true, get: function() {
      return types_2.TParamList;
    } });
    Object.defineProperty(exports2, "TProp", { enumerable: true, get: function() {
      return types_2.TProp;
    } });
    Object.defineProperty(exports2, "TTuple", { enumerable: true, get: function() {
      return types_2.TTuple;
    } });
    Object.defineProperty(exports2, "TType", { enumerable: true, get: function() {
      return types_2.TType;
    } });
    Object.defineProperty(exports2, "TUnion", { enumerable: true, get: function() {
      return types_2.TUnion;
    } });
    Object.defineProperty(exports2, "TIntersection", { enumerable: true, get: function() {
      return types_2.TIntersection;
    } });
    Object.defineProperty(exports2, "array", { enumerable: true, get: function() {
      return types_2.array;
    } });
    Object.defineProperty(exports2, "enumlit", { enumerable: true, get: function() {
      return types_2.enumlit;
    } });
    Object.defineProperty(exports2, "enumtype", { enumerable: true, get: function() {
      return types_2.enumtype;
    } });
    Object.defineProperty(exports2, "func", { enumerable: true, get: function() {
      return types_2.func;
    } });
    Object.defineProperty(exports2, "iface", { enumerable: true, get: function() {
      return types_2.iface;
    } });
    Object.defineProperty(exports2, "lit", { enumerable: true, get: function() {
      return types_2.lit;
    } });
    Object.defineProperty(exports2, "name", { enumerable: true, get: function() {
      return types_2.name;
    } });
    Object.defineProperty(exports2, "opt", { enumerable: true, get: function() {
      return types_2.opt;
    } });
    Object.defineProperty(exports2, "param", { enumerable: true, get: function() {
      return types_2.param;
    } });
    Object.defineProperty(exports2, "tuple", { enumerable: true, get: function() {
      return types_2.tuple;
    } });
    Object.defineProperty(exports2, "union", { enumerable: true, get: function() {
      return types_2.union;
    } });
    Object.defineProperty(exports2, "intersection", { enumerable: true, get: function() {
      return types_2.intersection;
    } });
    Object.defineProperty(exports2, "BasicType", { enumerable: true, get: function() {
      return types_2.BasicType;
    } });
    var util_2 = require_util2();
    Object.defineProperty(exports2, "VError", { enumerable: true, get: function() {
      return util_2.VError;
    } });
    function createCheckers() {
      var typeSuite = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        typeSuite[_i] = arguments[_i];
      }
      var fullSuite = Object.assign.apply(Object, __spreadArrays([{}, types_1.basicTypes], typeSuite));
      var checkers = {};
      for (var _a = 0, typeSuite_1 = typeSuite; _a < typeSuite_1.length; _a++) {
        var suite_1 = typeSuite_1[_a];
        for (var _b = 0, _c = Object.keys(suite_1); _b < _c.length; _b++) {
          var name = _c[_b];
          checkers[name] = new Checker(fullSuite, suite_1[name]);
        }
      }
      return checkers;
    }
    exports2.createCheckers = createCheckers;
    var Checker = (
      /** @class */
      function() {
        function Checker2(suite, ttype, _path) {
          if (_path === void 0) {
            _path = "value";
          }
          this.suite = suite;
          this.ttype = ttype;
          this._path = _path;
          this.props = /* @__PURE__ */ new Map();
          if (ttype instanceof types_1.TIface) {
            for (var _i = 0, _a = ttype.props; _i < _a.length; _i++) {
              var p = _a[_i];
              this.props.set(p.name, p.ttype);
            }
          }
          this.checkerPlain = this.ttype.getChecker(suite, false);
          this.checkerStrict = this.ttype.getChecker(suite, true);
        }
        Checker2.prototype.setReportedPath = function(path3) {
          this._path = path3;
        };
        Checker2.prototype.check = function(value2) {
          return this._doCheck(this.checkerPlain, value2);
        };
        Checker2.prototype.test = function(value2) {
          return this.checkerPlain(value2, new util_1.NoopContext());
        };
        Checker2.prototype.validate = function(value2) {
          return this._doValidate(this.checkerPlain, value2);
        };
        Checker2.prototype.strictCheck = function(value2) {
          return this._doCheck(this.checkerStrict, value2);
        };
        Checker2.prototype.strictTest = function(value2) {
          return this.checkerStrict(value2, new util_1.NoopContext());
        };
        Checker2.prototype.strictValidate = function(value2) {
          return this._doValidate(this.checkerStrict, value2);
        };
        Checker2.prototype.getProp = function(prop) {
          var ttype = this.props.get(prop);
          if (!ttype) {
            throw new Error("Type has no property " + prop);
          }
          return new Checker2(this.suite, ttype, this._path + "." + prop);
        };
        Checker2.prototype.methodArgs = function(methodName) {
          var tfunc = this._getMethod(methodName);
          return new Checker2(this.suite, tfunc.paramList);
        };
        Checker2.prototype.methodResult = function(methodName) {
          var tfunc = this._getMethod(methodName);
          return new Checker2(this.suite, tfunc.result);
        };
        Checker2.prototype.getArgs = function() {
          if (!(this.ttype instanceof types_1.TFunc)) {
            throw new Error("getArgs() applied to non-function");
          }
          return new Checker2(this.suite, this.ttype.paramList);
        };
        Checker2.prototype.getResult = function() {
          if (!(this.ttype instanceof types_1.TFunc)) {
            throw new Error("getResult() applied to non-function");
          }
          return new Checker2(this.suite, this.ttype.result);
        };
        Checker2.prototype.getType = function() {
          return this.ttype;
        };
        Checker2.prototype._doCheck = function(checkerFunc, value2) {
          var noopCtx = new util_1.NoopContext();
          if (!checkerFunc(value2, noopCtx)) {
            var detailCtx = new util_1.DetailContext();
            checkerFunc(value2, detailCtx);
            throw detailCtx.getError(this._path);
          }
        };
        Checker2.prototype._doValidate = function(checkerFunc, value2) {
          var noopCtx = new util_1.NoopContext();
          if (checkerFunc(value2, noopCtx)) {
            return null;
          }
          var detailCtx = new util_1.DetailContext();
          checkerFunc(value2, detailCtx);
          return detailCtx.getErrorDetail(this._path);
        };
        Checker2.prototype._getMethod = function(methodName) {
          var ttype = this.props.get(methodName);
          if (!ttype) {
            throw new Error("Type has no property " + methodName);
          }
          if (!(ttype instanceof types_1.TFunc)) {
            throw new Error("Property " + methodName + " is not a method");
          }
          return ttype;
        };
        return Checker2;
      }()
    );
    exports2.Checker = Checker;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/Options-gen-types.js
var require_Options_gen_types = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/Options-gen-types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
    var _tsinterfacechecker = require_dist();
    var t = _interopRequireWildcard(_tsinterfacechecker);
    var Transform = t.union(
      t.lit("jsx"),
      t.lit("typescript"),
      t.lit("flow"),
      t.lit("imports"),
      t.lit("react-hot-loader"),
      t.lit("jest")
    );
    exports2.Transform = Transform;
    var SourceMapOptions = t.iface([], {
      compiledFilename: "string"
    });
    exports2.SourceMapOptions = SourceMapOptions;
    var Options = t.iface([], {
      transforms: t.array("Transform"),
      disableESTransforms: t.opt("boolean"),
      jsxRuntime: t.opt(t.union(t.lit("classic"), t.lit("automatic"), t.lit("preserve"))),
      production: t.opt("boolean"),
      jsxImportSource: t.opt("string"),
      jsxPragma: t.opt("string"),
      jsxFragmentPragma: t.opt("string"),
      keepUnusedImports: t.opt("boolean"),
      preserveDynamicImport: t.opt("boolean"),
      injectCreateRequireForImportRequire: t.opt("boolean"),
      enableLegacyTypeScriptModuleInterop: t.opt("boolean"),
      enableLegacyBabel5ModuleInterop: t.opt("boolean"),
      sourceMapOptions: t.opt("SourceMapOptions"),
      filePath: t.opt("string")
    });
    exports2.Options = Options;
    var exportedTypeSuite = {
      Transform: exports2.Transform,
      SourceMapOptions: exports2.SourceMapOptions,
      Options: exports2.Options
    };
    exports2.default = exportedTypeSuite;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/Options.js
var require_Options = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/Options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _tsinterfacechecker = require_dist();
    var _Optionsgentypes = require_Options_gen_types();
    var _Optionsgentypes2 = _interopRequireDefault(_Optionsgentypes);
    var { Options: OptionsChecker } = _tsinterfacechecker.createCheckers.call(void 0, _Optionsgentypes2.default);
    function validateOptions(options) {
      OptionsChecker.strictCheck(options);
    }
    exports2.validateOptions = validateOptions;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/lval.js
var require_lval = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/lval.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _flow = require_flow();
    var _typescript = require_typescript();
    var _index = require_tokenizer();
    var _keywords = require_keywords();
    var _types = require_types();
    var _base = require_base();
    var _expression = require_expression();
    var _util = require_util();
    function parseSpread() {
      _index.next.call(void 0);
      _expression.parseMaybeAssign.call(void 0, false);
    }
    exports2.parseSpread = parseSpread;
    function parseRest(isBlockScope) {
      _index.next.call(void 0);
      parseBindingAtom(isBlockScope);
    }
    exports2.parseRest = parseRest;
    function parseBindingIdentifier(isBlockScope) {
      _expression.parseIdentifier.call(void 0);
      markPriorBindingIdentifier(isBlockScope);
    }
    exports2.parseBindingIdentifier = parseBindingIdentifier;
    function parseImportedIdentifier() {
      _expression.parseIdentifier.call(void 0);
      _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index.IdentifierRole.ImportDeclaration;
    }
    exports2.parseImportedIdentifier = parseImportedIdentifier;
    function markPriorBindingIdentifier(isBlockScope) {
      let identifierRole;
      if (_base.state.scopeDepth === 0) {
        identifierRole = _index.IdentifierRole.TopLevelDeclaration;
      } else if (isBlockScope) {
        identifierRole = _index.IdentifierRole.BlockScopedDeclaration;
      } else {
        identifierRole = _index.IdentifierRole.FunctionScopedDeclaration;
      }
      _base.state.tokens[_base.state.tokens.length - 1].identifierRole = identifierRole;
    }
    exports2.markPriorBindingIdentifier = markPriorBindingIdentifier;
    function parseBindingAtom(isBlockScope) {
      switch (_base.state.type) {
        case _types.TokenType._this: {
          const oldIsType = _index.pushTypeContext.call(void 0, 0);
          _index.next.call(void 0);
          _index.popTypeContext.call(void 0, oldIsType);
          return;
        }
        case _types.TokenType._yield:
        case _types.TokenType.name: {
          _base.state.type = _types.TokenType.name;
          parseBindingIdentifier(isBlockScope);
          return;
        }
        case _types.TokenType.bracketL: {
          _index.next.call(void 0);
          parseBindingList(
            _types.TokenType.bracketR,
            isBlockScope,
            true
            /* allowEmpty */
          );
          return;
        }
        case _types.TokenType.braceL:
          _expression.parseObj.call(void 0, true, isBlockScope);
          return;
        default:
          _util.unexpected.call(void 0);
      }
    }
    exports2.parseBindingAtom = parseBindingAtom;
    function parseBindingList(close, isBlockScope, allowEmpty = false, allowModifiers = false, contextId = 0) {
      let first = true;
      let hasRemovedComma = false;
      const firstItemTokenIndex = _base.state.tokens.length;
      while (!_index.eat.call(void 0, close) && !_base.state.error) {
        if (first) {
          first = false;
        } else {
          _util.expect.call(void 0, _types.TokenType.comma);
          _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
          if (!hasRemovedComma && _base.state.tokens[firstItemTokenIndex].isType) {
            _base.state.tokens[_base.state.tokens.length - 1].isType = true;
            hasRemovedComma = true;
          }
        }
        if (allowEmpty && _index.match.call(void 0, _types.TokenType.comma)) {
        } else if (_index.eat.call(void 0, close)) {
          break;
        } else if (_index.match.call(void 0, _types.TokenType.ellipsis)) {
          parseRest(isBlockScope);
          parseAssignableListItemTypes();
          _index.eat.call(void 0, _types.TokenType.comma);
          _util.expect.call(void 0, close);
          break;
        } else {
          parseAssignableListItem(allowModifiers, isBlockScope);
        }
      }
    }
    exports2.parseBindingList = parseBindingList;
    function parseAssignableListItem(allowModifiers, isBlockScope) {
      if (allowModifiers) {
        _typescript.tsParseModifiers.call(void 0, [
          _keywords.ContextualKeyword._public,
          _keywords.ContextualKeyword._protected,
          _keywords.ContextualKeyword._private,
          _keywords.ContextualKeyword._readonly,
          _keywords.ContextualKeyword._override
        ]);
      }
      parseMaybeDefault(isBlockScope);
      parseAssignableListItemTypes();
      parseMaybeDefault(
        isBlockScope,
        true
        /* leftAlreadyParsed */
      );
    }
    function parseAssignableListItemTypes() {
      if (_base.isFlowEnabled) {
        _flow.flowParseAssignableListItemTypes.call(void 0);
      } else if (_base.isTypeScriptEnabled) {
        _typescript.tsParseAssignableListItemTypes.call(void 0);
      }
    }
    function parseMaybeDefault(isBlockScope, leftAlreadyParsed = false) {
      if (!leftAlreadyParsed) {
        parseBindingAtom(isBlockScope);
      }
      if (!_index.eat.call(void 0, _types.TokenType.eq)) {
        return;
      }
      const eqIndex = _base.state.tokens.length - 1;
      _expression.parseMaybeAssign.call(void 0);
      _base.state.tokens[eqIndex].rhsEndIndex = _base.state.tokens.length;
    }
    exports2.parseMaybeDefault = parseMaybeDefault;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/plugins/typescript.js
var require_typescript = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/plugins/typescript.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _index = require_tokenizer();
    var _keywords = require_keywords();
    var _types = require_types();
    var _base = require_base();
    var _expression = require_expression();
    var _lval = require_lval();
    var _statement = require_statement();
    var _util = require_util();
    var _jsx = require_jsx();
    function tsIsIdentifier() {
      return _index.match.call(void 0, _types.TokenType.name);
    }
    function isLiteralPropertyName() {
      return _index.match.call(void 0, _types.TokenType.name) || Boolean(_base.state.type & _types.TokenType.IS_KEYWORD) || _index.match.call(void 0, _types.TokenType.string) || _index.match.call(void 0, _types.TokenType.num) || _index.match.call(void 0, _types.TokenType.bigint) || _index.match.call(void 0, _types.TokenType.decimal);
    }
    function tsNextTokenCanFollowModifier() {
      const snapshot = _base.state.snapshot();
      _index.next.call(void 0);
      const canFollowModifier = (_index.match.call(void 0, _types.TokenType.bracketL) || _index.match.call(void 0, _types.TokenType.braceL) || _index.match.call(void 0, _types.TokenType.star) || _index.match.call(void 0, _types.TokenType.ellipsis) || _index.match.call(void 0, _types.TokenType.hash) || isLiteralPropertyName()) && !_util.hasPrecedingLineBreak.call(void 0);
      if (canFollowModifier) {
        return true;
      } else {
        _base.state.restoreFromSnapshot(snapshot);
        return false;
      }
    }
    function tsParseModifiers(allowedModifiers) {
      while (true) {
        const modifier = tsParseModifier(allowedModifiers);
        if (modifier === null) {
          break;
        }
      }
    }
    exports2.tsParseModifiers = tsParseModifiers;
    function tsParseModifier(allowedModifiers) {
      if (!_index.match.call(void 0, _types.TokenType.name)) {
        return null;
      }
      const modifier = _base.state.contextualKeyword;
      if (allowedModifiers.indexOf(modifier) !== -1 && tsNextTokenCanFollowModifier()) {
        switch (modifier) {
          case _keywords.ContextualKeyword._readonly:
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._readonly;
            break;
          case _keywords.ContextualKeyword._abstract:
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._abstract;
            break;
          case _keywords.ContextualKeyword._static:
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._static;
            break;
          case _keywords.ContextualKeyword._public:
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._public;
            break;
          case _keywords.ContextualKeyword._private:
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._private;
            break;
          case _keywords.ContextualKeyword._protected:
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._protected;
            break;
          case _keywords.ContextualKeyword._override:
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._override;
            break;
          case _keywords.ContextualKeyword._declare:
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._declare;
            break;
          default:
            break;
        }
        return modifier;
      }
      return null;
    }
    exports2.tsParseModifier = tsParseModifier;
    function tsParseEntityName() {
      _expression.parseIdentifier.call(void 0);
      while (_index.eat.call(void 0, _types.TokenType.dot)) {
        _expression.parseIdentifier.call(void 0);
      }
    }
    function tsParseTypeReference() {
      tsParseEntityName();
      if (!_util.hasPrecedingLineBreak.call(void 0) && _index.match.call(void 0, _types.TokenType.lessThan)) {
        tsParseTypeArguments();
      }
    }
    function tsParseThisTypePredicate() {
      _index.next.call(void 0);
      tsParseTypeAnnotation();
    }
    function tsParseThisTypeNode() {
      _index.next.call(void 0);
    }
    function tsParseTypeQuery() {
      _util.expect.call(void 0, _types.TokenType._typeof);
      if (_index.match.call(void 0, _types.TokenType._import)) {
        tsParseImportType();
      } else {
        tsParseEntityName();
      }
      if (!_util.hasPrecedingLineBreak.call(void 0) && _index.match.call(void 0, _types.TokenType.lessThan)) {
        tsParseTypeArguments();
      }
    }
    function tsParseImportType() {
      _util.expect.call(void 0, _types.TokenType._import);
      _util.expect.call(void 0, _types.TokenType.parenL);
      _util.expect.call(void 0, _types.TokenType.string);
      _util.expect.call(void 0, _types.TokenType.parenR);
      if (_index.eat.call(void 0, _types.TokenType.dot)) {
        tsParseEntityName();
      }
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        tsParseTypeArguments();
      }
    }
    function tsParseTypeParameter() {
      _index.eat.call(void 0, _types.TokenType._const);
      const hadIn = _index.eat.call(void 0, _types.TokenType._in);
      const hadOut = _util.eatContextual.call(void 0, _keywords.ContextualKeyword._out);
      _index.eat.call(void 0, _types.TokenType._const);
      if ((hadIn || hadOut) && !_index.match.call(void 0, _types.TokenType.name)) {
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.name;
      } else {
        _expression.parseIdentifier.call(void 0);
      }
      if (_index.eat.call(void 0, _types.TokenType._extends)) {
        tsParseType();
      }
      if (_index.eat.call(void 0, _types.TokenType.eq)) {
        tsParseType();
      }
    }
    function tsTryParseTypeParameters() {
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        tsParseTypeParameters();
      }
    }
    exports2.tsTryParseTypeParameters = tsTryParseTypeParameters;
    function tsParseTypeParameters() {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.typeParameterStart)) {
        _index.next.call(void 0);
      } else {
        _util.unexpected.call(void 0);
      }
      while (!_index.eat.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {
        tsParseTypeParameter();
        _index.eat.call(void 0, _types.TokenType.comma);
      }
      _index.popTypeContext.call(void 0, oldIsType);
    }
    function tsFillSignature(returnToken) {
      const returnTokenRequired = returnToken === _types.TokenType.arrow;
      tsTryParseTypeParameters();
      _util.expect.call(void 0, _types.TokenType.parenL);
      _base.state.scopeDepth++;
      tsParseBindingListForSignature(
        false
        /* isBlockScope */
      );
      _base.state.scopeDepth--;
      if (returnTokenRequired) {
        tsParseTypeOrTypePredicateAnnotation(returnToken);
      } else if (_index.match.call(void 0, returnToken)) {
        tsParseTypeOrTypePredicateAnnotation(returnToken);
      }
    }
    function tsParseBindingListForSignature(isBlockScope) {
      _lval.parseBindingList.call(void 0, _types.TokenType.parenR, isBlockScope);
    }
    function tsParseTypeMemberSemicolon() {
      if (!_index.eat.call(void 0, _types.TokenType.comma)) {
        _util.semicolon.call(void 0);
      }
    }
    function tsParseSignatureMember() {
      tsFillSignature(_types.TokenType.colon);
      tsParseTypeMemberSemicolon();
    }
    function tsIsUnambiguouslyIndexSignature() {
      const snapshot = _base.state.snapshot();
      _index.next.call(void 0);
      const isIndexSignature = _index.eat.call(void 0, _types.TokenType.name) && _index.match.call(void 0, _types.TokenType.colon);
      _base.state.restoreFromSnapshot(snapshot);
      return isIndexSignature;
    }
    function tsTryParseIndexSignature() {
      if (!(_index.match.call(void 0, _types.TokenType.bracketL) && tsIsUnambiguouslyIndexSignature())) {
        return false;
      }
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      _util.expect.call(void 0, _types.TokenType.bracketL);
      _expression.parseIdentifier.call(void 0);
      tsParseTypeAnnotation();
      _util.expect.call(void 0, _types.TokenType.bracketR);
      tsTryParseTypeAnnotation();
      tsParseTypeMemberSemicolon();
      _index.popTypeContext.call(void 0, oldIsType);
      return true;
    }
    function tsParsePropertyOrMethodSignature(isReadonly) {
      _index.eat.call(void 0, _types.TokenType.question);
      if (!isReadonly && (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan))) {
        tsFillSignature(_types.TokenType.colon);
        tsParseTypeMemberSemicolon();
      } else {
        tsTryParseTypeAnnotation();
        tsParseTypeMemberSemicolon();
      }
    }
    function tsParseTypeMember() {
      if (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan)) {
        tsParseSignatureMember();
        return;
      }
      if (_index.match.call(void 0, _types.TokenType._new)) {
        _index.next.call(void 0);
        if (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan)) {
          tsParseSignatureMember();
        } else {
          tsParsePropertyOrMethodSignature(false);
        }
        return;
      }
      const readonly = !!tsParseModifier([_keywords.ContextualKeyword._readonly]);
      const found = tsTryParseIndexSignature();
      if (found) {
        return;
      }
      if ((_util.isContextual.call(void 0, _keywords.ContextualKeyword._get) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._set)) && tsNextTokenCanFollowModifier()) {
      }
      _expression.parsePropertyName.call(
        void 0,
        -1
        /* Types don't need context IDs. */
      );
      tsParsePropertyOrMethodSignature(readonly);
    }
    function tsParseTypeLiteral() {
      tsParseObjectTypeMembers();
    }
    function tsParseObjectTypeMembers() {
      _util.expect.call(void 0, _types.TokenType.braceL);
      while (!_index.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {
        tsParseTypeMember();
      }
    }
    function tsLookaheadIsStartOfMappedType() {
      const snapshot = _base.state.snapshot();
      const isStartOfMappedType = tsIsStartOfMappedType();
      _base.state.restoreFromSnapshot(snapshot);
      return isStartOfMappedType;
    }
    function tsIsStartOfMappedType() {
      _index.next.call(void 0);
      if (_index.eat.call(void 0, _types.TokenType.plus) || _index.eat.call(void 0, _types.TokenType.minus)) {
        return _util.isContextual.call(void 0, _keywords.ContextualKeyword._readonly);
      }
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._readonly)) {
        _index.next.call(void 0);
      }
      if (!_index.match.call(void 0, _types.TokenType.bracketL)) {
        return false;
      }
      _index.next.call(void 0);
      if (!tsIsIdentifier()) {
        return false;
      }
      _index.next.call(void 0);
      return _index.match.call(void 0, _types.TokenType._in);
    }
    function tsParseMappedTypeParameter() {
      _expression.parseIdentifier.call(void 0);
      _util.expect.call(void 0, _types.TokenType._in);
      tsParseType();
    }
    function tsParseMappedType() {
      _util.expect.call(void 0, _types.TokenType.braceL);
      if (_index.match.call(void 0, _types.TokenType.plus) || _index.match.call(void 0, _types.TokenType.minus)) {
        _index.next.call(void 0);
        _util.expectContextual.call(void 0, _keywords.ContextualKeyword._readonly);
      } else {
        _util.eatContextual.call(void 0, _keywords.ContextualKeyword._readonly);
      }
      _util.expect.call(void 0, _types.TokenType.bracketL);
      tsParseMappedTypeParameter();
      if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {
        tsParseType();
      }
      _util.expect.call(void 0, _types.TokenType.bracketR);
      if (_index.match.call(void 0, _types.TokenType.plus) || _index.match.call(void 0, _types.TokenType.minus)) {
        _index.next.call(void 0);
        _util.expect.call(void 0, _types.TokenType.question);
      } else {
        _index.eat.call(void 0, _types.TokenType.question);
      }
      tsTryParseType();
      _util.semicolon.call(void 0);
      _util.expect.call(void 0, _types.TokenType.braceR);
    }
    function tsParseTupleType() {
      _util.expect.call(void 0, _types.TokenType.bracketL);
      while (!_index.eat.call(void 0, _types.TokenType.bracketR) && !_base.state.error) {
        tsParseTupleElementType();
        _index.eat.call(void 0, _types.TokenType.comma);
      }
    }
    function tsParseTupleElementType() {
      if (_index.eat.call(void 0, _types.TokenType.ellipsis)) {
        tsParseType();
      } else {
        tsParseType();
        _index.eat.call(void 0, _types.TokenType.question);
      }
      if (_index.eat.call(void 0, _types.TokenType.colon)) {
        tsParseType();
      }
    }
    function tsParseParenthesizedType() {
      _util.expect.call(void 0, _types.TokenType.parenL);
      tsParseType();
      _util.expect.call(void 0, _types.TokenType.parenR);
    }
    function tsParseTemplateLiteralType() {
      _index.nextTemplateToken.call(void 0);
      _index.nextTemplateToken.call(void 0);
      while (!_index.match.call(void 0, _types.TokenType.backQuote) && !_base.state.error) {
        _util.expect.call(void 0, _types.TokenType.dollarBraceL);
        tsParseType();
        _index.nextTemplateToken.call(void 0);
        _index.nextTemplateToken.call(void 0);
      }
      _index.next.call(void 0);
    }
    var FunctionType;
    (function(FunctionType2) {
      const TSFunctionType = 0;
      FunctionType2[FunctionType2["TSFunctionType"] = TSFunctionType] = "TSFunctionType";
      const TSConstructorType = TSFunctionType + 1;
      FunctionType2[FunctionType2["TSConstructorType"] = TSConstructorType] = "TSConstructorType";
      const TSAbstractConstructorType = TSConstructorType + 1;
      FunctionType2[FunctionType2["TSAbstractConstructorType"] = TSAbstractConstructorType] = "TSAbstractConstructorType";
    })(FunctionType || (FunctionType = {}));
    function tsParseFunctionOrConstructorType(type) {
      if (type === FunctionType.TSAbstractConstructorType) {
        _util.expectContextual.call(void 0, _keywords.ContextualKeyword._abstract);
      }
      if (type === FunctionType.TSConstructorType || type === FunctionType.TSAbstractConstructorType) {
        _util.expect.call(void 0, _types.TokenType._new);
      }
      const oldInDisallowConditionalTypesContext = _base.state.inDisallowConditionalTypesContext;
      _base.state.inDisallowConditionalTypesContext = false;
      tsFillSignature(_types.TokenType.arrow);
      _base.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
    }
    function tsParseNonArrayType() {
      switch (_base.state.type) {
        case _types.TokenType.name:
          tsParseTypeReference();
          return;
        case _types.TokenType._void:
        case _types.TokenType._null:
          _index.next.call(void 0);
          return;
        case _types.TokenType.string:
        case _types.TokenType.num:
        case _types.TokenType.bigint:
        case _types.TokenType.decimal:
        case _types.TokenType._true:
        case _types.TokenType._false:
          _expression.parseLiteral.call(void 0);
          return;
        case _types.TokenType.minus:
          _index.next.call(void 0);
          _expression.parseLiteral.call(void 0);
          return;
        case _types.TokenType._this: {
          tsParseThisTypeNode();
          if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._is) && !_util.hasPrecedingLineBreak.call(void 0)) {
            tsParseThisTypePredicate();
          }
          return;
        }
        case _types.TokenType._typeof:
          tsParseTypeQuery();
          return;
        case _types.TokenType._import:
          tsParseImportType();
          return;
        case _types.TokenType.braceL:
          if (tsLookaheadIsStartOfMappedType()) {
            tsParseMappedType();
          } else {
            tsParseTypeLiteral();
          }
          return;
        case _types.TokenType.bracketL:
          tsParseTupleType();
          return;
        case _types.TokenType.parenL:
          tsParseParenthesizedType();
          return;
        case _types.TokenType.backQuote:
          tsParseTemplateLiteralType();
          return;
        default:
          if (_base.state.type & _types.TokenType.IS_KEYWORD) {
            _index.next.call(void 0);
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.name;
            return;
          }
          break;
      }
      _util.unexpected.call(void 0);
    }
    function tsParseArrayTypeOrHigher() {
      tsParseNonArrayType();
      while (!_util.hasPrecedingLineBreak.call(void 0) && _index.eat.call(void 0, _types.TokenType.bracketL)) {
        if (!_index.eat.call(void 0, _types.TokenType.bracketR)) {
          tsParseType();
          _util.expect.call(void 0, _types.TokenType.bracketR);
        }
      }
    }
    function tsParseInferType() {
      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._infer);
      _expression.parseIdentifier.call(void 0);
      if (_index.match.call(void 0, _types.TokenType._extends)) {
        const snapshot = _base.state.snapshot();
        _util.expect.call(void 0, _types.TokenType._extends);
        const oldInDisallowConditionalTypesContext = _base.state.inDisallowConditionalTypesContext;
        _base.state.inDisallowConditionalTypesContext = true;
        tsParseType();
        _base.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
        if (_base.state.error || !_base.state.inDisallowConditionalTypesContext && _index.match.call(void 0, _types.TokenType.question)) {
          _base.state.restoreFromSnapshot(snapshot);
        }
      }
    }
    function tsParseTypeOperatorOrHigher() {
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._keyof) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._unique) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._readonly)) {
        _index.next.call(void 0);
        tsParseTypeOperatorOrHigher();
      } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._infer)) {
        tsParseInferType();
      } else {
        const oldInDisallowConditionalTypesContext = _base.state.inDisallowConditionalTypesContext;
        _base.state.inDisallowConditionalTypesContext = false;
        tsParseArrayTypeOrHigher();
        _base.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
      }
    }
    function tsParseIntersectionTypeOrHigher() {
      _index.eat.call(void 0, _types.TokenType.bitwiseAND);
      tsParseTypeOperatorOrHigher();
      if (_index.match.call(void 0, _types.TokenType.bitwiseAND)) {
        while (_index.eat.call(void 0, _types.TokenType.bitwiseAND)) {
          tsParseTypeOperatorOrHigher();
        }
      }
    }
    function tsParseUnionTypeOrHigher() {
      _index.eat.call(void 0, _types.TokenType.bitwiseOR);
      tsParseIntersectionTypeOrHigher();
      if (_index.match.call(void 0, _types.TokenType.bitwiseOR)) {
        while (_index.eat.call(void 0, _types.TokenType.bitwiseOR)) {
          tsParseIntersectionTypeOrHigher();
        }
      }
    }
    function tsIsStartOfFunctionType() {
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        return true;
      }
      return _index.match.call(void 0, _types.TokenType.parenL) && tsLookaheadIsUnambiguouslyStartOfFunctionType();
    }
    function tsSkipParameterStart() {
      if (_index.match.call(void 0, _types.TokenType.name) || _index.match.call(void 0, _types.TokenType._this)) {
        _index.next.call(void 0);
        return true;
      }
      if (_index.match.call(void 0, _types.TokenType.braceL) || _index.match.call(void 0, _types.TokenType.bracketL)) {
        let depth = 1;
        _index.next.call(void 0);
        while (depth > 0 && !_base.state.error) {
          if (_index.match.call(void 0, _types.TokenType.braceL) || _index.match.call(void 0, _types.TokenType.bracketL)) {
            depth++;
          } else if (_index.match.call(void 0, _types.TokenType.braceR) || _index.match.call(void 0, _types.TokenType.bracketR)) {
            depth--;
          }
          _index.next.call(void 0);
        }
        return true;
      }
      return false;
    }
    function tsLookaheadIsUnambiguouslyStartOfFunctionType() {
      const snapshot = _base.state.snapshot();
      const isUnambiguouslyStartOfFunctionType = tsIsUnambiguouslyStartOfFunctionType();
      _base.state.restoreFromSnapshot(snapshot);
      return isUnambiguouslyStartOfFunctionType;
    }
    function tsIsUnambiguouslyStartOfFunctionType() {
      _index.next.call(void 0);
      if (_index.match.call(void 0, _types.TokenType.parenR) || _index.match.call(void 0, _types.TokenType.ellipsis)) {
        return true;
      }
      if (tsSkipParameterStart()) {
        if (_index.match.call(void 0, _types.TokenType.colon) || _index.match.call(void 0, _types.TokenType.comma) || _index.match.call(void 0, _types.TokenType.question) || _index.match.call(void 0, _types.TokenType.eq)) {
          return true;
        }
        if (_index.match.call(void 0, _types.TokenType.parenR)) {
          _index.next.call(void 0);
          if (_index.match.call(void 0, _types.TokenType.arrow)) {
            return true;
          }
        }
      }
      return false;
    }
    function tsParseTypeOrTypePredicateAnnotation(returnToken) {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      _util.expect.call(void 0, returnToken);
      const finishedReturn = tsParseTypePredicateOrAssertsPrefix();
      if (!finishedReturn) {
        tsParseType();
      }
      _index.popTypeContext.call(void 0, oldIsType);
    }
    function tsTryParseTypeOrTypePredicateAnnotation() {
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);
      }
    }
    function tsTryParseTypeAnnotation() {
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        tsParseTypeAnnotation();
      }
    }
    exports2.tsTryParseTypeAnnotation = tsTryParseTypeAnnotation;
    function tsTryParseType() {
      if (_index.eat.call(void 0, _types.TokenType.colon)) {
        tsParseType();
      }
    }
    function tsParseTypePredicateOrAssertsPrefix() {
      const snapshot = _base.state.snapshot();
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._asserts)) {
        _index.next.call(void 0);
        if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._is)) {
          tsParseType();
          return true;
        } else if (tsIsIdentifier() || _index.match.call(void 0, _types.TokenType._this)) {
          _index.next.call(void 0);
          if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._is)) {
            tsParseType();
          }
          return true;
        } else {
          _base.state.restoreFromSnapshot(snapshot);
          return false;
        }
      } else if (tsIsIdentifier() || _index.match.call(void 0, _types.TokenType._this)) {
        _index.next.call(void 0);
        if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._is) && !_util.hasPrecedingLineBreak.call(void 0)) {
          _index.next.call(void 0);
          tsParseType();
          return true;
        } else {
          _base.state.restoreFromSnapshot(snapshot);
          return false;
        }
      }
      return false;
    }
    function tsParseTypeAnnotation() {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      _util.expect.call(void 0, _types.TokenType.colon);
      tsParseType();
      _index.popTypeContext.call(void 0, oldIsType);
    }
    exports2.tsParseTypeAnnotation = tsParseTypeAnnotation;
    function tsParseType() {
      tsParseNonConditionalType();
      if (_base.state.inDisallowConditionalTypesContext || _util.hasPrecedingLineBreak.call(void 0) || !_index.eat.call(void 0, _types.TokenType._extends)) {
        return;
      }
      const oldInDisallowConditionalTypesContext = _base.state.inDisallowConditionalTypesContext;
      _base.state.inDisallowConditionalTypesContext = true;
      tsParseNonConditionalType();
      _base.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
      _util.expect.call(void 0, _types.TokenType.question);
      tsParseType();
      _util.expect.call(void 0, _types.TokenType.colon);
      tsParseType();
    }
    exports2.tsParseType = tsParseType;
    function isAbstractConstructorSignature() {
      return _util.isContextual.call(void 0, _keywords.ContextualKeyword._abstract) && _index.lookaheadType.call(void 0) === _types.TokenType._new;
    }
    function tsParseNonConditionalType() {
      if (tsIsStartOfFunctionType()) {
        tsParseFunctionOrConstructorType(FunctionType.TSFunctionType);
        return;
      }
      if (_index.match.call(void 0, _types.TokenType._new)) {
        tsParseFunctionOrConstructorType(FunctionType.TSConstructorType);
        return;
      } else if (isAbstractConstructorSignature()) {
        tsParseFunctionOrConstructorType(FunctionType.TSAbstractConstructorType);
        return;
      }
      tsParseUnionTypeOrHigher();
    }
    exports2.tsParseNonConditionalType = tsParseNonConditionalType;
    function tsParseTypeAssertion() {
      const oldIsType = _index.pushTypeContext.call(void 0, 1);
      tsParseType();
      _util.expect.call(void 0, _types.TokenType.greaterThan);
      _index.popTypeContext.call(void 0, oldIsType);
      _expression.parseMaybeUnary.call(void 0);
    }
    exports2.tsParseTypeAssertion = tsParseTypeAssertion;
    function tsTryParseJSXTypeArgument() {
      if (_index.eat.call(void 0, _types.TokenType.jsxTagStart)) {
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.typeParameterStart;
        const oldIsType = _index.pushTypeContext.call(void 0, 1);
        while (!_index.match.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {
          tsParseType();
          _index.eat.call(void 0, _types.TokenType.comma);
        }
        _jsx.nextJSXTagToken.call(void 0);
        _index.popTypeContext.call(void 0, oldIsType);
      }
    }
    exports2.tsTryParseJSXTypeArgument = tsTryParseJSXTypeArgument;
    function tsParseHeritageClause() {
      while (!_index.match.call(void 0, _types.TokenType.braceL) && !_base.state.error) {
        tsParseExpressionWithTypeArguments();
        _index.eat.call(void 0, _types.TokenType.comma);
      }
    }
    function tsParseExpressionWithTypeArguments() {
      tsParseEntityName();
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        tsParseTypeArguments();
      }
    }
    function tsParseInterfaceDeclaration() {
      _lval.parseBindingIdentifier.call(void 0, false);
      tsTryParseTypeParameters();
      if (_index.eat.call(void 0, _types.TokenType._extends)) {
        tsParseHeritageClause();
      }
      tsParseObjectTypeMembers();
    }
    function tsParseTypeAliasDeclaration() {
      _lval.parseBindingIdentifier.call(void 0, false);
      tsTryParseTypeParameters();
      _util.expect.call(void 0, _types.TokenType.eq);
      tsParseType();
      _util.semicolon.call(void 0);
    }
    function tsParseEnumMember() {
      if (_index.match.call(void 0, _types.TokenType.string)) {
        _expression.parseLiteral.call(void 0);
      } else {
        _expression.parseIdentifier.call(void 0);
      }
      if (_index.eat.call(void 0, _types.TokenType.eq)) {
        const eqIndex = _base.state.tokens.length - 1;
        _expression.parseMaybeAssign.call(void 0);
        _base.state.tokens[eqIndex].rhsEndIndex = _base.state.tokens.length;
      }
    }
    function tsParseEnumDeclaration() {
      _lval.parseBindingIdentifier.call(void 0, false);
      _util.expect.call(void 0, _types.TokenType.braceL);
      while (!_index.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {
        tsParseEnumMember();
        _index.eat.call(void 0, _types.TokenType.comma);
      }
    }
    function tsParseModuleBlock() {
      _util.expect.call(void 0, _types.TokenType.braceL);
      _statement.parseBlockBody.call(
        void 0,
        /* end */
        _types.TokenType.braceR
      );
    }
    function tsParseModuleOrNamespaceDeclaration() {
      _lval.parseBindingIdentifier.call(void 0, false);
      if (_index.eat.call(void 0, _types.TokenType.dot)) {
        tsParseModuleOrNamespaceDeclaration();
      } else {
        tsParseModuleBlock();
      }
    }
    function tsParseAmbientExternalModuleDeclaration() {
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._global)) {
        _expression.parseIdentifier.call(void 0);
      } else if (_index.match.call(void 0, _types.TokenType.string)) {
        _expression.parseExprAtom.call(void 0);
      } else {
        _util.unexpected.call(void 0);
      }
      if (_index.match.call(void 0, _types.TokenType.braceL)) {
        tsParseModuleBlock();
      } else {
        _util.semicolon.call(void 0);
      }
    }
    function tsParseImportEqualsDeclaration() {
      _lval.parseImportedIdentifier.call(void 0);
      _util.expect.call(void 0, _types.TokenType.eq);
      tsParseModuleReference();
      _util.semicolon.call(void 0);
    }
    exports2.tsParseImportEqualsDeclaration = tsParseImportEqualsDeclaration;
    function tsIsExternalModuleReference() {
      return _util.isContextual.call(void 0, _keywords.ContextualKeyword._require) && _index.lookaheadType.call(void 0) === _types.TokenType.parenL;
    }
    function tsParseModuleReference() {
      if (tsIsExternalModuleReference()) {
        tsParseExternalModuleReference();
      } else {
        tsParseEntityName();
      }
    }
    function tsParseExternalModuleReference() {
      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._require);
      _util.expect.call(void 0, _types.TokenType.parenL);
      if (!_index.match.call(void 0, _types.TokenType.string)) {
        _util.unexpected.call(void 0);
      }
      _expression.parseLiteral.call(void 0);
      _util.expect.call(void 0, _types.TokenType.parenR);
    }
    function tsTryParseDeclare() {
      if (_util.isLineTerminator.call(void 0)) {
        return false;
      }
      switch (_base.state.type) {
        case _types.TokenType._function: {
          const oldIsType = _index.pushTypeContext.call(void 0, 1);
          _index.next.call(void 0);
          const functionStart = _base.state.start;
          _statement.parseFunction.call(
            void 0,
            functionStart,
            /* isStatement */
            true
          );
          _index.popTypeContext.call(void 0, oldIsType);
          return true;
        }
        case _types.TokenType._class: {
          const oldIsType = _index.pushTypeContext.call(void 0, 1);
          _statement.parseClass.call(
            void 0,
            /* isStatement */
            true,
            /* optionalId */
            false
          );
          _index.popTypeContext.call(void 0, oldIsType);
          return true;
        }
        case _types.TokenType._const: {
          if (_index.match.call(void 0, _types.TokenType._const) && _util.isLookaheadContextual.call(void 0, _keywords.ContextualKeyword._enum)) {
            const oldIsType = _index.pushTypeContext.call(void 0, 1);
            _util.expect.call(void 0, _types.TokenType._const);
            _util.expectContextual.call(void 0, _keywords.ContextualKeyword._enum);
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;
            tsParseEnumDeclaration();
            _index.popTypeContext.call(void 0, oldIsType);
            return true;
          }
        }
        case _types.TokenType._var:
        case _types.TokenType._let: {
          const oldIsType = _index.pushTypeContext.call(void 0, 1);
          _statement.parseVarStatement.call(void 0, _base.state.type !== _types.TokenType._var);
          _index.popTypeContext.call(void 0, oldIsType);
          return true;
        }
        case _types.TokenType.name: {
          const oldIsType = _index.pushTypeContext.call(void 0, 1);
          const contextualKeyword = _base.state.contextualKeyword;
          let matched = false;
          if (contextualKeyword === _keywords.ContextualKeyword._global) {
            tsParseAmbientExternalModuleDeclaration();
            matched = true;
          } else {
            matched = tsParseDeclaration(
              contextualKeyword,
              /* isBeforeToken */
              true
            );
          }
          _index.popTypeContext.call(void 0, oldIsType);
          return matched;
        }
        default:
          return false;
      }
    }
    function tsTryParseExportDeclaration() {
      return tsParseDeclaration(
        _base.state.contextualKeyword,
        /* isBeforeToken */
        true
      );
    }
    function tsParseExpressionStatement(contextualKeyword) {
      switch (contextualKeyword) {
        case _keywords.ContextualKeyword._declare: {
          const declareTokenIndex = _base.state.tokens.length - 1;
          const matched = tsTryParseDeclare();
          if (matched) {
            _base.state.tokens[declareTokenIndex].type = _types.TokenType._declare;
            return true;
          }
          break;
        }
        case _keywords.ContextualKeyword._global:
          if (_index.match.call(void 0, _types.TokenType.braceL)) {
            tsParseModuleBlock();
            return true;
          }
          break;
        default:
          return tsParseDeclaration(
            contextualKeyword,
            /* isBeforeToken */
            false
          );
      }
      return false;
    }
    function tsParseDeclaration(contextualKeyword, isBeforeToken) {
      switch (contextualKeyword) {
        case _keywords.ContextualKeyword._abstract:
          if (tsCheckLineTerminator(isBeforeToken) && _index.match.call(void 0, _types.TokenType._class)) {
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._abstract;
            _statement.parseClass.call(
              void 0,
              /* isStatement */
              true,
              /* optionalId */
              false
            );
            return true;
          }
          break;
        case _keywords.ContextualKeyword._enum:
          if (tsCheckLineTerminator(isBeforeToken) && _index.match.call(void 0, _types.TokenType.name)) {
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;
            tsParseEnumDeclaration();
            return true;
          }
          break;
        case _keywords.ContextualKeyword._interface:
          if (tsCheckLineTerminator(isBeforeToken) && _index.match.call(void 0, _types.TokenType.name)) {
            const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);
            tsParseInterfaceDeclaration();
            _index.popTypeContext.call(void 0, oldIsType);
            return true;
          }
          break;
        case _keywords.ContextualKeyword._module:
          if (tsCheckLineTerminator(isBeforeToken)) {
            if (_index.match.call(void 0, _types.TokenType.string)) {
              const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);
              tsParseAmbientExternalModuleDeclaration();
              _index.popTypeContext.call(void 0, oldIsType);
              return true;
            } else if (_index.match.call(void 0, _types.TokenType.name)) {
              const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);
              tsParseModuleOrNamespaceDeclaration();
              _index.popTypeContext.call(void 0, oldIsType);
              return true;
            }
          }
          break;
        case _keywords.ContextualKeyword._namespace:
          if (tsCheckLineTerminator(isBeforeToken) && _index.match.call(void 0, _types.TokenType.name)) {
            const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);
            tsParseModuleOrNamespaceDeclaration();
            _index.popTypeContext.call(void 0, oldIsType);
            return true;
          }
          break;
        case _keywords.ContextualKeyword._type:
          if (tsCheckLineTerminator(isBeforeToken) && _index.match.call(void 0, _types.TokenType.name)) {
            const oldIsType = _index.pushTypeContext.call(void 0, isBeforeToken ? 2 : 1);
            tsParseTypeAliasDeclaration();
            _index.popTypeContext.call(void 0, oldIsType);
            return true;
          }
          break;
        default:
          break;
      }
      return false;
    }
    function tsCheckLineTerminator(isBeforeToken) {
      if (isBeforeToken) {
        _index.next.call(void 0);
        return true;
      } else {
        return !_util.isLineTerminator.call(void 0);
      }
    }
    function tsTryParseGenericAsyncArrowFunction() {
      const snapshot = _base.state.snapshot();
      tsParseTypeParameters();
      _statement.parseFunctionParams.call(void 0);
      tsTryParseTypeOrTypePredicateAnnotation();
      _util.expect.call(void 0, _types.TokenType.arrow);
      if (_base.state.error) {
        _base.state.restoreFromSnapshot(snapshot);
        return false;
      }
      _expression.parseFunctionBody.call(void 0, true);
      return true;
    }
    function tsParseTypeArgumentsWithPossibleBitshift() {
      if (_base.state.type === _types.TokenType.bitShiftL) {
        _base.state.pos -= 1;
        _index.finishToken.call(void 0, _types.TokenType.lessThan);
      }
      tsParseTypeArguments();
    }
    function tsParseTypeArguments() {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      _util.expect.call(void 0, _types.TokenType.lessThan);
      while (!_index.match.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {
        tsParseType();
        _index.eat.call(void 0, _types.TokenType.comma);
      }
      if (!oldIsType) {
        _index.popTypeContext.call(void 0, oldIsType);
        _index.rescan_gt.call(void 0);
        _util.expect.call(void 0, _types.TokenType.greaterThan);
        _base.state.tokens[_base.state.tokens.length - 1].isType = true;
      } else {
        _util.expect.call(void 0, _types.TokenType.greaterThan);
        _index.popTypeContext.call(void 0, oldIsType);
      }
    }
    function tsIsDeclarationStart() {
      if (_index.match.call(void 0, _types.TokenType.name)) {
        switch (_base.state.contextualKeyword) {
          case _keywords.ContextualKeyword._abstract:
          case _keywords.ContextualKeyword._declare:
          case _keywords.ContextualKeyword._enum:
          case _keywords.ContextualKeyword._interface:
          case _keywords.ContextualKeyword._module:
          case _keywords.ContextualKeyword._namespace:
          case _keywords.ContextualKeyword._type:
            return true;
          default:
            break;
        }
      }
      return false;
    }
    exports2.tsIsDeclarationStart = tsIsDeclarationStart;
    function tsParseFunctionBodyAndFinish(functionStart, funcContextId) {
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);
      }
      if (!_index.match.call(void 0, _types.TokenType.braceL) && _util.isLineTerminator.call(void 0)) {
        let i = _base.state.tokens.length - 1;
        while (i >= 0 && (_base.state.tokens[i].start >= functionStart || _base.state.tokens[i].type === _types.TokenType._default || _base.state.tokens[i].type === _types.TokenType._export)) {
          _base.state.tokens[i].isType = true;
          i--;
        }
        return;
      }
      _expression.parseFunctionBody.call(void 0, false, funcContextId);
    }
    exports2.tsParseFunctionBodyAndFinish = tsParseFunctionBodyAndFinish;
    function tsParseSubscript(startTokenIndex, noCalls, stopState) {
      if (!_util.hasPrecedingLineBreak.call(void 0) && _index.eat.call(void 0, _types.TokenType.bang)) {
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.nonNullAssertion;
        return;
      }
      if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.bitShiftL)) {
        const snapshot = _base.state.snapshot();
        if (!noCalls && _expression.atPossibleAsync.call(void 0)) {
          const asyncArrowFn = tsTryParseGenericAsyncArrowFunction();
          if (asyncArrowFn) {
            return;
          }
        }
        tsParseTypeArgumentsWithPossibleBitshift();
        if (!noCalls && _index.eat.call(void 0, _types.TokenType.parenL)) {
          _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
          _expression.parseCallExpressionArguments.call(void 0);
        } else if (_index.match.call(void 0, _types.TokenType.backQuote)) {
          _expression.parseTemplate.call(void 0);
        } else if (
          // The remaining possible case is an instantiation expression, e.g.
          // Array<number> . Check for a few cases that would disqualify it and
          // cause us to bail out.
          // a<b>>c is not (a<b>)>c, but a<(b>>c)
          _base.state.type === _types.TokenType.greaterThan || // a<b>c is (a<b)>c
          _base.state.type !== _types.TokenType.parenL && Boolean(_base.state.type & _types.TokenType.IS_EXPRESSION_START) && !_util.hasPrecedingLineBreak.call(void 0)
        ) {
          _util.unexpected.call(void 0);
        }
        if (_base.state.error) {
          _base.state.restoreFromSnapshot(snapshot);
        } else {
          return;
        }
      } else if (!noCalls && _index.match.call(void 0, _types.TokenType.questionDot) && _index.lookaheadType.call(void 0) === _types.TokenType.lessThan) {
        _index.next.call(void 0);
        _base.state.tokens[startTokenIndex].isOptionalChainStart = true;
        _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
        tsParseTypeArguments();
        _util.expect.call(void 0, _types.TokenType.parenL);
        _expression.parseCallExpressionArguments.call(void 0);
      }
      _expression.baseParseSubscript.call(void 0, startTokenIndex, noCalls, stopState);
    }
    exports2.tsParseSubscript = tsParseSubscript;
    function tsTryParseExport() {
      if (_index.eat.call(void 0, _types.TokenType._import)) {
        if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type) && _index.lookaheadType.call(void 0) !== _types.TokenType.eq) {
          _util.expectContextual.call(void 0, _keywords.ContextualKeyword._type);
        }
        tsParseImportEqualsDeclaration();
        return true;
      } else if (_index.eat.call(void 0, _types.TokenType.eq)) {
        _expression.parseExpression.call(void 0);
        _util.semicolon.call(void 0);
        return true;
      } else if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {
        _util.expectContextual.call(void 0, _keywords.ContextualKeyword._namespace);
        _expression.parseIdentifier.call(void 0);
        _util.semicolon.call(void 0);
        return true;
      } else {
        if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {
          const nextType = _index.lookaheadType.call(void 0);
          if (nextType === _types.TokenType.braceL || nextType === _types.TokenType.star) {
            _index.next.call(void 0);
          }
        }
        return false;
      }
    }
    exports2.tsTryParseExport = tsTryParseExport;
    function tsParseImportSpecifier() {
      _expression.parseIdentifier.call(void 0);
      if (_index.match.call(void 0, _types.TokenType.comma) || _index.match.call(void 0, _types.TokenType.braceR)) {
        _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index.IdentifierRole.ImportDeclaration;
        return;
      }
      _expression.parseIdentifier.call(void 0);
      if (_index.match.call(void 0, _types.TokenType.comma) || _index.match.call(void 0, _types.TokenType.braceR)) {
        _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index.IdentifierRole.ImportDeclaration;
        _base.state.tokens[_base.state.tokens.length - 2].isType = true;
        _base.state.tokens[_base.state.tokens.length - 1].isType = true;
        return;
      }
      _expression.parseIdentifier.call(void 0);
      if (_index.match.call(void 0, _types.TokenType.comma) || _index.match.call(void 0, _types.TokenType.braceR)) {
        _base.state.tokens[_base.state.tokens.length - 3].identifierRole = _index.IdentifierRole.ImportAccess;
        _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index.IdentifierRole.ImportDeclaration;
        return;
      }
      _expression.parseIdentifier.call(void 0);
      _base.state.tokens[_base.state.tokens.length - 3].identifierRole = _index.IdentifierRole.ImportAccess;
      _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index.IdentifierRole.ImportDeclaration;
      _base.state.tokens[_base.state.tokens.length - 4].isType = true;
      _base.state.tokens[_base.state.tokens.length - 3].isType = true;
      _base.state.tokens[_base.state.tokens.length - 2].isType = true;
      _base.state.tokens[_base.state.tokens.length - 1].isType = true;
    }
    exports2.tsParseImportSpecifier = tsParseImportSpecifier;
    function tsParseExportSpecifier() {
      _expression.parseIdentifier.call(void 0);
      if (_index.match.call(void 0, _types.TokenType.comma) || _index.match.call(void 0, _types.TokenType.braceR)) {
        _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index.IdentifierRole.ExportAccess;
        return;
      }
      _expression.parseIdentifier.call(void 0);
      if (_index.match.call(void 0, _types.TokenType.comma) || _index.match.call(void 0, _types.TokenType.braceR)) {
        _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index.IdentifierRole.ExportAccess;
        _base.state.tokens[_base.state.tokens.length - 2].isType = true;
        _base.state.tokens[_base.state.tokens.length - 1].isType = true;
        return;
      }
      _expression.parseIdentifier.call(void 0);
      if (_index.match.call(void 0, _types.TokenType.comma) || _index.match.call(void 0, _types.TokenType.braceR)) {
        _base.state.tokens[_base.state.tokens.length - 3].identifierRole = _index.IdentifierRole.ExportAccess;
        return;
      }
      _expression.parseIdentifier.call(void 0);
      _base.state.tokens[_base.state.tokens.length - 3].identifierRole = _index.IdentifierRole.ExportAccess;
      _base.state.tokens[_base.state.tokens.length - 4].isType = true;
      _base.state.tokens[_base.state.tokens.length - 3].isType = true;
      _base.state.tokens[_base.state.tokens.length - 2].isType = true;
      _base.state.tokens[_base.state.tokens.length - 1].isType = true;
    }
    exports2.tsParseExportSpecifier = tsParseExportSpecifier;
    function tsTryParseExportDefaultExpression() {
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._abstract) && _index.lookaheadType.call(void 0) === _types.TokenType._class) {
        _base.state.type = _types.TokenType._abstract;
        _index.next.call(void 0);
        _statement.parseClass.call(void 0, true, true);
        return true;
      }
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {
        const oldIsType = _index.pushTypeContext.call(void 0, 2);
        tsParseDeclaration(_keywords.ContextualKeyword._interface, true);
        _index.popTypeContext.call(void 0, oldIsType);
        return true;
      }
      return false;
    }
    exports2.tsTryParseExportDefaultExpression = tsTryParseExportDefaultExpression;
    function tsTryParseStatementContent() {
      if (_base.state.type === _types.TokenType._const) {
        const ahead = _index.lookaheadTypeAndKeyword.call(void 0);
        if (ahead.type === _types.TokenType.name && ahead.contextualKeyword === _keywords.ContextualKeyword._enum) {
          _util.expect.call(void 0, _types.TokenType._const);
          _util.expectContextual.call(void 0, _keywords.ContextualKeyword._enum);
          _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;
          tsParseEnumDeclaration();
          return true;
        }
      }
      return false;
    }
    exports2.tsTryParseStatementContent = tsTryParseStatementContent;
    function tsTryParseClassMemberWithIsStatic(isStatic) {
      const memberStartIndexAfterStatic = _base.state.tokens.length;
      tsParseModifiers([
        _keywords.ContextualKeyword._abstract,
        _keywords.ContextualKeyword._readonly,
        _keywords.ContextualKeyword._declare,
        _keywords.ContextualKeyword._static,
        _keywords.ContextualKeyword._override
      ]);
      const modifiersEndIndex = _base.state.tokens.length;
      const found = tsTryParseIndexSignature();
      if (found) {
        const memberStartIndex = isStatic ? memberStartIndexAfterStatic - 1 : memberStartIndexAfterStatic;
        for (let i = memberStartIndex; i < modifiersEndIndex; i++) {
          _base.state.tokens[i].isType = true;
        }
        return true;
      }
      return false;
    }
    exports2.tsTryParseClassMemberWithIsStatic = tsTryParseClassMemberWithIsStatic;
    function tsParseIdentifierStatement(contextualKeyword) {
      const matched = tsParseExpressionStatement(contextualKeyword);
      if (!matched) {
        _util.semicolon.call(void 0);
      }
    }
    exports2.tsParseIdentifierStatement = tsParseIdentifierStatement;
    function tsParseExportDeclaration() {
      const isDeclare = _util.eatContextual.call(void 0, _keywords.ContextualKeyword._declare);
      if (isDeclare) {
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._declare;
      }
      let matchedDeclaration = false;
      if (_index.match.call(void 0, _types.TokenType.name)) {
        if (isDeclare) {
          const oldIsType = _index.pushTypeContext.call(void 0, 2);
          matchedDeclaration = tsTryParseExportDeclaration();
          _index.popTypeContext.call(void 0, oldIsType);
        } else {
          matchedDeclaration = tsTryParseExportDeclaration();
        }
      }
      if (!matchedDeclaration) {
        if (isDeclare) {
          const oldIsType = _index.pushTypeContext.call(void 0, 2);
          _statement.parseStatement.call(void 0, true);
          _index.popTypeContext.call(void 0, oldIsType);
        } else {
          _statement.parseStatement.call(void 0, true);
        }
      }
    }
    exports2.tsParseExportDeclaration = tsParseExportDeclaration;
    function tsAfterParseClassSuper(hasSuper) {
      if (hasSuper && (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.bitShiftL))) {
        tsParseTypeArgumentsWithPossibleBitshift();
      }
      if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._implements)) {
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._implements;
        const oldIsType = _index.pushTypeContext.call(void 0, 1);
        tsParseHeritageClause();
        _index.popTypeContext.call(void 0, oldIsType);
      }
    }
    exports2.tsAfterParseClassSuper = tsAfterParseClassSuper;
    function tsStartParseObjPropValue() {
      tsTryParseTypeParameters();
    }
    exports2.tsStartParseObjPropValue = tsStartParseObjPropValue;
    function tsStartParseFunctionParams() {
      tsTryParseTypeParameters();
    }
    exports2.tsStartParseFunctionParams = tsStartParseFunctionParams;
    function tsAfterParseVarHead() {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      if (!_util.hasPrecedingLineBreak.call(void 0)) {
        _index.eat.call(void 0, _types.TokenType.bang);
      }
      tsTryParseTypeAnnotation();
      _index.popTypeContext.call(void 0, oldIsType);
    }
    exports2.tsAfterParseVarHead = tsAfterParseVarHead;
    function tsStartParseAsyncArrowFromCallExpression() {
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        tsParseTypeAnnotation();
      }
    }
    exports2.tsStartParseAsyncArrowFromCallExpression = tsStartParseAsyncArrowFromCallExpression;
    function tsParseMaybeAssign(noIn, isWithinParens) {
      if (_base.isJSXEnabled) {
        return tsParseMaybeAssignWithJSX(noIn, isWithinParens);
      } else {
        return tsParseMaybeAssignWithoutJSX(noIn, isWithinParens);
      }
    }
    exports2.tsParseMaybeAssign = tsParseMaybeAssign;
    function tsParseMaybeAssignWithJSX(noIn, isWithinParens) {
      if (!_index.match.call(void 0, _types.TokenType.lessThan)) {
        return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);
      }
      const snapshot = _base.state.snapshot();
      let wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);
      if (_base.state.error) {
        _base.state.restoreFromSnapshot(snapshot);
      } else {
        return wasArrow;
      }
      _base.state.type = _types.TokenType.typeParameterStart;
      tsParseTypeParameters();
      wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);
      if (!wasArrow) {
        _util.unexpected.call(void 0);
      }
      return wasArrow;
    }
    exports2.tsParseMaybeAssignWithJSX = tsParseMaybeAssignWithJSX;
    function tsParseMaybeAssignWithoutJSX(noIn, isWithinParens) {
      if (!_index.match.call(void 0, _types.TokenType.lessThan)) {
        return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);
      }
      const snapshot = _base.state.snapshot();
      tsParseTypeParameters();
      const wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);
      if (!wasArrow) {
        _util.unexpected.call(void 0);
      }
      if (_base.state.error) {
        _base.state.restoreFromSnapshot(snapshot);
      } else {
        return wasArrow;
      }
      return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);
    }
    exports2.tsParseMaybeAssignWithoutJSX = tsParseMaybeAssignWithoutJSX;
    function tsParseArrow() {
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        const snapshot = _base.state.snapshot();
        tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);
        if (_util.canInsertSemicolon.call(void 0)) _util.unexpected.call(void 0);
        if (!_index.match.call(void 0, _types.TokenType.arrow)) _util.unexpected.call(void 0);
        if (_base.state.error) {
          _base.state.restoreFromSnapshot(snapshot);
        }
      }
      return _index.eat.call(void 0, _types.TokenType.arrow);
    }
    exports2.tsParseArrow = tsParseArrow;
    function tsParseAssignableListItemTypes() {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      _index.eat.call(void 0, _types.TokenType.question);
      tsTryParseTypeAnnotation();
      _index.popTypeContext.call(void 0, oldIsType);
    }
    exports2.tsParseAssignableListItemTypes = tsParseAssignableListItemTypes;
    function tsParseMaybeDecoratorArguments() {
      if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.bitShiftL)) {
        tsParseTypeArgumentsWithPossibleBitshift();
      }
      _statement.baseParseMaybeDecoratorArguments.call(void 0);
    }
    exports2.tsParseMaybeDecoratorArguments = tsParseMaybeDecoratorArguments;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/plugins/jsx/index.js
var require_jsx = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/plugins/jsx/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _index = require_tokenizer();
    var _types = require_types();
    var _base = require_base();
    var _expression = require_expression();
    var _util = require_util();
    var _charcodes = require_charcodes();
    var _identifier = require_identifier();
    var _typescript = require_typescript();
    function jsxReadToken() {
      let sawNewline = false;
      let sawNonWhitespace = false;
      while (true) {
        if (_base.state.pos >= _base.input.length) {
          _util.unexpected.call(void 0, "Unterminated JSX contents");
          return;
        }
        const ch = _base.input.charCodeAt(_base.state.pos);
        if (ch === _charcodes.charCodes.lessThan || ch === _charcodes.charCodes.leftCurlyBrace) {
          if (_base.state.pos === _base.state.start) {
            if (ch === _charcodes.charCodes.lessThan) {
              _base.state.pos++;
              _index.finishToken.call(void 0, _types.TokenType.jsxTagStart);
              return;
            }
            _index.getTokenFromCode.call(void 0, ch);
            return;
          }
          if (sawNewline && !sawNonWhitespace) {
            _index.finishToken.call(void 0, _types.TokenType.jsxEmptyText);
          } else {
            _index.finishToken.call(void 0, _types.TokenType.jsxText);
          }
          return;
        }
        if (ch === _charcodes.charCodes.lineFeed) {
          sawNewline = true;
        } else if (ch !== _charcodes.charCodes.space && ch !== _charcodes.charCodes.carriageReturn && ch !== _charcodes.charCodes.tab) {
          sawNonWhitespace = true;
        }
        _base.state.pos++;
      }
    }
    function jsxReadString(quote) {
      _base.state.pos++;
      for (; ; ) {
        if (_base.state.pos >= _base.input.length) {
          _util.unexpected.call(void 0, "Unterminated string constant");
          return;
        }
        const ch = _base.input.charCodeAt(_base.state.pos);
        if (ch === quote) {
          _base.state.pos++;
          break;
        }
        _base.state.pos++;
      }
      _index.finishToken.call(void 0, _types.TokenType.string);
    }
    function jsxReadWord() {
      let ch;
      do {
        if (_base.state.pos > _base.input.length) {
          _util.unexpected.call(void 0, "Unexpectedly reached the end of input.");
          return;
        }
        ch = _base.input.charCodeAt(++_base.state.pos);
      } while (_identifier.IS_IDENTIFIER_CHAR[ch] || ch === _charcodes.charCodes.dash);
      _index.finishToken.call(void 0, _types.TokenType.jsxName);
    }
    function jsxParseIdentifier() {
      nextJSXTagToken();
    }
    function jsxParseNamespacedName(identifierRole) {
      jsxParseIdentifier();
      if (!_index.eat.call(void 0, _types.TokenType.colon)) {
        _base.state.tokens[_base.state.tokens.length - 1].identifierRole = identifierRole;
        return;
      }
      jsxParseIdentifier();
    }
    function jsxParseElementName() {
      const firstTokenIndex = _base.state.tokens.length;
      jsxParseNamespacedName(_index.IdentifierRole.Access);
      let hadDot = false;
      while (_index.match.call(void 0, _types.TokenType.dot)) {
        hadDot = true;
        nextJSXTagToken();
        jsxParseIdentifier();
      }
      if (!hadDot) {
        const firstToken = _base.state.tokens[firstTokenIndex];
        const firstChar = _base.input.charCodeAt(firstToken.start);
        if (firstChar >= _charcodes.charCodes.lowercaseA && firstChar <= _charcodes.charCodes.lowercaseZ) {
          firstToken.identifierRole = null;
        }
      }
    }
    function jsxParseAttributeValue() {
      switch (_base.state.type) {
        case _types.TokenType.braceL:
          _index.next.call(void 0);
          _expression.parseExpression.call(void 0);
          nextJSXTagToken();
          return;
        case _types.TokenType.jsxTagStart:
          jsxParseElement();
          nextJSXTagToken();
          return;
        case _types.TokenType.string:
          nextJSXTagToken();
          return;
        default:
          _util.unexpected.call(void 0, "JSX value should be either an expression or a quoted JSX text");
      }
    }
    function jsxParseSpreadChild() {
      _util.expect.call(void 0, _types.TokenType.ellipsis);
      _expression.parseExpression.call(void 0);
    }
    function jsxParseOpeningElement(initialTokenIndex) {
      if (_index.match.call(void 0, _types.TokenType.jsxTagEnd)) {
        return false;
      }
      jsxParseElementName();
      if (_base.isTypeScriptEnabled) {
        _typescript.tsTryParseJSXTypeArgument.call(void 0);
      }
      let hasSeenPropSpread = false;
      while (!_index.match.call(void 0, _types.TokenType.slash) && !_index.match.call(void 0, _types.TokenType.jsxTagEnd) && !_base.state.error) {
        if (_index.eat.call(void 0, _types.TokenType.braceL)) {
          hasSeenPropSpread = true;
          _util.expect.call(void 0, _types.TokenType.ellipsis);
          _expression.parseMaybeAssign.call(void 0);
          nextJSXTagToken();
          continue;
        }
        if (hasSeenPropSpread && _base.state.end - _base.state.start === 3 && _base.input.charCodeAt(_base.state.start) === _charcodes.charCodes.lowercaseK && _base.input.charCodeAt(_base.state.start + 1) === _charcodes.charCodes.lowercaseE && _base.input.charCodeAt(_base.state.start + 2) === _charcodes.charCodes.lowercaseY) {
          _base.state.tokens[initialTokenIndex].jsxRole = _index.JSXRole.KeyAfterPropSpread;
        }
        jsxParseNamespacedName(_index.IdentifierRole.ObjectKey);
        if (_index.match.call(void 0, _types.TokenType.eq)) {
          nextJSXTagToken();
          jsxParseAttributeValue();
        }
      }
      const isSelfClosing = _index.match.call(void 0, _types.TokenType.slash);
      if (isSelfClosing) {
        nextJSXTagToken();
      }
      return isSelfClosing;
    }
    function jsxParseClosingElement() {
      if (_index.match.call(void 0, _types.TokenType.jsxTagEnd)) {
        return;
      }
      jsxParseElementName();
    }
    function jsxParseElementAt() {
      const initialTokenIndex = _base.state.tokens.length - 1;
      _base.state.tokens[initialTokenIndex].jsxRole = _index.JSXRole.NoChildren;
      let numExplicitChildren = 0;
      const isSelfClosing = jsxParseOpeningElement(initialTokenIndex);
      if (!isSelfClosing) {
        nextJSXExprToken();
        while (true) {
          switch (_base.state.type) {
            case _types.TokenType.jsxTagStart:
              nextJSXTagToken();
              if (_index.match.call(void 0, _types.TokenType.slash)) {
                nextJSXTagToken();
                jsxParseClosingElement();
                if (_base.state.tokens[initialTokenIndex].jsxRole !== _index.JSXRole.KeyAfterPropSpread) {
                  if (numExplicitChildren === 1) {
                    _base.state.tokens[initialTokenIndex].jsxRole = _index.JSXRole.OneChild;
                  } else if (numExplicitChildren > 1) {
                    _base.state.tokens[initialTokenIndex].jsxRole = _index.JSXRole.StaticChildren;
                  }
                }
                return;
              }
              numExplicitChildren++;
              jsxParseElementAt();
              nextJSXExprToken();
              break;
            case _types.TokenType.jsxText:
              numExplicitChildren++;
              nextJSXExprToken();
              break;
            case _types.TokenType.jsxEmptyText:
              nextJSXExprToken();
              break;
            case _types.TokenType.braceL:
              _index.next.call(void 0);
              if (_index.match.call(void 0, _types.TokenType.ellipsis)) {
                jsxParseSpreadChild();
                nextJSXExprToken();
                numExplicitChildren += 2;
              } else {
                if (!_index.match.call(void 0, _types.TokenType.braceR)) {
                  numExplicitChildren++;
                  _expression.parseExpression.call(void 0);
                }
                nextJSXExprToken();
              }
              break;
            default:
              _util.unexpected.call(void 0);
              return;
          }
        }
      }
    }
    function jsxParseElement() {
      nextJSXTagToken();
      jsxParseElementAt();
    }
    exports2.jsxParseElement = jsxParseElement;
    function nextJSXTagToken() {
      _base.state.tokens.push(new (0, _index.Token)());
      _index.skipSpace.call(void 0);
      _base.state.start = _base.state.pos;
      const code = _base.input.charCodeAt(_base.state.pos);
      if (_identifier.IS_IDENTIFIER_START[code]) {
        jsxReadWord();
      } else if (code === _charcodes.charCodes.quotationMark || code === _charcodes.charCodes.apostrophe) {
        jsxReadString(code);
      } else {
        ++_base.state.pos;
        switch (code) {
          case _charcodes.charCodes.greaterThan:
            _index.finishToken.call(void 0, _types.TokenType.jsxTagEnd);
            break;
          case _charcodes.charCodes.lessThan:
            _index.finishToken.call(void 0, _types.TokenType.jsxTagStart);
            break;
          case _charcodes.charCodes.slash:
            _index.finishToken.call(void 0, _types.TokenType.slash);
            break;
          case _charcodes.charCodes.equalsTo:
            _index.finishToken.call(void 0, _types.TokenType.eq);
            break;
          case _charcodes.charCodes.leftCurlyBrace:
            _index.finishToken.call(void 0, _types.TokenType.braceL);
            break;
          case _charcodes.charCodes.dot:
            _index.finishToken.call(void 0, _types.TokenType.dot);
            break;
          case _charcodes.charCodes.colon:
            _index.finishToken.call(void 0, _types.TokenType.colon);
            break;
          default:
            _util.unexpected.call(void 0);
        }
      }
    }
    exports2.nextJSXTagToken = nextJSXTagToken;
    function nextJSXExprToken() {
      _base.state.tokens.push(new (0, _index.Token)());
      _base.state.start = _base.state.pos;
      jsxReadToken();
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/plugins/types.js
var require_types3 = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/plugins/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _index = require_tokenizer();
    var _types = require_types();
    var _base = require_base();
    var _expression = require_expression();
    var _flow = require_flow();
    var _typescript = require_typescript();
    function typedParseConditional(noIn) {
      if (_index.match.call(void 0, _types.TokenType.question)) {
        const nextType = _index.lookaheadType.call(void 0);
        if (nextType === _types.TokenType.colon || nextType === _types.TokenType.comma || nextType === _types.TokenType.parenR) {
          return;
        }
      }
      _expression.baseParseConditional.call(void 0, noIn);
    }
    exports2.typedParseConditional = typedParseConditional;
    function typedParseParenItem() {
      _index.eatTypeToken.call(void 0, _types.TokenType.question);
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        if (_base.isTypeScriptEnabled) {
          _typescript.tsParseTypeAnnotation.call(void 0);
        } else if (_base.isFlowEnabled) {
          _flow.flowParseTypeAnnotation.call(void 0);
        }
      }
    }
    exports2.typedParseParenItem = typedParseParenItem;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/expression.js
var require_expression = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/expression.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _flow = require_flow();
    var _index = require_jsx();
    var _types = require_types3();
    var _typescript = require_typescript();
    var _index3 = require_tokenizer();
    var _keywords = require_keywords();
    var _state = require_state();
    var _types3 = require_types();
    var _charcodes = require_charcodes();
    var _identifier = require_identifier();
    var _base = require_base();
    var _lval = require_lval();
    var _statement = require_statement();
    var _util = require_util();
    var StopState = class {
      constructor(stop) {
        this.stop = stop;
      }
    };
    exports2.StopState = StopState;
    function parseExpression2(noIn = false) {
      parseMaybeAssign(noIn);
      if (_index3.match.call(void 0, _types3.TokenType.comma)) {
        while (_index3.eat.call(void 0, _types3.TokenType.comma)) {
          parseMaybeAssign(noIn);
        }
      }
    }
    exports2.parseExpression = parseExpression2;
    function parseMaybeAssign(noIn = false, isWithinParens = false) {
      if (_base.isTypeScriptEnabled) {
        return _typescript.tsParseMaybeAssign.call(void 0, noIn, isWithinParens);
      } else if (_base.isFlowEnabled) {
        return _flow.flowParseMaybeAssign.call(void 0, noIn, isWithinParens);
      } else {
        return baseParseMaybeAssign(noIn, isWithinParens);
      }
    }
    exports2.parseMaybeAssign = parseMaybeAssign;
    function baseParseMaybeAssign(noIn, isWithinParens) {
      if (_index3.match.call(void 0, _types3.TokenType._yield)) {
        parseYield();
        return false;
      }
      if (_index3.match.call(void 0, _types3.TokenType.parenL) || _index3.match.call(void 0, _types3.TokenType.name) || _index3.match.call(void 0, _types3.TokenType._yield)) {
        _base.state.potentialArrowAt = _base.state.start;
      }
      const wasArrow = parseMaybeConditional(noIn);
      if (isWithinParens) {
        parseParenItem();
      }
      if (_base.state.type & _types3.TokenType.IS_ASSIGN) {
        _index3.next.call(void 0);
        parseMaybeAssign(noIn);
        return false;
      }
      return wasArrow;
    }
    exports2.baseParseMaybeAssign = baseParseMaybeAssign;
    function parseMaybeConditional(noIn) {
      const wasArrow = parseExprOps(noIn);
      if (wasArrow) {
        return true;
      }
      parseConditional(noIn);
      return false;
    }
    function parseConditional(noIn) {
      if (_base.isTypeScriptEnabled || _base.isFlowEnabled) {
        _types.typedParseConditional.call(void 0, noIn);
      } else {
        baseParseConditional(noIn);
      }
    }
    function baseParseConditional(noIn) {
      if (_index3.eat.call(void 0, _types3.TokenType.question)) {
        parseMaybeAssign();
        _util.expect.call(void 0, _types3.TokenType.colon);
        parseMaybeAssign(noIn);
      }
    }
    exports2.baseParseConditional = baseParseConditional;
    function parseExprOps(noIn) {
      const startTokenIndex = _base.state.tokens.length;
      const wasArrow = parseMaybeUnary();
      if (wasArrow) {
        return true;
      }
      parseExprOp(startTokenIndex, -1, noIn);
      return false;
    }
    function parseExprOp(startTokenIndex, minPrec, noIn) {
      if (_base.isTypeScriptEnabled && (_types3.TokenType._in & _types3.TokenType.PRECEDENCE_MASK) > minPrec && !_util.hasPrecedingLineBreak.call(void 0) && (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as) || _util.eatContextual.call(void 0, _keywords.ContextualKeyword._satisfies))) {
        const oldIsType = _index3.pushTypeContext.call(void 0, 1);
        _typescript.tsParseType.call(void 0);
        _index3.popTypeContext.call(void 0, oldIsType);
        _index3.rescan_gt.call(void 0);
        parseExprOp(startTokenIndex, minPrec, noIn);
        return;
      }
      const prec = _base.state.type & _types3.TokenType.PRECEDENCE_MASK;
      if (prec > 0 && (!noIn || !_index3.match.call(void 0, _types3.TokenType._in))) {
        if (prec > minPrec) {
          const op = _base.state.type;
          _index3.next.call(void 0);
          if (op === _types3.TokenType.nullishCoalescing) {
            _base.state.tokens[_base.state.tokens.length - 1].nullishStartIndex = startTokenIndex;
          }
          const rhsStartTokenIndex = _base.state.tokens.length;
          parseMaybeUnary();
          parseExprOp(rhsStartTokenIndex, op & _types3.TokenType.IS_RIGHT_ASSOCIATIVE ? prec - 1 : prec, noIn);
          if (op === _types3.TokenType.nullishCoalescing) {
            _base.state.tokens[startTokenIndex].numNullishCoalesceStarts++;
            _base.state.tokens[_base.state.tokens.length - 1].numNullishCoalesceEnds++;
          }
          parseExprOp(startTokenIndex, minPrec, noIn);
        }
      }
    }
    function parseMaybeUnary() {
      if (_base.isTypeScriptEnabled && !_base.isJSXEnabled && _index3.eat.call(void 0, _types3.TokenType.lessThan)) {
        _typescript.tsParseTypeAssertion.call(void 0);
        return false;
      }
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._module) && _index3.lookaheadCharCode.call(void 0) === _charcodes.charCodes.leftCurlyBrace && !_util.hasFollowingLineBreak.call(void 0)) {
        parseModuleExpression();
        return false;
      }
      if (_base.state.type & _types3.TokenType.IS_PREFIX) {
        _index3.next.call(void 0);
        parseMaybeUnary();
        return false;
      }
      const wasArrow = parseExprSubscripts();
      if (wasArrow) {
        return true;
      }
      while (_base.state.type & _types3.TokenType.IS_POSTFIX && !_util.canInsertSemicolon.call(void 0)) {
        if (_base.state.type === _types3.TokenType.preIncDec) {
          _base.state.type = _types3.TokenType.postIncDec;
        }
        _index3.next.call(void 0);
      }
      return false;
    }
    exports2.parseMaybeUnary = parseMaybeUnary;
    function parseExprSubscripts() {
      const startTokenIndex = _base.state.tokens.length;
      const wasArrow = parseExprAtom();
      if (wasArrow) {
        return true;
      }
      parseSubscripts(startTokenIndex);
      if (_base.state.tokens.length > startTokenIndex && _base.state.tokens[startTokenIndex].isOptionalChainStart) {
        _base.state.tokens[_base.state.tokens.length - 1].isOptionalChainEnd = true;
      }
      return false;
    }
    exports2.parseExprSubscripts = parseExprSubscripts;
    function parseSubscripts(startTokenIndex, noCalls = false) {
      if (_base.isFlowEnabled) {
        _flow.flowParseSubscripts.call(void 0, startTokenIndex, noCalls);
      } else {
        baseParseSubscripts(startTokenIndex, noCalls);
      }
    }
    function baseParseSubscripts(startTokenIndex, noCalls = false) {
      const stopState = new StopState(false);
      do {
        parseSubscript(startTokenIndex, noCalls, stopState);
      } while (!stopState.stop && !_base.state.error);
    }
    exports2.baseParseSubscripts = baseParseSubscripts;
    function parseSubscript(startTokenIndex, noCalls, stopState) {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsParseSubscript.call(void 0, startTokenIndex, noCalls, stopState);
      } else if (_base.isFlowEnabled) {
        _flow.flowParseSubscript.call(void 0, startTokenIndex, noCalls, stopState);
      } else {
        baseParseSubscript(startTokenIndex, noCalls, stopState);
      }
    }
    function baseParseSubscript(startTokenIndex, noCalls, stopState) {
      if (!noCalls && _index3.eat.call(void 0, _types3.TokenType.doubleColon)) {
        parseNoCallExpr();
        stopState.stop = true;
        parseSubscripts(startTokenIndex, noCalls);
      } else if (_index3.match.call(void 0, _types3.TokenType.questionDot)) {
        _base.state.tokens[startTokenIndex].isOptionalChainStart = true;
        if (noCalls && _index3.lookaheadType.call(void 0) === _types3.TokenType.parenL) {
          stopState.stop = true;
          return;
        }
        _index3.next.call(void 0);
        _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
        if (_index3.eat.call(void 0, _types3.TokenType.bracketL)) {
          parseExpression2();
          _util.expect.call(void 0, _types3.TokenType.bracketR);
        } else if (_index3.eat.call(void 0, _types3.TokenType.parenL)) {
          parseCallExpressionArguments();
        } else {
          parseMaybePrivateName();
        }
      } else if (_index3.eat.call(void 0, _types3.TokenType.dot)) {
        _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
        parseMaybePrivateName();
      } else if (_index3.eat.call(void 0, _types3.TokenType.bracketL)) {
        _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
        parseExpression2();
        _util.expect.call(void 0, _types3.TokenType.bracketR);
      } else if (!noCalls && _index3.match.call(void 0, _types3.TokenType.parenL)) {
        if (atPossibleAsync()) {
          const snapshot = _base.state.snapshot();
          const asyncStartTokenIndex = _base.state.tokens.length;
          _index3.next.call(void 0);
          _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
          const callContextId = _base.getNextContextId.call(void 0);
          _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;
          parseCallExpressionArguments();
          _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;
          if (shouldParseAsyncArrow()) {
            _base.state.restoreFromSnapshot(snapshot);
            stopState.stop = true;
            _base.state.scopeDepth++;
            _statement.parseFunctionParams.call(void 0);
            parseAsyncArrowFromCallExpression(asyncStartTokenIndex);
          }
        } else {
          _index3.next.call(void 0);
          _base.state.tokens[_base.state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
          const callContextId = _base.getNextContextId.call(void 0);
          _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;
          parseCallExpressionArguments();
          _base.state.tokens[_base.state.tokens.length - 1].contextId = callContextId;
        }
      } else if (_index3.match.call(void 0, _types3.TokenType.backQuote)) {
        parseTemplate2();
      } else {
        stopState.stop = true;
      }
    }
    exports2.baseParseSubscript = baseParseSubscript;
    function atPossibleAsync() {
      return _base.state.tokens[_base.state.tokens.length - 1].contextualKeyword === _keywords.ContextualKeyword._async && !_util.canInsertSemicolon.call(void 0);
    }
    exports2.atPossibleAsync = atPossibleAsync;
    function parseCallExpressionArguments() {
      let first = true;
      while (!_index3.eat.call(void 0, _types3.TokenType.parenR) && !_base.state.error) {
        if (first) {
          first = false;
        } else {
          _util.expect.call(void 0, _types3.TokenType.comma);
          if (_index3.eat.call(void 0, _types3.TokenType.parenR)) {
            break;
          }
        }
        parseExprListItem(false);
      }
    }
    exports2.parseCallExpressionArguments = parseCallExpressionArguments;
    function shouldParseAsyncArrow() {
      return _index3.match.call(void 0, _types3.TokenType.colon) || _index3.match.call(void 0, _types3.TokenType.arrow);
    }
    function parseAsyncArrowFromCallExpression(startTokenIndex) {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsStartParseAsyncArrowFromCallExpression.call(void 0);
      } else if (_base.isFlowEnabled) {
        _flow.flowStartParseAsyncArrowFromCallExpression.call(void 0);
      }
      _util.expect.call(void 0, _types3.TokenType.arrow);
      parseArrowExpression(startTokenIndex);
    }
    function parseNoCallExpr() {
      const startTokenIndex = _base.state.tokens.length;
      parseExprAtom();
      parseSubscripts(startTokenIndex, true);
    }
    function parseExprAtom() {
      if (_index3.eat.call(void 0, _types3.TokenType.modulo)) {
        parseIdentifier();
        return false;
      }
      if (_index3.match.call(void 0, _types3.TokenType.jsxText) || _index3.match.call(void 0, _types3.TokenType.jsxEmptyText)) {
        parseLiteral();
        return false;
      } else if (_index3.match.call(void 0, _types3.TokenType.lessThan) && _base.isJSXEnabled) {
        _base.state.type = _types3.TokenType.jsxTagStart;
        _index.jsxParseElement.call(void 0);
        _index3.next.call(void 0);
        return false;
      }
      const canBeArrow = _base.state.potentialArrowAt === _base.state.start;
      switch (_base.state.type) {
        case _types3.TokenType.slash:
        case _types3.TokenType.assign:
          _index3.retokenizeSlashAsRegex.call(void 0);
        case _types3.TokenType._super:
        case _types3.TokenType._this:
        case _types3.TokenType.regexp:
        case _types3.TokenType.num:
        case _types3.TokenType.bigint:
        case _types3.TokenType.decimal:
        case _types3.TokenType.string:
        case _types3.TokenType._null:
        case _types3.TokenType._true:
        case _types3.TokenType._false:
          _index3.next.call(void 0);
          return false;
        case _types3.TokenType._import:
          _index3.next.call(void 0);
          if (_index3.match.call(void 0, _types3.TokenType.dot)) {
            _base.state.tokens[_base.state.tokens.length - 1].type = _types3.TokenType.name;
            _index3.next.call(void 0);
            parseIdentifier();
          }
          return false;
        case _types3.TokenType.name: {
          const startTokenIndex = _base.state.tokens.length;
          const functionStart = _base.state.start;
          const contextualKeyword = _base.state.contextualKeyword;
          parseIdentifier();
          if (contextualKeyword === _keywords.ContextualKeyword._await) {
            parseAwait();
            return false;
          } else if (contextualKeyword === _keywords.ContextualKeyword._async && _index3.match.call(void 0, _types3.TokenType._function) && !_util.canInsertSemicolon.call(void 0)) {
            _index3.next.call(void 0);
            _statement.parseFunction.call(void 0, functionStart, false);
            return false;
          } else if (canBeArrow && contextualKeyword === _keywords.ContextualKeyword._async && !_util.canInsertSemicolon.call(void 0) && _index3.match.call(void 0, _types3.TokenType.name)) {
            _base.state.scopeDepth++;
            _lval.parseBindingIdentifier.call(void 0, false);
            _util.expect.call(void 0, _types3.TokenType.arrow);
            parseArrowExpression(startTokenIndex);
            return true;
          } else if (_index3.match.call(void 0, _types3.TokenType._do) && !_util.canInsertSemicolon.call(void 0)) {
            _index3.next.call(void 0);
            _statement.parseBlock.call(void 0);
            return false;
          }
          if (canBeArrow && !_util.canInsertSemicolon.call(void 0) && _index3.match.call(void 0, _types3.TokenType.arrow)) {
            _base.state.scopeDepth++;
            _lval.markPriorBindingIdentifier.call(void 0, false);
            _util.expect.call(void 0, _types3.TokenType.arrow);
            parseArrowExpression(startTokenIndex);
            return true;
          }
          _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index3.IdentifierRole.Access;
          return false;
        }
        case _types3.TokenType._do: {
          _index3.next.call(void 0);
          _statement.parseBlock.call(void 0);
          return false;
        }
        case _types3.TokenType.parenL: {
          const wasArrow = parseParenAndDistinguishExpression(canBeArrow);
          return wasArrow;
        }
        case _types3.TokenType.bracketL:
          _index3.next.call(void 0);
          parseExprList(_types3.TokenType.bracketR, true);
          return false;
        case _types3.TokenType.braceL:
          parseObj(false, false);
          return false;
        case _types3.TokenType._function:
          parseFunctionExpression();
          return false;
        case _types3.TokenType.at:
          _statement.parseDecorators.call(void 0);
        case _types3.TokenType._class:
          _statement.parseClass.call(void 0, false);
          return false;
        case _types3.TokenType._new:
          parseNew();
          return false;
        case _types3.TokenType.backQuote:
          parseTemplate2();
          return false;
        case _types3.TokenType.doubleColon: {
          _index3.next.call(void 0);
          parseNoCallExpr();
          return false;
        }
        case _types3.TokenType.hash: {
          const code = _index3.lookaheadCharCode.call(void 0);
          if (_identifier.IS_IDENTIFIER_START[code] || code === _charcodes.charCodes.backslash) {
            parseMaybePrivateName();
          } else {
            _index3.next.call(void 0);
          }
          return false;
        }
        default:
          _util.unexpected.call(void 0);
          return false;
      }
    }
    exports2.parseExprAtom = parseExprAtom;
    function parseMaybePrivateName() {
      _index3.eat.call(void 0, _types3.TokenType.hash);
      parseIdentifier();
    }
    function parseFunctionExpression() {
      const functionStart = _base.state.start;
      parseIdentifier();
      if (_index3.eat.call(void 0, _types3.TokenType.dot)) {
        parseIdentifier();
      }
      _statement.parseFunction.call(void 0, functionStart, false);
    }
    function parseLiteral() {
      _index3.next.call(void 0);
    }
    exports2.parseLiteral = parseLiteral;
    function parseParenExpression() {
      _util.expect.call(void 0, _types3.TokenType.parenL);
      parseExpression2();
      _util.expect.call(void 0, _types3.TokenType.parenR);
    }
    exports2.parseParenExpression = parseParenExpression;
    function parseParenAndDistinguishExpression(canBeArrow) {
      const snapshot = _base.state.snapshot();
      const startTokenIndex = _base.state.tokens.length;
      _util.expect.call(void 0, _types3.TokenType.parenL);
      let first = true;
      while (!_index3.match.call(void 0, _types3.TokenType.parenR) && !_base.state.error) {
        if (first) {
          first = false;
        } else {
          _util.expect.call(void 0, _types3.TokenType.comma);
          if (_index3.match.call(void 0, _types3.TokenType.parenR)) {
            break;
          }
        }
        if (_index3.match.call(void 0, _types3.TokenType.ellipsis)) {
          _lval.parseRest.call(
            void 0,
            false
            /* isBlockScope */
          );
          parseParenItem();
          break;
        } else {
          parseMaybeAssign(false, true);
        }
      }
      _util.expect.call(void 0, _types3.TokenType.parenR);
      if (canBeArrow && shouldParseArrow()) {
        const wasArrow = parseArrow();
        if (wasArrow) {
          _base.state.restoreFromSnapshot(snapshot);
          _base.state.scopeDepth++;
          _statement.parseFunctionParams.call(void 0);
          parseArrow();
          parseArrowExpression(startTokenIndex);
          if (_base.state.error) {
            _base.state.restoreFromSnapshot(snapshot);
            parseParenAndDistinguishExpression(false);
            return false;
          }
          return true;
        }
      }
      return false;
    }
    function shouldParseArrow() {
      return _index3.match.call(void 0, _types3.TokenType.colon) || !_util.canInsertSemicolon.call(void 0);
    }
    function parseArrow() {
      if (_base.isTypeScriptEnabled) {
        return _typescript.tsParseArrow.call(void 0);
      } else if (_base.isFlowEnabled) {
        return _flow.flowParseArrow.call(void 0);
      } else {
        return _index3.eat.call(void 0, _types3.TokenType.arrow);
      }
    }
    exports2.parseArrow = parseArrow;
    function parseParenItem() {
      if (_base.isTypeScriptEnabled || _base.isFlowEnabled) {
        _types.typedParseParenItem.call(void 0);
      }
    }
    function parseNew() {
      _util.expect.call(void 0, _types3.TokenType._new);
      if (_index3.eat.call(void 0, _types3.TokenType.dot)) {
        parseIdentifier();
        return;
      }
      parseNewCallee();
      if (_base.isFlowEnabled) {
        _flow.flowStartParseNewArguments.call(void 0);
      }
      if (_index3.eat.call(void 0, _types3.TokenType.parenL)) {
        parseExprList(_types3.TokenType.parenR);
      }
    }
    function parseNewCallee() {
      parseNoCallExpr();
      _index3.eat.call(void 0, _types3.TokenType.questionDot);
    }
    function parseTemplate2() {
      _index3.nextTemplateToken.call(void 0);
      _index3.nextTemplateToken.call(void 0);
      while (!_index3.match.call(void 0, _types3.TokenType.backQuote) && !_base.state.error) {
        _util.expect.call(void 0, _types3.TokenType.dollarBraceL);
        parseExpression2();
        _index3.nextTemplateToken.call(void 0);
        _index3.nextTemplateToken.call(void 0);
      }
      _index3.next.call(void 0);
    }
    exports2.parseTemplate = parseTemplate2;
    function parseObj(isPattern, isBlockScope) {
      const contextId = _base.getNextContextId.call(void 0);
      let first = true;
      _index3.next.call(void 0);
      _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
      while (!_index3.eat.call(void 0, _types3.TokenType.braceR) && !_base.state.error) {
        if (first) {
          first = false;
        } else {
          _util.expect.call(void 0, _types3.TokenType.comma);
          if (_index3.eat.call(void 0, _types3.TokenType.braceR)) {
            break;
          }
        }
        let isGenerator = false;
        if (_index3.match.call(void 0, _types3.TokenType.ellipsis)) {
          const previousIndex = _base.state.tokens.length;
          _lval.parseSpread.call(void 0);
          if (isPattern) {
            if (_base.state.tokens.length === previousIndex + 2) {
              _lval.markPriorBindingIdentifier.call(void 0, isBlockScope);
            }
            if (_index3.eat.call(void 0, _types3.TokenType.braceR)) {
              break;
            }
          }
          continue;
        }
        if (!isPattern) {
          isGenerator = _index3.eat.call(void 0, _types3.TokenType.star);
        }
        if (!isPattern && _util.isContextual.call(void 0, _keywords.ContextualKeyword._async)) {
          if (isGenerator) _util.unexpected.call(void 0);
          parseIdentifier();
          if (_index3.match.call(void 0, _types3.TokenType.colon) || _index3.match.call(void 0, _types3.TokenType.parenL) || _index3.match.call(void 0, _types3.TokenType.braceR) || _index3.match.call(void 0, _types3.TokenType.eq) || _index3.match.call(void 0, _types3.TokenType.comma)) {
          } else {
            if (_index3.match.call(void 0, _types3.TokenType.star)) {
              _index3.next.call(void 0);
              isGenerator = true;
            }
            parsePropertyName(contextId);
          }
        } else {
          parsePropertyName(contextId);
        }
        parseObjPropValue(isPattern, isBlockScope, contextId);
      }
      _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
    }
    exports2.parseObj = parseObj;
    function isGetterOrSetterMethod(isPattern) {
      return !isPattern && (_index3.match.call(void 0, _types3.TokenType.string) || // get "string"() {}
      _index3.match.call(void 0, _types3.TokenType.num) || // get 1() {}
      _index3.match.call(void 0, _types3.TokenType.bracketL) || // get ["string"]() {}
      _index3.match.call(void 0, _types3.TokenType.name) || // get foo() {}
      !!(_base.state.type & _types3.TokenType.IS_KEYWORD));
    }
    function parseObjectMethod(isPattern, objectContextId) {
      const functionStart = _base.state.start;
      if (_index3.match.call(void 0, _types3.TokenType.parenL)) {
        if (isPattern) _util.unexpected.call(void 0);
        parseMethod(
          functionStart,
          /* isConstructor */
          false
        );
        return true;
      }
      if (isGetterOrSetterMethod(isPattern)) {
        parsePropertyName(objectContextId);
        parseMethod(
          functionStart,
          /* isConstructor */
          false
        );
        return true;
      }
      return false;
    }
    function parseObjectProperty(isPattern, isBlockScope) {
      if (_index3.eat.call(void 0, _types3.TokenType.colon)) {
        if (isPattern) {
          _lval.parseMaybeDefault.call(void 0, isBlockScope);
        } else {
          parseMaybeAssign(false);
        }
        return;
      }
      let identifierRole;
      if (isPattern) {
        if (_base.state.scopeDepth === 0) {
          identifierRole = _index3.IdentifierRole.ObjectShorthandTopLevelDeclaration;
        } else if (isBlockScope) {
          identifierRole = _index3.IdentifierRole.ObjectShorthandBlockScopedDeclaration;
        } else {
          identifierRole = _index3.IdentifierRole.ObjectShorthandFunctionScopedDeclaration;
        }
      } else {
        identifierRole = _index3.IdentifierRole.ObjectShorthand;
      }
      _base.state.tokens[_base.state.tokens.length - 1].identifierRole = identifierRole;
      _lval.parseMaybeDefault.call(void 0, isBlockScope, true);
    }
    function parseObjPropValue(isPattern, isBlockScope, objectContextId) {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsStartParseObjPropValue.call(void 0);
      } else if (_base.isFlowEnabled) {
        _flow.flowStartParseObjPropValue.call(void 0);
      }
      const wasMethod = parseObjectMethod(isPattern, objectContextId);
      if (!wasMethod) {
        parseObjectProperty(isPattern, isBlockScope);
      }
    }
    function parsePropertyName(objectContextId) {
      if (_base.isFlowEnabled) {
        _flow.flowParseVariance.call(void 0);
      }
      if (_index3.eat.call(void 0, _types3.TokenType.bracketL)) {
        _base.state.tokens[_base.state.tokens.length - 1].contextId = objectContextId;
        parseMaybeAssign();
        _util.expect.call(void 0, _types3.TokenType.bracketR);
        _base.state.tokens[_base.state.tokens.length - 1].contextId = objectContextId;
      } else {
        if (_index3.match.call(void 0, _types3.TokenType.num) || _index3.match.call(void 0, _types3.TokenType.string) || _index3.match.call(void 0, _types3.TokenType.bigint) || _index3.match.call(void 0, _types3.TokenType.decimal)) {
          parseExprAtom();
        } else {
          parseMaybePrivateName();
        }
        _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index3.IdentifierRole.ObjectKey;
        _base.state.tokens[_base.state.tokens.length - 1].contextId = objectContextId;
      }
    }
    exports2.parsePropertyName = parsePropertyName;
    function parseMethod(functionStart, isConstructor) {
      const funcContextId = _base.getNextContextId.call(void 0);
      _base.state.scopeDepth++;
      const startTokenIndex = _base.state.tokens.length;
      const allowModifiers = isConstructor;
      _statement.parseFunctionParams.call(void 0, allowModifiers, funcContextId);
      parseFunctionBodyAndFinish(functionStart, funcContextId);
      const endTokenIndex = _base.state.tokens.length;
      _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, true));
      _base.state.scopeDepth--;
    }
    exports2.parseMethod = parseMethod;
    function parseArrowExpression(startTokenIndex) {
      parseFunctionBody(true);
      const endTokenIndex = _base.state.tokens.length;
      _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, true));
      _base.state.scopeDepth--;
    }
    exports2.parseArrowExpression = parseArrowExpression;
    function parseFunctionBodyAndFinish(functionStart, funcContextId = 0) {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsParseFunctionBodyAndFinish.call(void 0, functionStart, funcContextId);
      } else if (_base.isFlowEnabled) {
        _flow.flowParseFunctionBodyAndFinish.call(void 0, funcContextId);
      } else {
        parseFunctionBody(false, funcContextId);
      }
    }
    exports2.parseFunctionBodyAndFinish = parseFunctionBodyAndFinish;
    function parseFunctionBody(allowExpression, funcContextId = 0) {
      const isExpression = allowExpression && !_index3.match.call(void 0, _types3.TokenType.braceL);
      if (isExpression) {
        parseMaybeAssign();
      } else {
        _statement.parseBlock.call(void 0, true, funcContextId);
      }
    }
    exports2.parseFunctionBody = parseFunctionBody;
    function parseExprList(close, allowEmpty = false) {
      let first = true;
      while (!_index3.eat.call(void 0, close) && !_base.state.error) {
        if (first) {
          first = false;
        } else {
          _util.expect.call(void 0, _types3.TokenType.comma);
          if (_index3.eat.call(void 0, close)) break;
        }
        parseExprListItem(allowEmpty);
      }
    }
    function parseExprListItem(allowEmpty) {
      if (allowEmpty && _index3.match.call(void 0, _types3.TokenType.comma)) {
      } else if (_index3.match.call(void 0, _types3.TokenType.ellipsis)) {
        _lval.parseSpread.call(void 0);
        parseParenItem();
      } else if (_index3.match.call(void 0, _types3.TokenType.question)) {
        _index3.next.call(void 0);
      } else {
        parseMaybeAssign(false, true);
      }
    }
    function parseIdentifier() {
      _index3.next.call(void 0);
      _base.state.tokens[_base.state.tokens.length - 1].type = _types3.TokenType.name;
    }
    exports2.parseIdentifier = parseIdentifier;
    function parseAwait() {
      parseMaybeUnary();
    }
    function parseYield() {
      _index3.next.call(void 0);
      if (!_index3.match.call(void 0, _types3.TokenType.semi) && !_util.canInsertSemicolon.call(void 0)) {
        _index3.eat.call(void 0, _types3.TokenType.star);
        parseMaybeAssign();
      }
    }
    function parseModuleExpression() {
      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._module);
      _util.expect.call(void 0, _types3.TokenType.braceL);
      _statement.parseBlockBody.call(void 0, _types3.TokenType.braceR);
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/plugins/flow.js
var require_flow = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/plugins/flow.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _index = require_tokenizer();
    var _keywords = require_keywords();
    var _types = require_types();
    var _base = require_base();
    var _expression = require_expression();
    var _statement = require_statement();
    var _util = require_util();
    function isMaybeDefaultImport(lookahead) {
      return (lookahead.type === _types.TokenType.name || !!(lookahead.type & _types.TokenType.IS_KEYWORD)) && lookahead.contextualKeyword !== _keywords.ContextualKeyword._from;
    }
    function flowParseTypeInitialiser(tok) {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      _util.expect.call(void 0, tok || _types.TokenType.colon);
      flowParseType();
      _index.popTypeContext.call(void 0, oldIsType);
    }
    function flowParsePredicate() {
      _util.expect.call(void 0, _types.TokenType.modulo);
      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._checks);
      if (_index.eat.call(void 0, _types.TokenType.parenL)) {
        _expression.parseExpression.call(void 0);
        _util.expect.call(void 0, _types.TokenType.parenR);
      }
    }
    function flowParseTypeAndPredicateInitialiser() {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      _util.expect.call(void 0, _types.TokenType.colon);
      if (_index.match.call(void 0, _types.TokenType.modulo)) {
        flowParsePredicate();
      } else {
        flowParseType();
        if (_index.match.call(void 0, _types.TokenType.modulo)) {
          flowParsePredicate();
        }
      }
      _index.popTypeContext.call(void 0, oldIsType);
    }
    function flowParseDeclareClass() {
      _index.next.call(void 0);
      flowParseInterfaceish(
        /* isClass */
        true
      );
    }
    function flowParseDeclareFunction() {
      _index.next.call(void 0);
      _expression.parseIdentifier.call(void 0);
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        flowParseTypeParameterDeclaration();
      }
      _util.expect.call(void 0, _types.TokenType.parenL);
      flowParseFunctionTypeParams();
      _util.expect.call(void 0, _types.TokenType.parenR);
      flowParseTypeAndPredicateInitialiser();
      _util.semicolon.call(void 0);
    }
    function flowParseDeclare() {
      if (_index.match.call(void 0, _types.TokenType._class)) {
        flowParseDeclareClass();
      } else if (_index.match.call(void 0, _types.TokenType._function)) {
        flowParseDeclareFunction();
      } else if (_index.match.call(void 0, _types.TokenType._var)) {
        flowParseDeclareVariable();
      } else if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._module)) {
        if (_index.eat.call(void 0, _types.TokenType.dot)) {
          flowParseDeclareModuleExports();
        } else {
          flowParseDeclareModule();
        }
      } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {
        flowParseDeclareTypeAlias();
      } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque)) {
        flowParseDeclareOpaqueType();
      } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {
        flowParseDeclareInterface();
      } else if (_index.match.call(void 0, _types.TokenType._export)) {
        flowParseDeclareExportDeclaration();
      } else {
        _util.unexpected.call(void 0);
      }
    }
    function flowParseDeclareVariable() {
      _index.next.call(void 0);
      flowParseTypeAnnotatableIdentifier();
      _util.semicolon.call(void 0);
    }
    function flowParseDeclareModule() {
      if (_index.match.call(void 0, _types.TokenType.string)) {
        _expression.parseExprAtom.call(void 0);
      } else {
        _expression.parseIdentifier.call(void 0);
      }
      _util.expect.call(void 0, _types.TokenType.braceL);
      while (!_index.match.call(void 0, _types.TokenType.braceR) && !_base.state.error) {
        if (_index.match.call(void 0, _types.TokenType._import)) {
          _index.next.call(void 0);
          _statement.parseImport.call(void 0);
        } else {
          _util.unexpected.call(void 0);
        }
      }
      _util.expect.call(void 0, _types.TokenType.braceR);
    }
    function flowParseDeclareExportDeclaration() {
      _util.expect.call(void 0, _types.TokenType._export);
      if (_index.eat.call(void 0, _types.TokenType._default)) {
        if (_index.match.call(void 0, _types.TokenType._function) || _index.match.call(void 0, _types.TokenType._class)) {
          flowParseDeclare();
        } else {
          flowParseType();
          _util.semicolon.call(void 0);
        }
      } else if (_index.match.call(void 0, _types.TokenType._var) || // declare export var ...
      _index.match.call(void 0, _types.TokenType._function) || // declare export function ...
      _index.match.call(void 0, _types.TokenType._class) || // declare export class ...
      _util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque)) {
        flowParseDeclare();
      } else if (_index.match.call(void 0, _types.TokenType.star) || // declare export * from ''
      _index.match.call(void 0, _types.TokenType.braceL) || // declare export {} ...
      _util.isContextual.call(void 0, _keywords.ContextualKeyword._interface) || // declare export interface ...
      _util.isContextual.call(void 0, _keywords.ContextualKeyword._type) || // declare export type ...
      _util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque)) {
        _statement.parseExport.call(void 0);
      } else {
        _util.unexpected.call(void 0);
      }
    }
    function flowParseDeclareModuleExports() {
      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._exports);
      flowParseTypeAnnotation();
      _util.semicolon.call(void 0);
    }
    function flowParseDeclareTypeAlias() {
      _index.next.call(void 0);
      flowParseTypeAlias();
    }
    function flowParseDeclareOpaqueType() {
      _index.next.call(void 0);
      flowParseOpaqueType(true);
    }
    function flowParseDeclareInterface() {
      _index.next.call(void 0);
      flowParseInterfaceish();
    }
    function flowParseInterfaceish(isClass = false) {
      flowParseRestrictedIdentifier();
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        flowParseTypeParameterDeclaration();
      }
      if (_index.eat.call(void 0, _types.TokenType._extends)) {
        do {
          flowParseInterfaceExtends();
        } while (!isClass && _index.eat.call(void 0, _types.TokenType.comma));
      }
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._mixins)) {
        _index.next.call(void 0);
        do {
          flowParseInterfaceExtends();
        } while (_index.eat.call(void 0, _types.TokenType.comma));
      }
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._implements)) {
        _index.next.call(void 0);
        do {
          flowParseInterfaceExtends();
        } while (_index.eat.call(void 0, _types.TokenType.comma));
      }
      flowParseObjectType(isClass, false, isClass);
    }
    function flowParseInterfaceExtends() {
      flowParseQualifiedTypeIdentifier(false);
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        flowParseTypeParameterInstantiation();
      }
    }
    function flowParseInterface() {
      flowParseInterfaceish();
    }
    function flowParseRestrictedIdentifier() {
      _expression.parseIdentifier.call(void 0);
    }
    function flowParseTypeAlias() {
      flowParseRestrictedIdentifier();
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        flowParseTypeParameterDeclaration();
      }
      flowParseTypeInitialiser(_types.TokenType.eq);
      _util.semicolon.call(void 0);
    }
    function flowParseOpaqueType(declare) {
      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._type);
      flowParseRestrictedIdentifier();
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        flowParseTypeParameterDeclaration();
      }
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        flowParseTypeInitialiser(_types.TokenType.colon);
      }
      if (!declare) {
        flowParseTypeInitialiser(_types.TokenType.eq);
      }
      _util.semicolon.call(void 0);
    }
    function flowParseTypeParameter() {
      flowParseVariance();
      flowParseTypeAnnotatableIdentifier();
      if (_index.eat.call(void 0, _types.TokenType.eq)) {
        flowParseType();
      }
    }
    function flowParseTypeParameterDeclaration() {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.typeParameterStart)) {
        _index.next.call(void 0);
      } else {
        _util.unexpected.call(void 0);
      }
      do {
        flowParseTypeParameter();
        if (!_index.match.call(void 0, _types.TokenType.greaterThan)) {
          _util.expect.call(void 0, _types.TokenType.comma);
        }
      } while (!_index.match.call(void 0, _types.TokenType.greaterThan) && !_base.state.error);
      _util.expect.call(void 0, _types.TokenType.greaterThan);
      _index.popTypeContext.call(void 0, oldIsType);
    }
    exports2.flowParseTypeParameterDeclaration = flowParseTypeParameterDeclaration;
    function flowParseTypeParameterInstantiation() {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      _util.expect.call(void 0, _types.TokenType.lessThan);
      while (!_index.match.call(void 0, _types.TokenType.greaterThan) && !_base.state.error) {
        flowParseType();
        if (!_index.match.call(void 0, _types.TokenType.greaterThan)) {
          _util.expect.call(void 0, _types.TokenType.comma);
        }
      }
      _util.expect.call(void 0, _types.TokenType.greaterThan);
      _index.popTypeContext.call(void 0, oldIsType);
    }
    function flowParseInterfaceType() {
      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._interface);
      if (_index.eat.call(void 0, _types.TokenType._extends)) {
        do {
          flowParseInterfaceExtends();
        } while (_index.eat.call(void 0, _types.TokenType.comma));
      }
      flowParseObjectType(false, false, false);
    }
    function flowParseObjectPropertyKey() {
      if (_index.match.call(void 0, _types.TokenType.num) || _index.match.call(void 0, _types.TokenType.string)) {
        _expression.parseExprAtom.call(void 0);
      } else {
        _expression.parseIdentifier.call(void 0);
      }
    }
    function flowParseObjectTypeIndexer() {
      if (_index.lookaheadType.call(void 0) === _types.TokenType.colon) {
        flowParseObjectPropertyKey();
        flowParseTypeInitialiser();
      } else {
        flowParseType();
      }
      _util.expect.call(void 0, _types.TokenType.bracketR);
      flowParseTypeInitialiser();
    }
    function flowParseObjectTypeInternalSlot() {
      flowParseObjectPropertyKey();
      _util.expect.call(void 0, _types.TokenType.bracketR);
      _util.expect.call(void 0, _types.TokenType.bracketR);
      if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.parenL)) {
        flowParseObjectTypeMethodish();
      } else {
        _index.eat.call(void 0, _types.TokenType.question);
        flowParseTypeInitialiser();
      }
    }
    function flowParseObjectTypeMethodish() {
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        flowParseTypeParameterDeclaration();
      }
      _util.expect.call(void 0, _types.TokenType.parenL);
      while (!_index.match.call(void 0, _types.TokenType.parenR) && !_index.match.call(void 0, _types.TokenType.ellipsis) && !_base.state.error) {
        flowParseFunctionTypeParam();
        if (!_index.match.call(void 0, _types.TokenType.parenR)) {
          _util.expect.call(void 0, _types.TokenType.comma);
        }
      }
      if (_index.eat.call(void 0, _types.TokenType.ellipsis)) {
        flowParseFunctionTypeParam();
      }
      _util.expect.call(void 0, _types.TokenType.parenR);
      flowParseTypeInitialiser();
    }
    function flowParseObjectTypeCallProperty() {
      flowParseObjectTypeMethodish();
    }
    function flowParseObjectType(allowStatic, allowExact, allowProto) {
      let endDelim;
      if (allowExact && _index.match.call(void 0, _types.TokenType.braceBarL)) {
        _util.expect.call(void 0, _types.TokenType.braceBarL);
        endDelim = _types.TokenType.braceBarR;
      } else {
        _util.expect.call(void 0, _types.TokenType.braceL);
        endDelim = _types.TokenType.braceR;
      }
      while (!_index.match.call(void 0, endDelim) && !_base.state.error) {
        if (allowProto && _util.isContextual.call(void 0, _keywords.ContextualKeyword._proto)) {
          const lookahead = _index.lookaheadType.call(void 0);
          if (lookahead !== _types.TokenType.colon && lookahead !== _types.TokenType.question) {
            _index.next.call(void 0);
            allowStatic = false;
          }
        }
        if (allowStatic && _util.isContextual.call(void 0, _keywords.ContextualKeyword._static)) {
          const lookahead = _index.lookaheadType.call(void 0);
          if (lookahead !== _types.TokenType.colon && lookahead !== _types.TokenType.question) {
            _index.next.call(void 0);
          }
        }
        flowParseVariance();
        if (_index.eat.call(void 0, _types.TokenType.bracketL)) {
          if (_index.eat.call(void 0, _types.TokenType.bracketL)) {
            flowParseObjectTypeInternalSlot();
          } else {
            flowParseObjectTypeIndexer();
          }
        } else if (_index.match.call(void 0, _types.TokenType.parenL) || _index.match.call(void 0, _types.TokenType.lessThan)) {
          flowParseObjectTypeCallProperty();
        } else {
          if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._get) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._set)) {
            const lookahead = _index.lookaheadType.call(void 0);
            if (lookahead === _types.TokenType.name || lookahead === _types.TokenType.string || lookahead === _types.TokenType.num) {
              _index.next.call(void 0);
            }
          }
          flowParseObjectTypeProperty();
        }
        flowObjectTypeSemicolon();
      }
      _util.expect.call(void 0, endDelim);
    }
    function flowParseObjectTypeProperty() {
      if (_index.match.call(void 0, _types.TokenType.ellipsis)) {
        _util.expect.call(void 0, _types.TokenType.ellipsis);
        if (!_index.eat.call(void 0, _types.TokenType.comma)) {
          _index.eat.call(void 0, _types.TokenType.semi);
        }
        if (_index.match.call(void 0, _types.TokenType.braceR)) {
          return;
        }
        flowParseType();
      } else {
        flowParseObjectPropertyKey();
        if (_index.match.call(void 0, _types.TokenType.lessThan) || _index.match.call(void 0, _types.TokenType.parenL)) {
          flowParseObjectTypeMethodish();
        } else {
          _index.eat.call(void 0, _types.TokenType.question);
          flowParseTypeInitialiser();
        }
      }
    }
    function flowObjectTypeSemicolon() {
      if (!_index.eat.call(void 0, _types.TokenType.semi) && !_index.eat.call(void 0, _types.TokenType.comma) && !_index.match.call(void 0, _types.TokenType.braceR) && !_index.match.call(void 0, _types.TokenType.braceBarR)) {
        _util.unexpected.call(void 0);
      }
    }
    function flowParseQualifiedTypeIdentifier(initialIdAlreadyParsed) {
      if (!initialIdAlreadyParsed) {
        _expression.parseIdentifier.call(void 0);
      }
      while (_index.eat.call(void 0, _types.TokenType.dot)) {
        _expression.parseIdentifier.call(void 0);
      }
    }
    function flowParseGenericType() {
      flowParseQualifiedTypeIdentifier(true);
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        flowParseTypeParameterInstantiation();
      }
    }
    function flowParseTypeofType() {
      _util.expect.call(void 0, _types.TokenType._typeof);
      flowParsePrimaryType();
    }
    function flowParseTupleType() {
      _util.expect.call(void 0, _types.TokenType.bracketL);
      while (_base.state.pos < _base.input.length && !_index.match.call(void 0, _types.TokenType.bracketR)) {
        flowParseType();
        if (_index.match.call(void 0, _types.TokenType.bracketR)) {
          break;
        }
        _util.expect.call(void 0, _types.TokenType.comma);
      }
      _util.expect.call(void 0, _types.TokenType.bracketR);
    }
    function flowParseFunctionTypeParam() {
      const lookahead = _index.lookaheadType.call(void 0);
      if (lookahead === _types.TokenType.colon || lookahead === _types.TokenType.question) {
        _expression.parseIdentifier.call(void 0);
        _index.eat.call(void 0, _types.TokenType.question);
        flowParseTypeInitialiser();
      } else {
        flowParseType();
      }
    }
    function flowParseFunctionTypeParams() {
      while (!_index.match.call(void 0, _types.TokenType.parenR) && !_index.match.call(void 0, _types.TokenType.ellipsis) && !_base.state.error) {
        flowParseFunctionTypeParam();
        if (!_index.match.call(void 0, _types.TokenType.parenR)) {
          _util.expect.call(void 0, _types.TokenType.comma);
        }
      }
      if (_index.eat.call(void 0, _types.TokenType.ellipsis)) {
        flowParseFunctionTypeParam();
      }
    }
    function flowParsePrimaryType() {
      let isGroupedType = false;
      const oldNoAnonFunctionType = _base.state.noAnonFunctionType;
      switch (_base.state.type) {
        case _types.TokenType.name: {
          if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {
            flowParseInterfaceType();
            return;
          }
          _expression.parseIdentifier.call(void 0);
          flowParseGenericType();
          return;
        }
        case _types.TokenType.braceL:
          flowParseObjectType(false, false, false);
          return;
        case _types.TokenType.braceBarL:
          flowParseObjectType(false, true, false);
          return;
        case _types.TokenType.bracketL:
          flowParseTupleType();
          return;
        case _types.TokenType.lessThan:
          flowParseTypeParameterDeclaration();
          _util.expect.call(void 0, _types.TokenType.parenL);
          flowParseFunctionTypeParams();
          _util.expect.call(void 0, _types.TokenType.parenR);
          _util.expect.call(void 0, _types.TokenType.arrow);
          flowParseType();
          return;
        case _types.TokenType.parenL:
          _index.next.call(void 0);
          if (!_index.match.call(void 0, _types.TokenType.parenR) && !_index.match.call(void 0, _types.TokenType.ellipsis)) {
            if (_index.match.call(void 0, _types.TokenType.name)) {
              const token = _index.lookaheadType.call(void 0);
              isGroupedType = token !== _types.TokenType.question && token !== _types.TokenType.colon;
            } else {
              isGroupedType = true;
            }
          }
          if (isGroupedType) {
            _base.state.noAnonFunctionType = false;
            flowParseType();
            _base.state.noAnonFunctionType = oldNoAnonFunctionType;
            if (_base.state.noAnonFunctionType || !(_index.match.call(void 0, _types.TokenType.comma) || _index.match.call(void 0, _types.TokenType.parenR) && _index.lookaheadType.call(void 0) === _types.TokenType.arrow)) {
              _util.expect.call(void 0, _types.TokenType.parenR);
              return;
            } else {
              _index.eat.call(void 0, _types.TokenType.comma);
            }
          }
          flowParseFunctionTypeParams();
          _util.expect.call(void 0, _types.TokenType.parenR);
          _util.expect.call(void 0, _types.TokenType.arrow);
          flowParseType();
          return;
        case _types.TokenType.minus:
          _index.next.call(void 0);
          _expression.parseLiteral.call(void 0);
          return;
        case _types.TokenType.string:
        case _types.TokenType.num:
        case _types.TokenType._true:
        case _types.TokenType._false:
        case _types.TokenType._null:
        case _types.TokenType._this:
        case _types.TokenType._void:
        case _types.TokenType.star:
          _index.next.call(void 0);
          return;
        default:
          if (_base.state.type === _types.TokenType._typeof) {
            flowParseTypeofType();
            return;
          } else if (_base.state.type & _types.TokenType.IS_KEYWORD) {
            _index.next.call(void 0);
            _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.name;
            return;
          }
      }
      _util.unexpected.call(void 0);
    }
    function flowParsePostfixType() {
      flowParsePrimaryType();
      while (!_util.canInsertSemicolon.call(void 0) && (_index.match.call(void 0, _types.TokenType.bracketL) || _index.match.call(void 0, _types.TokenType.questionDot))) {
        _index.eat.call(void 0, _types.TokenType.questionDot);
        _util.expect.call(void 0, _types.TokenType.bracketL);
        if (_index.eat.call(void 0, _types.TokenType.bracketR)) {
        } else {
          flowParseType();
          _util.expect.call(void 0, _types.TokenType.bracketR);
        }
      }
    }
    function flowParsePrefixType() {
      if (_index.eat.call(void 0, _types.TokenType.question)) {
        flowParsePrefixType();
      } else {
        flowParsePostfixType();
      }
    }
    function flowParseAnonFunctionWithoutParens() {
      flowParsePrefixType();
      if (!_base.state.noAnonFunctionType && _index.eat.call(void 0, _types.TokenType.arrow)) {
        flowParseType();
      }
    }
    function flowParseIntersectionType() {
      _index.eat.call(void 0, _types.TokenType.bitwiseAND);
      flowParseAnonFunctionWithoutParens();
      while (_index.eat.call(void 0, _types.TokenType.bitwiseAND)) {
        flowParseAnonFunctionWithoutParens();
      }
    }
    function flowParseUnionType() {
      _index.eat.call(void 0, _types.TokenType.bitwiseOR);
      flowParseIntersectionType();
      while (_index.eat.call(void 0, _types.TokenType.bitwiseOR)) {
        flowParseIntersectionType();
      }
    }
    function flowParseType() {
      flowParseUnionType();
    }
    function flowParseTypeAnnotation() {
      flowParseTypeInitialiser();
    }
    exports2.flowParseTypeAnnotation = flowParseTypeAnnotation;
    function flowParseTypeAnnotatableIdentifier() {
      _expression.parseIdentifier.call(void 0);
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        flowParseTypeAnnotation();
      }
    }
    function flowParseVariance() {
      if (_index.match.call(void 0, _types.TokenType.plus) || _index.match.call(void 0, _types.TokenType.minus)) {
        _index.next.call(void 0);
        _base.state.tokens[_base.state.tokens.length - 1].isType = true;
      }
    }
    exports2.flowParseVariance = flowParseVariance;
    function flowParseFunctionBodyAndFinish(funcContextId) {
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        flowParseTypeAndPredicateInitialiser();
      }
      _expression.parseFunctionBody.call(void 0, false, funcContextId);
    }
    exports2.flowParseFunctionBodyAndFinish = flowParseFunctionBodyAndFinish;
    function flowParseSubscript(startTokenIndex, noCalls, stopState) {
      if (_index.match.call(void 0, _types.TokenType.questionDot) && _index.lookaheadType.call(void 0) === _types.TokenType.lessThan) {
        if (noCalls) {
          stopState.stop = true;
          return;
        }
        _index.next.call(void 0);
        flowParseTypeParameterInstantiation();
        _util.expect.call(void 0, _types.TokenType.parenL);
        _expression.parseCallExpressionArguments.call(void 0);
        return;
      } else if (!noCalls && _index.match.call(void 0, _types.TokenType.lessThan)) {
        const snapshot = _base.state.snapshot();
        flowParseTypeParameterInstantiation();
        _util.expect.call(void 0, _types.TokenType.parenL);
        _expression.parseCallExpressionArguments.call(void 0);
        if (_base.state.error) {
          _base.state.restoreFromSnapshot(snapshot);
        } else {
          return;
        }
      }
      _expression.baseParseSubscript.call(void 0, startTokenIndex, noCalls, stopState);
    }
    exports2.flowParseSubscript = flowParseSubscript;
    function flowStartParseNewArguments() {
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        const snapshot = _base.state.snapshot();
        flowParseTypeParameterInstantiation();
        if (_base.state.error) {
          _base.state.restoreFromSnapshot(snapshot);
        }
      }
    }
    exports2.flowStartParseNewArguments = flowStartParseNewArguments;
    function flowTryParseStatement() {
      if (_index.match.call(void 0, _types.TokenType.name) && _base.state.contextualKeyword === _keywords.ContextualKeyword._interface) {
        const oldIsType = _index.pushTypeContext.call(void 0, 0);
        _index.next.call(void 0);
        flowParseInterface();
        _index.popTypeContext.call(void 0, oldIsType);
        return true;
      } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._enum)) {
        flowParseEnumDeclaration();
        return true;
      }
      return false;
    }
    exports2.flowTryParseStatement = flowTryParseStatement;
    function flowTryParseExportDefaultExpression() {
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._enum)) {
        flowParseEnumDeclaration();
        return true;
      }
      return false;
    }
    exports2.flowTryParseExportDefaultExpression = flowTryParseExportDefaultExpression;
    function flowParseIdentifierStatement(contextualKeyword) {
      if (contextualKeyword === _keywords.ContextualKeyword._declare) {
        if (_index.match.call(void 0, _types.TokenType._class) || _index.match.call(void 0, _types.TokenType.name) || _index.match.call(void 0, _types.TokenType._function) || _index.match.call(void 0, _types.TokenType._var) || _index.match.call(void 0, _types.TokenType._export)) {
          const oldIsType = _index.pushTypeContext.call(void 0, 1);
          flowParseDeclare();
          _index.popTypeContext.call(void 0, oldIsType);
        }
      } else if (_index.match.call(void 0, _types.TokenType.name)) {
        if (contextualKeyword === _keywords.ContextualKeyword._interface) {
          const oldIsType = _index.pushTypeContext.call(void 0, 1);
          flowParseInterface();
          _index.popTypeContext.call(void 0, oldIsType);
        } else if (contextualKeyword === _keywords.ContextualKeyword._type) {
          const oldIsType = _index.pushTypeContext.call(void 0, 1);
          flowParseTypeAlias();
          _index.popTypeContext.call(void 0, oldIsType);
        } else if (contextualKeyword === _keywords.ContextualKeyword._opaque) {
          const oldIsType = _index.pushTypeContext.call(void 0, 1);
          flowParseOpaqueType(false);
          _index.popTypeContext.call(void 0, oldIsType);
        }
      }
      _util.semicolon.call(void 0);
    }
    exports2.flowParseIdentifierStatement = flowParseIdentifierStatement;
    function flowShouldParseExportDeclaration() {
      return _util.isContextual.call(void 0, _keywords.ContextualKeyword._type) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._interface) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._enum);
    }
    exports2.flowShouldParseExportDeclaration = flowShouldParseExportDeclaration;
    function flowShouldDisallowExportDefaultSpecifier() {
      return _index.match.call(void 0, _types.TokenType.name) && (_base.state.contextualKeyword === _keywords.ContextualKeyword._type || _base.state.contextualKeyword === _keywords.ContextualKeyword._interface || _base.state.contextualKeyword === _keywords.ContextualKeyword._opaque || _base.state.contextualKeyword === _keywords.ContextualKeyword._enum);
    }
    exports2.flowShouldDisallowExportDefaultSpecifier = flowShouldDisallowExportDefaultSpecifier;
    function flowParseExportDeclaration() {
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {
        const oldIsType = _index.pushTypeContext.call(void 0, 1);
        _index.next.call(void 0);
        if (_index.match.call(void 0, _types.TokenType.braceL)) {
          _statement.parseExportSpecifiers.call(void 0);
          _statement.parseExportFrom.call(void 0);
        } else {
          flowParseTypeAlias();
        }
        _index.popTypeContext.call(void 0, oldIsType);
      } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._opaque)) {
        const oldIsType = _index.pushTypeContext.call(void 0, 1);
        _index.next.call(void 0);
        flowParseOpaqueType(false);
        _index.popTypeContext.call(void 0, oldIsType);
      } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._interface)) {
        const oldIsType = _index.pushTypeContext.call(void 0, 1);
        _index.next.call(void 0);
        flowParseInterface();
        _index.popTypeContext.call(void 0, oldIsType);
      } else {
        _statement.parseStatement.call(void 0, true);
      }
    }
    exports2.flowParseExportDeclaration = flowParseExportDeclaration;
    function flowShouldParseExportStar() {
      return _index.match.call(void 0, _types.TokenType.star) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._type) && _index.lookaheadType.call(void 0) === _types.TokenType.star;
    }
    exports2.flowShouldParseExportStar = flowShouldParseExportStar;
    function flowParseExportStar() {
      if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._type)) {
        const oldIsType = _index.pushTypeContext.call(void 0, 2);
        _statement.baseParseExportStar.call(void 0);
        _index.popTypeContext.call(void 0, oldIsType);
      } else {
        _statement.baseParseExportStar.call(void 0);
      }
    }
    exports2.flowParseExportStar = flowParseExportStar;
    function flowAfterParseClassSuper(hasSuper) {
      if (hasSuper && _index.match.call(void 0, _types.TokenType.lessThan)) {
        flowParseTypeParameterInstantiation();
      }
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._implements)) {
        const oldIsType = _index.pushTypeContext.call(void 0, 0);
        _index.next.call(void 0);
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._implements;
        do {
          flowParseRestrictedIdentifier();
          if (_index.match.call(void 0, _types.TokenType.lessThan)) {
            flowParseTypeParameterInstantiation();
          }
        } while (_index.eat.call(void 0, _types.TokenType.comma));
        _index.popTypeContext.call(void 0, oldIsType);
      }
    }
    exports2.flowAfterParseClassSuper = flowAfterParseClassSuper;
    function flowStartParseObjPropValue() {
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        flowParseTypeParameterDeclaration();
        if (!_index.match.call(void 0, _types.TokenType.parenL)) _util.unexpected.call(void 0);
      }
    }
    exports2.flowStartParseObjPropValue = flowStartParseObjPropValue;
    function flowParseAssignableListItemTypes() {
      const oldIsType = _index.pushTypeContext.call(void 0, 0);
      _index.eat.call(void 0, _types.TokenType.question);
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        flowParseTypeAnnotation();
      }
      _index.popTypeContext.call(void 0, oldIsType);
    }
    exports2.flowParseAssignableListItemTypes = flowParseAssignableListItemTypes;
    function flowStartParseImportSpecifiers() {
      if (_index.match.call(void 0, _types.TokenType._typeof) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {
        const lh = _index.lookaheadTypeAndKeyword.call(void 0);
        if (isMaybeDefaultImport(lh) || lh.type === _types.TokenType.braceL || lh.type === _types.TokenType.star) {
          _index.next.call(void 0);
        }
      }
    }
    exports2.flowStartParseImportSpecifiers = flowStartParseImportSpecifiers;
    function flowParseImportSpecifier() {
      const isTypeKeyword = _base.state.contextualKeyword === _keywords.ContextualKeyword._type || _base.state.type === _types.TokenType._typeof;
      if (isTypeKeyword) {
        _index.next.call(void 0);
      } else {
        _expression.parseIdentifier.call(void 0);
      }
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._as) && !_util.isLookaheadContextual.call(void 0, _keywords.ContextualKeyword._as)) {
        _expression.parseIdentifier.call(void 0);
        if (isTypeKeyword && !_index.match.call(void 0, _types.TokenType.name) && !(_base.state.type & _types.TokenType.IS_KEYWORD)) {
        } else {
          _expression.parseIdentifier.call(void 0);
        }
      } else {
        if (isTypeKeyword && (_index.match.call(void 0, _types.TokenType.name) || !!(_base.state.type & _types.TokenType.IS_KEYWORD))) {
          _expression.parseIdentifier.call(void 0);
        }
        if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {
          _expression.parseIdentifier.call(void 0);
        }
      }
    }
    exports2.flowParseImportSpecifier = flowParseImportSpecifier;
    function flowStartParseFunctionParams() {
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        const oldIsType = _index.pushTypeContext.call(void 0, 0);
        flowParseTypeParameterDeclaration();
        _index.popTypeContext.call(void 0, oldIsType);
      }
    }
    exports2.flowStartParseFunctionParams = flowStartParseFunctionParams;
    function flowAfterParseVarHead() {
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        flowParseTypeAnnotation();
      }
    }
    exports2.flowAfterParseVarHead = flowAfterParseVarHead;
    function flowStartParseAsyncArrowFromCallExpression() {
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        const oldNoAnonFunctionType = _base.state.noAnonFunctionType;
        _base.state.noAnonFunctionType = true;
        flowParseTypeAnnotation();
        _base.state.noAnonFunctionType = oldNoAnonFunctionType;
      }
    }
    exports2.flowStartParseAsyncArrowFromCallExpression = flowStartParseAsyncArrowFromCallExpression;
    function flowParseMaybeAssign(noIn, isWithinParens) {
      if (_index.match.call(void 0, _types.TokenType.lessThan)) {
        const snapshot = _base.state.snapshot();
        let wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);
        if (_base.state.error) {
          _base.state.restoreFromSnapshot(snapshot);
          _base.state.type = _types.TokenType.typeParameterStart;
        } else {
          return wasArrow;
        }
        const oldIsType = _index.pushTypeContext.call(void 0, 0);
        flowParseTypeParameterDeclaration();
        _index.popTypeContext.call(void 0, oldIsType);
        wasArrow = _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);
        if (wasArrow) {
          return true;
        }
        _util.unexpected.call(void 0);
      }
      return _expression.baseParseMaybeAssign.call(void 0, noIn, isWithinParens);
    }
    exports2.flowParseMaybeAssign = flowParseMaybeAssign;
    function flowParseArrow() {
      if (_index.match.call(void 0, _types.TokenType.colon)) {
        const oldIsType = _index.pushTypeContext.call(void 0, 0);
        const snapshot = _base.state.snapshot();
        const oldNoAnonFunctionType = _base.state.noAnonFunctionType;
        _base.state.noAnonFunctionType = true;
        flowParseTypeAndPredicateInitialiser();
        _base.state.noAnonFunctionType = oldNoAnonFunctionType;
        if (_util.canInsertSemicolon.call(void 0)) _util.unexpected.call(void 0);
        if (!_index.match.call(void 0, _types.TokenType.arrow)) _util.unexpected.call(void 0);
        if (_base.state.error) {
          _base.state.restoreFromSnapshot(snapshot);
        }
        _index.popTypeContext.call(void 0, oldIsType);
      }
      return _index.eat.call(void 0, _types.TokenType.arrow);
    }
    exports2.flowParseArrow = flowParseArrow;
    function flowParseSubscripts(startTokenIndex, noCalls = false) {
      if (_base.state.tokens[_base.state.tokens.length - 1].contextualKeyword === _keywords.ContextualKeyword._async && _index.match.call(void 0, _types.TokenType.lessThan)) {
        const snapshot = _base.state.snapshot();
        const wasArrow = parseAsyncArrowWithTypeParameters();
        if (wasArrow && !_base.state.error) {
          return;
        }
        _base.state.restoreFromSnapshot(snapshot);
      }
      _expression.baseParseSubscripts.call(void 0, startTokenIndex, noCalls);
    }
    exports2.flowParseSubscripts = flowParseSubscripts;
    function parseAsyncArrowWithTypeParameters() {
      _base.state.scopeDepth++;
      const startTokenIndex = _base.state.tokens.length;
      _statement.parseFunctionParams.call(void 0);
      if (!_expression.parseArrow.call(void 0)) {
        return false;
      }
      _expression.parseArrowExpression.call(void 0, startTokenIndex);
      return true;
    }
    function flowParseEnumDeclaration() {
      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._enum);
      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;
      _expression.parseIdentifier.call(void 0);
      flowParseEnumBody();
    }
    function flowParseEnumBody() {
      if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._of)) {
        _index.next.call(void 0);
      }
      _util.expect.call(void 0, _types.TokenType.braceL);
      flowParseEnumMembers();
      _util.expect.call(void 0, _types.TokenType.braceR);
    }
    function flowParseEnumMembers() {
      while (!_index.match.call(void 0, _types.TokenType.braceR) && !_base.state.error) {
        if (_index.eat.call(void 0, _types.TokenType.ellipsis)) {
          break;
        }
        flowParseEnumMember();
        if (!_index.match.call(void 0, _types.TokenType.braceR)) {
          _util.expect.call(void 0, _types.TokenType.comma);
        }
      }
    }
    function flowParseEnumMember() {
      _expression.parseIdentifier.call(void 0);
      if (_index.eat.call(void 0, _types.TokenType.eq)) {
        _index.next.call(void 0);
      }
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/statement.js
var require_statement = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/statement.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _index = require_parser();
    var _flow = require_flow();
    var _typescript = require_typescript();
    var _tokenizer = require_tokenizer();
    var _keywords = require_keywords();
    var _state = require_state();
    var _types = require_types();
    var _charcodes = require_charcodes();
    var _base = require_base();
    var _expression = require_expression();
    var _lval = require_lval();
    var _util = require_util();
    function parseTopLevel() {
      parseBlockBody(_types.TokenType.eof);
      _base.state.scopes.push(new (0, _state.Scope)(0, _base.state.tokens.length, true));
      if (_base.state.scopeDepth !== 0) {
        throw new Error(`Invalid scope depth at end of file: ${_base.state.scopeDepth}`);
      }
      return new (0, _index.File)(_base.state.tokens, _base.state.scopes);
    }
    exports2.parseTopLevel = parseTopLevel;
    function parseStatement(declaration) {
      if (_base.isFlowEnabled) {
        if (_flow.flowTryParseStatement.call(void 0)) {
          return;
        }
      }
      if (_tokenizer.match.call(void 0, _types.TokenType.at)) {
        parseDecorators();
      }
      parseStatementContent(declaration);
    }
    exports2.parseStatement = parseStatement;
    function parseStatementContent(declaration) {
      if (_base.isTypeScriptEnabled) {
        if (_typescript.tsTryParseStatementContent.call(void 0)) {
          return;
        }
      }
      const starttype = _base.state.type;
      switch (starttype) {
        case _types.TokenType._break:
        case _types.TokenType._continue:
          parseBreakContinueStatement();
          return;
        case _types.TokenType._debugger:
          parseDebuggerStatement();
          return;
        case _types.TokenType._do:
          parseDoStatement();
          return;
        case _types.TokenType._for:
          parseForStatement();
          return;
        case _types.TokenType._function:
          if (_tokenizer.lookaheadType.call(void 0) === _types.TokenType.dot) break;
          if (!declaration) _util.unexpected.call(void 0);
          parseFunctionStatement();
          return;
        case _types.TokenType._class:
          if (!declaration) _util.unexpected.call(void 0);
          parseClass(true);
          return;
        case _types.TokenType._if:
          parseIfStatement();
          return;
        case _types.TokenType._return:
          parseReturnStatement();
          return;
        case _types.TokenType._switch:
          parseSwitchStatement();
          return;
        case _types.TokenType._throw:
          parseThrowStatement();
          return;
        case _types.TokenType._try:
          parseTryStatement();
          return;
        case _types.TokenType._let:
        case _types.TokenType._const:
          if (!declaration) _util.unexpected.call(void 0);
        case _types.TokenType._var:
          parseVarStatement(starttype !== _types.TokenType._var);
          return;
        case _types.TokenType._while:
          parseWhileStatement();
          return;
        case _types.TokenType.braceL:
          parseBlock();
          return;
        case _types.TokenType.semi:
          parseEmptyStatement();
          return;
        case _types.TokenType._export:
        case _types.TokenType._import: {
          const nextType = _tokenizer.lookaheadType.call(void 0);
          if (nextType === _types.TokenType.parenL || nextType === _types.TokenType.dot) {
            break;
          }
          _tokenizer.next.call(void 0);
          if (starttype === _types.TokenType._import) {
            parseImport();
          } else {
            parseExport();
          }
          return;
        }
        case _types.TokenType.name:
          if (_base.state.contextualKeyword === _keywords.ContextualKeyword._async) {
            const functionStart = _base.state.start;
            const snapshot = _base.state.snapshot();
            _tokenizer.next.call(void 0);
            if (_tokenizer.match.call(void 0, _types.TokenType._function) && !_util.canInsertSemicolon.call(void 0)) {
              _util.expect.call(void 0, _types.TokenType._function);
              parseFunction(functionStart, true);
              return;
            } else {
              _base.state.restoreFromSnapshot(snapshot);
            }
          } else if (_base.state.contextualKeyword === _keywords.ContextualKeyword._using && !_util.hasFollowingLineBreak.call(void 0) && // Statements like `using[0]` and `using in foo` aren't actual using
          // declarations.
          _tokenizer.lookaheadType.call(void 0) === _types.TokenType.name) {
            parseVarStatement(true);
            return;
          } else if (startsAwaitUsing()) {
            _util.expectContextual.call(void 0, _keywords.ContextualKeyword._await);
            parseVarStatement(true);
            return;
          }
        default:
          break;
      }
      const initialTokensLength = _base.state.tokens.length;
      _expression.parseExpression.call(void 0);
      let simpleName = null;
      if (_base.state.tokens.length === initialTokensLength + 1) {
        const token = _base.state.tokens[_base.state.tokens.length - 1];
        if (token.type === _types.TokenType.name) {
          simpleName = token.contextualKeyword;
        }
      }
      if (simpleName == null) {
        _util.semicolon.call(void 0);
        return;
      }
      if (_tokenizer.eat.call(void 0, _types.TokenType.colon)) {
        parseLabeledStatement();
      } else {
        parseIdentifierStatement(simpleName);
      }
    }
    function startsAwaitUsing() {
      if (!_util.isContextual.call(void 0, _keywords.ContextualKeyword._await)) {
        return false;
      }
      const snapshot = _base.state.snapshot();
      _tokenizer.next.call(void 0);
      if (!_util.isContextual.call(void 0, _keywords.ContextualKeyword._using) || _util.hasPrecedingLineBreak.call(void 0)) {
        _base.state.restoreFromSnapshot(snapshot);
        return false;
      }
      _tokenizer.next.call(void 0);
      if (!_tokenizer.match.call(void 0, _types.TokenType.name) || _util.hasPrecedingLineBreak.call(void 0)) {
        _base.state.restoreFromSnapshot(snapshot);
        return false;
      }
      _base.state.restoreFromSnapshot(snapshot);
      return true;
    }
    function parseDecorators() {
      while (_tokenizer.match.call(void 0, _types.TokenType.at)) {
        parseDecorator();
      }
    }
    exports2.parseDecorators = parseDecorators;
    function parseDecorator() {
      _tokenizer.next.call(void 0);
      if (_tokenizer.eat.call(void 0, _types.TokenType.parenL)) {
        _expression.parseExpression.call(void 0);
        _util.expect.call(void 0, _types.TokenType.parenR);
      } else {
        _expression.parseIdentifier.call(void 0);
        while (_tokenizer.eat.call(void 0, _types.TokenType.dot)) {
          _expression.parseIdentifier.call(void 0);
        }
        parseMaybeDecoratorArguments();
      }
    }
    function parseMaybeDecoratorArguments() {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsParseMaybeDecoratorArguments.call(void 0);
      } else {
        baseParseMaybeDecoratorArguments();
      }
    }
    function baseParseMaybeDecoratorArguments() {
      if (_tokenizer.eat.call(void 0, _types.TokenType.parenL)) {
        _expression.parseCallExpressionArguments.call(void 0);
      }
    }
    exports2.baseParseMaybeDecoratorArguments = baseParseMaybeDecoratorArguments;
    function parseBreakContinueStatement() {
      _tokenizer.next.call(void 0);
      if (!_util.isLineTerminator.call(void 0)) {
        _expression.parseIdentifier.call(void 0);
        _util.semicolon.call(void 0);
      }
    }
    function parseDebuggerStatement() {
      _tokenizer.next.call(void 0);
      _util.semicolon.call(void 0);
    }
    function parseDoStatement() {
      _tokenizer.next.call(void 0);
      parseStatement(false);
      _util.expect.call(void 0, _types.TokenType._while);
      _expression.parseParenExpression.call(void 0);
      _tokenizer.eat.call(void 0, _types.TokenType.semi);
    }
    function parseForStatement() {
      _base.state.scopeDepth++;
      const startTokenIndex = _base.state.tokens.length;
      parseAmbiguousForStatement();
      const endTokenIndex = _base.state.tokens.length;
      _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, false));
      _base.state.scopeDepth--;
    }
    function isUsingInLoop() {
      if (!_util.isContextual.call(void 0, _keywords.ContextualKeyword._using)) {
        return false;
      }
      if (_util.isLookaheadContextual.call(void 0, _keywords.ContextualKeyword._of)) {
        return false;
      }
      return true;
    }
    function parseAmbiguousForStatement() {
      _tokenizer.next.call(void 0);
      let forAwait = false;
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._await)) {
        forAwait = true;
        _tokenizer.next.call(void 0);
      }
      _util.expect.call(void 0, _types.TokenType.parenL);
      if (_tokenizer.match.call(void 0, _types.TokenType.semi)) {
        if (forAwait) {
          _util.unexpected.call(void 0);
        }
        parseFor();
        return;
      }
      const isAwaitUsing = startsAwaitUsing();
      if (isAwaitUsing || _tokenizer.match.call(void 0, _types.TokenType._var) || _tokenizer.match.call(void 0, _types.TokenType._let) || _tokenizer.match.call(void 0, _types.TokenType._const) || isUsingInLoop()) {
        if (isAwaitUsing) {
          _util.expectContextual.call(void 0, _keywords.ContextualKeyword._await);
        }
        _tokenizer.next.call(void 0);
        parseVar(true, _base.state.type !== _types.TokenType._var);
        if (_tokenizer.match.call(void 0, _types.TokenType._in) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._of)) {
          parseForIn(forAwait);
          return;
        }
        parseFor();
        return;
      }
      _expression.parseExpression.call(void 0, true);
      if (_tokenizer.match.call(void 0, _types.TokenType._in) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._of)) {
        parseForIn(forAwait);
        return;
      }
      if (forAwait) {
        _util.unexpected.call(void 0);
      }
      parseFor();
    }
    function parseFunctionStatement() {
      const functionStart = _base.state.start;
      _tokenizer.next.call(void 0);
      parseFunction(functionStart, true);
    }
    function parseIfStatement() {
      _tokenizer.next.call(void 0);
      _expression.parseParenExpression.call(void 0);
      parseStatement(false);
      if (_tokenizer.eat.call(void 0, _types.TokenType._else)) {
        parseStatement(false);
      }
    }
    function parseReturnStatement() {
      _tokenizer.next.call(void 0);
      if (!_util.isLineTerminator.call(void 0)) {
        _expression.parseExpression.call(void 0);
        _util.semicolon.call(void 0);
      }
    }
    function parseSwitchStatement() {
      _tokenizer.next.call(void 0);
      _expression.parseParenExpression.call(void 0);
      _base.state.scopeDepth++;
      const startTokenIndex = _base.state.tokens.length;
      _util.expect.call(void 0, _types.TokenType.braceL);
      while (!_tokenizer.match.call(void 0, _types.TokenType.braceR) && !_base.state.error) {
        if (_tokenizer.match.call(void 0, _types.TokenType._case) || _tokenizer.match.call(void 0, _types.TokenType._default)) {
          const isCase = _tokenizer.match.call(void 0, _types.TokenType._case);
          _tokenizer.next.call(void 0);
          if (isCase) {
            _expression.parseExpression.call(void 0);
          }
          _util.expect.call(void 0, _types.TokenType.colon);
        } else {
          parseStatement(true);
        }
      }
      _tokenizer.next.call(void 0);
      const endTokenIndex = _base.state.tokens.length;
      _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, false));
      _base.state.scopeDepth--;
    }
    function parseThrowStatement() {
      _tokenizer.next.call(void 0);
      _expression.parseExpression.call(void 0);
      _util.semicolon.call(void 0);
    }
    function parseCatchClauseParam() {
      _lval.parseBindingAtom.call(
        void 0,
        true
        /* isBlockScope */
      );
      if (_base.isTypeScriptEnabled) {
        _typescript.tsTryParseTypeAnnotation.call(void 0);
      }
    }
    function parseTryStatement() {
      _tokenizer.next.call(void 0);
      parseBlock();
      if (_tokenizer.match.call(void 0, _types.TokenType._catch)) {
        _tokenizer.next.call(void 0);
        let catchBindingStartTokenIndex = null;
        if (_tokenizer.match.call(void 0, _types.TokenType.parenL)) {
          _base.state.scopeDepth++;
          catchBindingStartTokenIndex = _base.state.tokens.length;
          _util.expect.call(void 0, _types.TokenType.parenL);
          parseCatchClauseParam();
          _util.expect.call(void 0, _types.TokenType.parenR);
        }
        parseBlock();
        if (catchBindingStartTokenIndex != null) {
          const endTokenIndex = _base.state.tokens.length;
          _base.state.scopes.push(new (0, _state.Scope)(catchBindingStartTokenIndex, endTokenIndex, false));
          _base.state.scopeDepth--;
        }
      }
      if (_tokenizer.eat.call(void 0, _types.TokenType._finally)) {
        parseBlock();
      }
    }
    function parseVarStatement(isBlockScope) {
      _tokenizer.next.call(void 0);
      parseVar(false, isBlockScope);
      _util.semicolon.call(void 0);
    }
    exports2.parseVarStatement = parseVarStatement;
    function parseWhileStatement() {
      _tokenizer.next.call(void 0);
      _expression.parseParenExpression.call(void 0);
      parseStatement(false);
    }
    function parseEmptyStatement() {
      _tokenizer.next.call(void 0);
    }
    function parseLabeledStatement() {
      parseStatement(true);
    }
    function parseIdentifierStatement(contextualKeyword) {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsParseIdentifierStatement.call(void 0, contextualKeyword);
      } else if (_base.isFlowEnabled) {
        _flow.flowParseIdentifierStatement.call(void 0, contextualKeyword);
      } else {
        _util.semicolon.call(void 0);
      }
    }
    function parseBlock(isFunctionScope = false, contextId = 0) {
      const startTokenIndex = _base.state.tokens.length;
      _base.state.scopeDepth++;
      _util.expect.call(void 0, _types.TokenType.braceL);
      if (contextId) {
        _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
      }
      parseBlockBody(_types.TokenType.braceR);
      if (contextId) {
        _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
      }
      const endTokenIndex = _base.state.tokens.length;
      _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, isFunctionScope));
      _base.state.scopeDepth--;
    }
    exports2.parseBlock = parseBlock;
    function parseBlockBody(end) {
      while (!_tokenizer.eat.call(void 0, end) && !_base.state.error) {
        parseStatement(true);
      }
    }
    exports2.parseBlockBody = parseBlockBody;
    function parseFor() {
      _util.expect.call(void 0, _types.TokenType.semi);
      if (!_tokenizer.match.call(void 0, _types.TokenType.semi)) {
        _expression.parseExpression.call(void 0);
      }
      _util.expect.call(void 0, _types.TokenType.semi);
      if (!_tokenizer.match.call(void 0, _types.TokenType.parenR)) {
        _expression.parseExpression.call(void 0);
      }
      _util.expect.call(void 0, _types.TokenType.parenR);
      parseStatement(false);
    }
    function parseForIn(forAwait) {
      if (forAwait) {
        _util.eatContextual.call(void 0, _keywords.ContextualKeyword._of);
      } else {
        _tokenizer.next.call(void 0);
      }
      _expression.parseExpression.call(void 0);
      _util.expect.call(void 0, _types.TokenType.parenR);
      parseStatement(false);
    }
    function parseVar(isFor, isBlockScope) {
      while (true) {
        parseVarHead(isBlockScope);
        if (_tokenizer.eat.call(void 0, _types.TokenType.eq)) {
          const eqIndex = _base.state.tokens.length - 1;
          _expression.parseMaybeAssign.call(void 0, isFor);
          _base.state.tokens[eqIndex].rhsEndIndex = _base.state.tokens.length;
        }
        if (!_tokenizer.eat.call(void 0, _types.TokenType.comma)) {
          break;
        }
      }
    }
    function parseVarHead(isBlockScope) {
      _lval.parseBindingAtom.call(void 0, isBlockScope);
      if (_base.isTypeScriptEnabled) {
        _typescript.tsAfterParseVarHead.call(void 0);
      } else if (_base.isFlowEnabled) {
        _flow.flowAfterParseVarHead.call(void 0);
      }
    }
    function parseFunction(functionStart, isStatement, optionalId = false) {
      if (_tokenizer.match.call(void 0, _types.TokenType.star)) {
        _tokenizer.next.call(void 0);
      }
      if (isStatement && !optionalId && !_tokenizer.match.call(void 0, _types.TokenType.name) && !_tokenizer.match.call(void 0, _types.TokenType._yield)) {
        _util.unexpected.call(void 0);
      }
      let nameScopeStartTokenIndex = null;
      if (_tokenizer.match.call(void 0, _types.TokenType.name)) {
        if (!isStatement) {
          nameScopeStartTokenIndex = _base.state.tokens.length;
          _base.state.scopeDepth++;
        }
        _lval.parseBindingIdentifier.call(void 0, false);
      }
      const startTokenIndex = _base.state.tokens.length;
      _base.state.scopeDepth++;
      parseFunctionParams();
      _expression.parseFunctionBodyAndFinish.call(void 0, functionStart);
      const endTokenIndex = _base.state.tokens.length;
      _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, true));
      _base.state.scopeDepth--;
      if (nameScopeStartTokenIndex !== null) {
        _base.state.scopes.push(new (0, _state.Scope)(nameScopeStartTokenIndex, endTokenIndex, true));
        _base.state.scopeDepth--;
      }
    }
    exports2.parseFunction = parseFunction;
    function parseFunctionParams(allowModifiers = false, funcContextId = 0) {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsStartParseFunctionParams.call(void 0);
      } else if (_base.isFlowEnabled) {
        _flow.flowStartParseFunctionParams.call(void 0);
      }
      _util.expect.call(void 0, _types.TokenType.parenL);
      if (funcContextId) {
        _base.state.tokens[_base.state.tokens.length - 1].contextId = funcContextId;
      }
      _lval.parseBindingList.call(
        void 0,
        _types.TokenType.parenR,
        false,
        false,
        allowModifiers,
        funcContextId
      );
      if (funcContextId) {
        _base.state.tokens[_base.state.tokens.length - 1].contextId = funcContextId;
      }
    }
    exports2.parseFunctionParams = parseFunctionParams;
    function parseClass(isStatement, optionalId = false) {
      const contextId = _base.getNextContextId.call(void 0);
      _tokenizer.next.call(void 0);
      _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
      _base.state.tokens[_base.state.tokens.length - 1].isExpression = !isStatement;
      let nameScopeStartTokenIndex = null;
      if (!isStatement) {
        nameScopeStartTokenIndex = _base.state.tokens.length;
        _base.state.scopeDepth++;
      }
      parseClassId(isStatement, optionalId);
      parseClassSuper();
      const openBraceIndex = _base.state.tokens.length;
      parseClassBody(contextId);
      if (_base.state.error) {
        return;
      }
      _base.state.tokens[openBraceIndex].contextId = contextId;
      _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
      if (nameScopeStartTokenIndex !== null) {
        const endTokenIndex = _base.state.tokens.length;
        _base.state.scopes.push(new (0, _state.Scope)(nameScopeStartTokenIndex, endTokenIndex, false));
        _base.state.scopeDepth--;
      }
    }
    exports2.parseClass = parseClass;
    function isClassProperty() {
      return _tokenizer.match.call(void 0, _types.TokenType.eq) || _tokenizer.match.call(void 0, _types.TokenType.semi) || _tokenizer.match.call(void 0, _types.TokenType.braceR) || _tokenizer.match.call(void 0, _types.TokenType.bang) || _tokenizer.match.call(void 0, _types.TokenType.colon);
    }
    function isClassMethod() {
      return _tokenizer.match.call(void 0, _types.TokenType.parenL) || _tokenizer.match.call(void 0, _types.TokenType.lessThan);
    }
    function parseClassBody(classContextId) {
      _util.expect.call(void 0, _types.TokenType.braceL);
      while (!_tokenizer.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {
        if (_tokenizer.eat.call(void 0, _types.TokenType.semi)) {
          continue;
        }
        if (_tokenizer.match.call(void 0, _types.TokenType.at)) {
          parseDecorator();
          continue;
        }
        const memberStart = _base.state.start;
        parseClassMember(memberStart, classContextId);
      }
    }
    function parseClassMember(memberStart, classContextId) {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsParseModifiers.call(void 0, [
          _keywords.ContextualKeyword._declare,
          _keywords.ContextualKeyword._public,
          _keywords.ContextualKeyword._protected,
          _keywords.ContextualKeyword._private,
          _keywords.ContextualKeyword._override
        ]);
      }
      let isStatic = false;
      if (_tokenizer.match.call(void 0, _types.TokenType.name) && _base.state.contextualKeyword === _keywords.ContextualKeyword._static) {
        _expression.parseIdentifier.call(void 0);
        if (isClassMethod()) {
          parseClassMethod(
            memberStart,
            /* isConstructor */
            false
          );
          return;
        } else if (isClassProperty()) {
          parseClassProperty();
          return;
        }
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._static;
        isStatic = true;
        if (_tokenizer.match.call(void 0, _types.TokenType.braceL)) {
          _base.state.tokens[_base.state.tokens.length - 1].contextId = classContextId;
          parseBlock();
          return;
        }
      }
      parseClassMemberWithIsStatic(memberStart, isStatic, classContextId);
    }
    function parseClassMemberWithIsStatic(memberStart, isStatic, classContextId) {
      if (_base.isTypeScriptEnabled) {
        if (_typescript.tsTryParseClassMemberWithIsStatic.call(void 0, isStatic)) {
          return;
        }
      }
      if (_tokenizer.eat.call(void 0, _types.TokenType.star)) {
        parseClassPropertyName(classContextId);
        parseClassMethod(
          memberStart,
          /* isConstructor */
          false
        );
        return;
      }
      parseClassPropertyName(classContextId);
      let isConstructor = false;
      const token = _base.state.tokens[_base.state.tokens.length - 1];
      if (token.contextualKeyword === _keywords.ContextualKeyword._constructor) {
        isConstructor = true;
      }
      parsePostMemberNameModifiers();
      if (isClassMethod()) {
        parseClassMethod(memberStart, isConstructor);
      } else if (isClassProperty()) {
        parseClassProperty();
      } else if (token.contextualKeyword === _keywords.ContextualKeyword._async && !_util.isLineTerminator.call(void 0)) {
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._async;
        const isGenerator = _tokenizer.match.call(void 0, _types.TokenType.star);
        if (isGenerator) {
          _tokenizer.next.call(void 0);
        }
        parseClassPropertyName(classContextId);
        parsePostMemberNameModifiers();
        parseClassMethod(
          memberStart,
          false
          /* isConstructor */
        );
      } else if ((token.contextualKeyword === _keywords.ContextualKeyword._get || token.contextualKeyword === _keywords.ContextualKeyword._set) && !(_util.isLineTerminator.call(void 0) && _tokenizer.match.call(void 0, _types.TokenType.star))) {
        if (token.contextualKeyword === _keywords.ContextualKeyword._get) {
          _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._get;
        } else {
          _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._set;
        }
        parseClassPropertyName(classContextId);
        parseClassMethod(
          memberStart,
          /* isConstructor */
          false
        );
      } else if (token.contextualKeyword === _keywords.ContextualKeyword._accessor && !_util.isLineTerminator.call(void 0)) {
        parseClassPropertyName(classContextId);
        parseClassProperty();
      } else if (_util.isLineTerminator.call(void 0)) {
        parseClassProperty();
      } else {
        _util.unexpected.call(void 0);
      }
    }
    function parseClassMethod(functionStart, isConstructor) {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsTryParseTypeParameters.call(void 0);
      } else if (_base.isFlowEnabled) {
        if (_tokenizer.match.call(void 0, _types.TokenType.lessThan)) {
          _flow.flowParseTypeParameterDeclaration.call(void 0);
        }
      }
      _expression.parseMethod.call(void 0, functionStart, isConstructor);
    }
    function parseClassPropertyName(classContextId) {
      _expression.parsePropertyName.call(void 0, classContextId);
    }
    exports2.parseClassPropertyName = parseClassPropertyName;
    function parsePostMemberNameModifiers() {
      if (_base.isTypeScriptEnabled) {
        const oldIsType = _tokenizer.pushTypeContext.call(void 0, 0);
        _tokenizer.eat.call(void 0, _types.TokenType.question);
        _tokenizer.popTypeContext.call(void 0, oldIsType);
      }
    }
    exports2.parsePostMemberNameModifiers = parsePostMemberNameModifiers;
    function parseClassProperty() {
      if (_base.isTypeScriptEnabled) {
        _tokenizer.eatTypeToken.call(void 0, _types.TokenType.bang);
        _typescript.tsTryParseTypeAnnotation.call(void 0);
      } else if (_base.isFlowEnabled) {
        if (_tokenizer.match.call(void 0, _types.TokenType.colon)) {
          _flow.flowParseTypeAnnotation.call(void 0);
        }
      }
      if (_tokenizer.match.call(void 0, _types.TokenType.eq)) {
        const equalsTokenIndex = _base.state.tokens.length;
        _tokenizer.next.call(void 0);
        _expression.parseMaybeAssign.call(void 0);
        _base.state.tokens[equalsTokenIndex].rhsEndIndex = _base.state.tokens.length;
      }
      _util.semicolon.call(void 0);
    }
    exports2.parseClassProperty = parseClassProperty;
    function parseClassId(isStatement, optionalId = false) {
      if (_base.isTypeScriptEnabled && (!isStatement || optionalId) && _util.isContextual.call(void 0, _keywords.ContextualKeyword._implements)) {
        return;
      }
      if (_tokenizer.match.call(void 0, _types.TokenType.name)) {
        _lval.parseBindingIdentifier.call(void 0, true);
      }
      if (_base.isTypeScriptEnabled) {
        _typescript.tsTryParseTypeParameters.call(void 0);
      } else if (_base.isFlowEnabled) {
        if (_tokenizer.match.call(void 0, _types.TokenType.lessThan)) {
          _flow.flowParseTypeParameterDeclaration.call(void 0);
        }
      }
    }
    function parseClassSuper() {
      let hasSuper = false;
      if (_tokenizer.eat.call(void 0, _types.TokenType._extends)) {
        _expression.parseExprSubscripts.call(void 0);
        hasSuper = true;
      } else {
        hasSuper = false;
      }
      if (_base.isTypeScriptEnabled) {
        _typescript.tsAfterParseClassSuper.call(void 0, hasSuper);
      } else if (_base.isFlowEnabled) {
        _flow.flowAfterParseClassSuper.call(void 0, hasSuper);
      }
    }
    function parseExport() {
      const exportIndex = _base.state.tokens.length - 1;
      if (_base.isTypeScriptEnabled) {
        if (_typescript.tsTryParseExport.call(void 0)) {
          return;
        }
      }
      if (shouldParseExportStar()) {
        parseExportStar();
      } else if (isExportDefaultSpecifier()) {
        _expression.parseIdentifier.call(void 0);
        if (_tokenizer.match.call(void 0, _types.TokenType.comma) && _tokenizer.lookaheadType.call(void 0) === _types.TokenType.star) {
          _util.expect.call(void 0, _types.TokenType.comma);
          _util.expect.call(void 0, _types.TokenType.star);
          _util.expectContextual.call(void 0, _keywords.ContextualKeyword._as);
          _expression.parseIdentifier.call(void 0);
        } else {
          parseExportSpecifiersMaybe();
        }
        parseExportFrom();
      } else if (_tokenizer.eat.call(void 0, _types.TokenType._default)) {
        parseExportDefaultExpression();
      } else if (shouldParseExportDeclaration()) {
        parseExportDeclaration();
      } else {
        parseExportSpecifiers();
        parseExportFrom();
      }
      _base.state.tokens[exportIndex].rhsEndIndex = _base.state.tokens.length;
    }
    exports2.parseExport = parseExport;
    function parseExportDefaultExpression() {
      if (_base.isTypeScriptEnabled) {
        if (_typescript.tsTryParseExportDefaultExpression.call(void 0)) {
          return;
        }
      }
      if (_base.isFlowEnabled) {
        if (_flow.flowTryParseExportDefaultExpression.call(void 0)) {
          return;
        }
      }
      const functionStart = _base.state.start;
      if (_tokenizer.eat.call(void 0, _types.TokenType._function)) {
        parseFunction(functionStart, true, true);
      } else if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._async) && _tokenizer.lookaheadType.call(void 0) === _types.TokenType._function) {
        _util.eatContextual.call(void 0, _keywords.ContextualKeyword._async);
        _tokenizer.eat.call(void 0, _types.TokenType._function);
        parseFunction(functionStart, true, true);
      } else if (_tokenizer.match.call(void 0, _types.TokenType._class)) {
        parseClass(true, true);
      } else if (_tokenizer.match.call(void 0, _types.TokenType.at)) {
        parseDecorators();
        parseClass(true, true);
      } else {
        _expression.parseMaybeAssign.call(void 0);
        _util.semicolon.call(void 0);
      }
    }
    function parseExportDeclaration() {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsParseExportDeclaration.call(void 0);
      } else if (_base.isFlowEnabled) {
        _flow.flowParseExportDeclaration.call(void 0);
      } else {
        parseStatement(true);
      }
    }
    function isExportDefaultSpecifier() {
      if (_base.isTypeScriptEnabled && _typescript.tsIsDeclarationStart.call(void 0)) {
        return false;
      } else if (_base.isFlowEnabled && _flow.flowShouldDisallowExportDefaultSpecifier.call(void 0)) {
        return false;
      }
      if (_tokenizer.match.call(void 0, _types.TokenType.name)) {
        return _base.state.contextualKeyword !== _keywords.ContextualKeyword._async;
      }
      if (!_tokenizer.match.call(void 0, _types.TokenType._default)) {
        return false;
      }
      const _next = _tokenizer.nextTokenStart.call(void 0);
      const lookahead = _tokenizer.lookaheadTypeAndKeyword.call(void 0);
      const hasFrom = lookahead.type === _types.TokenType.name && lookahead.contextualKeyword === _keywords.ContextualKeyword._from;
      if (lookahead.type === _types.TokenType.comma) {
        return true;
      }
      if (hasFrom) {
        const nextAfterFrom = _base.input.charCodeAt(_tokenizer.nextTokenStartSince.call(void 0, _next + 4));
        return nextAfterFrom === _charcodes.charCodes.quotationMark || nextAfterFrom === _charcodes.charCodes.apostrophe;
      }
      return false;
    }
    function parseExportSpecifiersMaybe() {
      if (_tokenizer.eat.call(void 0, _types.TokenType.comma)) {
        parseExportSpecifiers();
      }
    }
    function parseExportFrom() {
      if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._from)) {
        _expression.parseExprAtom.call(void 0);
        maybeParseImportAttributes();
      }
      _util.semicolon.call(void 0);
    }
    exports2.parseExportFrom = parseExportFrom;
    function shouldParseExportStar() {
      if (_base.isFlowEnabled) {
        return _flow.flowShouldParseExportStar.call(void 0);
      } else {
        return _tokenizer.match.call(void 0, _types.TokenType.star);
      }
    }
    function parseExportStar() {
      if (_base.isFlowEnabled) {
        _flow.flowParseExportStar.call(void 0);
      } else {
        baseParseExportStar();
      }
    }
    function baseParseExportStar() {
      _util.expect.call(void 0, _types.TokenType.star);
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._as)) {
        parseExportNamespace();
      } else {
        parseExportFrom();
      }
    }
    exports2.baseParseExportStar = baseParseExportStar;
    function parseExportNamespace() {
      _tokenizer.next.call(void 0);
      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._as;
      _expression.parseIdentifier.call(void 0);
      parseExportSpecifiersMaybe();
      parseExportFrom();
    }
    function shouldParseExportDeclaration() {
      return _base.isTypeScriptEnabled && _typescript.tsIsDeclarationStart.call(void 0) || _base.isFlowEnabled && _flow.flowShouldParseExportDeclaration.call(void 0) || _base.state.type === _types.TokenType._var || _base.state.type === _types.TokenType._const || _base.state.type === _types.TokenType._let || _base.state.type === _types.TokenType._function || _base.state.type === _types.TokenType._class || _util.isContextual.call(void 0, _keywords.ContextualKeyword._async) || _tokenizer.match.call(void 0, _types.TokenType.at);
    }
    function parseExportSpecifiers() {
      let first = true;
      _util.expect.call(void 0, _types.TokenType.braceL);
      while (!_tokenizer.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {
        if (first) {
          first = false;
        } else {
          _util.expect.call(void 0, _types.TokenType.comma);
          if (_tokenizer.eat.call(void 0, _types.TokenType.braceR)) {
            break;
          }
        }
        parseExportSpecifier();
      }
    }
    exports2.parseExportSpecifiers = parseExportSpecifiers;
    function parseExportSpecifier() {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsParseExportSpecifier.call(void 0);
        return;
      }
      _expression.parseIdentifier.call(void 0);
      _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _tokenizer.IdentifierRole.ExportAccess;
      if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._as)) {
        _expression.parseIdentifier.call(void 0);
      }
    }
    function isImportReflection() {
      const snapshot = _base.state.snapshot();
      _util.expectContextual.call(void 0, _keywords.ContextualKeyword._module);
      if (_util.eatContextual.call(void 0, _keywords.ContextualKeyword._from)) {
        if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._from)) {
          _base.state.restoreFromSnapshot(snapshot);
          return true;
        } else {
          _base.state.restoreFromSnapshot(snapshot);
          return false;
        }
      } else if (_tokenizer.match.call(void 0, _types.TokenType.comma)) {
        _base.state.restoreFromSnapshot(snapshot);
        return false;
      } else {
        _base.state.restoreFromSnapshot(snapshot);
        return true;
      }
    }
    function parseMaybeImportReflection() {
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._module) && isImportReflection()) {
        _tokenizer.next.call(void 0);
      }
    }
    function parseImport() {
      if (_base.isTypeScriptEnabled && _tokenizer.match.call(void 0, _types.TokenType.name) && _tokenizer.lookaheadType.call(void 0) === _types.TokenType.eq) {
        _typescript.tsParseImportEqualsDeclaration.call(void 0);
        return;
      }
      if (_base.isTypeScriptEnabled && _util.isContextual.call(void 0, _keywords.ContextualKeyword._type)) {
        const lookahead = _tokenizer.lookaheadTypeAndKeyword.call(void 0);
        if (lookahead.type === _types.TokenType.name && lookahead.contextualKeyword !== _keywords.ContextualKeyword._from) {
          _util.expectContextual.call(void 0, _keywords.ContextualKeyword._type);
          if (_tokenizer.lookaheadType.call(void 0) === _types.TokenType.eq) {
            _typescript.tsParseImportEqualsDeclaration.call(void 0);
            return;
          }
        } else if (lookahead.type === _types.TokenType.star || lookahead.type === _types.TokenType.braceL) {
          _util.expectContextual.call(void 0, _keywords.ContextualKeyword._type);
        }
      }
      if (_tokenizer.match.call(void 0, _types.TokenType.string)) {
        _expression.parseExprAtom.call(void 0);
      } else {
        parseMaybeImportReflection();
        parseImportSpecifiers();
        _util.expectContextual.call(void 0, _keywords.ContextualKeyword._from);
        _expression.parseExprAtom.call(void 0);
      }
      maybeParseImportAttributes();
      _util.semicolon.call(void 0);
    }
    exports2.parseImport = parseImport;
    function shouldParseDefaultImport() {
      return _tokenizer.match.call(void 0, _types.TokenType.name);
    }
    function parseImportSpecifierLocal() {
      _lval.parseImportedIdentifier.call(void 0);
    }
    function parseImportSpecifiers() {
      if (_base.isFlowEnabled) {
        _flow.flowStartParseImportSpecifiers.call(void 0);
      }
      let first = true;
      if (shouldParseDefaultImport()) {
        parseImportSpecifierLocal();
        if (!_tokenizer.eat.call(void 0, _types.TokenType.comma)) return;
      }
      if (_tokenizer.match.call(void 0, _types.TokenType.star)) {
        _tokenizer.next.call(void 0);
        _util.expectContextual.call(void 0, _keywords.ContextualKeyword._as);
        parseImportSpecifierLocal();
        return;
      }
      _util.expect.call(void 0, _types.TokenType.braceL);
      while (!_tokenizer.eat.call(void 0, _types.TokenType.braceR) && !_base.state.error) {
        if (first) {
          first = false;
        } else {
          if (_tokenizer.eat.call(void 0, _types.TokenType.colon)) {
            _util.unexpected.call(
              void 0,
              "ES2015 named imports do not destructure. Use another statement for destructuring after the import."
            );
          }
          _util.expect.call(void 0, _types.TokenType.comma);
          if (_tokenizer.eat.call(void 0, _types.TokenType.braceR)) {
            break;
          }
        }
        parseImportSpecifier();
      }
    }
    function parseImportSpecifier() {
      if (_base.isTypeScriptEnabled) {
        _typescript.tsParseImportSpecifier.call(void 0);
        return;
      }
      if (_base.isFlowEnabled) {
        _flow.flowParseImportSpecifier.call(void 0);
        return;
      }
      _lval.parseImportedIdentifier.call(void 0);
      if (_util.isContextual.call(void 0, _keywords.ContextualKeyword._as)) {
        _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _tokenizer.IdentifierRole.ImportAccess;
        _tokenizer.next.call(void 0);
        _lval.parseImportedIdentifier.call(void 0);
      }
    }
    function maybeParseImportAttributes() {
      if (_tokenizer.match.call(void 0, _types.TokenType._with) || _util.isContextual.call(void 0, _keywords.ContextualKeyword._assert) && !_util.hasPrecedingLineBreak.call(void 0)) {
        _tokenizer.next.call(void 0);
        _expression.parseObj.call(void 0, false, false);
      }
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/index.js
var require_traverser = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/traverser/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _index = require_tokenizer();
    var _charcodes = require_charcodes();
    var _base = require_base();
    var _statement = require_statement();
    function parseFile() {
      if (_base.state.pos === 0 && _base.input.charCodeAt(0) === _charcodes.charCodes.numberSign && _base.input.charCodeAt(1) === _charcodes.charCodes.exclamationMark) {
        _index.skipLineComment.call(void 0, 2);
      }
      _index.nextToken.call(void 0);
      return _statement.parseTopLevel.call(void 0);
    }
    exports2.parseFile = parseFile;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/index.js
var require_parser = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/parser/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _base = require_base();
    var _index = require_traverser();
    var File = class {
      constructor(tokens, scopes) {
        this.tokens = tokens;
        this.scopes = scopes;
      }
    };
    exports2.File = File;
    function parse(input, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled) {
      if (isFlowEnabled && isTypeScriptEnabled) {
        throw new Error("Cannot combine flow and typescript plugins.");
      }
      _base.initParser.call(void 0, input, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);
      const result = _index.parseFile.call(void 0);
      if (_base.state.error) {
        throw _base.augmentError.call(void 0, _base.state.error);
      }
      return result;
    }
    exports2.parse = parse;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/isAsyncOperation.js
var require_isAsyncOperation = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/isAsyncOperation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _keywords = require_keywords();
    function isAsyncOperation(tokens) {
      let index = tokens.currentIndex();
      let depth = 0;
      const startToken = tokens.currentToken();
      do {
        const token = tokens.tokens[index];
        if (token.isOptionalChainStart) {
          depth++;
        }
        if (token.isOptionalChainEnd) {
          depth--;
        }
        depth += token.numNullishCoalesceStarts;
        depth -= token.numNullishCoalesceEnds;
        if (token.contextualKeyword === _keywords.ContextualKeyword._await && token.identifierRole == null && token.scopeDepth === startToken.scopeDepth) {
          return true;
        }
        index += 1;
      } while (depth > 0 && index < tokens.tokens.length);
      return false;
    }
    exports2.default = isAsyncOperation;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/TokenProcessor.js
var require_TokenProcessor = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/TokenProcessor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _types = require_types();
    var _isAsyncOperation = require_isAsyncOperation();
    var _isAsyncOperation2 = _interopRequireDefault(_isAsyncOperation);
    var TokenProcessor = class _TokenProcessor {
      __init() {
        this.resultCode = "";
      }
      // Array mapping input token index to optional string index position in the
      // output code.
      __init2() {
        this.resultMappings = new Array(this.tokens.length);
      }
      __init3() {
        this.tokenIndex = 0;
      }
      constructor(code, tokens, isFlowEnabled, disableESTransforms, helperManager) {
        ;
        this.code = code;
        this.tokens = tokens;
        this.isFlowEnabled = isFlowEnabled;
        this.disableESTransforms = disableESTransforms;
        this.helperManager = helperManager;
        _TokenProcessor.prototype.__init.call(this);
        _TokenProcessor.prototype.__init2.call(this);
        _TokenProcessor.prototype.__init3.call(this);
      }
      /**
       * Snapshot the token state in a way that can be restored later, useful for
       * things like lookahead.
       *
       * resultMappings do not need to be copied since in all use cases, they will
       * be overwritten anyway after restore.
       */
      snapshot() {
        return {
          resultCode: this.resultCode,
          tokenIndex: this.tokenIndex
        };
      }
      restoreToSnapshot(snapshot) {
        this.resultCode = snapshot.resultCode;
        this.tokenIndex = snapshot.tokenIndex;
      }
      /**
       * Remove and return the code generated since the snapshot, leaving the
       * current token position in-place. Unlike most TokenProcessor operations,
       * this operation can result in input/output line number mismatches because
       * the removed code may contain newlines, so this operation should be used
       * sparingly.
       */
      dangerouslyGetAndRemoveCodeSinceSnapshot(snapshot) {
        const result = this.resultCode.slice(snapshot.resultCode.length);
        this.resultCode = snapshot.resultCode;
        return result;
      }
      reset() {
        this.resultCode = "";
        this.resultMappings = new Array(this.tokens.length);
        this.tokenIndex = 0;
      }
      matchesContextualAtIndex(index, contextualKeyword) {
        return this.matches1AtIndex(index, _types.TokenType.name) && this.tokens[index].contextualKeyword === contextualKeyword;
      }
      identifierNameAtIndex(index) {
        return this.identifierNameForToken(this.tokens[index]);
      }
      identifierNameAtRelativeIndex(relativeIndex) {
        return this.identifierNameForToken(this.tokenAtRelativeIndex(relativeIndex));
      }
      identifierName() {
        return this.identifierNameForToken(this.currentToken());
      }
      identifierNameForToken(token) {
        return this.code.slice(token.start, token.end);
      }
      rawCodeForToken(token) {
        return this.code.slice(token.start, token.end);
      }
      stringValueAtIndex(index) {
        return this.stringValueForToken(this.tokens[index]);
      }
      stringValue() {
        return this.stringValueForToken(this.currentToken());
      }
      stringValueForToken(token) {
        return this.code.slice(token.start + 1, token.end - 1);
      }
      matches1AtIndex(index, t1) {
        return this.tokens[index].type === t1;
      }
      matches2AtIndex(index, t1, t2) {
        return this.tokens[index].type === t1 && this.tokens[index + 1].type === t2;
      }
      matches3AtIndex(index, t1, t2, t3) {
        return this.tokens[index].type === t1 && this.tokens[index + 1].type === t2 && this.tokens[index + 2].type === t3;
      }
      matches1(t1) {
        return this.tokens[this.tokenIndex].type === t1;
      }
      matches2(t1, t2) {
        return this.tokens[this.tokenIndex].type === t1 && this.tokens[this.tokenIndex + 1].type === t2;
      }
      matches3(t1, t2, t3) {
        return this.tokens[this.tokenIndex].type === t1 && this.tokens[this.tokenIndex + 1].type === t2 && this.tokens[this.tokenIndex + 2].type === t3;
      }
      matches4(t1, t2, t3, t4) {
        return this.tokens[this.tokenIndex].type === t1 && this.tokens[this.tokenIndex + 1].type === t2 && this.tokens[this.tokenIndex + 2].type === t3 && this.tokens[this.tokenIndex + 3].type === t4;
      }
      matches5(t1, t2, t3, t4, t5) {
        return this.tokens[this.tokenIndex].type === t1 && this.tokens[this.tokenIndex + 1].type === t2 && this.tokens[this.tokenIndex + 2].type === t3 && this.tokens[this.tokenIndex + 3].type === t4 && this.tokens[this.tokenIndex + 4].type === t5;
      }
      matchesContextual(contextualKeyword) {
        return this.matchesContextualAtIndex(this.tokenIndex, contextualKeyword);
      }
      matchesContextIdAndLabel(type, contextId) {
        return this.matches1(type) && this.currentToken().contextId === contextId;
      }
      previousWhitespaceAndComments() {
        let whitespaceAndComments = this.code.slice(
          this.tokenIndex > 0 ? this.tokens[this.tokenIndex - 1].end : 0,
          this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex].start : this.code.length
        );
        if (this.isFlowEnabled) {
          whitespaceAndComments = whitespaceAndComments.replace(/@flow/g, "");
        }
        return whitespaceAndComments;
      }
      replaceToken(newCode) {
        this.resultCode += this.previousWhitespaceAndComments();
        this.appendTokenPrefix();
        this.resultMappings[this.tokenIndex] = this.resultCode.length;
        this.resultCode += newCode;
        this.appendTokenSuffix();
        this.tokenIndex++;
      }
      replaceTokenTrimmingLeftWhitespace(newCode) {
        this.resultCode += this.previousWhitespaceAndComments().replace(/[^\r\n]/g, "");
        this.appendTokenPrefix();
        this.resultMappings[this.tokenIndex] = this.resultCode.length;
        this.resultCode += newCode;
        this.appendTokenSuffix();
        this.tokenIndex++;
      }
      removeInitialToken() {
        this.replaceToken("");
      }
      removeToken() {
        this.replaceTokenTrimmingLeftWhitespace("");
      }
      /**
       * Remove all code until the next }, accounting for balanced braces.
       */
      removeBalancedCode() {
        let braceDepth = 0;
        while (!this.isAtEnd()) {
          if (this.matches1(_types.TokenType.braceL)) {
            braceDepth++;
          } else if (this.matches1(_types.TokenType.braceR)) {
            if (braceDepth === 0) {
              return;
            }
            braceDepth--;
          }
          this.removeToken();
        }
      }
      copyExpectedToken(tokenType) {
        if (this.tokens[this.tokenIndex].type !== tokenType) {
          throw new Error(`Expected token ${tokenType}`);
        }
        this.copyToken();
      }
      copyToken() {
        this.resultCode += this.previousWhitespaceAndComments();
        this.appendTokenPrefix();
        this.resultMappings[this.tokenIndex] = this.resultCode.length;
        this.resultCode += this.code.slice(
          this.tokens[this.tokenIndex].start,
          this.tokens[this.tokenIndex].end
        );
        this.appendTokenSuffix();
        this.tokenIndex++;
      }
      copyTokenWithPrefix(prefix) {
        this.resultCode += this.previousWhitespaceAndComments();
        this.appendTokenPrefix();
        this.resultCode += prefix;
        this.resultMappings[this.tokenIndex] = this.resultCode.length;
        this.resultCode += this.code.slice(
          this.tokens[this.tokenIndex].start,
          this.tokens[this.tokenIndex].end
        );
        this.appendTokenSuffix();
        this.tokenIndex++;
      }
      appendTokenPrefix() {
        const token = this.currentToken();
        if (token.numNullishCoalesceStarts || token.isOptionalChainStart) {
          token.isAsyncOperation = _isAsyncOperation2.default.call(void 0, this);
        }
        if (this.disableESTransforms) {
          return;
        }
        if (token.numNullishCoalesceStarts) {
          for (let i = 0; i < token.numNullishCoalesceStarts; i++) {
            if (token.isAsyncOperation) {
              this.resultCode += "await ";
              this.resultCode += this.helperManager.getHelperName("asyncNullishCoalesce");
            } else {
              this.resultCode += this.helperManager.getHelperName("nullishCoalesce");
            }
            this.resultCode += "(";
          }
        }
        if (token.isOptionalChainStart) {
          if (token.isAsyncOperation) {
            this.resultCode += "await ";
          }
          if (this.tokenIndex > 0 && this.tokenAtRelativeIndex(-1).type === _types.TokenType._delete) {
            if (token.isAsyncOperation) {
              this.resultCode += this.helperManager.getHelperName("asyncOptionalChainDelete");
            } else {
              this.resultCode += this.helperManager.getHelperName("optionalChainDelete");
            }
          } else if (token.isAsyncOperation) {
            this.resultCode += this.helperManager.getHelperName("asyncOptionalChain");
          } else {
            this.resultCode += this.helperManager.getHelperName("optionalChain");
          }
          this.resultCode += "([";
        }
      }
      appendTokenSuffix() {
        const token = this.currentToken();
        if (token.isOptionalChainEnd && !this.disableESTransforms) {
          this.resultCode += "])";
        }
        if (token.numNullishCoalesceEnds && !this.disableESTransforms) {
          for (let i = 0; i < token.numNullishCoalesceEnds; i++) {
            this.resultCode += "))";
          }
        }
      }
      appendCode(code) {
        this.resultCode += code;
      }
      currentToken() {
        return this.tokens[this.tokenIndex];
      }
      currentTokenCode() {
        const token = this.currentToken();
        return this.code.slice(token.start, token.end);
      }
      tokenAtRelativeIndex(relativeIndex) {
        return this.tokens[this.tokenIndex + relativeIndex];
      }
      currentIndex() {
        return this.tokenIndex;
      }
      /**
       * Move to the next token. Only suitable in preprocessing steps. When
       * generating new code, you should use copyToken or removeToken.
       */
      nextToken() {
        if (this.tokenIndex === this.tokens.length) {
          throw new Error("Unexpectedly reached end of input.");
        }
        this.tokenIndex++;
      }
      previousToken() {
        this.tokenIndex--;
      }
      finish() {
        if (this.tokenIndex !== this.tokens.length) {
          throw new Error("Tried to finish processing tokens before reaching the end.");
        }
        this.resultCode += this.previousWhitespaceAndComments();
        return { code: this.resultCode, mappings: this.resultMappings };
      }
      isAtEnd() {
        return this.tokenIndex === this.tokens.length;
      }
    };
    exports2.default = TokenProcessor;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getClassInfo.js
var require_getClassInfo = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getClassInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _keywords = require_keywords();
    var _types = require_types();
    function getClassInfo(rootTransformer, tokens, nameManager, disableESTransforms) {
      const snapshot = tokens.snapshot();
      const headerInfo = processClassHeader(tokens);
      let constructorInitializerStatements = [];
      const instanceInitializerNames = [];
      const staticInitializerNames = [];
      let constructorInsertPos = null;
      const fields = [];
      const rangesToRemove = [];
      const classContextId = tokens.currentToken().contextId;
      if (classContextId == null) {
        throw new Error("Expected non-null class context ID on class open-brace.");
      }
      tokens.nextToken();
      while (!tokens.matchesContextIdAndLabel(_types.TokenType.braceR, classContextId)) {
        if (tokens.matchesContextual(_keywords.ContextualKeyword._constructor) && !tokens.currentToken().isType) {
          ({ constructorInitializerStatements, constructorInsertPos } = processConstructor(tokens));
        } else if (tokens.matches1(_types.TokenType.semi)) {
          if (!disableESTransforms) {
            rangesToRemove.push({ start: tokens.currentIndex(), end: tokens.currentIndex() + 1 });
          }
          tokens.nextToken();
        } else if (tokens.currentToken().isType) {
          tokens.nextToken();
        } else {
          const statementStartIndex = tokens.currentIndex();
          let isStatic = false;
          let isESPrivate = false;
          let isDeclareOrAbstract = false;
          while (isAccessModifier(tokens.currentToken())) {
            if (tokens.matches1(_types.TokenType._static)) {
              isStatic = true;
            }
            if (tokens.matches1(_types.TokenType.hash)) {
              isESPrivate = true;
            }
            if (tokens.matches1(_types.TokenType._declare) || tokens.matches1(_types.TokenType._abstract)) {
              isDeclareOrAbstract = true;
            }
            tokens.nextToken();
          }
          if (isStatic && tokens.matches1(_types.TokenType.braceL)) {
            skipToNextClassElement(tokens, classContextId);
            continue;
          }
          if (isESPrivate) {
            skipToNextClassElement(tokens, classContextId);
            continue;
          }
          if (tokens.matchesContextual(_keywords.ContextualKeyword._constructor) && !tokens.currentToken().isType) {
            ({ constructorInitializerStatements, constructorInsertPos } = processConstructor(tokens));
            continue;
          }
          const nameStartIndex = tokens.currentIndex();
          skipFieldName(tokens);
          if (tokens.matches1(_types.TokenType.lessThan) || tokens.matches1(_types.TokenType.parenL)) {
            skipToNextClassElement(tokens, classContextId);
            continue;
          }
          while (tokens.currentToken().isType) {
            tokens.nextToken();
          }
          if (tokens.matches1(_types.TokenType.eq)) {
            const equalsIndex = tokens.currentIndex();
            const valueEnd = tokens.currentToken().rhsEndIndex;
            if (valueEnd == null) {
              throw new Error("Expected rhsEndIndex on class field assignment.");
            }
            tokens.nextToken();
            while (tokens.currentIndex() < valueEnd) {
              rootTransformer.processToken();
            }
            let initializerName;
            if (isStatic) {
              initializerName = nameManager.claimFreeName("__initStatic");
              staticInitializerNames.push(initializerName);
            } else {
              initializerName = nameManager.claimFreeName("__init");
              instanceInitializerNames.push(initializerName);
            }
            fields.push({
              initializerName,
              equalsIndex,
              start: nameStartIndex,
              end: tokens.currentIndex()
            });
          } else if (!disableESTransforms || isDeclareOrAbstract) {
            rangesToRemove.push({ start: statementStartIndex, end: tokens.currentIndex() });
          }
        }
      }
      tokens.restoreToSnapshot(snapshot);
      if (disableESTransforms) {
        return {
          headerInfo,
          constructorInitializerStatements,
          instanceInitializerNames: [],
          staticInitializerNames: [],
          constructorInsertPos,
          fields: [],
          rangesToRemove
        };
      } else {
        return {
          headerInfo,
          constructorInitializerStatements,
          instanceInitializerNames,
          staticInitializerNames,
          constructorInsertPos,
          fields,
          rangesToRemove
        };
      }
    }
    exports2.default = getClassInfo;
    function skipToNextClassElement(tokens, classContextId) {
      tokens.nextToken();
      while (tokens.currentToken().contextId !== classContextId) {
        tokens.nextToken();
      }
      while (isAccessModifier(tokens.tokenAtRelativeIndex(-1))) {
        tokens.previousToken();
      }
    }
    function processClassHeader(tokens) {
      const classToken = tokens.currentToken();
      const contextId = classToken.contextId;
      if (contextId == null) {
        throw new Error("Expected context ID on class token.");
      }
      const isExpression = classToken.isExpression;
      if (isExpression == null) {
        throw new Error("Expected isExpression on class token.");
      }
      let className = null;
      let hasSuperclass = false;
      tokens.nextToken();
      if (tokens.matches1(_types.TokenType.name)) {
        className = tokens.identifierName();
      }
      while (!tokens.matchesContextIdAndLabel(_types.TokenType.braceL, contextId)) {
        if (tokens.matches1(_types.TokenType._extends) && !tokens.currentToken().isType) {
          hasSuperclass = true;
        }
        tokens.nextToken();
      }
      return { isExpression, className, hasSuperclass };
    }
    function processConstructor(tokens) {
      const constructorInitializerStatements = [];
      tokens.nextToken();
      const constructorContextId = tokens.currentToken().contextId;
      if (constructorContextId == null) {
        throw new Error("Expected context ID on open-paren starting constructor params.");
      }
      while (!tokens.matchesContextIdAndLabel(_types.TokenType.parenR, constructorContextId)) {
        if (tokens.currentToken().contextId === constructorContextId) {
          tokens.nextToken();
          if (isAccessModifier(tokens.currentToken())) {
            tokens.nextToken();
            while (isAccessModifier(tokens.currentToken())) {
              tokens.nextToken();
            }
            const token = tokens.currentToken();
            if (token.type !== _types.TokenType.name) {
              throw new Error("Expected identifier after access modifiers in constructor arg.");
            }
            const name = tokens.identifierNameForToken(token);
            constructorInitializerStatements.push(`this.${name} = ${name}`);
          }
        } else {
          tokens.nextToken();
        }
      }
      tokens.nextToken();
      while (tokens.currentToken().isType) {
        tokens.nextToken();
      }
      let constructorInsertPos = tokens.currentIndex();
      let foundSuperCall = false;
      while (!tokens.matchesContextIdAndLabel(_types.TokenType.braceR, constructorContextId)) {
        if (!foundSuperCall && tokens.matches2(_types.TokenType._super, _types.TokenType.parenL)) {
          tokens.nextToken();
          const superCallContextId = tokens.currentToken().contextId;
          if (superCallContextId == null) {
            throw new Error("Expected a context ID on the super call");
          }
          while (!tokens.matchesContextIdAndLabel(_types.TokenType.parenR, superCallContextId)) {
            tokens.nextToken();
          }
          constructorInsertPos = tokens.currentIndex();
          foundSuperCall = true;
        }
        tokens.nextToken();
      }
      tokens.nextToken();
      return { constructorInitializerStatements, constructorInsertPos };
    }
    function isAccessModifier(token) {
      return [
        _types.TokenType._async,
        _types.TokenType._get,
        _types.TokenType._set,
        _types.TokenType.plus,
        _types.TokenType.minus,
        _types.TokenType._readonly,
        _types.TokenType._static,
        _types.TokenType._public,
        _types.TokenType._private,
        _types.TokenType._protected,
        _types.TokenType._override,
        _types.TokenType._abstract,
        _types.TokenType.star,
        _types.TokenType._declare,
        _types.TokenType.hash
      ].includes(token.type);
    }
    function skipFieldName(tokens) {
      if (tokens.matches1(_types.TokenType.bracketL)) {
        const startToken = tokens.currentToken();
        const classContextId = startToken.contextId;
        if (classContextId == null) {
          throw new Error("Expected class context ID on computed name open bracket.");
        }
        while (!tokens.matchesContextIdAndLabel(_types.TokenType.bracketR, classContextId)) {
          tokens.nextToken();
        }
        tokens.nextToken();
      } else {
        tokens.nextToken();
      }
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/elideImportEquals.js
var require_elideImportEquals = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/elideImportEquals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _types = require_types();
    function elideImportEquals(tokens) {
      tokens.removeInitialToken();
      tokens.removeToken();
      tokens.removeToken();
      tokens.removeToken();
      if (tokens.matches1(_types.TokenType.parenL)) {
        tokens.removeToken();
        tokens.removeToken();
        tokens.removeToken();
      } else {
        while (tokens.matches1(_types.TokenType.dot)) {
          tokens.removeToken();
          tokens.removeToken();
        }
      }
    }
    exports2.default = elideImportEquals;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getDeclarationInfo.js
var require_getDeclarationInfo = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getDeclarationInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _tokenizer = require_tokenizer();
    var _types = require_types();
    var EMPTY_DECLARATION_INFO = {
      typeDeclarations: /* @__PURE__ */ new Set(),
      valueDeclarations: /* @__PURE__ */ new Set()
    };
    exports2.EMPTY_DECLARATION_INFO = EMPTY_DECLARATION_INFO;
    function getDeclarationInfo(tokens) {
      const typeDeclarations = /* @__PURE__ */ new Set();
      const valueDeclarations = /* @__PURE__ */ new Set();
      for (let i = 0; i < tokens.tokens.length; i++) {
        const token = tokens.tokens[i];
        if (token.type === _types.TokenType.name && _tokenizer.isTopLevelDeclaration.call(void 0, token)) {
          if (token.isType) {
            typeDeclarations.add(tokens.identifierNameForToken(token));
          } else {
            valueDeclarations.add(tokens.identifierNameForToken(token));
          }
        }
      }
      return { typeDeclarations, valueDeclarations };
    }
    exports2.default = getDeclarationInfo;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/isExportFrom.js
var require_isExportFrom = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/isExportFrom.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _keywords = require_keywords();
    var _types = require_types();
    function isExportFrom(tokens) {
      let closeBraceIndex = tokens.currentIndex();
      while (!tokens.matches1AtIndex(closeBraceIndex, _types.TokenType.braceR)) {
        closeBraceIndex++;
      }
      return tokens.matchesContextualAtIndex(closeBraceIndex + 1, _keywords.ContextualKeyword._from) && tokens.matches1AtIndex(closeBraceIndex + 2, _types.TokenType.string);
    }
    exports2.default = isExportFrom;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/removeMaybeImportAttributes.js
var require_removeMaybeImportAttributes = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/removeMaybeImportAttributes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _keywords = require_keywords();
    var _types = require_types();
    function removeMaybeImportAttributes(tokens) {
      if (tokens.matches2(_types.TokenType._with, _types.TokenType.braceL) || tokens.matches2(_types.TokenType.name, _types.TokenType.braceL) && tokens.matchesContextual(_keywords.ContextualKeyword._assert)) {
        tokens.removeToken();
        tokens.removeToken();
        tokens.removeBalancedCode();
        tokens.removeToken();
      }
    }
    exports2.removeMaybeImportAttributes = removeMaybeImportAttributes;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/shouldElideDefaultExport.js
var require_shouldElideDefaultExport = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/shouldElideDefaultExport.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _types = require_types();
    function shouldElideDefaultExport(isTypeScriptTransformEnabled, keepUnusedImports, tokens, declarationInfo) {
      if (!isTypeScriptTransformEnabled || keepUnusedImports) {
        return false;
      }
      const exportToken = tokens.currentToken();
      if (exportToken.rhsEndIndex == null) {
        throw new Error("Expected non-null rhsEndIndex on export token.");
      }
      const numTokens = exportToken.rhsEndIndex - tokens.currentIndex();
      if (numTokens !== 3 && !(numTokens === 4 && tokens.matches1AtIndex(exportToken.rhsEndIndex - 1, _types.TokenType.semi))) {
        return false;
      }
      const identifierToken = tokens.tokenAtRelativeIndex(2);
      if (identifierToken.type !== _types.TokenType.name) {
        return false;
      }
      const exportedName = tokens.identifierNameForToken(identifierToken);
      return declarationInfo.typeDeclarations.has(exportedName) && !declarationInfo.valueDeclarations.has(exportedName);
    }
    exports2.default = shouldElideDefaultExport;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/CJSImportTransformer.js
var require_CJSImportTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/CJSImportTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _tokenizer = require_tokenizer();
    var _keywords = require_keywords();
    var _types = require_types();
    var _elideImportEquals = require_elideImportEquals();
    var _elideImportEquals2 = _interopRequireDefault(_elideImportEquals);
    var _getDeclarationInfo = require_getDeclarationInfo();
    var _getDeclarationInfo2 = _interopRequireDefault(_getDeclarationInfo);
    var _getImportExportSpecifierInfo = require_getImportExportSpecifierInfo();
    var _getImportExportSpecifierInfo2 = _interopRequireDefault(_getImportExportSpecifierInfo);
    var _isExportFrom = require_isExportFrom();
    var _isExportFrom2 = _interopRequireDefault(_isExportFrom);
    var _removeMaybeImportAttributes = require_removeMaybeImportAttributes();
    var _shouldElideDefaultExport = require_shouldElideDefaultExport();
    var _shouldElideDefaultExport2 = _interopRequireDefault(_shouldElideDefaultExport);
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var CJSImportTransformer = class _CJSImportTransformer extends _Transformer2.default {
      __init() {
        this.hadExport = false;
      }
      __init2() {
        this.hadNamedExport = false;
      }
      __init3() {
        this.hadDefaultExport = false;
      }
      constructor(rootTransformer, tokens, importProcessor, nameManager, helperManager, reactHotLoaderTransformer, enableLegacyBabel5ModuleInterop, enableLegacyTypeScriptModuleInterop, isTypeScriptTransformEnabled, isFlowTransformEnabled, preserveDynamicImport, keepUnusedImports) {
        super();
        this.rootTransformer = rootTransformer;
        this.tokens = tokens;
        this.importProcessor = importProcessor;
        this.nameManager = nameManager;
        this.helperManager = helperManager;
        this.reactHotLoaderTransformer = reactHotLoaderTransformer;
        this.enableLegacyBabel5ModuleInterop = enableLegacyBabel5ModuleInterop;
        this.enableLegacyTypeScriptModuleInterop = enableLegacyTypeScriptModuleInterop;
        this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;
        this.isFlowTransformEnabled = isFlowTransformEnabled;
        this.preserveDynamicImport = preserveDynamicImport;
        this.keepUnusedImports = keepUnusedImports;
        _CJSImportTransformer.prototype.__init.call(this);
        _CJSImportTransformer.prototype.__init2.call(this);
        _CJSImportTransformer.prototype.__init3.call(this);
        ;
        this.declarationInfo = isTypeScriptTransformEnabled ? _getDeclarationInfo2.default.call(void 0, tokens) : _getDeclarationInfo.EMPTY_DECLARATION_INFO;
      }
      getPrefixCode() {
        let prefix = "";
        if (this.hadExport) {
          prefix += 'Object.defineProperty(exports, "__esModule", {value: true});';
        }
        return prefix;
      }
      getSuffixCode() {
        if (this.enableLegacyBabel5ModuleInterop && this.hadDefaultExport && !this.hadNamedExport) {
          return "\nmodule.exports = exports.default;\n";
        }
        return "";
      }
      process() {
        if (this.tokens.matches3(_types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)) {
          return this.processImportEquals();
        }
        if (this.tokens.matches1(_types.TokenType._import)) {
          this.processImport();
          return true;
        }
        if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.eq)) {
          this.tokens.replaceToken("module.exports");
          return true;
        }
        if (this.tokens.matches1(_types.TokenType._export) && !this.tokens.currentToken().isType) {
          this.hadExport = true;
          return this.processExport();
        }
        if (this.tokens.matches2(_types.TokenType.name, _types.TokenType.postIncDec)) {
          if (this.processPostIncDec()) {
            return true;
          }
        }
        if (this.tokens.matches1(_types.TokenType.name) || this.tokens.matches1(_types.TokenType.jsxName)) {
          return this.processIdentifier();
        }
        if (this.tokens.matches1(_types.TokenType.eq)) {
          return this.processAssignment();
        }
        if (this.tokens.matches1(_types.TokenType.assign)) {
          return this.processComplexAssignment();
        }
        if (this.tokens.matches1(_types.TokenType.preIncDec)) {
          return this.processPreIncDec();
        }
        return false;
      }
      processImportEquals() {
        const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
        if (this.importProcessor.shouldAutomaticallyElideImportedName(importName)) {
          _elideImportEquals2.default.call(void 0, this.tokens);
        } else {
          this.tokens.replaceToken("const");
        }
        return true;
      }
      /**
       * Transform this:
       * import foo, {bar} from 'baz';
       * into
       * var _baz = require('baz'); var _baz2 = _interopRequireDefault(_baz);
       *
       * The import code was already generated in the import preprocessing step, so
       * we just need to look it up.
       */
      processImport() {
        if (this.tokens.matches2(_types.TokenType._import, _types.TokenType.parenL)) {
          if (this.preserveDynamicImport) {
            this.tokens.copyToken();
            return;
          }
          const requireWrapper = this.enableLegacyTypeScriptModuleInterop ? "" : `${this.helperManager.getHelperName("interopRequireWildcard")}(`;
          this.tokens.replaceToken(`Promise.resolve().then(() => ${requireWrapper}require`);
          const contextId = this.tokens.currentToken().contextId;
          if (contextId == null) {
            throw new Error("Expected context ID on dynamic import invocation.");
          }
          this.tokens.copyToken();
          while (!this.tokens.matchesContextIdAndLabel(_types.TokenType.parenR, contextId)) {
            this.rootTransformer.processToken();
          }
          this.tokens.replaceToken(requireWrapper ? ")))" : "))");
          return;
        }
        const shouldElideImport = this.removeImportAndDetectIfShouldElide();
        if (shouldElideImport) {
          this.tokens.removeToken();
        } else {
          const path3 = this.tokens.stringValue();
          this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path3));
          this.tokens.appendCode(this.importProcessor.claimImportCode(path3));
        }
        _removeMaybeImportAttributes.removeMaybeImportAttributes.call(void 0, this.tokens);
        if (this.tokens.matches1(_types.TokenType.semi)) {
          this.tokens.removeToken();
        }
      }
      /**
       * Erase this import (since any CJS output would be completely different), and
       * return true if this import is should be elided due to being a type-only
       * import. Such imports will not be emitted at all to avoid side effects.
       *
       * Import elision only happens with the TypeScript or Flow transforms enabled.
       *
       * TODO: This function has some awkward overlap with
       *  CJSImportProcessor.pruneTypeOnlyImports , and the two should be unified.
       *  That function handles TypeScript implicit import name elision, and removes
       *  an import if all typical imported names (without `type`) are removed due
       *  to being type-only imports. This function handles Flow import removal and
       *  properly distinguishes `import 'foo'` from `import {} from 'foo'` for TS
       *  purposes.
       *
       * The position should end at the import string.
       */
      removeImportAndDetectIfShouldElide() {
        this.tokens.removeInitialToken();
        if (this.tokens.matchesContextual(_keywords.ContextualKeyword._type) && !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _types.TokenType.comma) && !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._from)) {
          this.removeRemainingImport();
          return true;
        }
        if (this.tokens.matches1(_types.TokenType.name) || this.tokens.matches1(_types.TokenType.star)) {
          this.removeRemainingImport();
          return false;
        }
        if (this.tokens.matches1(_types.TokenType.string)) {
          return false;
        }
        let foundNonTypeImport = false;
        let foundAnyNamedImport = false;
        while (!this.tokens.matches1(_types.TokenType.string)) {
          if (!foundNonTypeImport && this.tokens.matches1(_types.TokenType.braceL) || this.tokens.matches1(_types.TokenType.comma)) {
            this.tokens.removeToken();
            if (!this.tokens.matches1(_types.TokenType.braceR)) {
              foundAnyNamedImport = true;
            }
            if (this.tokens.matches2(_types.TokenType.name, _types.TokenType.comma) || this.tokens.matches2(_types.TokenType.name, _types.TokenType.braceR) || this.tokens.matches4(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.comma) || this.tokens.matches4(_types.TokenType.name, _types.TokenType.name, _types.TokenType.name, _types.TokenType.braceR)) {
              foundNonTypeImport = true;
            }
          }
          this.tokens.removeToken();
        }
        if (this.keepUnusedImports) {
          return false;
        }
        if (this.isTypeScriptTransformEnabled) {
          return !foundNonTypeImport;
        } else if (this.isFlowTransformEnabled) {
          return foundAnyNamedImport && !foundNonTypeImport;
        } else {
          return false;
        }
      }
      removeRemainingImport() {
        while (!this.tokens.matches1(_types.TokenType.string)) {
          this.tokens.removeToken();
        }
      }
      processIdentifier() {
        const token = this.tokens.currentToken();
        if (token.shadowsGlobal) {
          return false;
        }
        if (token.identifierRole === _tokenizer.IdentifierRole.ObjectShorthand) {
          return this.processObjectShorthand();
        }
        if (token.identifierRole !== _tokenizer.IdentifierRole.Access) {
          return false;
        }
        const replacement = this.importProcessor.getIdentifierReplacement(
          this.tokens.identifierNameForToken(token)
        );
        if (!replacement) {
          return false;
        }
        let possibleOpenParenIndex = this.tokens.currentIndex() + 1;
        while (possibleOpenParenIndex < this.tokens.tokens.length && this.tokens.tokens[possibleOpenParenIndex].type === _types.TokenType.parenR) {
          possibleOpenParenIndex++;
        }
        if (this.tokens.tokens[possibleOpenParenIndex].type === _types.TokenType.parenL) {
          if (this.tokens.tokenAtRelativeIndex(1).type === _types.TokenType.parenL && this.tokens.tokenAtRelativeIndex(-1).type !== _types.TokenType._new) {
            this.tokens.replaceToken(`${replacement}.call(void 0, `);
            this.tokens.removeToken();
            this.rootTransformer.processBalancedCode();
            this.tokens.copyExpectedToken(_types.TokenType.parenR);
          } else {
            this.tokens.replaceToken(`(0, ${replacement})`);
          }
        } else {
          this.tokens.replaceToken(replacement);
        }
        return true;
      }
      processObjectShorthand() {
        const identifier = this.tokens.identifierName();
        const replacement = this.importProcessor.getIdentifierReplacement(identifier);
        if (!replacement) {
          return false;
        }
        this.tokens.replaceToken(`${identifier}: ${replacement}`);
        return true;
      }
      processExport() {
        if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._enum) || this.tokens.matches3(_types.TokenType._export, _types.TokenType._const, _types.TokenType._enum)) {
          this.hadNamedExport = true;
          return false;
        }
        if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._default)) {
          if (this.tokens.matches3(_types.TokenType._export, _types.TokenType._default, _types.TokenType._enum)) {
            this.hadDefaultExport = true;
            return false;
          }
          this.processExportDefault();
          return true;
        } else if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.braceL)) {
          this.processExportBindings();
          return true;
        } else if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.name) && this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._type)) {
          this.tokens.removeInitialToken();
          this.tokens.removeToken();
          if (this.tokens.matches1(_types.TokenType.braceL)) {
            while (!this.tokens.matches1(_types.TokenType.braceR)) {
              this.tokens.removeToken();
            }
            this.tokens.removeToken();
          } else {
            this.tokens.removeToken();
            if (this.tokens.matches1(_types.TokenType._as)) {
              this.tokens.removeToken();
              this.tokens.removeToken();
            }
          }
          if (this.tokens.matchesContextual(_keywords.ContextualKeyword._from) && this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _types.TokenType.string)) {
            this.tokens.removeToken();
            this.tokens.removeToken();
            _removeMaybeImportAttributes.removeMaybeImportAttributes.call(void 0, this.tokens);
          }
          return true;
        }
        this.hadNamedExport = true;
        if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._var) || this.tokens.matches2(_types.TokenType._export, _types.TokenType._let) || this.tokens.matches2(_types.TokenType._export, _types.TokenType._const)) {
          this.processExportVar();
          return true;
        } else if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._function) || // export async function
        this.tokens.matches3(_types.TokenType._export, _types.TokenType.name, _types.TokenType._function)) {
          this.processExportFunction();
          return true;
        } else if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._class) || this.tokens.matches3(_types.TokenType._export, _types.TokenType._abstract, _types.TokenType._class) || this.tokens.matches2(_types.TokenType._export, _types.TokenType.at)) {
          this.processExportClass();
          return true;
        } else if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.star)) {
          this.processExportStar();
          return true;
        } else {
          throw new Error("Unrecognized export syntax.");
        }
      }
      processAssignment() {
        const index = this.tokens.currentIndex();
        const identifierToken = this.tokens.tokens[index - 1];
        if (identifierToken.isType || identifierToken.type !== _types.TokenType.name) {
          return false;
        }
        if (identifierToken.shadowsGlobal) {
          return false;
        }
        if (index >= 2 && this.tokens.matches1AtIndex(index - 2, _types.TokenType.dot)) {
          return false;
        }
        if (index >= 2 && [_types.TokenType._var, _types.TokenType._let, _types.TokenType._const].includes(this.tokens.tokens[index - 2].type)) {
          return false;
        }
        const assignmentSnippet = this.importProcessor.resolveExportBinding(
          this.tokens.identifierNameForToken(identifierToken)
        );
        if (!assignmentSnippet) {
          return false;
        }
        this.tokens.copyToken();
        this.tokens.appendCode(` ${assignmentSnippet} =`);
        return true;
      }
      /**
       * Process something like `a += 3`, where `a` might be an exported value.
       */
      processComplexAssignment() {
        const index = this.tokens.currentIndex();
        const identifierToken = this.tokens.tokens[index - 1];
        if (identifierToken.type !== _types.TokenType.name) {
          return false;
        }
        if (identifierToken.shadowsGlobal) {
          return false;
        }
        if (index >= 2 && this.tokens.matches1AtIndex(index - 2, _types.TokenType.dot)) {
          return false;
        }
        const assignmentSnippet = this.importProcessor.resolveExportBinding(
          this.tokens.identifierNameForToken(identifierToken)
        );
        if (!assignmentSnippet) {
          return false;
        }
        this.tokens.appendCode(` = ${assignmentSnippet}`);
        this.tokens.copyToken();
        return true;
      }
      /**
       * Process something like `++a`, where `a` might be an exported value.
       */
      processPreIncDec() {
        const index = this.tokens.currentIndex();
        const identifierToken = this.tokens.tokens[index + 1];
        if (identifierToken.type !== _types.TokenType.name) {
          return false;
        }
        if (identifierToken.shadowsGlobal) {
          return false;
        }
        if (index + 2 < this.tokens.tokens.length && (this.tokens.matches1AtIndex(index + 2, _types.TokenType.dot) || this.tokens.matches1AtIndex(index + 2, _types.TokenType.bracketL) || this.tokens.matches1AtIndex(index + 2, _types.TokenType.parenL))) {
          return false;
        }
        const identifierName = this.tokens.identifierNameForToken(identifierToken);
        const assignmentSnippet = this.importProcessor.resolveExportBinding(identifierName);
        if (!assignmentSnippet) {
          return false;
        }
        this.tokens.appendCode(`${assignmentSnippet} = `);
        this.tokens.copyToken();
        return true;
      }
      /**
       * Process something like `a++`, where `a` might be an exported value.
       * This starts at the `a`, not at the `++`.
       */
      processPostIncDec() {
        const index = this.tokens.currentIndex();
        const identifierToken = this.tokens.tokens[index];
        const operatorToken = this.tokens.tokens[index + 1];
        if (identifierToken.type !== _types.TokenType.name) {
          return false;
        }
        if (identifierToken.shadowsGlobal) {
          return false;
        }
        if (index >= 1 && this.tokens.matches1AtIndex(index - 1, _types.TokenType.dot)) {
          return false;
        }
        const identifierName = this.tokens.identifierNameForToken(identifierToken);
        const assignmentSnippet = this.importProcessor.resolveExportBinding(identifierName);
        if (!assignmentSnippet) {
          return false;
        }
        const operatorCode = this.tokens.rawCodeForToken(operatorToken);
        const base = this.importProcessor.getIdentifierReplacement(identifierName) || identifierName;
        if (operatorCode === "++") {
          this.tokens.replaceToken(`(${base} = ${assignmentSnippet} = ${base} + 1, ${base} - 1)`);
        } else if (operatorCode === "--") {
          this.tokens.replaceToken(`(${base} = ${assignmentSnippet} = ${base} - 1, ${base} + 1)`);
        } else {
          throw new Error(`Unexpected operator: ${operatorCode}`);
        }
        this.tokens.removeToken();
        return true;
      }
      processExportDefault() {
        let exportedRuntimeValue = true;
        if (this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._function, _types.TokenType.name) || // export default async function
        this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType.name, _types.TokenType._function, _types.TokenType.name) && this.tokens.matchesContextualAtIndex(
          this.tokens.currentIndex() + 2,
          _keywords.ContextualKeyword._async
        )) {
          this.tokens.removeInitialToken();
          this.tokens.removeToken();
          const name = this.processNamedFunction();
          this.tokens.appendCode(` exports.default = ${name};`);
        } else if (this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._class, _types.TokenType.name) || this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType._abstract, _types.TokenType._class, _types.TokenType.name) || this.tokens.matches3(_types.TokenType._export, _types.TokenType._default, _types.TokenType.at)) {
          this.tokens.removeInitialToken();
          this.tokens.removeToken();
          this.copyDecorators();
          if (this.tokens.matches1(_types.TokenType._abstract)) {
            this.tokens.removeToken();
          }
          const name = this.rootTransformer.processNamedClass();
          this.tokens.appendCode(` exports.default = ${name};`);
        } else if (_shouldElideDefaultExport2.default.call(
          void 0,
          this.isTypeScriptTransformEnabled,
          this.keepUnusedImports,
          this.tokens,
          this.declarationInfo
        )) {
          exportedRuntimeValue = false;
          this.tokens.removeInitialToken();
          this.tokens.removeToken();
          this.tokens.removeToken();
        } else if (this.reactHotLoaderTransformer) {
          const defaultVarName = this.nameManager.claimFreeName("_default");
          this.tokens.replaceToken(`let ${defaultVarName}; exports.`);
          this.tokens.copyToken();
          this.tokens.appendCode(` = ${defaultVarName} =`);
          this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);
        } else {
          this.tokens.replaceToken("exports.");
          this.tokens.copyToken();
          this.tokens.appendCode(" =");
        }
        if (exportedRuntimeValue) {
          this.hadDefaultExport = true;
        }
      }
      copyDecorators() {
        while (this.tokens.matches1(_types.TokenType.at)) {
          this.tokens.copyToken();
          if (this.tokens.matches1(_types.TokenType.parenL)) {
            this.tokens.copyExpectedToken(_types.TokenType.parenL);
            this.rootTransformer.processBalancedCode();
            this.tokens.copyExpectedToken(_types.TokenType.parenR);
          } else {
            this.tokens.copyExpectedToken(_types.TokenType.name);
            while (this.tokens.matches1(_types.TokenType.dot)) {
              this.tokens.copyExpectedToken(_types.TokenType.dot);
              this.tokens.copyExpectedToken(_types.TokenType.name);
            }
            if (this.tokens.matches1(_types.TokenType.parenL)) {
              this.tokens.copyExpectedToken(_types.TokenType.parenL);
              this.rootTransformer.processBalancedCode();
              this.tokens.copyExpectedToken(_types.TokenType.parenR);
            }
          }
        }
      }
      /**
       * Transform a declaration like `export var`, `export let`, or `export const`.
       */
      processExportVar() {
        if (this.isSimpleExportVar()) {
          this.processSimpleExportVar();
        } else {
          this.processComplexExportVar();
        }
      }
      /**
       * Determine if the export is of the form:
       * export var/let/const [varName] = [expr];
       * In other words, determine if function name inference might apply.
       */
      isSimpleExportVar() {
        let tokenIndex = this.tokens.currentIndex();
        tokenIndex++;
        tokenIndex++;
        if (!this.tokens.matches1AtIndex(tokenIndex, _types.TokenType.name)) {
          return false;
        }
        tokenIndex++;
        while (tokenIndex < this.tokens.tokens.length && this.tokens.tokens[tokenIndex].isType) {
          tokenIndex++;
        }
        if (!this.tokens.matches1AtIndex(tokenIndex, _types.TokenType.eq)) {
          return false;
        }
        return true;
      }
      /**
       * Transform an `export var` declaration initializing a single variable.
       *
       * For example, this:
       * export const f = () => {};
       * becomes this:
       * const f = () => {}; exports.f = f;
       *
       * The variable is unused (e.g. exports.f has the true value of the export).
       * We need to produce an assignment of this form so that the function will
       * have an inferred name of "f", which wouldn't happen in the more general
       * case below.
       */
      processSimpleExportVar() {
        this.tokens.removeInitialToken();
        this.tokens.copyToken();
        const varName = this.tokens.identifierName();
        while (!this.tokens.matches1(_types.TokenType.eq)) {
          this.rootTransformer.processToken();
        }
        const endIndex = this.tokens.currentToken().rhsEndIndex;
        if (endIndex == null) {
          throw new Error("Expected = token with an end index.");
        }
        while (this.tokens.currentIndex() < endIndex) {
          this.rootTransformer.processToken();
        }
        this.tokens.appendCode(`; exports.${varName} = ${varName}`);
      }
      /**
       * Transform normal declaration exports, including handling destructuring.
       * For example, this:
       * export const {x: [a = 2, b], c} = d;
       * becomes this:
       * ({x: [exports.a = 2, exports.b], c: exports.c} = d;)
       */
      processComplexExportVar() {
        this.tokens.removeInitialToken();
        this.tokens.removeToken();
        const needsParens = this.tokens.matches1(_types.TokenType.braceL);
        if (needsParens) {
          this.tokens.appendCode("(");
        }
        let depth = 0;
        while (true) {
          if (this.tokens.matches1(_types.TokenType.braceL) || this.tokens.matches1(_types.TokenType.dollarBraceL) || this.tokens.matches1(_types.TokenType.bracketL)) {
            depth++;
            this.tokens.copyToken();
          } else if (this.tokens.matches1(_types.TokenType.braceR) || this.tokens.matches1(_types.TokenType.bracketR)) {
            depth--;
            this.tokens.copyToken();
          } else if (depth === 0 && !this.tokens.matches1(_types.TokenType.name) && !this.tokens.currentToken().isType) {
            break;
          } else if (this.tokens.matches1(_types.TokenType.eq)) {
            const endIndex = this.tokens.currentToken().rhsEndIndex;
            if (endIndex == null) {
              throw new Error("Expected = token with an end index.");
            }
            while (this.tokens.currentIndex() < endIndex) {
              this.rootTransformer.processToken();
            }
          } else {
            const token = this.tokens.currentToken();
            if (_tokenizer.isDeclaration.call(void 0, token)) {
              const name = this.tokens.identifierName();
              let replacement = this.importProcessor.getIdentifierReplacement(name);
              if (replacement === null) {
                throw new Error(`Expected a replacement for ${name} in \`export var\` syntax.`);
              }
              if (_tokenizer.isObjectShorthandDeclaration.call(void 0, token)) {
                replacement = `${name}: ${replacement}`;
              }
              this.tokens.replaceToken(replacement);
            } else {
              this.rootTransformer.processToken();
            }
          }
        }
        if (needsParens) {
          const endIndex = this.tokens.currentToken().rhsEndIndex;
          if (endIndex == null) {
            throw new Error("Expected = token with an end index.");
          }
          while (this.tokens.currentIndex() < endIndex) {
            this.rootTransformer.processToken();
          }
          this.tokens.appendCode(")");
        }
      }
      /**
       * Transform this:
       * export function foo() {}
       * into this:
       * function foo() {} exports.foo = foo;
       */
      processExportFunction() {
        this.tokens.replaceToken("");
        const name = this.processNamedFunction();
        this.tokens.appendCode(` exports.${name} = ${name};`);
      }
      /**
       * Skip past a function with a name and return that name.
       */
      processNamedFunction() {
        if (this.tokens.matches1(_types.TokenType._function)) {
          this.tokens.copyToken();
        } else if (this.tokens.matches2(_types.TokenType.name, _types.TokenType._function)) {
          if (!this.tokens.matchesContextual(_keywords.ContextualKeyword._async)) {
            throw new Error("Expected async keyword in function export.");
          }
          this.tokens.copyToken();
          this.tokens.copyToken();
        }
        if (this.tokens.matches1(_types.TokenType.star)) {
          this.tokens.copyToken();
        }
        if (!this.tokens.matches1(_types.TokenType.name)) {
          throw new Error("Expected identifier for exported function name.");
        }
        const name = this.tokens.identifierName();
        this.tokens.copyToken();
        if (this.tokens.currentToken().isType) {
          this.tokens.removeInitialToken();
          while (this.tokens.currentToken().isType) {
            this.tokens.removeToken();
          }
        }
        this.tokens.copyExpectedToken(_types.TokenType.parenL);
        this.rootTransformer.processBalancedCode();
        this.tokens.copyExpectedToken(_types.TokenType.parenR);
        this.rootTransformer.processPossibleTypeRange();
        this.tokens.copyExpectedToken(_types.TokenType.braceL);
        this.rootTransformer.processBalancedCode();
        this.tokens.copyExpectedToken(_types.TokenType.braceR);
        return name;
      }
      /**
       * Transform this:
       * export class A {}
       * into this:
       * class A {} exports.A = A;
       */
      processExportClass() {
        this.tokens.removeInitialToken();
        this.copyDecorators();
        if (this.tokens.matches1(_types.TokenType._abstract)) {
          this.tokens.removeToken();
        }
        const name = this.rootTransformer.processNamedClass();
        this.tokens.appendCode(` exports.${name} = ${name};`);
      }
      /**
       * Transform this:
       * export {a, b as c};
       * into this:
       * exports.a = a; exports.c = b;
       *
       * OR
       *
       * Transform this:
       * export {a, b as c} from './foo';
       * into the pre-generated Object.defineProperty code from the ImportProcessor.
       *
       * For the first case, if the TypeScript transform is enabled, we need to skip
       * exports that are only defined as types.
       */
      processExportBindings() {
        this.tokens.removeInitialToken();
        this.tokens.removeToken();
        const isReExport = _isExportFrom2.default.call(void 0, this.tokens);
        const exportStatements = [];
        while (true) {
          if (this.tokens.matches1(_types.TokenType.braceR)) {
            this.tokens.removeToken();
            break;
          }
          const specifierInfo = _getImportExportSpecifierInfo2.default.call(void 0, this.tokens);
          while (this.tokens.currentIndex() < specifierInfo.endIndex) {
            this.tokens.removeToken();
          }
          const shouldRemoveExport = specifierInfo.isType || !isReExport && this.shouldElideExportedIdentifier(specifierInfo.leftName);
          if (!shouldRemoveExport) {
            const exportedName = specifierInfo.rightName;
            if (exportedName === "default") {
              this.hadDefaultExport = true;
            } else {
              this.hadNamedExport = true;
            }
            const localName = specifierInfo.leftName;
            const newLocalName = this.importProcessor.getIdentifierReplacement(localName);
            exportStatements.push(`exports.${exportedName} = ${newLocalName || localName};`);
          }
          if (this.tokens.matches1(_types.TokenType.braceR)) {
            this.tokens.removeToken();
            break;
          }
          if (this.tokens.matches2(_types.TokenType.comma, _types.TokenType.braceR)) {
            this.tokens.removeToken();
            this.tokens.removeToken();
            break;
          } else if (this.tokens.matches1(_types.TokenType.comma)) {
            this.tokens.removeToken();
          } else {
            throw new Error(`Unexpected token: ${JSON.stringify(this.tokens.currentToken())}`);
          }
        }
        if (this.tokens.matchesContextual(_keywords.ContextualKeyword._from)) {
          this.tokens.removeToken();
          const path3 = this.tokens.stringValue();
          this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path3));
          _removeMaybeImportAttributes.removeMaybeImportAttributes.call(void 0, this.tokens);
        } else {
          this.tokens.appendCode(exportStatements.join(" "));
        }
        if (this.tokens.matches1(_types.TokenType.semi)) {
          this.tokens.removeToken();
        }
      }
      processExportStar() {
        this.tokens.removeInitialToken();
        while (!this.tokens.matches1(_types.TokenType.string)) {
          this.tokens.removeToken();
        }
        const path3 = this.tokens.stringValue();
        this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path3));
        _removeMaybeImportAttributes.removeMaybeImportAttributes.call(void 0, this.tokens);
        if (this.tokens.matches1(_types.TokenType.semi)) {
          this.tokens.removeToken();
        }
      }
      shouldElideExportedIdentifier(name) {
        return this.isTypeScriptTransformEnabled && !this.keepUnusedImports && !this.declarationInfo.valueDeclarations.has(name);
      }
    };
    exports2.default = CJSImportTransformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/ESMImportTransformer.js
var require_ESMImportTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/ESMImportTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _keywords = require_keywords();
    var _types = require_types();
    var _elideImportEquals = require_elideImportEquals();
    var _elideImportEquals2 = _interopRequireDefault(_elideImportEquals);
    var _getDeclarationInfo = require_getDeclarationInfo();
    var _getDeclarationInfo2 = _interopRequireDefault(_getDeclarationInfo);
    var _getImportExportSpecifierInfo = require_getImportExportSpecifierInfo();
    var _getImportExportSpecifierInfo2 = _interopRequireDefault(_getImportExportSpecifierInfo);
    var _getNonTypeIdentifiers = require_getNonTypeIdentifiers();
    var _isExportFrom = require_isExportFrom();
    var _isExportFrom2 = _interopRequireDefault(_isExportFrom);
    var _removeMaybeImportAttributes = require_removeMaybeImportAttributes();
    var _shouldElideDefaultExport = require_shouldElideDefaultExport();
    var _shouldElideDefaultExport2 = _interopRequireDefault(_shouldElideDefaultExport);
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var ESMImportTransformer = class extends _Transformer2.default {
      constructor(tokens, nameManager, helperManager, reactHotLoaderTransformer, isTypeScriptTransformEnabled, isFlowTransformEnabled, keepUnusedImports, options) {
        super();
        this.tokens = tokens;
        this.nameManager = nameManager;
        this.helperManager = helperManager;
        this.reactHotLoaderTransformer = reactHotLoaderTransformer;
        this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;
        this.isFlowTransformEnabled = isFlowTransformEnabled;
        this.keepUnusedImports = keepUnusedImports;
        ;
        this.nonTypeIdentifiers = isTypeScriptTransformEnabled && !keepUnusedImports ? _getNonTypeIdentifiers.getNonTypeIdentifiers.call(void 0, tokens, options) : /* @__PURE__ */ new Set();
        this.declarationInfo = isTypeScriptTransformEnabled && !keepUnusedImports ? _getDeclarationInfo2.default.call(void 0, tokens) : _getDeclarationInfo.EMPTY_DECLARATION_INFO;
        this.injectCreateRequireForImportRequire = Boolean(options.injectCreateRequireForImportRequire);
      }
      process() {
        if (this.tokens.matches3(_types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)) {
          return this.processImportEquals();
        }
        if (this.tokens.matches4(_types.TokenType._import, _types.TokenType.name, _types.TokenType.name, _types.TokenType.eq) && this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._type)) {
          this.tokens.removeInitialToken();
          for (let i = 0; i < 7; i++) {
            this.tokens.removeToken();
          }
          return true;
        }
        if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.eq)) {
          this.tokens.replaceToken("module.exports");
          return true;
        }
        if (this.tokens.matches5(_types.TokenType._export, _types.TokenType._import, _types.TokenType.name, _types.TokenType.name, _types.TokenType.eq) && this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 2, _keywords.ContextualKeyword._type)) {
          this.tokens.removeInitialToken();
          for (let i = 0; i < 8; i++) {
            this.tokens.removeToken();
          }
          return true;
        }
        if (this.tokens.matches1(_types.TokenType._import)) {
          return this.processImport();
        }
        if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._default)) {
          return this.processExportDefault();
        }
        if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.braceL)) {
          return this.processNamedExports();
        }
        if (this.tokens.matches2(_types.TokenType._export, _types.TokenType.name) && this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._type)) {
          this.tokens.removeInitialToken();
          this.tokens.removeToken();
          if (this.tokens.matches1(_types.TokenType.braceL)) {
            while (!this.tokens.matches1(_types.TokenType.braceR)) {
              this.tokens.removeToken();
            }
            this.tokens.removeToken();
          } else {
            this.tokens.removeToken();
            if (this.tokens.matches1(_types.TokenType._as)) {
              this.tokens.removeToken();
              this.tokens.removeToken();
            }
          }
          if (this.tokens.matchesContextual(_keywords.ContextualKeyword._from) && this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _types.TokenType.string)) {
            this.tokens.removeToken();
            this.tokens.removeToken();
            _removeMaybeImportAttributes.removeMaybeImportAttributes.call(void 0, this.tokens);
          }
          return true;
        }
        return false;
      }
      processImportEquals() {
        const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
        if (this.shouldAutomaticallyElideImportedName(importName)) {
          _elideImportEquals2.default.call(void 0, this.tokens);
        } else if (this.injectCreateRequireForImportRequire) {
          this.tokens.replaceToken("const");
          this.tokens.copyToken();
          this.tokens.copyToken();
          this.tokens.replaceToken(this.helperManager.getHelperName("require"));
        } else {
          this.tokens.replaceToken("const");
        }
        return true;
      }
      processImport() {
        if (this.tokens.matches2(_types.TokenType._import, _types.TokenType.parenL)) {
          return false;
        }
        const snapshot = this.tokens.snapshot();
        const allImportsRemoved = this.removeImportTypeBindings();
        if (allImportsRemoved) {
          this.tokens.restoreToSnapshot(snapshot);
          while (!this.tokens.matches1(_types.TokenType.string)) {
            this.tokens.removeToken();
          }
          this.tokens.removeToken();
          _removeMaybeImportAttributes.removeMaybeImportAttributes.call(void 0, this.tokens);
          if (this.tokens.matches1(_types.TokenType.semi)) {
            this.tokens.removeToken();
          }
        }
        return true;
      }
      /**
       * Remove type bindings from this import, leaving the rest of the import intact.
       *
       * Return true if this import was ONLY types, and thus is eligible for removal. This will bail out
       * of the replacement operation, so we can return early here.
       */
      removeImportTypeBindings() {
        this.tokens.copyExpectedToken(_types.TokenType._import);
        if (this.tokens.matchesContextual(_keywords.ContextualKeyword._type) && !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, _types.TokenType.comma) && !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, _keywords.ContextualKeyword._from)) {
          return true;
        }
        if (this.tokens.matches1(_types.TokenType.string)) {
          this.tokens.copyToken();
          return false;
        }
        if (this.tokens.matchesContextual(_keywords.ContextualKeyword._module) && this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 2, _keywords.ContextualKeyword._from)) {
          this.tokens.copyToken();
        }
        let foundNonTypeImport = false;
        let foundAnyNamedImport = false;
        let needsComma = false;
        if (this.tokens.matches1(_types.TokenType.name)) {
          if (this.shouldAutomaticallyElideImportedName(this.tokens.identifierName())) {
            this.tokens.removeToken();
            if (this.tokens.matches1(_types.TokenType.comma)) {
              this.tokens.removeToken();
            }
          } else {
            foundNonTypeImport = true;
            this.tokens.copyToken();
            if (this.tokens.matches1(_types.TokenType.comma)) {
              needsComma = true;
              this.tokens.removeToken();
            }
          }
        }
        if (this.tokens.matches1(_types.TokenType.star)) {
          if (this.shouldAutomaticallyElideImportedName(this.tokens.identifierNameAtRelativeIndex(2))) {
            this.tokens.removeToken();
            this.tokens.removeToken();
            this.tokens.removeToken();
          } else {
            if (needsComma) {
              this.tokens.appendCode(",");
            }
            foundNonTypeImport = true;
            this.tokens.copyExpectedToken(_types.TokenType.star);
            this.tokens.copyExpectedToken(_types.TokenType.name);
            this.tokens.copyExpectedToken(_types.TokenType.name);
          }
        } else if (this.tokens.matches1(_types.TokenType.braceL)) {
          if (needsComma) {
            this.tokens.appendCode(",");
          }
          this.tokens.copyToken();
          while (!this.tokens.matches1(_types.TokenType.braceR)) {
            foundAnyNamedImport = true;
            const specifierInfo = _getImportExportSpecifierInfo2.default.call(void 0, this.tokens);
            if (specifierInfo.isType || this.shouldAutomaticallyElideImportedName(specifierInfo.rightName)) {
              while (this.tokens.currentIndex() < specifierInfo.endIndex) {
                this.tokens.removeToken();
              }
              if (this.tokens.matches1(_types.TokenType.comma)) {
                this.tokens.removeToken();
              }
            } else {
              foundNonTypeImport = true;
              while (this.tokens.currentIndex() < specifierInfo.endIndex) {
                this.tokens.copyToken();
              }
              if (this.tokens.matches1(_types.TokenType.comma)) {
                this.tokens.copyToken();
              }
            }
          }
          this.tokens.copyExpectedToken(_types.TokenType.braceR);
        }
        if (this.keepUnusedImports) {
          return false;
        }
        if (this.isTypeScriptTransformEnabled) {
          return !foundNonTypeImport;
        } else if (this.isFlowTransformEnabled) {
          return foundAnyNamedImport && !foundNonTypeImport;
        } else {
          return false;
        }
      }
      shouldAutomaticallyElideImportedName(name) {
        return this.isTypeScriptTransformEnabled && !this.keepUnusedImports && !this.nonTypeIdentifiers.has(name);
      }
      processExportDefault() {
        if (_shouldElideDefaultExport2.default.call(
          void 0,
          this.isTypeScriptTransformEnabled,
          this.keepUnusedImports,
          this.tokens,
          this.declarationInfo
        )) {
          this.tokens.removeInitialToken();
          this.tokens.removeToken();
          this.tokens.removeToken();
          return true;
        }
        const alreadyHasName = this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._function, _types.TokenType.name) || // export default async function
        this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType.name, _types.TokenType._function, _types.TokenType.name) && this.tokens.matchesContextualAtIndex(
          this.tokens.currentIndex() + 2,
          _keywords.ContextualKeyword._async
        ) || this.tokens.matches4(_types.TokenType._export, _types.TokenType._default, _types.TokenType._class, _types.TokenType.name) || this.tokens.matches5(_types.TokenType._export, _types.TokenType._default, _types.TokenType._abstract, _types.TokenType._class, _types.TokenType.name);
        if (!alreadyHasName && this.reactHotLoaderTransformer) {
          const defaultVarName = this.nameManager.claimFreeName("_default");
          this.tokens.replaceToken(`let ${defaultVarName}; export`);
          this.tokens.copyToken();
          this.tokens.appendCode(` ${defaultVarName} =`);
          this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);
          return true;
        }
        return false;
      }
      /**
       * Handle a statement with one of these forms:
       * export {a, type b};
       * export {c, type d} from 'foo';
       *
       * In both cases, any explicit type exports should be removed. In the first
       * case, we also need to handle implicit export elision for names declared as
       * types. In the second case, we must NOT do implicit named export elision,
       * but we must remove the runtime import if all exports are type exports.
       */
      processNamedExports() {
        if (!this.isTypeScriptTransformEnabled) {
          return false;
        }
        this.tokens.copyExpectedToken(_types.TokenType._export);
        this.tokens.copyExpectedToken(_types.TokenType.braceL);
        const isReExport = _isExportFrom2.default.call(void 0, this.tokens);
        let foundNonTypeExport = false;
        while (!this.tokens.matches1(_types.TokenType.braceR)) {
          const specifierInfo = _getImportExportSpecifierInfo2.default.call(void 0, this.tokens);
          if (specifierInfo.isType || !isReExport && this.shouldElideExportedName(specifierInfo.leftName)) {
            while (this.tokens.currentIndex() < specifierInfo.endIndex) {
              this.tokens.removeToken();
            }
            if (this.tokens.matches1(_types.TokenType.comma)) {
              this.tokens.removeToken();
            }
          } else {
            foundNonTypeExport = true;
            while (this.tokens.currentIndex() < specifierInfo.endIndex) {
              this.tokens.copyToken();
            }
            if (this.tokens.matches1(_types.TokenType.comma)) {
              this.tokens.copyToken();
            }
          }
        }
        this.tokens.copyExpectedToken(_types.TokenType.braceR);
        if (!this.keepUnusedImports && isReExport && !foundNonTypeExport) {
          this.tokens.removeToken();
          this.tokens.removeToken();
          _removeMaybeImportAttributes.removeMaybeImportAttributes.call(void 0, this.tokens);
        }
        return true;
      }
      /**
       * ESM elides all imports with the rule that we only elide if we see that it's
       * a type and never see it as a value. This is in contrast to CJS, which
       * elides imports that are completely unknown.
       */
      shouldElideExportedName(name) {
        return this.isTypeScriptTransformEnabled && !this.keepUnusedImports && this.declarationInfo.typeDeclarations.has(name) && !this.declarationInfo.valueDeclarations.has(name);
      }
    };
    exports2.default = ESMImportTransformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/FlowTransformer.js
var require_FlowTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/FlowTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _keywords = require_keywords();
    var _types = require_types();
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var FlowTransformer = class extends _Transformer2.default {
      constructor(rootTransformer, tokens, isImportsTransformEnabled) {
        super();
        this.rootTransformer = rootTransformer;
        this.tokens = tokens;
        this.isImportsTransformEnabled = isImportsTransformEnabled;
        ;
      }
      process() {
        if (this.rootTransformer.processPossibleArrowParamEnd() || this.rootTransformer.processPossibleAsyncArrowWithTypeParams() || this.rootTransformer.processPossibleTypeRange()) {
          return true;
        }
        if (this.tokens.matches1(_types.TokenType._enum)) {
          this.processEnum();
          return true;
        }
        if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._enum)) {
          this.processNamedExportEnum();
          return true;
        }
        if (this.tokens.matches3(_types.TokenType._export, _types.TokenType._default, _types.TokenType._enum)) {
          this.processDefaultExportEnum();
          return true;
        }
        return false;
      }
      /**
       * Handle a declaration like:
       * export enum E ...
       *
       * With this imports transform, this becomes:
       * const E = [[enum]]; exports.E = E;
       *
       * otherwise, it becomes:
       * export const E = [[enum]];
       */
      processNamedExportEnum() {
        if (this.isImportsTransformEnabled) {
          this.tokens.removeInitialToken();
          const enumName = this.tokens.identifierNameAtRelativeIndex(1);
          this.processEnum();
          this.tokens.appendCode(` exports.${enumName} = ${enumName};`);
        } else {
          this.tokens.copyToken();
          this.processEnum();
        }
      }
      /**
       * Handle a declaration like:
       * export default enum E
       *
       * With the imports transform, this becomes:
       * const E = [[enum]]; exports.default = E;
       *
       * otherwise, it becomes:
       * const E = [[enum]]; export default E;
       */
      processDefaultExportEnum() {
        this.tokens.removeInitialToken();
        this.tokens.removeToken();
        const enumName = this.tokens.identifierNameAtRelativeIndex(1);
        this.processEnum();
        if (this.isImportsTransformEnabled) {
          this.tokens.appendCode(` exports.default = ${enumName};`);
        } else {
          this.tokens.appendCode(` export default ${enumName};`);
        }
      }
      /**
       * Transpile flow enums to invoke the "flow-enums-runtime" library.
       *
       * Currently, the transpiled code always uses `require("flow-enums-runtime")`,
       * but if future flexibility is needed, we could expose a config option for
       * this string (similar to configurable JSX). Even when targeting ESM, the
       * default behavior of babel-plugin-transform-flow-enums is to use require
       * rather than injecting an import.
       *
       * Flow enums are quite a bit simpler than TS enums and have some convenient
       * constraints:
       * - Element initializers must be either always present or always absent. That
       *   means that we can use fixed lookahead on the first element (if any) and
       *   assume that all elements are like that.
       * - The right-hand side of an element initializer must be a literal value,
       *   not a complex expression and not referencing other elements. That means
       *   we can simply copy a single token.
       *
       * Enums can be broken up into three basic cases:
       *
       * Mirrored enums:
       * enum E {A, B}
       *   ->
       * const E = require("flow-enums-runtime").Mirrored(["A", "B"]);
       *
       * Initializer enums:
       * enum E {A = 1, B = 2}
       *   ->
       * const E = require("flow-enums-runtime")({A: 1, B: 2});
       *
       * Symbol enums:
       * enum E of symbol {A, B}
       *   ->
       * const E = require("flow-enums-runtime")({A: Symbol("A"), B: Symbol("B")});
       *
       * We can statically detect which of the three cases this is by looking at the
       * "of" declaration (if any) and seeing if the first element has an initializer.
       * Since the other transform details are so similar between the three cases, we
       * use a single implementation and vary the transform within processEnumElement
       * based on case.
       */
      processEnum() {
        this.tokens.replaceToken("const");
        this.tokens.copyExpectedToken(_types.TokenType.name);
        let isSymbolEnum = false;
        if (this.tokens.matchesContextual(_keywords.ContextualKeyword._of)) {
          this.tokens.removeToken();
          isSymbolEnum = this.tokens.matchesContextual(_keywords.ContextualKeyword._symbol);
          this.tokens.removeToken();
        }
        const hasInitializers = this.tokens.matches3(_types.TokenType.braceL, _types.TokenType.name, _types.TokenType.eq);
        this.tokens.appendCode(' = require("flow-enums-runtime")');
        const isMirrored = !isSymbolEnum && !hasInitializers;
        this.tokens.replaceTokenTrimmingLeftWhitespace(isMirrored ? ".Mirrored([" : "({");
        while (!this.tokens.matches1(_types.TokenType.braceR)) {
          if (this.tokens.matches1(_types.TokenType.ellipsis)) {
            this.tokens.removeToken();
            break;
          }
          this.processEnumElement(isSymbolEnum, hasInitializers);
          if (this.tokens.matches1(_types.TokenType.comma)) {
            this.tokens.copyToken();
          }
        }
        this.tokens.replaceToken(isMirrored ? "]);" : "});");
      }
      /**
       * Process an individual enum element, producing either an array element or an
       * object element based on what type of enum this is.
       */
      processEnumElement(isSymbolEnum, hasInitializers) {
        if (isSymbolEnum) {
          const elementName = this.tokens.identifierName();
          this.tokens.copyToken();
          this.tokens.appendCode(`: Symbol("${elementName}")`);
        } else if (hasInitializers) {
          this.tokens.copyToken();
          this.tokens.replaceTokenTrimmingLeftWhitespace(":");
          this.tokens.copyToken();
        } else {
          this.tokens.replaceToken(`"${this.tokens.identifierName()}"`);
        }
      }
    };
    exports2.default = FlowTransformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/JestHoistTransformer.js
var require_JestHoistTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/JestHoistTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _optionalChain(ops) {
      let lastAccessLHS = void 0;
      let value2 = ops[0];
      let i = 1;
      while (i < ops.length) {
        const op = ops[i];
        const fn = ops[i + 1];
        i += 2;
        if ((op === "optionalAccess" || op === "optionalCall") && value2 == null) {
          return void 0;
        }
        if (op === "access" || op === "optionalAccess") {
          lastAccessLHS = value2;
          value2 = fn(value2);
        } else if (op === "call" || op === "optionalCall") {
          value2 = fn((...args) => value2.call(lastAccessLHS, ...args));
          lastAccessLHS = void 0;
        }
      }
      return value2;
    }
    var _types = require_types();
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var JEST_GLOBAL_NAME = "jest";
    var HOISTED_METHODS = ["mock", "unmock", "enableAutomock", "disableAutomock"];
    var JestHoistTransformer = class _JestHoistTransformer extends _Transformer2.default {
      __init() {
        this.hoistedFunctionNames = [];
      }
      constructor(rootTransformer, tokens, nameManager, importProcessor) {
        super();
        this.rootTransformer = rootTransformer;
        this.tokens = tokens;
        this.nameManager = nameManager;
        this.importProcessor = importProcessor;
        _JestHoistTransformer.prototype.__init.call(this);
        ;
      }
      process() {
        if (this.tokens.currentToken().scopeDepth === 0 && this.tokens.matches4(_types.TokenType.name, _types.TokenType.dot, _types.TokenType.name, _types.TokenType.parenL) && this.tokens.identifierName() === JEST_GLOBAL_NAME) {
          if (_optionalChain([this, "access", (_) => _.importProcessor, "optionalAccess", (_2) => _2.getGlobalNames, "call", (_3) => _3(), "optionalAccess", (_4) => _4.has, "call", (_5) => _5(JEST_GLOBAL_NAME)])) {
            return false;
          }
          return this.extractHoistedCalls();
        }
        return false;
      }
      getHoistedCode() {
        if (this.hoistedFunctionNames.length > 0) {
          return this.hoistedFunctionNames.map((name) => `${name}();`).join("");
        }
        return "";
      }
      /**
       * Extracts any methods calls on the jest-object that should be hoisted.
       *
       * According to the jest docs, https://jestjs.io/docs/en/jest-object#jestmockmodulename-factory-options,
       * mock, unmock, enableAutomock, disableAutomock, are the methods that should be hoisted.
       *
       * We do not apply the same checks of the arguments as babel-plugin-jest-hoist does.
       */
      extractHoistedCalls() {
        this.tokens.removeToken();
        let followsNonHoistedJestCall = false;
        while (this.tokens.matches3(_types.TokenType.dot, _types.TokenType.name, _types.TokenType.parenL)) {
          const methodName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
          const shouldHoist = HOISTED_METHODS.includes(methodName);
          if (shouldHoist) {
            const hoistedFunctionName = this.nameManager.claimFreeName("__jestHoist");
            this.hoistedFunctionNames.push(hoistedFunctionName);
            this.tokens.replaceToken(`function ${hoistedFunctionName}(){${JEST_GLOBAL_NAME}.`);
            this.tokens.copyToken();
            this.tokens.copyToken();
            this.rootTransformer.processBalancedCode();
            this.tokens.copyExpectedToken(_types.TokenType.parenR);
            this.tokens.appendCode(";}");
            followsNonHoistedJestCall = false;
          } else {
            if (followsNonHoistedJestCall) {
              this.tokens.copyToken();
            } else {
              this.tokens.replaceToken(`${JEST_GLOBAL_NAME}.`);
            }
            this.tokens.copyToken();
            this.tokens.copyToken();
            this.rootTransformer.processBalancedCode();
            this.tokens.copyExpectedToken(_types.TokenType.parenR);
            followsNonHoistedJestCall = true;
          }
        }
        return true;
      }
    };
    exports2.default = JestHoistTransformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/NumericSeparatorTransformer.js
var require_NumericSeparatorTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/NumericSeparatorTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _types = require_types();
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var NumericSeparatorTransformer = class extends _Transformer2.default {
      constructor(tokens) {
        super();
        this.tokens = tokens;
        ;
      }
      process() {
        if (this.tokens.matches1(_types.TokenType.num)) {
          const code = this.tokens.currentTokenCode();
          if (code.includes("_")) {
            this.tokens.replaceToken(code.replace(/_/g, ""));
            return true;
          }
        }
        return false;
      }
    };
    exports2.default = NumericSeparatorTransformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/OptionalCatchBindingTransformer.js
var require_OptionalCatchBindingTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/OptionalCatchBindingTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _types = require_types();
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var OptionalCatchBindingTransformer = class extends _Transformer2.default {
      constructor(tokens, nameManager) {
        super();
        this.tokens = tokens;
        this.nameManager = nameManager;
        ;
      }
      process() {
        if (this.tokens.matches2(_types.TokenType._catch, _types.TokenType.braceL)) {
          this.tokens.copyToken();
          this.tokens.appendCode(` (${this.nameManager.claimFreeName("e")})`);
          return true;
        }
        return false;
      }
    };
    exports2.default = OptionalCatchBindingTransformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/OptionalChainingNullishTransformer.js
var require_OptionalChainingNullishTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/OptionalChainingNullishTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _types = require_types();
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var OptionalChainingNullishTransformer = class extends _Transformer2.default {
      constructor(tokens, nameManager) {
        super();
        this.tokens = tokens;
        this.nameManager = nameManager;
        ;
      }
      process() {
        if (this.tokens.matches1(_types.TokenType.nullishCoalescing)) {
          const token2 = this.tokens.currentToken();
          if (this.tokens.tokens[token2.nullishStartIndex].isAsyncOperation) {
            this.tokens.replaceTokenTrimmingLeftWhitespace(", async () => (");
          } else {
            this.tokens.replaceTokenTrimmingLeftWhitespace(", () => (");
          }
          return true;
        }
        if (this.tokens.matches1(_types.TokenType._delete)) {
          const nextToken = this.tokens.tokenAtRelativeIndex(1);
          if (nextToken.isOptionalChainStart) {
            this.tokens.removeInitialToken();
            return true;
          }
        }
        const token = this.tokens.currentToken();
        const chainStart = token.subscriptStartIndex;
        if (chainStart != null && this.tokens.tokens[chainStart].isOptionalChainStart && // Super subscripts can't be optional (since super is never null/undefined), and the syntax
        // relies on the subscript being intact, so leave this token alone.
        this.tokens.tokenAtRelativeIndex(-1).type !== _types.TokenType._super) {
          const param = this.nameManager.claimFreeName("_");
          let arrowStartSnippet;
          if (chainStart > 0 && this.tokens.matches1AtIndex(chainStart - 1, _types.TokenType._delete) && this.isLastSubscriptInChain()) {
            arrowStartSnippet = `${param} => delete ${param}`;
          } else {
            arrowStartSnippet = `${param} => ${param}`;
          }
          if (this.tokens.tokens[chainStart].isAsyncOperation) {
            arrowStartSnippet = `async ${arrowStartSnippet}`;
          }
          if (this.tokens.matches2(_types.TokenType.questionDot, _types.TokenType.parenL) || this.tokens.matches2(_types.TokenType.questionDot, _types.TokenType.lessThan)) {
            if (this.justSkippedSuper()) {
              this.tokens.appendCode(".bind(this)");
            }
            this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalCall', ${arrowStartSnippet}`);
          } else if (this.tokens.matches2(_types.TokenType.questionDot, _types.TokenType.bracketL)) {
            this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${arrowStartSnippet}`);
          } else if (this.tokens.matches1(_types.TokenType.questionDot)) {
            this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${arrowStartSnippet}.`);
          } else if (this.tokens.matches1(_types.TokenType.dot)) {
            this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${arrowStartSnippet}.`);
          } else if (this.tokens.matches1(_types.TokenType.bracketL)) {
            this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${arrowStartSnippet}[`);
          } else if (this.tokens.matches1(_types.TokenType.parenL)) {
            if (this.justSkippedSuper()) {
              this.tokens.appendCode(".bind(this)");
            }
            this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'call', ${arrowStartSnippet}(`);
          } else {
            throw new Error("Unexpected subscript operator in optional chain.");
          }
          return true;
        }
        return false;
      }
      /**
       * Determine if the current token is the last of its chain, so that we know whether it's eligible
       * to have a delete op inserted.
       *
       * We can do this by walking forward until we determine one way or another. Each
       * isOptionalChainStart token must be paired with exactly one isOptionalChainEnd token after it in
       * a nesting way, so we can track depth and walk to the end of the chain (the point where the
       * depth goes negative) and see if any other subscript token is after us in the chain.
       */
      isLastSubscriptInChain() {
        let depth = 0;
        for (let i = this.tokens.currentIndex() + 1; ; i++) {
          if (i >= this.tokens.tokens.length) {
            throw new Error("Reached the end of the code while finding the end of the access chain.");
          }
          if (this.tokens.tokens[i].isOptionalChainStart) {
            depth++;
          } else if (this.tokens.tokens[i].isOptionalChainEnd) {
            depth--;
          }
          if (depth < 0) {
            return true;
          }
          if (depth === 0 && this.tokens.tokens[i].subscriptStartIndex != null) {
            return false;
          }
        }
      }
      /**
       * Determine if we are the open-paren in an expression like super.a()?.b.
       *
       * We can do this by walking backward to find the previous subscript. If that subscript was
       * preceded by a super, then we must be the subscript after it, so if this is a call expression,
       * we'll need to attach the right context.
       */
      justSkippedSuper() {
        let depth = 0;
        let index = this.tokens.currentIndex() - 1;
        while (true) {
          if (index < 0) {
            throw new Error(
              "Reached the start of the code while finding the start of the access chain."
            );
          }
          if (this.tokens.tokens[index].isOptionalChainStart) {
            depth--;
          } else if (this.tokens.tokens[index].isOptionalChainEnd) {
            depth++;
          }
          if (depth < 0) {
            return false;
          }
          if (depth === 0 && this.tokens.tokens[index].subscriptStartIndex != null) {
            return this.tokens.tokens[index - 1].type === _types.TokenType._super;
          }
          index--;
        }
      }
    };
    exports2.default = OptionalChainingNullishTransformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/ReactDisplayNameTransformer.js
var require_ReactDisplayNameTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/ReactDisplayNameTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _tokenizer = require_tokenizer();
    var _types = require_types();
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var ReactDisplayNameTransformer = class extends _Transformer2.default {
      constructor(rootTransformer, tokens, importProcessor, options) {
        super();
        this.rootTransformer = rootTransformer;
        this.tokens = tokens;
        this.importProcessor = importProcessor;
        this.options = options;
        ;
      }
      process() {
        const startIndex = this.tokens.currentIndex();
        if (this.tokens.identifierName() === "createReactClass") {
          const newName = this.importProcessor && this.importProcessor.getIdentifierReplacement("createReactClass");
          if (newName) {
            this.tokens.replaceToken(`(0, ${newName})`);
          } else {
            this.tokens.copyToken();
          }
          this.tryProcessCreateClassCall(startIndex);
          return true;
        }
        if (this.tokens.matches3(_types.TokenType.name, _types.TokenType.dot, _types.TokenType.name) && this.tokens.identifierName() === "React" && this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2) === "createClass") {
          const newName = this.importProcessor ? this.importProcessor.getIdentifierReplacement("React") || "React" : "React";
          if (newName) {
            this.tokens.replaceToken(newName);
            this.tokens.copyToken();
            this.tokens.copyToken();
          } else {
            this.tokens.copyToken();
            this.tokens.copyToken();
            this.tokens.copyToken();
          }
          this.tryProcessCreateClassCall(startIndex);
          return true;
        }
        return false;
      }
      /**
       * This is called with the token position at the open-paren.
       */
      tryProcessCreateClassCall(startIndex) {
        const displayName = this.findDisplayName(startIndex);
        if (!displayName) {
          return;
        }
        if (this.classNeedsDisplayName()) {
          this.tokens.copyExpectedToken(_types.TokenType.parenL);
          this.tokens.copyExpectedToken(_types.TokenType.braceL);
          this.tokens.appendCode(`displayName: '${displayName}',`);
          this.rootTransformer.processBalancedCode();
          this.tokens.copyExpectedToken(_types.TokenType.braceR);
          this.tokens.copyExpectedToken(_types.TokenType.parenR);
        }
      }
      findDisplayName(startIndex) {
        if (startIndex < 2) {
          return null;
        }
        if (this.tokens.matches2AtIndex(startIndex - 2, _types.TokenType.name, _types.TokenType.eq)) {
          return this.tokens.identifierNameAtIndex(startIndex - 2);
        }
        if (startIndex >= 2 && this.tokens.tokens[startIndex - 2].identifierRole === _tokenizer.IdentifierRole.ObjectKey) {
          return this.tokens.identifierNameAtIndex(startIndex - 2);
        }
        if (this.tokens.matches2AtIndex(startIndex - 2, _types.TokenType._export, _types.TokenType._default)) {
          return this.getDisplayNameFromFilename();
        }
        return null;
      }
      getDisplayNameFromFilename() {
        const filePath = this.options.filePath || "unknown";
        const pathSegments = filePath.split("/");
        const filename = pathSegments[pathSegments.length - 1];
        const dotIndex = filename.lastIndexOf(".");
        const baseFilename = dotIndex === -1 ? filename : filename.slice(0, dotIndex);
        if (baseFilename === "index" && pathSegments[pathSegments.length - 2]) {
          return pathSegments[pathSegments.length - 2];
        } else {
          return baseFilename;
        }
      }
      /**
       * We only want to add a display name when this is a function call containing
       * one argument, which is an object literal without `displayName` as an
       * existing key.
       */
      classNeedsDisplayName() {
        let index = this.tokens.currentIndex();
        if (!this.tokens.matches2(_types.TokenType.parenL, _types.TokenType.braceL)) {
          return false;
        }
        const objectStartIndex = index + 1;
        const objectContextId = this.tokens.tokens[objectStartIndex].contextId;
        if (objectContextId == null) {
          throw new Error("Expected non-null context ID on object open-brace.");
        }
        for (; index < this.tokens.tokens.length; index++) {
          const token = this.tokens.tokens[index];
          if (token.type === _types.TokenType.braceR && token.contextId === objectContextId) {
            index++;
            break;
          }
          if (this.tokens.identifierNameAtIndex(index) === "displayName" && this.tokens.tokens[index].identifierRole === _tokenizer.IdentifierRole.ObjectKey && token.contextId === objectContextId) {
            return false;
          }
        }
        if (index === this.tokens.tokens.length) {
          throw new Error("Unexpected end of input when processing React class.");
        }
        return this.tokens.matches1AtIndex(index, _types.TokenType.parenR) || this.tokens.matches2AtIndex(index, _types.TokenType.comma, _types.TokenType.parenR);
      }
    };
    exports2.default = ReactDisplayNameTransformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/ReactHotLoaderTransformer.js
var require_ReactHotLoaderTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/ReactHotLoaderTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _tokenizer = require_tokenizer();
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var ReactHotLoaderTransformer = class _ReactHotLoaderTransformer extends _Transformer2.default {
      __init() {
        this.extractedDefaultExportName = null;
      }
      constructor(tokens, filePath) {
        super();
        this.tokens = tokens;
        this.filePath = filePath;
        _ReactHotLoaderTransformer.prototype.__init.call(this);
        ;
      }
      setExtractedDefaultExportName(extractedDefaultExportName) {
        this.extractedDefaultExportName = extractedDefaultExportName;
      }
      getPrefixCode() {
        return `
      (function () {
        var enterModule = require('react-hot-loader').enterModule;
        enterModule && enterModule(module);
      })();`.replace(/\s+/g, " ").trim();
      }
      getSuffixCode() {
        const topLevelNames = /* @__PURE__ */ new Set();
        for (const token of this.tokens.tokens) {
          if (!token.isType && _tokenizer.isTopLevelDeclaration.call(void 0, token) && token.identifierRole !== _tokenizer.IdentifierRole.ImportDeclaration) {
            topLevelNames.add(this.tokens.identifierNameForToken(token));
          }
        }
        const namesToRegister = Array.from(topLevelNames).map((name) => ({
          variableName: name,
          uniqueLocalName: name
        }));
        if (this.extractedDefaultExportName) {
          namesToRegister.push({
            variableName: this.extractedDefaultExportName,
            uniqueLocalName: "default"
          });
        }
        return `
;(function () {
  var reactHotLoader = require('react-hot-loader').default;
  var leaveModule = require('react-hot-loader').leaveModule;
  if (!reactHotLoader) {
    return;
  }
${namesToRegister.map(
          ({ variableName, uniqueLocalName }) => `  reactHotLoader.register(${variableName}, "${uniqueLocalName}", ${JSON.stringify(
            this.filePath || ""
          )});`
        ).join("\n")}
  leaveModule(module);
})();`;
      }
      process() {
        return false;
      }
    };
    exports2.default = ReactHotLoaderTransformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/isIdentifier.js
var require_isIdentifier = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/isIdentifier.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _identifier = require_identifier();
    var RESERVED_WORDS = /* @__PURE__ */ new Set([
      // Reserved keywords as of ECMAScript 2015
      "break",
      "case",
      "catch",
      "class",
      "const",
      "continue",
      "debugger",
      "default",
      "delete",
      "do",
      "else",
      "export",
      "extends",
      "finally",
      "for",
      "function",
      "if",
      "import",
      "in",
      "instanceof",
      "new",
      "return",
      "super",
      "switch",
      "this",
      "throw",
      "try",
      "typeof",
      "var",
      "void",
      "while",
      "with",
      "yield",
      // Future reserved keywords
      "enum",
      "implements",
      "interface",
      "let",
      "package",
      "private",
      "protected",
      "public",
      "static",
      "await",
      // Literals that cannot be used as identifiers
      "false",
      "null",
      "true"
    ]);
    function isIdentifier(name) {
      if (name.length === 0) {
        return false;
      }
      if (!_identifier.IS_IDENTIFIER_START[name.charCodeAt(0)]) {
        return false;
      }
      for (let i = 1; i < name.length; i++) {
        if (!_identifier.IS_IDENTIFIER_CHAR[name.charCodeAt(i)]) {
          return false;
        }
      }
      return !RESERVED_WORDS.has(name);
    }
    exports2.default = isIdentifier;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/TypeScriptTransformer.js
var require_TypeScriptTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/TypeScriptTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _types = require_types();
    var _isIdentifier = require_isIdentifier();
    var _isIdentifier2 = _interopRequireDefault(_isIdentifier);
    var _Transformer = require_Transformer();
    var _Transformer2 = _interopRequireDefault(_Transformer);
    var TypeScriptTransformer = class extends _Transformer2.default {
      constructor(rootTransformer, tokens, isImportsTransformEnabled) {
        super();
        this.rootTransformer = rootTransformer;
        this.tokens = tokens;
        this.isImportsTransformEnabled = isImportsTransformEnabled;
        ;
      }
      process() {
        if (this.rootTransformer.processPossibleArrowParamEnd() || this.rootTransformer.processPossibleAsyncArrowWithTypeParams() || this.rootTransformer.processPossibleTypeRange()) {
          return true;
        }
        if (this.tokens.matches1(_types.TokenType._public) || this.tokens.matches1(_types.TokenType._protected) || this.tokens.matches1(_types.TokenType._private) || this.tokens.matches1(_types.TokenType._abstract) || this.tokens.matches1(_types.TokenType._readonly) || this.tokens.matches1(_types.TokenType._override) || this.tokens.matches1(_types.TokenType.nonNullAssertion)) {
          this.tokens.removeInitialToken();
          return true;
        }
        if (this.tokens.matches1(_types.TokenType._enum) || this.tokens.matches2(_types.TokenType._const, _types.TokenType._enum)) {
          this.processEnum();
          return true;
        }
        if (this.tokens.matches2(_types.TokenType._export, _types.TokenType._enum) || this.tokens.matches3(_types.TokenType._export, _types.TokenType._const, _types.TokenType._enum)) {
          this.processEnum(true);
          return true;
        }
        return false;
      }
      processEnum(isExport = false) {
        this.tokens.removeInitialToken();
        while (this.tokens.matches1(_types.TokenType._const) || this.tokens.matches1(_types.TokenType._enum)) {
          this.tokens.removeToken();
        }
        const enumName = this.tokens.identifierName();
        this.tokens.removeToken();
        if (isExport && !this.isImportsTransformEnabled) {
          this.tokens.appendCode("export ");
        }
        this.tokens.appendCode(`var ${enumName}; (function (${enumName})`);
        this.tokens.copyExpectedToken(_types.TokenType.braceL);
        this.processEnumBody(enumName);
        this.tokens.copyExpectedToken(_types.TokenType.braceR);
        if (isExport && this.isImportsTransformEnabled) {
          this.tokens.appendCode(`)(${enumName} || (exports.${enumName} = ${enumName} = {}));`);
        } else {
          this.tokens.appendCode(`)(${enumName} || (${enumName} = {}));`);
        }
      }
      /**
       * Transform an enum into equivalent JS. This has complexity in a few places:
       * - TS allows string enums, numeric enums, and a mix of the two styles within an enum.
       * - Enum keys are allowed to be referenced in later enum values.
       * - Enum keys are allowed to be strings.
       * - When enum values are omitted, they should follow an auto-increment behavior.
       */
      processEnumBody(enumName) {
        let previousValueCode = null;
        while (true) {
          if (this.tokens.matches1(_types.TokenType.braceR)) {
            break;
          }
          const { nameStringCode, variableName } = this.extractEnumKeyInfo(this.tokens.currentToken());
          this.tokens.removeInitialToken();
          if (this.tokens.matches3(_types.TokenType.eq, _types.TokenType.string, _types.TokenType.comma) || this.tokens.matches3(_types.TokenType.eq, _types.TokenType.string, _types.TokenType.braceR)) {
            this.processStringLiteralEnumMember(enumName, nameStringCode, variableName);
          } else if (this.tokens.matches1(_types.TokenType.eq)) {
            this.processExplicitValueEnumMember(enumName, nameStringCode, variableName);
          } else {
            this.processImplicitValueEnumMember(
              enumName,
              nameStringCode,
              variableName,
              previousValueCode
            );
          }
          if (this.tokens.matches1(_types.TokenType.comma)) {
            this.tokens.removeToken();
          }
          if (variableName != null) {
            previousValueCode = variableName;
          } else {
            previousValueCode = `${enumName}[${nameStringCode}]`;
          }
        }
      }
      /**
       * Detect name information about this enum key, which will be used to determine which code to emit
       * and whether we should declare a variable as part of this declaration.
       *
       * Some cases to keep in mind:
       * - Enum keys can be implicitly referenced later, e.g. `X = 1, Y = X`. In Sucrase, we implement
       *   this by declaring a variable `X` so that later expressions can use it.
       * - In addition to the usual identifier key syntax, enum keys are allowed to be string literals,
       *   e.g. `"hello world" = 3,`. Template literal syntax is NOT allowed.
       * - Even if the enum key is defined as a string literal, it may still be referenced by identifier
       *   later, e.g. `"X" = 1, Y = X`. That means that we need to detect whether or not a string
       *   literal is identifier-like and emit a variable if so, even if the declaration did not use an
       *   identifier.
       * - Reserved keywords like `break` are valid enum keys, but are not valid to be referenced later
       *   and would be a syntax error if we emitted a variable, so we need to skip the variable
       *   declaration in those cases.
       *
       * The variableName return value captures these nuances: if non-null, we can and must emit a
       * variable declaration, and if null, we can't and shouldn't.
       */
      extractEnumKeyInfo(nameToken) {
        if (nameToken.type === _types.TokenType.name) {
          const name = this.tokens.identifierNameForToken(nameToken);
          return {
            nameStringCode: `"${name}"`,
            variableName: _isIdentifier2.default.call(void 0, name) ? name : null
          };
        } else if (nameToken.type === _types.TokenType.string) {
          const name = this.tokens.stringValueForToken(nameToken);
          return {
            nameStringCode: this.tokens.code.slice(nameToken.start, nameToken.end),
            variableName: _isIdentifier2.default.call(void 0, name) ? name : null
          };
        } else {
          throw new Error("Expected name or string at beginning of enum element.");
        }
      }
      /**
       * Handle an enum member where the RHS is just a string literal (not omitted, not a number, and
       * not a complex expression). This is the typical form for TS string enums, and in this case, we
       * do *not* create a reverse mapping.
       *
       * This is called after deleting the key token, when the token processor is at the equals sign.
       *
       * Example 1:
       * someKey = "some value"
       * ->
       * const someKey = "some value"; MyEnum["someKey"] = someKey;
       *
       * Example 2:
       * "some key" = "some value"
       * ->
       * MyEnum["some key"] = "some value";
       */
      processStringLiteralEnumMember(enumName, nameStringCode, variableName) {
        if (variableName != null) {
          this.tokens.appendCode(`const ${variableName}`);
          this.tokens.copyToken();
          this.tokens.copyToken();
          this.tokens.appendCode(`; ${enumName}[${nameStringCode}] = ${variableName};`);
        } else {
          this.tokens.appendCode(`${enumName}[${nameStringCode}]`);
          this.tokens.copyToken();
          this.tokens.copyToken();
          this.tokens.appendCode(";");
        }
      }
      /**
       * Handle an enum member initialized with an expression on the right-hand side (other than a
       * string literal). In these cases, we should transform the expression and emit code that sets up
       * a reverse mapping.
       *
       * The TypeScript implementation of this operation distinguishes between expressions that can be
       * "constant folded" at compile time (i.e. consist of number literals and simple math operations
       * on those numbers) and ones that are dynamic. For constant expressions, it emits the resolved
       * numeric value, and auto-incrementing is only allowed in that case. Evaluating expressions at
       * compile time would add significant complexity to Sucrase, so Sucrase instead leaves the
       * expression as-is, and will later emit something like `MyEnum["previousKey"] + 1` to implement
       * auto-incrementing.
       *
       * This is called after deleting the key token, when the token processor is at the equals sign.
       *
       * Example 1:
       * someKey = 1 + 1
       * ->
       * const someKey = 1 + 1; MyEnum[MyEnum["someKey"] = someKey] = "someKey";
       *
       * Example 2:
       * "some key" = 1 + 1
       * ->
       * MyEnum[MyEnum["some key"] = 1 + 1] = "some key";
       */
      processExplicitValueEnumMember(enumName, nameStringCode, variableName) {
        const rhsEndIndex = this.tokens.currentToken().rhsEndIndex;
        if (rhsEndIndex == null) {
          throw new Error("Expected rhsEndIndex on enum assign.");
        }
        if (variableName != null) {
          this.tokens.appendCode(`const ${variableName}`);
          this.tokens.copyToken();
          while (this.tokens.currentIndex() < rhsEndIndex) {
            this.rootTransformer.processToken();
          }
          this.tokens.appendCode(
            `; ${enumName}[${enumName}[${nameStringCode}] = ${variableName}] = ${nameStringCode};`
          );
        } else {
          this.tokens.appendCode(`${enumName}[${enumName}[${nameStringCode}]`);
          this.tokens.copyToken();
          while (this.tokens.currentIndex() < rhsEndIndex) {
            this.rootTransformer.processToken();
          }
          this.tokens.appendCode(`] = ${nameStringCode};`);
        }
      }
      /**
       * Handle an enum member with no right-hand side expression. In this case, the value is the
       * previous value plus 1, or 0 if there was no previous value. We should also always emit a
       * reverse mapping.
       *
       * Example 1:
       * someKey2
       * ->
       * const someKey2 = someKey1 + 1; MyEnum[MyEnum["someKey2"] = someKey2] = "someKey2";
       *
       * Example 2:
       * "some key 2"
       * ->
       * MyEnum[MyEnum["some key 2"] = someKey1 + 1] = "some key 2";
       */
      processImplicitValueEnumMember(enumName, nameStringCode, variableName, previousValueCode) {
        let valueCode = previousValueCode != null ? `${previousValueCode} + 1` : "0";
        if (variableName != null) {
          this.tokens.appendCode(`const ${variableName} = ${valueCode}; `);
          valueCode = variableName;
        }
        this.tokens.appendCode(
          `${enumName}[${enumName}[${nameStringCode}] = ${valueCode}] = ${nameStringCode};`
        );
      }
    };
    exports2.default = TypeScriptTransformer;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/RootTransformer.js
var require_RootTransformer = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/transformers/RootTransformer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _keywords = require_keywords();
    var _types = require_types();
    var _getClassInfo = require_getClassInfo();
    var _getClassInfo2 = _interopRequireDefault(_getClassInfo);
    var _CJSImportTransformer = require_CJSImportTransformer();
    var _CJSImportTransformer2 = _interopRequireDefault(_CJSImportTransformer);
    var _ESMImportTransformer = require_ESMImportTransformer();
    var _ESMImportTransformer2 = _interopRequireDefault(_ESMImportTransformer);
    var _FlowTransformer = require_FlowTransformer();
    var _FlowTransformer2 = _interopRequireDefault(_FlowTransformer);
    var _JestHoistTransformer = require_JestHoistTransformer();
    var _JestHoistTransformer2 = _interopRequireDefault(_JestHoistTransformer);
    var _JSXTransformer = require_JSXTransformer();
    var _JSXTransformer2 = _interopRequireDefault(_JSXTransformer);
    var _NumericSeparatorTransformer = require_NumericSeparatorTransformer();
    var _NumericSeparatorTransformer2 = _interopRequireDefault(_NumericSeparatorTransformer);
    var _OptionalCatchBindingTransformer = require_OptionalCatchBindingTransformer();
    var _OptionalCatchBindingTransformer2 = _interopRequireDefault(_OptionalCatchBindingTransformer);
    var _OptionalChainingNullishTransformer = require_OptionalChainingNullishTransformer();
    var _OptionalChainingNullishTransformer2 = _interopRequireDefault(_OptionalChainingNullishTransformer);
    var _ReactDisplayNameTransformer = require_ReactDisplayNameTransformer();
    var _ReactDisplayNameTransformer2 = _interopRequireDefault(_ReactDisplayNameTransformer);
    var _ReactHotLoaderTransformer = require_ReactHotLoaderTransformer();
    var _ReactHotLoaderTransformer2 = _interopRequireDefault(_ReactHotLoaderTransformer);
    var _TypeScriptTransformer = require_TypeScriptTransformer();
    var _TypeScriptTransformer2 = _interopRequireDefault(_TypeScriptTransformer);
    var RootTransformer = class _RootTransformer {
      __init() {
        this.transformers = [];
      }
      __init2() {
        this.generatedVariables = [];
      }
      constructor(sucraseContext, transforms, enableLegacyBabel5ModuleInterop, options) {
        ;
        _RootTransformer.prototype.__init.call(this);
        _RootTransformer.prototype.__init2.call(this);
        this.nameManager = sucraseContext.nameManager;
        this.helperManager = sucraseContext.helperManager;
        const { tokenProcessor, importProcessor } = sucraseContext;
        this.tokens = tokenProcessor;
        this.isImportsTransformEnabled = transforms.includes("imports");
        this.isReactHotLoaderTransformEnabled = transforms.includes("react-hot-loader");
        this.disableESTransforms = Boolean(options.disableESTransforms);
        if (!options.disableESTransforms) {
          this.transformers.push(
            new (0, _OptionalChainingNullishTransformer2.default)(tokenProcessor, this.nameManager)
          );
          this.transformers.push(new (0, _NumericSeparatorTransformer2.default)(tokenProcessor));
          this.transformers.push(new (0, _OptionalCatchBindingTransformer2.default)(tokenProcessor, this.nameManager));
        }
        if (transforms.includes("jsx")) {
          if (options.jsxRuntime !== "preserve") {
            this.transformers.push(
              new (0, _JSXTransformer2.default)(this, tokenProcessor, importProcessor, this.nameManager, options)
            );
          }
          this.transformers.push(
            new (0, _ReactDisplayNameTransformer2.default)(this, tokenProcessor, importProcessor, options)
          );
        }
        let reactHotLoaderTransformer = null;
        if (transforms.includes("react-hot-loader")) {
          if (!options.filePath) {
            throw new Error("filePath is required when using the react-hot-loader transform.");
          }
          reactHotLoaderTransformer = new (0, _ReactHotLoaderTransformer2.default)(tokenProcessor, options.filePath);
          this.transformers.push(reactHotLoaderTransformer);
        }
        if (transforms.includes("imports")) {
          if (importProcessor === null) {
            throw new Error("Expected non-null importProcessor with imports transform enabled.");
          }
          this.transformers.push(
            new (0, _CJSImportTransformer2.default)(
              this,
              tokenProcessor,
              importProcessor,
              this.nameManager,
              this.helperManager,
              reactHotLoaderTransformer,
              enableLegacyBabel5ModuleInterop,
              Boolean(options.enableLegacyTypeScriptModuleInterop),
              transforms.includes("typescript"),
              transforms.includes("flow"),
              Boolean(options.preserveDynamicImport),
              Boolean(options.keepUnusedImports)
            )
          );
        } else {
          this.transformers.push(
            new (0, _ESMImportTransformer2.default)(
              tokenProcessor,
              this.nameManager,
              this.helperManager,
              reactHotLoaderTransformer,
              transforms.includes("typescript"),
              transforms.includes("flow"),
              Boolean(options.keepUnusedImports),
              options
            )
          );
        }
        if (transforms.includes("flow")) {
          this.transformers.push(
            new (0, _FlowTransformer2.default)(this, tokenProcessor, transforms.includes("imports"))
          );
        }
        if (transforms.includes("typescript")) {
          this.transformers.push(
            new (0, _TypeScriptTransformer2.default)(this, tokenProcessor, transforms.includes("imports"))
          );
        }
        if (transforms.includes("jest")) {
          this.transformers.push(
            new (0, _JestHoistTransformer2.default)(this, tokenProcessor, this.nameManager, importProcessor)
          );
        }
      }
      transform() {
        this.tokens.reset();
        this.processBalancedCode();
        const shouldAddUseStrict = this.isImportsTransformEnabled;
        let prefix = shouldAddUseStrict ? '"use strict";' : "";
        for (const transformer of this.transformers) {
          prefix += transformer.getPrefixCode();
        }
        prefix += this.helperManager.emitHelpers();
        prefix += this.generatedVariables.map((v) => ` var ${v};`).join("");
        for (const transformer of this.transformers) {
          prefix += transformer.getHoistedCode();
        }
        let suffix = "";
        for (const transformer of this.transformers) {
          suffix += transformer.getSuffixCode();
        }
        const result = this.tokens.finish();
        let { code } = result;
        if (code.startsWith("#!")) {
          let newlineIndex = code.indexOf("\n");
          if (newlineIndex === -1) {
            newlineIndex = code.length;
            code += "\n";
          }
          return {
            code: code.slice(0, newlineIndex + 1) + prefix + code.slice(newlineIndex + 1) + suffix,
            // The hashbang line has no tokens, so shifting the tokens to account
            // for prefix can happen normally.
            mappings: this.shiftMappings(result.mappings, prefix.length)
          };
        } else {
          return {
            code: prefix + code + suffix,
            mappings: this.shiftMappings(result.mappings, prefix.length)
          };
        }
      }
      processBalancedCode() {
        let braceDepth = 0;
        let parenDepth = 0;
        while (!this.tokens.isAtEnd()) {
          if (this.tokens.matches1(_types.TokenType.braceL) || this.tokens.matches1(_types.TokenType.dollarBraceL)) {
            braceDepth++;
          } else if (this.tokens.matches1(_types.TokenType.braceR)) {
            if (braceDepth === 0) {
              return;
            }
            braceDepth--;
          }
          if (this.tokens.matches1(_types.TokenType.parenL)) {
            parenDepth++;
          } else if (this.tokens.matches1(_types.TokenType.parenR)) {
            if (parenDepth === 0) {
              return;
            }
            parenDepth--;
          }
          this.processToken();
        }
      }
      processToken() {
        if (this.tokens.matches1(_types.TokenType._class)) {
          this.processClass();
          return;
        }
        for (const transformer of this.transformers) {
          const wasProcessed = transformer.process();
          if (wasProcessed) {
            return;
          }
        }
        this.tokens.copyToken();
      }
      /**
       * Skip past a class with a name and return that name.
       */
      processNamedClass() {
        if (!this.tokens.matches2(_types.TokenType._class, _types.TokenType.name)) {
          throw new Error("Expected identifier for exported class name.");
        }
        const name = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
        this.processClass();
        return name;
      }
      processClass() {
        const classInfo = _getClassInfo2.default.call(void 0, this, this.tokens, this.nameManager, this.disableESTransforms);
        const needsCommaExpression = (classInfo.headerInfo.isExpression || !classInfo.headerInfo.className) && classInfo.staticInitializerNames.length + classInfo.instanceInitializerNames.length > 0;
        let className = classInfo.headerInfo.className;
        if (needsCommaExpression) {
          className = this.nameManager.claimFreeName("_class");
          this.generatedVariables.push(className);
          this.tokens.appendCode(` (${className} =`);
        }
        const classToken = this.tokens.currentToken();
        const contextId = classToken.contextId;
        if (contextId == null) {
          throw new Error("Expected class to have a context ID.");
        }
        this.tokens.copyExpectedToken(_types.TokenType._class);
        while (!this.tokens.matchesContextIdAndLabel(_types.TokenType.braceL, contextId)) {
          this.processToken();
        }
        this.processClassBody(classInfo, className);
        const staticInitializerStatements = classInfo.staticInitializerNames.map(
          (name) => `${className}.${name}()`
        );
        if (needsCommaExpression) {
          this.tokens.appendCode(
            `, ${staticInitializerStatements.map((s) => `${s}, `).join("")}${className})`
          );
        } else if (classInfo.staticInitializerNames.length > 0) {
          this.tokens.appendCode(` ${staticInitializerStatements.map((s) => `${s};`).join(" ")}`);
        }
      }
      /**
       * We want to just handle class fields in all contexts, since TypeScript supports them. Later,
       * when some JS implementations support class fields, this should be made optional.
       */
      processClassBody(classInfo, className) {
        const {
          headerInfo,
          constructorInsertPos,
          constructorInitializerStatements,
          fields,
          instanceInitializerNames,
          rangesToRemove
        } = classInfo;
        let fieldIndex = 0;
        let rangeToRemoveIndex = 0;
        const classContextId = this.tokens.currentToken().contextId;
        if (classContextId == null) {
          throw new Error("Expected non-null context ID on class.");
        }
        this.tokens.copyExpectedToken(_types.TokenType.braceL);
        if (this.isReactHotLoaderTransformEnabled) {
          this.tokens.appendCode(
            "__reactstandin__regenerateByEval(key, code) {this[key] = eval(code);}"
          );
        }
        const needsConstructorInit = constructorInitializerStatements.length + instanceInitializerNames.length > 0;
        if (constructorInsertPos === null && needsConstructorInit) {
          const constructorInitializersCode = this.makeConstructorInitCode(
            constructorInitializerStatements,
            instanceInitializerNames,
            className
          );
          if (headerInfo.hasSuperclass) {
            const argsName = this.nameManager.claimFreeName("args");
            this.tokens.appendCode(
              `constructor(...${argsName}) { super(...${argsName}); ${constructorInitializersCode}; }`
            );
          } else {
            this.tokens.appendCode(`constructor() { ${constructorInitializersCode}; }`);
          }
        }
        while (!this.tokens.matchesContextIdAndLabel(_types.TokenType.braceR, classContextId)) {
          if (fieldIndex < fields.length && this.tokens.currentIndex() === fields[fieldIndex].start) {
            let needsCloseBrace = false;
            if (this.tokens.matches1(_types.TokenType.bracketL)) {
              this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this`);
            } else if (this.tokens.matches1(_types.TokenType.string) || this.tokens.matches1(_types.TokenType.num)) {
              this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this[`);
              needsCloseBrace = true;
            } else {
              this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this.`);
            }
            while (this.tokens.currentIndex() < fields[fieldIndex].end) {
              if (needsCloseBrace && this.tokens.currentIndex() === fields[fieldIndex].equalsIndex) {
                this.tokens.appendCode("]");
              }
              this.processToken();
            }
            this.tokens.appendCode("}");
            fieldIndex++;
          } else if (rangeToRemoveIndex < rangesToRemove.length && this.tokens.currentIndex() >= rangesToRemove[rangeToRemoveIndex].start) {
            if (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {
              this.tokens.removeInitialToken();
            }
            while (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {
              this.tokens.removeToken();
            }
            rangeToRemoveIndex++;
          } else if (this.tokens.currentIndex() === constructorInsertPos) {
            this.tokens.copyToken();
            if (needsConstructorInit) {
              this.tokens.appendCode(
                `;${this.makeConstructorInitCode(
                  constructorInitializerStatements,
                  instanceInitializerNames,
                  className
                )};`
              );
            }
            this.processToken();
          } else {
            this.processToken();
          }
        }
        this.tokens.copyExpectedToken(_types.TokenType.braceR);
      }
      makeConstructorInitCode(constructorInitializerStatements, instanceInitializerNames, className) {
        return [
          ...constructorInitializerStatements,
          ...instanceInitializerNames.map((name) => `${className}.prototype.${name}.call(this)`)
        ].join(";");
      }
      /**
       * Normally it's ok to simply remove type tokens, but we need to be more careful when dealing with
       * arrow function return types since they can confuse the parser. In that case, we want to move
       * the close-paren to the same line as the arrow.
       *
       * See https://github.com/alangpierce/sucrase/issues/391 for more details.
       */
      processPossibleArrowParamEnd() {
        if (this.tokens.matches2(_types.TokenType.parenR, _types.TokenType.colon) && this.tokens.tokenAtRelativeIndex(1).isType) {
          let nextNonTypeIndex = this.tokens.currentIndex() + 1;
          while (this.tokens.tokens[nextNonTypeIndex].isType) {
            nextNonTypeIndex++;
          }
          if (this.tokens.matches1AtIndex(nextNonTypeIndex, _types.TokenType.arrow)) {
            this.tokens.removeInitialToken();
            while (this.tokens.currentIndex() < nextNonTypeIndex) {
              this.tokens.removeToken();
            }
            this.tokens.replaceTokenTrimmingLeftWhitespace(") =>");
            return true;
          }
        }
        return false;
      }
      /**
       * An async arrow function might be of the form:
       *
       * async <
       *   T
       * >() => {}
       *
       * in which case, removing the type parameters will cause a syntax error. Detect this case and
       * move the open-paren earlier.
       */
      processPossibleAsyncArrowWithTypeParams() {
        if (!this.tokens.matchesContextual(_keywords.ContextualKeyword._async) && !this.tokens.matches1(_types.TokenType._async)) {
          return false;
        }
        const nextToken = this.tokens.tokenAtRelativeIndex(1);
        if (nextToken.type !== _types.TokenType.lessThan || !nextToken.isType) {
          return false;
        }
        let nextNonTypeIndex = this.tokens.currentIndex() + 1;
        while (this.tokens.tokens[nextNonTypeIndex].isType) {
          nextNonTypeIndex++;
        }
        if (this.tokens.matches1AtIndex(nextNonTypeIndex, _types.TokenType.parenL)) {
          this.tokens.replaceToken("async (");
          this.tokens.removeInitialToken();
          while (this.tokens.currentIndex() < nextNonTypeIndex) {
            this.tokens.removeToken();
          }
          this.tokens.removeToken();
          this.processBalancedCode();
          this.processToken();
          return true;
        }
        return false;
      }
      processPossibleTypeRange() {
        if (this.tokens.currentToken().isType) {
          this.tokens.removeInitialToken();
          while (this.tokens.currentToken().isType) {
            this.tokens.removeToken();
          }
          return true;
        }
        return false;
      }
      shiftMappings(mappings, prefixLength) {
        for (let i = 0; i < mappings.length; i++) {
          const mapping = mappings[i];
          if (mapping !== void 0) {
            mappings[i] = mapping + prefixLength;
          }
        }
        return mappings;
      }
    };
    exports2.default = RootTransformer;
  }
});

// ../../../node_modules/.pnpm/lines-and-columns@1.2.4/node_modules/lines-and-columns/build/index.js
var require_build = __commonJS({
  "../../../node_modules/.pnpm/lines-and-columns@1.2.4/node_modules/lines-and-columns/build/index.js"(exports2) {
    "use strict";
    exports2.__esModule = true;
    exports2.LinesAndColumns = void 0;
    var LF = "\n";
    var CR = "\r";
    var LinesAndColumns = (
      /** @class */
      function() {
        function LinesAndColumns2(string) {
          this.string = string;
          var offsets = [0];
          for (var offset = 0; offset < string.length; ) {
            switch (string[offset]) {
              case LF:
                offset += LF.length;
                offsets.push(offset);
                break;
              case CR:
                offset += CR.length;
                if (string[offset] === LF) {
                  offset += LF.length;
                }
                offsets.push(offset);
                break;
              default:
                offset++;
                break;
            }
          }
          this.offsets = offsets;
        }
        LinesAndColumns2.prototype.locationForIndex = function(index) {
          if (index < 0 || index > this.string.length) {
            return null;
          }
          var line = 0;
          var offsets = this.offsets;
          while (offsets[line + 1] <= index) {
            line++;
          }
          var column = index - offsets[line];
          return { line, column };
        };
        LinesAndColumns2.prototype.indexForLocation = function(location) {
          var line = location.line, column = location.column;
          if (line < 0 || line >= this.offsets.length) {
            return null;
          }
          if (column < 0 || column > this.lengthOfLine(line)) {
            return null;
          }
          return this.offsets[line] + column;
        };
        LinesAndColumns2.prototype.lengthOfLine = function(line) {
          var offset = this.offsets[line];
          var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];
          return nextOffset - offset;
        };
        return LinesAndColumns2;
      }()
    );
    exports2.LinesAndColumns = LinesAndColumns;
    exports2["default"] = LinesAndColumns;
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/formatTokens.js
var require_formatTokens = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/formatTokens.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _linesandcolumns = require_build();
    var _linesandcolumns2 = _interopRequireDefault(_linesandcolumns);
    var _types = require_types();
    function formatTokens(code, tokens) {
      if (tokens.length === 0) {
        return "";
      }
      const tokenKeys = Object.keys(tokens[0]).filter(
        (k) => k !== "type" && k !== "value" && k !== "start" && k !== "end" && k !== "loc"
      );
      const typeKeys = Object.keys(tokens[0].type).filter((k) => k !== "label" && k !== "keyword");
      const headings = ["Location", "Label", "Raw", ...tokenKeys, ...typeKeys];
      const lines = new (0, _linesandcolumns2.default)(code);
      const rows = [headings, ...tokens.map(getTokenComponents)];
      const padding = headings.map(() => 0);
      for (const components of rows) {
        for (let i = 0; i < components.length; i++) {
          padding[i] = Math.max(padding[i], components[i].length);
        }
      }
      return rows.map((components) => components.map((component, i) => component.padEnd(padding[i])).join(" ")).join("\n");
      function getTokenComponents(token) {
        const raw = code.slice(token.start, token.end);
        return [
          formatRange(token.start, token.end),
          _types.formatTokenType.call(void 0, token.type),
          truncate(String(raw), 14),
          // @ts-ignore: Intentional dynamic access by key.
          ...tokenKeys.map((key) => formatValue(token[key], key)),
          // @ts-ignore: Intentional dynamic access by key.
          ...typeKeys.map((key) => formatValue(token.type[key], key))
        ];
      }
      function formatValue(value2, key) {
        if (value2 === true) {
          return key;
        } else if (value2 === false || value2 === null) {
          return "";
        } else {
          return String(value2);
        }
      }
      function formatRange(start, end) {
        return `${formatPos(start)}-${formatPos(end)}`;
      }
      function formatPos(pos) {
        const location = lines.locationForIndex(pos);
        if (!location) {
          return "Unknown";
        } else {
          return `${location.line + 1}:${location.column + 1}`;
        }
      }
    }
    exports2.default = formatTokens;
    function truncate(s, length) {
      if (s.length > length) {
        return `${s.slice(0, length - 3)}...`;
      } else {
        return s;
      }
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getTSImportedNames.js
var require_getTSImportedNames = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/util/getTSImportedNames.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _types = require_types();
    var _getImportExportSpecifierInfo = require_getImportExportSpecifierInfo();
    var _getImportExportSpecifierInfo2 = _interopRequireDefault(_getImportExportSpecifierInfo);
    function getTSImportedNames(tokens) {
      const importedNames = /* @__PURE__ */ new Set();
      for (let i = 0; i < tokens.tokens.length; i++) {
        if (tokens.matches1AtIndex(i, _types.TokenType._import) && !tokens.matches3AtIndex(i, _types.TokenType._import, _types.TokenType.name, _types.TokenType.eq)) {
          collectNamesForImport(tokens, i, importedNames);
        }
      }
      return importedNames;
    }
    exports2.default = getTSImportedNames;
    function collectNamesForImport(tokens, index, importedNames) {
      index++;
      if (tokens.matches1AtIndex(index, _types.TokenType.parenL)) {
        return;
      }
      if (tokens.matches1AtIndex(index, _types.TokenType.name)) {
        importedNames.add(tokens.identifierNameAtIndex(index));
        index++;
        if (tokens.matches1AtIndex(index, _types.TokenType.comma)) {
          index++;
        }
      }
      if (tokens.matches1AtIndex(index, _types.TokenType.star)) {
        index += 2;
        importedNames.add(tokens.identifierNameAtIndex(index));
        index++;
      }
      if (tokens.matches1AtIndex(index, _types.TokenType.braceL)) {
        index++;
        collectNamesForNamedImport(tokens, index, importedNames);
      }
    }
    function collectNamesForNamedImport(tokens, index, importedNames) {
      while (true) {
        if (tokens.matches1AtIndex(index, _types.TokenType.braceR)) {
          return;
        }
        const specifierInfo = _getImportExportSpecifierInfo2.default.call(void 0, tokens, index);
        index = specifierInfo.endIndex;
        if (!specifierInfo.isType) {
          importedNames.add(specifierInfo.rightName);
        }
        if (tokens.matches2AtIndex(index, _types.TokenType.comma, _types.TokenType.braceR)) {
          return;
        } else if (tokens.matches1AtIndex(index, _types.TokenType.braceR)) {
          return;
        } else if (tokens.matches1AtIndex(index, _types.TokenType.comma)) {
          index++;
        } else {
          throw new Error(`Unexpected token: ${JSON.stringify(tokens.tokens[index])}`);
        }
      }
    }
  }
});

// ../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/index.js
var require_dist2 = __commonJS({
  "../../../node_modules/.pnpm/sucrase@3.35.0/node_modules/sucrase/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _CJSImportProcessor = require_CJSImportProcessor();
    var _CJSImportProcessor2 = _interopRequireDefault(_CJSImportProcessor);
    var _computeSourceMap = require_computeSourceMap();
    var _computeSourceMap2 = _interopRequireDefault(_computeSourceMap);
    var _HelperManager = require_HelperManager();
    var _identifyShadowedGlobals = require_identifyShadowedGlobals();
    var _identifyShadowedGlobals2 = _interopRequireDefault(_identifyShadowedGlobals);
    var _NameManager = require_NameManager();
    var _NameManager2 = _interopRequireDefault(_NameManager);
    var _Options = require_Options();
    var _parser = require_parser();
    var _TokenProcessor = require_TokenProcessor();
    var _TokenProcessor2 = _interopRequireDefault(_TokenProcessor);
    var _RootTransformer = require_RootTransformer();
    var _RootTransformer2 = _interopRequireDefault(_RootTransformer);
    var _formatTokens = require_formatTokens();
    var _formatTokens2 = _interopRequireDefault(_formatTokens);
    var _getTSImportedNames = require_getTSImportedNames();
    var _getTSImportedNames2 = _interopRequireDefault(_getTSImportedNames);
    function getVersion() {
      return "3.35.0";
    }
    exports2.getVersion = getVersion;
    function transform2(code, options) {
      _Options.validateOptions.call(void 0, options);
      try {
        const sucraseContext = getSucraseContext(code, options);
        const transformer = new (0, _RootTransformer2.default)(
          sucraseContext,
          options.transforms,
          Boolean(options.enableLegacyBabel5ModuleInterop),
          options
        );
        const transformerResult = transformer.transform();
        let result = { code: transformerResult.code };
        if (options.sourceMapOptions) {
          if (!options.filePath) {
            throw new Error("filePath must be specified when generating a source map.");
          }
          result = {
            ...result,
            sourceMap: _computeSourceMap2.default.call(
              void 0,
              transformerResult,
              options.filePath,
              options.sourceMapOptions,
              code,
              sucraseContext.tokenProcessor.tokens
            )
          };
        }
        return result;
      } catch (e) {
        if (options.filePath) {
          e.message = `Error transforming ${options.filePath}: ${e.message}`;
        }
        throw e;
      }
    }
    exports2.transform = transform2;
    function getFormattedTokens(code, options) {
      const tokens = getSucraseContext(code, options).tokenProcessor.tokens;
      return _formatTokens2.default.call(void 0, code, tokens);
    }
    exports2.getFormattedTokens = getFormattedTokens;
    function getSucraseContext(code, options) {
      const isJSXEnabled = options.transforms.includes("jsx");
      const isTypeScriptEnabled = options.transforms.includes("typescript");
      const isFlowEnabled = options.transforms.includes("flow");
      const disableESTransforms = options.disableESTransforms === true;
      const file = _parser.parse.call(void 0, code, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);
      const tokens = file.tokens;
      const scopes = file.scopes;
      const nameManager = new (0, _NameManager2.default)(code, tokens);
      const helperManager = new (0, _HelperManager.HelperManager)(nameManager);
      const tokenProcessor = new (0, _TokenProcessor2.default)(
        code,
        tokens,
        isFlowEnabled,
        disableESTransforms,
        helperManager
      );
      const enableLegacyTypeScriptModuleInterop = Boolean(options.enableLegacyTypeScriptModuleInterop);
      let importProcessor = null;
      if (options.transforms.includes("imports")) {
        importProcessor = new (0, _CJSImportProcessor2.default)(
          nameManager,
          tokenProcessor,
          enableLegacyTypeScriptModuleInterop,
          options,
          options.transforms.includes("typescript"),
          Boolean(options.keepUnusedImports),
          helperManager
        );
        importProcessor.preprocessTokens();
        _identifyShadowedGlobals2.default.call(void 0, tokenProcessor, scopes, importProcessor.getGlobalNames());
        if (options.transforms.includes("typescript") && !options.keepUnusedImports) {
          importProcessor.pruneTypeOnlyImports();
        }
      } else if (options.transforms.includes("typescript") && !options.keepUnusedImports) {
        _identifyShadowedGlobals2.default.call(void 0, tokenProcessor, scopes, _getTSImportedNames2.default.call(void 0, tokenProcessor));
      }
      return { tokenProcessor, scopes, nameManager, importProcessor, helperManager };
    }
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/array.js
var require_array = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitWhen = exports2.flatten = void 0;
    function flatten(items) {
      return items.reduce((collection, item) => [].concat(collection, item), []);
    }
    exports2.flatten = flatten;
    function splitWhen(items, predicate) {
      const result = [[]];
      let groupIndex = 0;
      for (const item of items) {
        if (predicate(item)) {
          groupIndex++;
          result[groupIndex] = [];
        } else {
          result[groupIndex].push(item);
        }
      }
      return result;
    }
    exports2.splitWhen = splitWhen;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/errno.js
var require_errno = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/errno.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEnoentCodeError = void 0;
    function isEnoentCodeError(error) {
      return error.code === "ENOENT";
    }
    exports2.isEnoentCodeError = isEnoentCodeError;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/fs.js
var require_fs = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createDirentFromStats = void 0;
    var DirentFromStats = class {
      constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
      }
    };
    function createDirentFromStats(name, stats) {
      return new DirentFromStats(name, stats);
    }
    exports2.createDirentFromStats = createDirentFromStats;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/path.js
var require_path = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertPosixPathToPattern = exports2.convertWindowsPathToPattern = exports2.convertPathToPattern = exports2.escapePosixPath = exports2.escapeWindowsPath = exports2.escape = exports2.removeLeadingDotSegment = exports2.makeAbsolute = exports2.unixify = void 0;
    var os2 = require("os");
    var path3 = require("path");
    var IS_WINDOWS_PLATFORM = os2.platform() === "win32";
    var LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
    var POSIX_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g;
    var WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()[\]{}]|^!|[!+@](?=\())/g;
    var DOS_DEVICE_PATH_RE = /^\\\\([.?])/;
    var WINDOWS_BACKSLASHES_RE = /\\(?![!()+@[\]{}])/g;
    function unixify(filepath) {
      return filepath.replace(/\\/g, "/");
    }
    exports2.unixify = unixify;
    function makeAbsolute(cwd, filepath) {
      return path3.resolve(cwd, filepath);
    }
    exports2.makeAbsolute = makeAbsolute;
    function removeLeadingDotSegment(entry) {
      if (entry.charAt(0) === ".") {
        const secondCharactery = entry.charAt(1);
        if (secondCharactery === "/" || secondCharactery === "\\") {
          return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
        }
      }
      return entry;
    }
    exports2.removeLeadingDotSegment = removeLeadingDotSegment;
    exports2.escape = IS_WINDOWS_PLATFORM ? escapeWindowsPath : escapePosixPath;
    function escapeWindowsPath(pattern) {
      return pattern.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
    }
    exports2.escapeWindowsPath = escapeWindowsPath;
    function escapePosixPath(pattern) {
      return pattern.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
    }
    exports2.escapePosixPath = escapePosixPath;
    exports2.convertPathToPattern = IS_WINDOWS_PLATFORM ? convertWindowsPathToPattern : convertPosixPathToPattern;
    function convertWindowsPathToPattern(filepath) {
      return escapeWindowsPath(filepath).replace(DOS_DEVICE_PATH_RE, "//$1").replace(WINDOWS_BACKSLASHES_RE, "/");
    }
    exports2.convertWindowsPathToPattern = convertWindowsPathToPattern;
    function convertPosixPathToPattern(filepath) {
      return escapePosixPath(filepath);
    }
    exports2.convertPosixPathToPattern = convertPosixPathToPattern;
  }
});

// ../../../node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js
var require_is_extglob = __commonJS({
  "../../../node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js"(exports2, module2) {
    module2.exports = function isExtglob(str) {
      if (typeof str !== "string" || str === "") {
        return false;
      }
      var match;
      while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
        if (match[2]) return true;
        str = str.slice(match.index + match[0].length);
      }
      return false;
    };
  }
});

// ../../../node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js
var require_is_glob = __commonJS({
  "../../../node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js"(exports2, module2) {
    var isExtglob = require_is_extglob();
    var chars = { "{": "}", "(": ")", "[": "]" };
    var strictCheck = function(str) {
      if (str[0] === "!") {
        return true;
      }
      var index = 0;
      var pipeIndex = -2;
      var closeSquareIndex = -2;
      var closeCurlyIndex = -2;
      var closeParenIndex = -2;
      var backSlashIndex = -2;
      while (index < str.length) {
        if (str[index] === "*") {
          return true;
        }
        if (str[index + 1] === "?" && /[\].+)]/.test(str[index])) {
          return true;
        }
        if (closeSquareIndex !== -1 && str[index] === "[" && str[index + 1] !== "]") {
          if (closeSquareIndex < index) {
            closeSquareIndex = str.indexOf("]", index);
          }
          if (closeSquareIndex > index) {
            if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
              return true;
            }
            backSlashIndex = str.indexOf("\\", index);
            if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
              return true;
            }
          }
        }
        if (closeCurlyIndex !== -1 && str[index] === "{" && str[index + 1] !== "}") {
          closeCurlyIndex = str.indexOf("}", index);
          if (closeCurlyIndex > index) {
            backSlashIndex = str.indexOf("\\", index);
            if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
              return true;
            }
          }
        }
        if (closeParenIndex !== -1 && str[index] === "(" && str[index + 1] === "?" && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ")") {
          closeParenIndex = str.indexOf(")", index);
          if (closeParenIndex > index) {
            backSlashIndex = str.indexOf("\\", index);
            if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
              return true;
            }
          }
        }
        if (pipeIndex !== -1 && str[index] === "(" && str[index + 1] !== "|") {
          if (pipeIndex < index) {
            pipeIndex = str.indexOf("|", index);
          }
          if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
            closeParenIndex = str.indexOf(")", pipeIndex);
            if (closeParenIndex > pipeIndex) {
              backSlashIndex = str.indexOf("\\", pipeIndex);
              if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                return true;
              }
            }
          }
        }
        if (str[index] === "\\") {
          var open = str[index + 1];
          index += 2;
          var close = chars[open];
          if (close) {
            var n = str.indexOf(close, index);
            if (n !== -1) {
              index = n + 1;
            }
          }
          if (str[index] === "!") {
            return true;
          }
        } else {
          index++;
        }
      }
      return false;
    };
    var relaxedCheck = function(str) {
      if (str[0] === "!") {
        return true;
      }
      var index = 0;
      while (index < str.length) {
        if (/[*?{}()[\]]/.test(str[index])) {
          return true;
        }
        if (str[index] === "\\") {
          var open = str[index + 1];
          index += 2;
          var close = chars[open];
          if (close) {
            var n = str.indexOf(close, index);
            if (n !== -1) {
              index = n + 1;
            }
          }
          if (str[index] === "!") {
            return true;
          }
        } else {
          index++;
        }
      }
      return false;
    };
    module2.exports = function isGlob(str, options) {
      if (typeof str !== "string" || str === "") {
        return false;
      }
      if (isExtglob(str)) {
        return true;
      }
      var check = strictCheck;
      if (options && options.strict === false) {
        check = relaxedCheck;
      }
      return check(str);
    };
  }
});

// ../../../node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js
var require_glob_parent = __commonJS({
  "../../../node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js"(exports2, module2) {
    "use strict";
    var isGlob = require_is_glob();
    var pathPosixDirname = require("path").posix.dirname;
    var isWin32 = require("os").platform() === "win32";
    var slash = "/";
    var backslash = /\\/g;
    var enclosure = /[\{\[].*[\}\]]$/;
    var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
    var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
    module2.exports = function globParent(str, opts) {
      var options = Object.assign({ flipBackslashes: true }, opts);
      if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
        str = str.replace(backslash, slash);
      }
      if (enclosure.test(str)) {
        str += slash;
      }
      str += "a";
      do {
        str = pathPosixDirname(str);
      } while (isGlob(str) || globby.test(str));
      return str.replace(escaped, "$1");
    };
  }
});

// ../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/utils.js
var require_utils = __commonJS({
  "../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/utils.js"(exports2) {
    "use strict";
    exports2.isInteger = (num) => {
      if (typeof num === "number") {
        return Number.isInteger(num);
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isInteger(Number(num));
      }
      return false;
    };
    exports2.find = (node, type) => node.nodes.find((node2) => node2.type === type);
    exports2.exceedsLimit = (min, max, step = 1, limit) => {
      if (limit === false) return false;
      if (!exports2.isInteger(min) || !exports2.isInteger(max)) return false;
      return (Number(max) - Number(min)) / Number(step) >= limit;
    };
    exports2.escapeNode = (block, n = 0, type) => {
      let node = block.nodes[n];
      if (!node) return;
      if (type && node.type === type || node.type === "open" || node.type === "close") {
        if (node.escaped !== true) {
          node.value = "\\" + node.value;
          node.escaped = true;
        }
      }
    };
    exports2.encloseBrace = (node) => {
      if (node.type !== "brace") return false;
      if (node.commas >> 0 + node.ranges >> 0 === 0) {
        node.invalid = true;
        return true;
      }
      return false;
    };
    exports2.isInvalidBrace = (block) => {
      if (block.type !== "brace") return false;
      if (block.invalid === true || block.dollar) return true;
      if (block.commas >> 0 + block.ranges >> 0 === 0) {
        block.invalid = true;
        return true;
      }
      if (block.open !== true || block.close !== true) {
        block.invalid = true;
        return true;
      }
      return false;
    };
    exports2.isOpenOrClose = (node) => {
      if (node.type === "open" || node.type === "close") {
        return true;
      }
      return node.open === true || node.close === true;
    };
    exports2.reduce = (nodes) => nodes.reduce((acc, node) => {
      if (node.type === "text") acc.push(node.value);
      if (node.type === "range") node.type = "text";
      return acc;
    }, []);
    exports2.flatten = (...args) => {
      const result = [];
      const flat = (arr) => {
        for (let i = 0; i < arr.length; i++) {
          let ele = arr[i];
          Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
        }
        return result;
      };
      flat(args);
      return result;
    };
  }
});

// ../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/stringify.js
var require_stringify = __commonJS({
  "../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/stringify.js"(exports2, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = (ast, options = {}) => {
      let stringify = (node, parent = {}) => {
        let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
        let invalidNode = node.invalid === true && options.escapeInvalid === true;
        let output = "";
        if (node.value) {
          if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
            return "\\" + node.value;
          }
          return node.value;
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes) {
          for (let child of node.nodes) {
            output += stringify(child);
          }
        }
        return output;
      };
      return stringify(ast);
    };
  }
});

// ../../../node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js
var require_is_number = __commonJS({
  "../../../node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function(num) {
      if (typeof num === "number") {
        return num - num === 0;
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
      }
      return false;
    };
  }
});

// ../../../node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js
var require_to_regex_range = __commonJS({
  "../../../node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js"(exports2, module2) {
    "use strict";
    var isNumber = require_is_number();
    var toRegexRange = (min, max, options) => {
      if (isNumber(min) === false) {
        throw new TypeError("toRegexRange: expected the first argument to be a number");
      }
      if (max === void 0 || min === max) {
        return String(min);
      }
      if (isNumber(max) === false) {
        throw new TypeError("toRegexRange: expected the second argument to be a number.");
      }
      let opts = { relaxZeros: true, ...options };
      if (typeof opts.strictZeros === "boolean") {
        opts.relaxZeros = opts.strictZeros === false;
      }
      let relax = String(opts.relaxZeros);
      let shorthand = String(opts.shorthand);
      let capture = String(opts.capture);
      let wrap = String(opts.wrap);
      let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
      if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
        return toRegexRange.cache[cacheKey].result;
      }
      let a = Math.min(min, max);
      let b = Math.max(min, max);
      if (Math.abs(a - b) === 1) {
        let result = min + "|" + max;
        if (opts.capture) {
          return `(${result})`;
        }
        if (opts.wrap === false) {
          return result;
        }
        return `(?:${result})`;
      }
      let isPadded = hasPadding(min) || hasPadding(max);
      let state = { min, max, a, b };
      let positives = [];
      let negatives = [];
      if (isPadded) {
        state.isPadded = isPadded;
        state.maxLen = String(state.max).length;
      }
      if (a < 0) {
        let newMin = b < 0 ? Math.abs(b) : 1;
        negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
        a = state.a = 0;
      }
      if (b >= 0) {
        positives = splitToPatterns(a, b, state, opts);
      }
      state.negatives = negatives;
      state.positives = positives;
      state.result = collatePatterns(negatives, positives, opts);
      if (opts.capture === true) {
        state.result = `(${state.result})`;
      } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
        state.result = `(?:${state.result})`;
      }
      toRegexRange.cache[cacheKey] = state;
      return state.result;
    };
    function collatePatterns(neg, pos, options) {
      let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
      let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
      let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
      let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
      return subpatterns.join("|");
    }
    function splitToRanges(min, max) {
      let nines = 1;
      let zeros = 1;
      let stop = countNines(min, nines);
      let stops = /* @__PURE__ */ new Set([max]);
      while (min <= stop && stop <= max) {
        stops.add(stop);
        nines += 1;
        stop = countNines(min, nines);
      }
      stop = countZeros(max + 1, zeros) - 1;
      while (min < stop && stop <= max) {
        stops.add(stop);
        zeros += 1;
        stop = countZeros(max + 1, zeros) - 1;
      }
      stops = [...stops];
      stops.sort(compare);
      return stops;
    }
    function rangeToPattern(start, stop, options) {
      if (start === stop) {
        return { pattern: start, count: [], digits: 0 };
      }
      let zipped = zip(start, stop);
      let digits = zipped.length;
      let pattern = "";
      let count = 0;
      for (let i = 0; i < digits; i++) {
        let [startDigit, stopDigit] = zipped[i];
        if (startDigit === stopDigit) {
          pattern += startDigit;
        } else if (startDigit !== "0" || stopDigit !== "9") {
          pattern += toCharacterClass(startDigit, stopDigit, options);
        } else {
          count++;
        }
      }
      if (count) {
        pattern += options.shorthand === true ? "\\d" : "[0-9]";
      }
      return { pattern, count: [count], digits };
    }
    function splitToPatterns(min, max, tok, options) {
      let ranges = splitToRanges(min, max);
      let tokens = [];
      let start = min;
      let prev;
      for (let i = 0; i < ranges.length; i++) {
        let max2 = ranges[i];
        let obj = rangeToPattern(String(start), String(max2), options);
        let zeros = "";
        if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
          if (prev.count.length > 1) {
            prev.count.pop();
          }
          prev.count.push(obj.count[0]);
          prev.string = prev.pattern + toQuantifier(prev.count);
          start = max2 + 1;
          continue;
        }
        if (tok.isPadded) {
          zeros = padZeros(max2, tok, options);
        }
        obj.string = zeros + obj.pattern + toQuantifier(obj.count);
        tokens.push(obj);
        start = max2 + 1;
        prev = obj;
      }
      return tokens;
    }
    function filterPatterns(arr, comparison, prefix, intersection, options) {
      let result = [];
      for (let ele of arr) {
        let { string } = ele;
        if (!intersection && !contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
        if (intersection && contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
      }
      return result;
    }
    function zip(a, b) {
      let arr = [];
      for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
      return arr;
    }
    function compare(a, b) {
      return a > b ? 1 : b > a ? -1 : 0;
    }
    function contains(arr, key, val) {
      return arr.some((ele) => ele[key] === val);
    }
    function countNines(min, len) {
      return Number(String(min).slice(0, -len) + "9".repeat(len));
    }
    function countZeros(integer, zeros) {
      return integer - integer % Math.pow(10, zeros);
    }
    function toQuantifier(digits) {
      let [start = 0, stop = ""] = digits;
      if (stop || start > 1) {
        return `{${start + (stop ? "," + stop : "")}}`;
      }
      return "";
    }
    function toCharacterClass(a, b, options) {
      return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
    }
    function hasPadding(str) {
      return /^-?(0+)\d/.test(str);
    }
    function padZeros(value2, tok, options) {
      if (!tok.isPadded) {
        return value2;
      }
      let diff = Math.abs(tok.maxLen - String(value2).length);
      let relax = options.relaxZeros !== false;
      switch (diff) {
        case 0:
          return "";
        case 1:
          return relax ? "0?" : "0";
        case 2:
          return relax ? "0{0,2}" : "00";
        default: {
          return relax ? `0{0,${diff}}` : `0{${diff}}`;
        }
      }
    }
    toRegexRange.cache = {};
    toRegexRange.clearCache = () => toRegexRange.cache = {};
    module2.exports = toRegexRange;
  }
});

// ../../../node_modules/.pnpm/fill-range@7.0.1/node_modules/fill-range/index.js
var require_fill_range = __commonJS({
  "../../../node_modules/.pnpm/fill-range@7.0.1/node_modules/fill-range/index.js"(exports2, module2) {
    "use strict";
    var util = require("util");
    var toRegexRange = require_to_regex_range();
    var isObject2 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    var transform2 = (toNumber) => {
      return (value2) => toNumber === true ? Number(value2) : String(value2);
    };
    var isValidValue = (value2) => {
      return typeof value2 === "number" || typeof value2 === "string" && value2 !== "";
    };
    var isNumber = (num) => Number.isInteger(+num);
    var zeros = (input) => {
      let value2 = `${input}`;
      let index = -1;
      if (value2[0] === "-") value2 = value2.slice(1);
      if (value2 === "0") return false;
      while (value2[++index] === "0") ;
      return index > 0;
    };
    var stringify = (start, end, options) => {
      if (typeof start === "string" || typeof end === "string") {
        return true;
      }
      return options.stringify === true;
    };
    var pad = (input, maxLength, toNumber) => {
      if (maxLength > 0) {
        let dash = input[0] === "-" ? "-" : "";
        if (dash) input = input.slice(1);
        input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
      }
      if (toNumber === false) {
        return String(input);
      }
      return input;
    };
    var toMaxLen = (input, maxLength) => {
      let negative = input[0] === "-" ? "-" : "";
      if (negative) {
        input = input.slice(1);
        maxLength--;
      }
      while (input.length < maxLength) input = "0" + input;
      return negative ? "-" + input : input;
    };
    var toSequence = (parts, options) => {
      parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
      parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
      let prefix = options.capture ? "" : "?:";
      let positives = "";
      let negatives = "";
      let result;
      if (parts.positives.length) {
        positives = parts.positives.join("|");
      }
      if (parts.negatives.length) {
        negatives = `-(${prefix}${parts.negatives.join("|")})`;
      }
      if (positives && negatives) {
        result = `${positives}|${negatives}`;
      } else {
        result = positives || negatives;
      }
      if (options.wrap) {
        return `(${prefix}${result})`;
      }
      return result;
    };
    var toRange = (a, b, isNumbers, options) => {
      if (isNumbers) {
        return toRegexRange(a, b, { wrap: false, ...options });
      }
      let start = String.fromCharCode(a);
      if (a === b) return start;
      let stop = String.fromCharCode(b);
      return `[${start}-${stop}]`;
    };
    var toRegex = (start, end, options) => {
      if (Array.isArray(start)) {
        let wrap = options.wrap === true;
        let prefix = options.capture ? "" : "?:";
        return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
      }
      return toRegexRange(start, end, options);
    };
    var rangeError = (...args) => {
      return new RangeError("Invalid range arguments: " + util.inspect(...args));
    };
    var invalidRange = (start, end, options) => {
      if (options.strictRanges === true) throw rangeError([start, end]);
      return [];
    };
    var invalidStep = (step, options) => {
      if (options.strictRanges === true) {
        throw new TypeError(`Expected step "${step}" to be a number`);
      }
      return [];
    };
    var fillNumbers = (start, end, step = 1, options = {}) => {
      let a = Number(start);
      let b = Number(end);
      if (!Number.isInteger(a) || !Number.isInteger(b)) {
        if (options.strictRanges === true) throw rangeError([start, end]);
        return [];
      }
      if (a === 0) a = 0;
      if (b === 0) b = 0;
      let descending = a > b;
      let startString = String(start);
      let endString = String(end);
      let stepString = String(step);
      step = Math.max(Math.abs(step), 1);
      let padded = zeros(startString) || zeros(endString) || zeros(stepString);
      let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
      let toNumber = padded === false && stringify(start, end, options) === false;
      let format = options.transform || transform2(toNumber);
      if (options.toRegex && step === 1) {
        return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
      }
      let parts = { negatives: [], positives: [] };
      let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
      let range = [];
      let index = 0;
      while (descending ? a >= b : a <= b) {
        if (options.toRegex === true && step > 1) {
          push(a);
        } else {
          range.push(pad(format(a, index), maxLen, toNumber));
        }
        a = descending ? a - step : a + step;
        index++;
      }
      if (options.toRegex === true) {
        return step > 1 ? toSequence(parts, options) : toRegex(range, null, { wrap: false, ...options });
      }
      return range;
    };
    var fillLetters = (start, end, step = 1, options = {}) => {
      if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
        return invalidRange(start, end, options);
      }
      let format = options.transform || ((val) => String.fromCharCode(val));
      let a = `${start}`.charCodeAt(0);
      let b = `${end}`.charCodeAt(0);
      let descending = a > b;
      let min = Math.min(a, b);
      let max = Math.max(a, b);
      if (options.toRegex && step === 1) {
        return toRange(min, max, false, options);
      }
      let range = [];
      let index = 0;
      while (descending ? a >= b : a <= b) {
        range.push(format(a, index));
        a = descending ? a - step : a + step;
        index++;
      }
      if (options.toRegex === true) {
        return toRegex(range, null, { wrap: false, options });
      }
      return range;
    };
    var fill = (start, end, step, options = {}) => {
      if (end == null && isValidValue(start)) {
        return [start];
      }
      if (!isValidValue(start) || !isValidValue(end)) {
        return invalidRange(start, end, options);
      }
      if (typeof step === "function") {
        return fill(start, end, 1, { transform: step });
      }
      if (isObject2(step)) {
        return fill(start, end, 0, step);
      }
      let opts = { ...options };
      if (opts.capture === true) opts.wrap = true;
      step = step || opts.step || 1;
      if (!isNumber(step)) {
        if (step != null && !isObject2(step)) return invalidStep(step, opts);
        return fill(start, end, 1, step);
      }
      if (isNumber(start) && isNumber(end)) {
        return fillNumbers(start, end, step, opts);
      }
      return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
    };
    module2.exports = fill;
  }
});

// ../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/compile.js
var require_compile = __commonJS({
  "../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/compile.js"(exports2, module2) {
    "use strict";
    var fill = require_fill_range();
    var utils = require_utils();
    var compile = (ast, options = {}) => {
      let walk = (node, parent = {}) => {
        let invalidBlock = utils.isInvalidBrace(parent);
        let invalidNode = node.invalid === true && options.escapeInvalid === true;
        let invalid = invalidBlock === true || invalidNode === true;
        let prefix = options.escapeInvalid === true ? "\\" : "";
        let output = "";
        if (node.isOpen === true) {
          return prefix + node.value;
        }
        if (node.isClose === true) {
          return prefix + node.value;
        }
        if (node.type === "open") {
          return invalid ? prefix + node.value : "(";
        }
        if (node.type === "close") {
          return invalid ? prefix + node.value : ")";
        }
        if (node.type === "comma") {
          return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes && node.ranges > 0) {
          let args = utils.reduce(node.nodes);
          let range = fill(...args, { ...options, wrap: false, toRegex: true });
          if (range.length !== 0) {
            return args.length > 1 && range.length > 1 ? `(${range})` : range;
          }
        }
        if (node.nodes) {
          for (let child of node.nodes) {
            output += walk(child, node);
          }
        }
        return output;
      };
      return walk(ast);
    };
    module2.exports = compile;
  }
});

// ../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/expand.js
var require_expand = __commonJS({
  "../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/expand.js"(exports2, module2) {
    "use strict";
    var fill = require_fill_range();
    var stringify = require_stringify();
    var utils = require_utils();
    var append = (queue = "", stash = "", enclose = false) => {
      let result = [];
      queue = [].concat(queue);
      stash = [].concat(stash);
      if (!stash.length) return queue;
      if (!queue.length) {
        return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
      }
      for (let item of queue) {
        if (Array.isArray(item)) {
          for (let value2 of item) {
            result.push(append(value2, stash, enclose));
          }
        } else {
          for (let ele of stash) {
            if (enclose === true && typeof ele === "string") ele = `{${ele}}`;
            result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
          }
        }
      }
      return utils.flatten(result);
    };
    var expand = (ast, options = {}) => {
      let rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
      let walk = (node, parent = {}) => {
        node.queue = [];
        let p = parent;
        let q = parent.queue;
        while (p.type !== "brace" && p.type !== "root" && p.parent) {
          p = p.parent;
          q = p.queue;
        }
        if (node.invalid || node.dollar) {
          q.push(append(q.pop(), stringify(node, options)));
          return;
        }
        if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
          q.push(append(q.pop(), ["{}"]));
          return;
        }
        if (node.nodes && node.ranges > 0) {
          let args = utils.reduce(node.nodes);
          if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
            throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
          }
          let range = fill(...args, options);
          if (range.length === 0) {
            range = stringify(node, options);
          }
          q.push(append(q.pop(), range));
          node.nodes = [];
          return;
        }
        let enclose = utils.encloseBrace(node);
        let queue = node.queue;
        let block = node;
        while (block.type !== "brace" && block.type !== "root" && block.parent) {
          block = block.parent;
          queue = block.queue;
        }
        for (let i = 0; i < node.nodes.length; i++) {
          let child = node.nodes[i];
          if (child.type === "comma" && node.type === "brace") {
            if (i === 1) queue.push("");
            queue.push("");
            continue;
          }
          if (child.type === "close") {
            q.push(append(q.pop(), queue, enclose));
            continue;
          }
          if (child.value && child.type !== "open") {
            queue.push(append(queue.pop(), child.value));
            continue;
          }
          if (child.nodes) {
            walk(child, node);
          }
        }
        return queue;
      };
      return utils.flatten(walk(ast));
    };
    module2.exports = expand;
  }
});

// ../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/constants.js
var require_constants = __commonJS({
  "../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/constants.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      MAX_LENGTH: 1024 * 64,
      // Digits
      CHAR_0: "0",
      /* 0 */
      CHAR_9: "9",
      /* 9 */
      // Alphabet chars.
      CHAR_UPPERCASE_A: "A",
      /* A */
      CHAR_LOWERCASE_A: "a",
      /* a */
      CHAR_UPPERCASE_Z: "Z",
      /* Z */
      CHAR_LOWERCASE_Z: "z",
      /* z */
      CHAR_LEFT_PARENTHESES: "(",
      /* ( */
      CHAR_RIGHT_PARENTHESES: ")",
      /* ) */
      CHAR_ASTERISK: "*",
      /* * */
      // Non-alphabetic chars.
      CHAR_AMPERSAND: "&",
      /* & */
      CHAR_AT: "@",
      /* @ */
      CHAR_BACKSLASH: "\\",
      /* \ */
      CHAR_BACKTICK: "`",
      /* ` */
      CHAR_CARRIAGE_RETURN: "\r",
      /* \r */
      CHAR_CIRCUMFLEX_ACCENT: "^",
      /* ^ */
      CHAR_COLON: ":",
      /* : */
      CHAR_COMMA: ",",
      /* , */
      CHAR_DOLLAR: "$",
      /* . */
      CHAR_DOT: ".",
      /* . */
      CHAR_DOUBLE_QUOTE: '"',
      /* " */
      CHAR_EQUAL: "=",
      /* = */
      CHAR_EXCLAMATION_MARK: "!",
      /* ! */
      CHAR_FORM_FEED: "\f",
      /* \f */
      CHAR_FORWARD_SLASH: "/",
      /* / */
      CHAR_HASH: "#",
      /* # */
      CHAR_HYPHEN_MINUS: "-",
      /* - */
      CHAR_LEFT_ANGLE_BRACKET: "<",
      /* < */
      CHAR_LEFT_CURLY_BRACE: "{",
      /* { */
      CHAR_LEFT_SQUARE_BRACKET: "[",
      /* [ */
      CHAR_LINE_FEED: "\n",
      /* \n */
      CHAR_NO_BREAK_SPACE: "\xA0",
      /* \u00A0 */
      CHAR_PERCENT: "%",
      /* % */
      CHAR_PLUS: "+",
      /* + */
      CHAR_QUESTION_MARK: "?",
      /* ? */
      CHAR_RIGHT_ANGLE_BRACKET: ">",
      /* > */
      CHAR_RIGHT_CURLY_BRACE: "}",
      /* } */
      CHAR_RIGHT_SQUARE_BRACKET: "]",
      /* ] */
      CHAR_SEMICOLON: ";",
      /* ; */
      CHAR_SINGLE_QUOTE: "'",
      /* ' */
      CHAR_SPACE: " ",
      /*   */
      CHAR_TAB: "	",
      /* \t */
      CHAR_UNDERSCORE: "_",
      /* _ */
      CHAR_VERTICAL_LINE: "|",
      /* | */
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
      /* \uFEFF */
    };
  }
});

// ../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/parse.js
var require_parse2 = __commonJS({
  "../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/parse.js"(exports2, module2) {
    "use strict";
    var stringify = require_stringify();
    var {
      MAX_LENGTH,
      CHAR_BACKSLASH,
      /* \ */
      CHAR_BACKTICK,
      /* ` */
      CHAR_COMMA,
      /* , */
      CHAR_DOT,
      /* . */
      CHAR_LEFT_PARENTHESES,
      /* ( */
      CHAR_RIGHT_PARENTHESES,
      /* ) */
      CHAR_LEFT_CURLY_BRACE,
      /* { */
      CHAR_RIGHT_CURLY_BRACE,
      /* } */
      CHAR_LEFT_SQUARE_BRACKET,
      /* [ */
      CHAR_RIGHT_SQUARE_BRACKET,
      /* ] */
      CHAR_DOUBLE_QUOTE,
      /* " */
      CHAR_SINGLE_QUOTE,
      /* ' */
      CHAR_NO_BREAK_SPACE,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE
    } = require_constants();
    var parse = (input, options = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      let opts = options || {};
      let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      if (input.length > max) {
        throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
      }
      let ast = { type: "root", input, nodes: [] };
      let stack = [ast];
      let block = ast;
      let prev = ast;
      let brackets = 0;
      let length = input.length;
      let index = 0;
      let depth = 0;
      let value2;
      let memo = {};
      const advance = () => input[index++];
      const push = (node) => {
        if (node.type === "text" && prev.type === "dot") {
          prev.type = "text";
        }
        if (prev && prev.type === "text" && node.type === "text") {
          prev.value += node.value;
          return;
        }
        block.nodes.push(node);
        node.parent = block;
        node.prev = prev;
        prev = node;
        return node;
      };
      push({ type: "bos" });
      while (index < length) {
        block = stack[stack.length - 1];
        value2 = advance();
        if (value2 === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value2 === CHAR_NO_BREAK_SPACE) {
          continue;
        }
        if (value2 === CHAR_BACKSLASH) {
          push({ type: "text", value: (options.keepEscaping ? value2 : "") + advance() });
          continue;
        }
        if (value2 === CHAR_RIGHT_SQUARE_BRACKET) {
          push({ type: "text", value: "\\" + value2 });
          continue;
        }
        if (value2 === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          let closed = true;
          let next;
          while (index < length && (next = advance())) {
            value2 += next;
            if (next === CHAR_LEFT_SQUARE_BRACKET) {
              brackets++;
              continue;
            }
            if (next === CHAR_BACKSLASH) {
              value2 += advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              brackets--;
              if (brackets === 0) {
                break;
              }
            }
          }
          push({ type: "text", value: value2 });
          continue;
        }
        if (value2 === CHAR_LEFT_PARENTHESES) {
          block = push({ type: "paren", nodes: [] });
          stack.push(block);
          push({ type: "text", value: value2 });
          continue;
        }
        if (value2 === CHAR_RIGHT_PARENTHESES) {
          if (block.type !== "paren") {
            push({ type: "text", value: value2 });
            continue;
          }
          block = stack.pop();
          push({ type: "text", value: value2 });
          block = stack[stack.length - 1];
          continue;
        }
        if (value2 === CHAR_DOUBLE_QUOTE || value2 === CHAR_SINGLE_QUOTE || value2 === CHAR_BACKTICK) {
          let open = value2;
          let next;
          if (options.keepQuotes !== true) {
            value2 = "";
          }
          while (index < length && (next = advance())) {
            if (next === CHAR_BACKSLASH) {
              value2 += next + advance();
              continue;
            }
            if (next === open) {
              if (options.keepQuotes === true) value2 += next;
              break;
            }
            value2 += next;
          }
          push({ type: "text", value: value2 });
          continue;
        }
        if (value2 === CHAR_LEFT_CURLY_BRACE) {
          depth++;
          let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
          let brace = {
            type: "brace",
            open: true,
            close: false,
            dollar,
            depth,
            commas: 0,
            ranges: 0,
            nodes: []
          };
          block = push(brace);
          stack.push(block);
          push({ type: "open", value: value2 });
          continue;
        }
        if (value2 === CHAR_RIGHT_CURLY_BRACE) {
          if (block.type !== "brace") {
            push({ type: "text", value: value2 });
            continue;
          }
          let type = "close";
          block = stack.pop();
          block.close = true;
          push({ type, value: value2 });
          depth--;
          block = stack[stack.length - 1];
          continue;
        }
        if (value2 === CHAR_COMMA && depth > 0) {
          if (block.ranges > 0) {
            block.ranges = 0;
            let open = block.nodes.shift();
            block.nodes = [open, { type: "text", value: stringify(block) }];
          }
          push({ type: "comma", value: value2 });
          block.commas++;
          continue;
        }
        if (value2 === CHAR_DOT && depth > 0 && block.commas === 0) {
          let siblings = block.nodes;
          if (depth === 0 || siblings.length === 0) {
            push({ type: "text", value: value2 });
            continue;
          }
          if (prev.type === "dot") {
            block.range = [];
            prev.value += value2;
            prev.type = "range";
            if (block.nodes.length !== 3 && block.nodes.length !== 5) {
              block.invalid = true;
              block.ranges = 0;
              prev.type = "text";
              continue;
            }
            block.ranges++;
            block.args = [];
            continue;
          }
          if (prev.type === "range") {
            siblings.pop();
            let before = siblings[siblings.length - 1];
            before.value += prev.value + value2;
            prev = before;
            block.ranges--;
            continue;
          }
          push({ type: "dot", value: value2 });
          continue;
        }
        push({ type: "text", value: value2 });
      }
      do {
        block = stack.pop();
        if (block.type !== "root") {
          block.nodes.forEach((node) => {
            if (!node.nodes) {
              if (node.type === "open") node.isOpen = true;
              if (node.type === "close") node.isClose = true;
              if (!node.nodes) node.type = "text";
              node.invalid = true;
            }
          });
          let parent = stack[stack.length - 1];
          let index2 = parent.nodes.indexOf(block);
          parent.nodes.splice(index2, 1, ...block.nodes);
        }
      } while (stack.length > 0);
      push({ type: "eos" });
      return ast;
    };
    module2.exports = parse;
  }
});

// ../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/index.js
var require_braces = __commonJS({
  "../../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/index.js"(exports2, module2) {
    "use strict";
    var stringify = require_stringify();
    var compile = require_compile();
    var expand = require_expand();
    var parse = require_parse2();
    var braces = (input, options = {}) => {
      let output = [];
      if (Array.isArray(input)) {
        for (let pattern of input) {
          let result = braces.create(pattern, options);
          if (Array.isArray(result)) {
            output.push(...result);
          } else {
            output.push(result);
          }
        }
      } else {
        output = [].concat(braces.create(input, options));
      }
      if (options && options.expand === true && options.nodupes === true) {
        output = [...new Set(output)];
      }
      return output;
    };
    braces.parse = (input, options = {}) => parse(input, options);
    braces.stringify = (input, options = {}) => {
      if (typeof input === "string") {
        return stringify(braces.parse(input, options), options);
      }
      return stringify(input, options);
    };
    braces.compile = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      return compile(input, options);
    };
    braces.expand = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      let result = expand(input, options);
      if (options.noempty === true) {
        result = result.filter(Boolean);
      }
      if (options.nodupes === true) {
        result = [...new Set(result)];
      }
      return result;
    };
    braces.create = (input, options = {}) => {
      if (input === "" || input.length < 3) {
        return [input];
      }
      return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
    };
    module2.exports = braces;
  }
});

// ../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js
var require_constants2 = __commonJS({
  "../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js"(exports2, module2) {
    "use strict";
    var path3 = require("path");
    var WIN_SLASH = "\\\\/";
    var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
    var DOT_LITERAL = "\\.";
    var PLUS_LITERAL = "\\+";
    var QMARK_LITERAL = "\\?";
    var SLASH_LITERAL = "\\/";
    var ONE_CHAR = "(?=.)";
    var QMARK = "[^/]";
    var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
    var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
    var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
    var NO_DOT = `(?!${DOT_LITERAL})`;
    var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
    var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
    var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
    var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
    var STAR = `${QMARK}*?`;
    var POSIX_CHARS = {
      DOT_LITERAL,
      PLUS_LITERAL,
      QMARK_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      QMARK,
      END_ANCHOR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    };
    var WINDOWS_CHARS = {
      ...POSIX_CHARS,
      SLASH_LITERAL: `[${WIN_SLASH}]`,
      QMARK: WIN_NO_SLASH,
      STAR: `${WIN_NO_SLASH}*?`,
      DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
      NO_DOT: `(?!${DOT_LITERAL})`,
      NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
      NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
      START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
      END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
    };
    var POSIX_REGEX_SOURCE = {
      alnum: "a-zA-Z0-9",
      alpha: "a-zA-Z",
      ascii: "\\x00-\\x7F",
      blank: " \\t",
      cntrl: "\\x00-\\x1F\\x7F",
      digit: "0-9",
      graph: "\\x21-\\x7E",
      lower: "a-z",
      print: "\\x20-\\x7E ",
      punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
      space: " \\t\\r\\n\\v\\f",
      upper: "A-Z",
      word: "A-Za-z0-9_",
      xdigit: "A-Fa-f0-9"
    };
    module2.exports = {
      MAX_LENGTH: 1024 * 64,
      POSIX_REGEX_SOURCE,
      // regular expressions
      REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
      REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
      REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
      REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
      REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
      REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
      // Replace globs with equivalent patterns to reduce parsing time.
      REPLACEMENTS: {
        "***": "*",
        "**/**": "**",
        "**/**/**": "**"
      },
      // Digits
      CHAR_0: 48,
      /* 0 */
      CHAR_9: 57,
      /* 9 */
      // Alphabet chars.
      CHAR_UPPERCASE_A: 65,
      /* A */
      CHAR_LOWERCASE_A: 97,
      /* a */
      CHAR_UPPERCASE_Z: 90,
      /* Z */
      CHAR_LOWERCASE_Z: 122,
      /* z */
      CHAR_LEFT_PARENTHESES: 40,
      /* ( */
      CHAR_RIGHT_PARENTHESES: 41,
      /* ) */
      CHAR_ASTERISK: 42,
      /* * */
      // Non-alphabetic chars.
      CHAR_AMPERSAND: 38,
      /* & */
      CHAR_AT: 64,
      /* @ */
      CHAR_BACKWARD_SLASH: 92,
      /* \ */
      CHAR_CARRIAGE_RETURN: 13,
      /* \r */
      CHAR_CIRCUMFLEX_ACCENT: 94,
      /* ^ */
      CHAR_COLON: 58,
      /* : */
      CHAR_COMMA: 44,
      /* , */
      CHAR_DOT: 46,
      /* . */
      CHAR_DOUBLE_QUOTE: 34,
      /* " */
      CHAR_EQUAL: 61,
      /* = */
      CHAR_EXCLAMATION_MARK: 33,
      /* ! */
      CHAR_FORM_FEED: 12,
      /* \f */
      CHAR_FORWARD_SLASH: 47,
      /* / */
      CHAR_GRAVE_ACCENT: 96,
      /* ` */
      CHAR_HASH: 35,
      /* # */
      CHAR_HYPHEN_MINUS: 45,
      /* - */
      CHAR_LEFT_ANGLE_BRACKET: 60,
      /* < */
      CHAR_LEFT_CURLY_BRACE: 123,
      /* { */
      CHAR_LEFT_SQUARE_BRACKET: 91,
      /* [ */
      CHAR_LINE_FEED: 10,
      /* \n */
      CHAR_NO_BREAK_SPACE: 160,
      /* \u00A0 */
      CHAR_PERCENT: 37,
      /* % */
      CHAR_PLUS: 43,
      /* + */
      CHAR_QUESTION_MARK: 63,
      /* ? */
      CHAR_RIGHT_ANGLE_BRACKET: 62,
      /* > */
      CHAR_RIGHT_CURLY_BRACE: 125,
      /* } */
      CHAR_RIGHT_SQUARE_BRACKET: 93,
      /* ] */
      CHAR_SEMICOLON: 59,
      /* ; */
      CHAR_SINGLE_QUOTE: 39,
      /* ' */
      CHAR_SPACE: 32,
      /*   */
      CHAR_TAB: 9,
      /* \t */
      CHAR_UNDERSCORE: 95,
      /* _ */
      CHAR_VERTICAL_LINE: 124,
      /* | */
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
      /* \uFEFF */
      SEP: path3.sep,
      /**
       * Create EXTGLOB_CHARS
       */
      extglobChars(chars) {
        return {
          "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
          "?": { type: "qmark", open: "(?:", close: ")?" },
          "+": { type: "plus", open: "(?:", close: ")+" },
          "*": { type: "star", open: "(?:", close: ")*" },
          "@": { type: "at", open: "(?:", close: ")" }
        };
      },
      /**
       * Create GLOB_CHARS
       */
      globChars(win32) {
        return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
      }
    };
  }
});

// ../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js
var require_utils2 = __commonJS({
  "../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js"(exports2) {
    "use strict";
    var path3 = require("path");
    var win32 = process.platform === "win32";
    var {
      REGEX_BACKSLASH,
      REGEX_REMOVE_BACKSLASH,
      REGEX_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_GLOBAL
    } = require_constants2();
    exports2.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    exports2.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
    exports2.isRegexChar = (str) => str.length === 1 && exports2.hasRegexChars(str);
    exports2.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
    exports2.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
    exports2.removeBackslashes = (str) => {
      return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
        return match === "\\" ? "" : match;
      });
    };
    exports2.supportsLookbehinds = () => {
      const segs = process.version.slice(1).split(".").map(Number);
      if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
        return true;
      }
      return false;
    };
    exports2.isWindows = (options) => {
      if (options && typeof options.windows === "boolean") {
        return options.windows;
      }
      return win32 === true || path3.sep === "\\";
    };
    exports2.escapeLast = (input, char, lastIdx) => {
      const idx = input.lastIndexOf(char, lastIdx);
      if (idx === -1) return input;
      if (input[idx - 1] === "\\") return exports2.escapeLast(input, char, idx - 1);
      return `${input.slice(0, idx)}\\${input.slice(idx)}`;
    };
    exports2.removePrefix = (input, state = {}) => {
      let output = input;
      if (output.startsWith("./")) {
        output = output.slice(2);
        state.prefix = "./";
      }
      return output;
    };
    exports2.wrapOutput = (input, state = {}, options = {}) => {
      const prepend = options.contains ? "" : "^";
      const append = options.contains ? "" : "$";
      let output = `${prepend}(?:${input})${append}`;
      if (state.negated === true) {
        output = `(?:^(?!${output}).*$)`;
      }
      return output;
    };
  }
});

// ../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js
var require_scan = __commonJS({
  "../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js"(exports2, module2) {
    "use strict";
    var utils = require_utils2();
    var {
      CHAR_ASTERISK,
      /* * */
      CHAR_AT,
      /* @ */
      CHAR_BACKWARD_SLASH,
      /* \ */
      CHAR_COMMA,
      /* , */
      CHAR_DOT,
      /* . */
      CHAR_EXCLAMATION_MARK,
      /* ! */
      CHAR_FORWARD_SLASH,
      /* / */
      CHAR_LEFT_CURLY_BRACE,
      /* { */
      CHAR_LEFT_PARENTHESES,
      /* ( */
      CHAR_LEFT_SQUARE_BRACKET,
      /* [ */
      CHAR_PLUS,
      /* + */
      CHAR_QUESTION_MARK,
      /* ? */
      CHAR_RIGHT_CURLY_BRACE,
      /* } */
      CHAR_RIGHT_PARENTHESES,
      /* ) */
      CHAR_RIGHT_SQUARE_BRACKET
      /* ] */
    } = require_constants2();
    var isPathSeparator = (code) => {
      return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
    };
    var depth = (token) => {
      if (token.isPrefix !== true) {
        token.depth = token.isGlobstar ? Infinity : 1;
      }
    };
    var scan = (input, options) => {
      const opts = options || {};
      const length = input.length - 1;
      const scanToEnd = opts.parts === true || opts.scanToEnd === true;
      const slashes = [];
      const tokens = [];
      const parts = [];
      let str = input;
      let index = -1;
      let start = 0;
      let lastIndex = 0;
      let isBrace = false;
      let isBracket = false;
      let isGlob = false;
      let isExtglob = false;
      let isGlobstar = false;
      let braceEscaped = false;
      let backslashes = false;
      let negated = false;
      let negatedExtglob = false;
      let finished = false;
      let braces = 0;
      let prev;
      let code;
      let token = { value: "", depth: 0, isGlob: false };
      const eos = () => index >= length;
      const peek = () => str.charCodeAt(index + 1);
      const advance = () => {
        prev = code;
        return str.charCodeAt(++index);
      };
      while (index < length) {
        code = advance();
        let next;
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          code = advance();
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braceEscaped = true;
          }
          continue;
        }
        if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
          braces++;
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (code === CHAR_LEFT_CURLY_BRACE) {
              braces++;
              continue;
            }
            if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (braceEscaped !== true && code === CHAR_COMMA) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_RIGHT_CURLY_BRACE) {
              braces--;
              if (braces === 0) {
                braceEscaped = false;
                isBrace = token.isBrace = true;
                finished = true;
                break;
              }
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_FORWARD_SLASH) {
          slashes.push(index);
          tokens.push(token);
          token = { value: "", depth: 0, isGlob: false };
          if (finished === true) continue;
          if (prev === CHAR_DOT && index === start + 1) {
            start += 2;
            continue;
          }
          lastIndex = index + 1;
          continue;
        }
        if (opts.noext !== true) {
          const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
          if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            isExtglob = token.isExtglob = true;
            finished = true;
            if (code === CHAR_EXCLAMATION_MARK && index === start) {
              negatedExtglob = true;
            }
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_BACKWARD_SLASH) {
                  backslashes = token.backslashes = true;
                  code = advance();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES) {
                  isGlob = token.isGlob = true;
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
        }
        if (code === CHAR_ASTERISK) {
          if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_QUESTION_MARK) {
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_LEFT_SQUARE_BRACKET) {
          while (eos() !== true && (next = advance())) {
            if (next === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              isBracket = token.isBracket = true;
              isGlob = token.isGlob = true;
              finished = true;
              break;
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
          negated = token.negated = true;
          start++;
          continue;
        }
        if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_LEFT_PARENTHESES) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
        if (isGlob === true) {
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
      }
      if (opts.noext === true) {
        isExtglob = false;
        isGlob = false;
      }
      let base = str;
      let prefix = "";
      let glob = "";
      if (start > 0) {
        prefix = str.slice(0, start);
        str = str.slice(start);
        lastIndex -= start;
      }
      if (base && isGlob === true && lastIndex > 0) {
        base = str.slice(0, lastIndex);
        glob = str.slice(lastIndex);
      } else if (isGlob === true) {
        base = "";
        glob = str;
      } else {
        base = str;
      }
      if (base && base !== "" && base !== "/" && base !== str) {
        if (isPathSeparator(base.charCodeAt(base.length - 1))) {
          base = base.slice(0, -1);
        }
      }
      if (opts.unescape === true) {
        if (glob) glob = utils.removeBackslashes(glob);
        if (base && backslashes === true) {
          base = utils.removeBackslashes(base);
        }
      }
      const state = {
        prefix,
        input,
        start,
        base,
        glob,
        isBrace,
        isBracket,
        isGlob,
        isExtglob,
        isGlobstar,
        negated,
        negatedExtglob
      };
      if (opts.tokens === true) {
        state.maxDepth = 0;
        if (!isPathSeparator(code)) {
          tokens.push(token);
        }
        state.tokens = tokens;
      }
      if (opts.parts === true || opts.tokens === true) {
        let prevIndex;
        for (let idx = 0; idx < slashes.length; idx++) {
          const n = prevIndex ? prevIndex + 1 : start;
          const i = slashes[idx];
          const value2 = input.slice(n, i);
          if (opts.tokens) {
            if (idx === 0 && start !== 0) {
              tokens[idx].isPrefix = true;
              tokens[idx].value = prefix;
            } else {
              tokens[idx].value = value2;
            }
            depth(tokens[idx]);
            state.maxDepth += tokens[idx].depth;
          }
          if (idx !== 0 || value2 !== "") {
            parts.push(value2);
          }
          prevIndex = i;
        }
        if (prevIndex && prevIndex + 1 < input.length) {
          const value2 = input.slice(prevIndex + 1);
          parts.push(value2);
          if (opts.tokens) {
            tokens[tokens.length - 1].value = value2;
            depth(tokens[tokens.length - 1]);
            state.maxDepth += tokens[tokens.length - 1].depth;
          }
        }
        state.slashes = slashes;
        state.parts = parts;
      }
      return state;
    };
    module2.exports = scan;
  }
});

// ../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js
var require_parse3 = __commonJS({
  "../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js"(exports2, module2) {
    "use strict";
    var constants3 = require_constants2();
    var utils = require_utils2();
    var {
      MAX_LENGTH,
      POSIX_REGEX_SOURCE,
      REGEX_NON_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_BACKREF,
      REPLACEMENTS
    } = constants3;
    var expandRange = (args, options) => {
      if (typeof options.expandRange === "function") {
        return options.expandRange(...args, options);
      }
      args.sort();
      const value2 = `[${args.join("-")}]`;
      try {
        new RegExp(value2);
      } catch (ex) {
        return args.map((v) => utils.escapeRegex(v)).join("..");
      }
      return value2;
    };
    var syntaxError = (type, char) => {
      return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
    };
    var parse = (input, options) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      input = REPLACEMENTS[input] || input;
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      let len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      const bos = { type: "bos", value: "", output: opts.prepend || "" };
      const tokens = [bos];
      const capture = opts.capture ? "" : "?:";
      const win32 = utils.isWindows(options);
      const PLATFORM_CHARS = constants3.globChars(win32);
      const EXTGLOB_CHARS = constants3.extglobChars(PLATFORM_CHARS);
      const {
        DOT_LITERAL,
        PLUS_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR
      } = PLATFORM_CHARS;
      const globstar = (opts2) => {
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const nodot = opts.dot ? "" : NO_DOT;
      const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
      let star = opts.bash === true ? globstar(opts) : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      if (typeof opts.noext === "boolean") {
        opts.noextglob = opts.noext;
      }
      const state = {
        input,
        index: -1,
        start: 0,
        dot: opts.dot === true,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: false,
        negated: false,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: false,
        tokens
      };
      input = utils.removePrefix(input, state);
      len = input.length;
      const extglobs = [];
      const braces = [];
      const stack = [];
      let prev = bos;
      let value2;
      const eos = () => state.index === len - 1;
      const peek = state.peek = (n = 1) => input[state.index + n];
      const advance = state.advance = () => input[++state.index] || "";
      const remaining = () => input.slice(state.index + 1);
      const consume = (value3 = "", num = 0) => {
        state.consumed += value3;
        state.index += num;
      };
      const append = (token) => {
        state.output += token.output != null ? token.output : token.value;
        consume(token.value);
      };
      const negate = () => {
        let count = 1;
        while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
          advance();
          state.start++;
          count++;
        }
        if (count % 2 === 0) {
          return false;
        }
        state.negated = true;
        state.start++;
        return true;
      };
      const increment = (type) => {
        state[type]++;
        stack.push(type);
      };
      const decrement = (type) => {
        state[type]--;
        stack.pop();
      };
      const push = (tok) => {
        if (prev.type === "globstar") {
          const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
          const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
          if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "star";
            prev.value = "*";
            prev.output = star;
            state.output += prev.output;
          }
        }
        if (extglobs.length && tok.type !== "paren") {
          extglobs[extglobs.length - 1].inner += tok.value;
        }
        if (tok.value || tok.output) append(tok);
        if (prev && prev.type === "text" && tok.type === "text") {
          prev.value += tok.value;
          prev.output = (prev.output || "") + tok.value;
          return;
        }
        tok.prev = prev;
        tokens.push(tok);
        prev = tok;
      };
      const extglobOpen = (type, value3) => {
        const token = { ...EXTGLOB_CHARS[value3], conditions: 1, inner: "" };
        token.prev = prev;
        token.parens = state.parens;
        token.output = state.output;
        const output = (opts.capture ? "(" : "") + token.open;
        increment("parens");
        push({ type, value: value3, output: state.output ? "" : ONE_CHAR });
        push({ type: "paren", extglob: true, value: advance(), output });
        extglobs.push(token);
      };
      const extglobClose = (token) => {
        let output = token.close + (opts.capture ? ")" : "");
        let rest;
        if (token.type === "negate") {
          let extglobStar = star;
          if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
            extglobStar = globstar(opts);
          }
          if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
            output = token.close = `)$))${extglobStar}`;
          }
          if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
            const expression = parse(rest, { ...options, fastpaths: false }).output;
            output = token.close = `)${expression})${extglobStar})`;
          }
          if (token.prev.type === "bos") {
            state.negatedExtglob = true;
          }
        }
        push({ type: "paren", extglob: true, value: value2, output });
        decrement("parens");
      };
      if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
        let backslashes = false;
        let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
          if (first === "\\") {
            backslashes = true;
            return m;
          }
          if (first === "?") {
            if (esc) {
              return esc + first + (rest ? QMARK.repeat(rest.length) : "");
            }
            if (index === 0) {
              return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
            }
            return QMARK.repeat(chars.length);
          }
          if (first === ".") {
            return DOT_LITERAL.repeat(chars.length);
          }
          if (first === "*") {
            if (esc) {
              return esc + first + (rest ? star : "");
            }
            return star;
          }
          return esc ? m : `\\${m}`;
        });
        if (backslashes === true) {
          if (opts.unescape === true) {
            output = output.replace(/\\/g, "");
          } else {
            output = output.replace(/\\+/g, (m) => {
              return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
            });
          }
        }
        if (output === input && opts.contains === true) {
          state.output = input;
          return state;
        }
        state.output = utils.wrapOutput(output, state, options);
        return state;
      }
      while (!eos()) {
        value2 = advance();
        if (value2 === "\0") {
          continue;
        }
        if (value2 === "\\") {
          const next = peek();
          if (next === "/" && opts.bash !== true) {
            continue;
          }
          if (next === "." || next === ";") {
            continue;
          }
          if (!next) {
            value2 += "\\";
            push({ type: "text", value: value2 });
            continue;
          }
          const match = /^\\+/.exec(remaining());
          let slashes = 0;
          if (match && match[0].length > 2) {
            slashes = match[0].length;
            state.index += slashes;
            if (slashes % 2 !== 0) {
              value2 += "\\";
            }
          }
          if (opts.unescape === true) {
            value2 = advance();
          } else {
            value2 += advance();
          }
          if (state.brackets === 0) {
            push({ type: "text", value: value2 });
            continue;
          }
        }
        if (state.brackets > 0 && (value2 !== "]" || prev.value === "[" || prev.value === "[^")) {
          if (opts.posix !== false && value2 === ":") {
            const inner = prev.value.slice(1);
            if (inner.includes("[")) {
              prev.posix = true;
              if (inner.includes(":")) {
                const idx = prev.value.lastIndexOf("[");
                const pre = prev.value.slice(0, idx);
                const rest2 = prev.value.slice(idx + 2);
                const posix = POSIX_REGEX_SOURCE[rest2];
                if (posix) {
                  prev.value = pre + posix;
                  state.backtrack = true;
                  advance();
                  if (!bos.output && tokens.indexOf(prev) === 1) {
                    bos.output = ONE_CHAR;
                  }
                  continue;
                }
              }
            }
          }
          if (value2 === "[" && peek() !== ":" || value2 === "-" && peek() === "]") {
            value2 = `\\${value2}`;
          }
          if (value2 === "]" && (prev.value === "[" || prev.value === "[^")) {
            value2 = `\\${value2}`;
          }
          if (opts.posix === true && value2 === "!" && prev.value === "[") {
            value2 = "^";
          }
          prev.value += value2;
          append({ value: value2 });
          continue;
        }
        if (state.quotes === 1 && value2 !== '"') {
          value2 = utils.escapeRegex(value2);
          prev.value += value2;
          append({ value: value2 });
          continue;
        }
        if (value2 === '"') {
          state.quotes = state.quotes === 1 ? 0 : 1;
          if (opts.keepQuotes === true) {
            push({ type: "text", value: value2 });
          }
          continue;
        }
        if (value2 === "(") {
          increment("parens");
          push({ type: "paren", value: value2 });
          continue;
        }
        if (value2 === ")") {
          if (state.parens === 0 && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "("));
          }
          const extglob = extglobs[extglobs.length - 1];
          if (extglob && state.parens === extglob.parens + 1) {
            extglobClose(extglobs.pop());
            continue;
          }
          push({ type: "paren", value: value2, output: state.parens ? ")" : "\\)" });
          decrement("parens");
          continue;
        }
        if (value2 === "[") {
          if (opts.nobracket === true || !remaining().includes("]")) {
            if (opts.nobracket !== true && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("closing", "]"));
            }
            value2 = `\\${value2}`;
          } else {
            increment("brackets");
          }
          push({ type: "bracket", value: value2 });
          continue;
        }
        if (value2 === "]") {
          if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
            push({ type: "text", value: value2, output: `\\${value2}` });
            continue;
          }
          if (state.brackets === 0) {
            if (opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "["));
            }
            push({ type: "text", value: value2, output: `\\${value2}` });
            continue;
          }
          decrement("brackets");
          const prevValue = prev.value.slice(1);
          if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
            value2 = `/${value2}`;
          }
          prev.value += value2;
          append({ value: value2 });
          if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
            continue;
          }
          const escaped = utils.escapeRegex(prev.value);
          state.output = state.output.slice(0, -prev.value.length);
          if (opts.literalBrackets === true) {
            state.output += escaped;
            prev.value = escaped;
            continue;
          }
          prev.value = `(${capture}${escaped}|${prev.value})`;
          state.output += prev.value;
          continue;
        }
        if (value2 === "{" && opts.nobrace !== true) {
          increment("braces");
          const open = {
            type: "brace",
            value: value2,
            output: "(",
            outputIndex: state.output.length,
            tokensIndex: state.tokens.length
          };
          braces.push(open);
          push(open);
          continue;
        }
        if (value2 === "}") {
          const brace = braces[braces.length - 1];
          if (opts.nobrace === true || !brace) {
            push({ type: "text", value: value2, output: value2 });
            continue;
          }
          let output = ")";
          if (brace.dots === true) {
            const arr = tokens.slice();
            const range = [];
            for (let i = arr.length - 1; i >= 0; i--) {
              tokens.pop();
              if (arr[i].type === "brace") {
                break;
              }
              if (arr[i].type !== "dots") {
                range.unshift(arr[i].value);
              }
            }
            output = expandRange(range, opts);
            state.backtrack = true;
          }
          if (brace.comma !== true && brace.dots !== true) {
            const out = state.output.slice(0, brace.outputIndex);
            const toks = state.tokens.slice(brace.tokensIndex);
            brace.value = brace.output = "\\{";
            value2 = output = "\\}";
            state.output = out;
            for (const t of toks) {
              state.output += t.output || t.value;
            }
          }
          push({ type: "brace", value: value2, output });
          decrement("braces");
          braces.pop();
          continue;
        }
        if (value2 === "|") {
          if (extglobs.length > 0) {
            extglobs[extglobs.length - 1].conditions++;
          }
          push({ type: "text", value: value2 });
          continue;
        }
        if (value2 === ",") {
          let output = value2;
          const brace = braces[braces.length - 1];
          if (brace && stack[stack.length - 1] === "braces") {
            brace.comma = true;
            output = "|";
          }
          push({ type: "comma", value: value2, output });
          continue;
        }
        if (value2 === "/") {
          if (prev.type === "dot" && state.index === state.start + 1) {
            state.start = state.index + 1;
            state.consumed = "";
            state.output = "";
            tokens.pop();
            prev = bos;
            continue;
          }
          push({ type: "slash", value: value2, output: SLASH_LITERAL });
          continue;
        }
        if (value2 === ".") {
          if (state.braces > 0 && prev.type === "dot") {
            if (prev.value === ".") prev.output = DOT_LITERAL;
            const brace = braces[braces.length - 1];
            prev.type = "dots";
            prev.output += value2;
            prev.value += value2;
            brace.dots = true;
            continue;
          }
          if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
            push({ type: "text", value: value2, output: DOT_LITERAL });
            continue;
          }
          push({ type: "dot", value: value2, output: DOT_LITERAL });
          continue;
        }
        if (value2 === "?") {
          const isGroup = prev && prev.value === "(";
          if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("qmark", value2);
            continue;
          }
          if (prev && prev.type === "paren") {
            const next = peek();
            let output = value2;
            if (next === "<" && !utils.supportsLookbehinds()) {
              throw new Error("Node.js v10 or higher is required for regex lookbehinds");
            }
            if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
              output = `\\${value2}`;
            }
            push({ type: "text", value: value2, output });
            continue;
          }
          if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
            push({ type: "qmark", value: value2, output: QMARK_NO_DOT });
            continue;
          }
          push({ type: "qmark", value: value2, output: QMARK });
          continue;
        }
        if (value2 === "!") {
          if (opts.noextglob !== true && peek() === "(") {
            if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
              extglobOpen("negate", value2);
              continue;
            }
          }
          if (opts.nonegate !== true && state.index === 0) {
            negate();
            continue;
          }
        }
        if (value2 === "+") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("plus", value2);
            continue;
          }
          if (prev && prev.value === "(" || opts.regex === false) {
            push({ type: "plus", value: value2, output: PLUS_LITERAL });
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
            push({ type: "plus", value: value2 });
            continue;
          }
          push({ type: "plus", value: PLUS_LITERAL });
          continue;
        }
        if (value2 === "@") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            push({ type: "at", extglob: true, value: value2, output: "" });
            continue;
          }
          push({ type: "text", value: value2 });
          continue;
        }
        if (value2 !== "*") {
          if (value2 === "$" || value2 === "^") {
            value2 = `\\${value2}`;
          }
          const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
          if (match) {
            value2 += match[0];
            state.index += match[0].length;
          }
          push({ type: "text", value: value2 });
          continue;
        }
        if (prev && (prev.type === "globstar" || prev.star === true)) {
          prev.type = "star";
          prev.star = true;
          prev.value += value2;
          prev.output = star;
          state.backtrack = true;
          state.globstar = true;
          consume(value2);
          continue;
        }
        let rest = remaining();
        if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
          extglobOpen("star", value2);
          continue;
        }
        if (prev.type === "star") {
          if (opts.noglobstar === true) {
            consume(value2);
            continue;
          }
          const prior = prev.prev;
          const before = prior.prev;
          const isStart = prior.type === "slash" || prior.type === "bos";
          const afterStar = before && (before.type === "star" || before.type === "globstar");
          if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
            push({ type: "star", value: value2, output: "" });
            continue;
          }
          const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
          const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
          if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
            push({ type: "star", value: value2, output: "" });
            continue;
          }
          while (rest.slice(0, 3) === "/**") {
            const after = input[state.index + 4];
            if (after && after !== "/") {
              break;
            }
            rest = rest.slice(3);
            consume("/**", 3);
          }
          if (prior.type === "bos" && eos()) {
            prev.type = "globstar";
            prev.value += value2;
            prev.output = globstar(opts);
            state.output = prev.output;
            state.globstar = true;
            consume(value2);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
            prev.value += value2;
            state.globstar = true;
            state.output += prior.output + prev.output;
            consume(value2);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
            const end = rest[1] !== void 0 ? "|$" : "";
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
            prev.value += value2;
            state.output += prior.output + prev.output;
            state.globstar = true;
            consume(value2 + advance());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          if (prior.type === "bos" && rest[0] === "/") {
            prev.type = "globstar";
            prev.value += value2;
            prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
            state.output = prev.output;
            state.globstar = true;
            consume(value2 + advance());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "globstar";
          prev.output = globstar(opts);
          prev.value += value2;
          state.output += prev.output;
          state.globstar = true;
          consume(value2);
          continue;
        }
        const token = { type: "star", value: value2, output: star };
        if (opts.bash === true) {
          token.output = ".*?";
          if (prev.type === "bos" || prev.type === "slash") {
            token.output = nodot + token.output;
          }
          push(token);
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
          token.output = value2;
          push(token);
          continue;
        }
        if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
          if (prev.type === "dot") {
            state.output += NO_DOT_SLASH;
            prev.output += NO_DOT_SLASH;
          } else if (opts.dot === true) {
            state.output += NO_DOTS_SLASH;
            prev.output += NO_DOTS_SLASH;
          } else {
            state.output += nodot;
            prev.output += nodot;
          }
          if (peek() !== "*") {
            state.output += ONE_CHAR;
            prev.output += ONE_CHAR;
          }
        }
        push(token);
      }
      while (state.brackets > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
        state.output = utils.escapeLast(state.output, "[");
        decrement("brackets");
      }
      while (state.parens > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
        state.output = utils.escapeLast(state.output, "(");
        decrement("parens");
      }
      while (state.braces > 0) {
        if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
        state.output = utils.escapeLast(state.output, "{");
        decrement("braces");
      }
      if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
        push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
      }
      if (state.backtrack === true) {
        state.output = "";
        for (const token of state.tokens) {
          state.output += token.output != null ? token.output : token.value;
          if (token.suffix) {
            state.output += token.suffix;
          }
        }
      }
      return state;
    };
    parse.fastpaths = (input, options) => {
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      const len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      input = REPLACEMENTS[input] || input;
      const win32 = utils.isWindows(options);
      const {
        DOT_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOTS_SLASH,
        STAR,
        START_ANCHOR
      } = constants3.globChars(win32);
      const nodot = opts.dot ? NO_DOTS : NO_DOT;
      const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
      const capture = opts.capture ? "" : "?:";
      const state = { negated: false, prefix: "" };
      let star = opts.bash === true ? ".*?" : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      const globstar = (opts2) => {
        if (opts2.noglobstar === true) return star;
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const create = (str) => {
        switch (str) {
          case "*":
            return `${nodot}${ONE_CHAR}${star}`;
          case ".*":
            return `${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*.*":
            return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*/*":
            return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
          case "**":
            return nodot + globstar(opts);
          case "**/*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
          case "**/*.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "**/.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
          default: {
            const match = /^(.*?)\.(\w+)$/.exec(str);
            if (!match) return;
            const source2 = create(match[1]);
            if (!source2) return;
            return source2 + DOT_LITERAL + match[2];
          }
        }
      };
      const output = utils.removePrefix(input, state);
      let source = create(output);
      if (source && opts.strictSlashes !== true) {
        source += `${SLASH_LITERAL}?`;
      }
      return source;
    };
    module2.exports = parse;
  }
});

// ../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js
var require_picomatch = __commonJS({
  "../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js"(exports2, module2) {
    "use strict";
    var path3 = require("path");
    var scan = require_scan();
    var parse = require_parse3();
    var utils = require_utils2();
    var constants3 = require_constants2();
    var isObject2 = (val) => val && typeof val === "object" && !Array.isArray(val);
    var picomatch = (glob, options, returnState = false) => {
      if (Array.isArray(glob)) {
        const fns = glob.map((input) => picomatch(input, options, returnState));
        const arrayMatcher = (str) => {
          for (const isMatch of fns) {
            const state2 = isMatch(str);
            if (state2) return state2;
          }
          return false;
        };
        return arrayMatcher;
      }
      const isState = isObject2(glob) && glob.tokens && glob.input;
      if (glob === "" || typeof glob !== "string" && !isState) {
        throw new TypeError("Expected pattern to be a non-empty string");
      }
      const opts = options || {};
      const posix = utils.isWindows(options);
      const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
      const state = regex.state;
      delete regex.state;
      let isIgnored = () => false;
      if (opts.ignore) {
        const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
        isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
      }
      const matcher = (input, returnObject = false) => {
        const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
        const result = { glob, state, regex, posix, input, output, match, isMatch };
        if (typeof opts.onResult === "function") {
          opts.onResult(result);
        }
        if (isMatch === false) {
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (isIgnored(input)) {
          if (typeof opts.onIgnore === "function") {
            opts.onIgnore(result);
          }
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (typeof opts.onMatch === "function") {
          opts.onMatch(result);
        }
        return returnObject ? result : true;
      };
      if (returnState) {
        matcher.state = state;
      }
      return matcher;
    };
    picomatch.test = (input, regex, options, { glob, posix } = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected input to be a string");
      }
      if (input === "") {
        return { isMatch: false, output: "" };
      }
      const opts = options || {};
      const format = opts.format || (posix ? utils.toPosixSlashes : null);
      let match = input === glob;
      let output = match && format ? format(input) : input;
      if (match === false) {
        output = format ? format(input) : input;
        match = output === glob;
      }
      if (match === false || opts.capture === true) {
        if (opts.matchBase === true || opts.basename === true) {
          match = picomatch.matchBase(input, regex, options, posix);
        } else {
          match = regex.exec(output);
        }
      }
      return { isMatch: Boolean(match), match, output };
    };
    picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
      const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
      return regex.test(path3.basename(input));
    };
    picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    picomatch.parse = (pattern, options) => {
      if (Array.isArray(pattern)) return pattern.map((p) => picomatch.parse(p, options));
      return parse(pattern, { ...options, fastpaths: false });
    };
    picomatch.scan = (input, options) => scan(input, options);
    picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
      if (returnOutput === true) {
        return state.output;
      }
      const opts = options || {};
      const prepend = opts.contains ? "" : "^";
      const append = opts.contains ? "" : "$";
      let source = `${prepend}(?:${state.output})${append}`;
      if (state && state.negated === true) {
        source = `^(?!${source}).*$`;
      }
      const regex = picomatch.toRegex(source, options);
      if (returnState === true) {
        regex.state = state;
      }
      return regex;
    };
    picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
      if (!input || typeof input !== "string") {
        throw new TypeError("Expected a non-empty string");
      }
      let parsed = { negated: false, fastpaths: true };
      if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
        parsed.output = parse.fastpaths(input, options);
      }
      if (!parsed.output) {
        parsed = parse(input, options);
      }
      return picomatch.compileRe(parsed, options, returnOutput, returnState);
    };
    picomatch.toRegex = (source, options) => {
      try {
        const opts = options || {};
        return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
      } catch (err) {
        if (options && options.debug === true) throw err;
        return /$^/;
      }
    };
    picomatch.constants = constants3;
    module2.exports = picomatch;
  }
});

// ../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js
var require_picomatch2 = __commonJS({
  "../../../node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_picomatch();
  }
});

// ../../../node_modules/.pnpm/micromatch@4.0.5/node_modules/micromatch/index.js
var require_micromatch = __commonJS({
  "../../../node_modules/.pnpm/micromatch@4.0.5/node_modules/micromatch/index.js"(exports2, module2) {
    "use strict";
    var util = require("util");
    var braces = require_braces();
    var picomatch = require_picomatch2();
    var utils = require_utils2();
    var isEmptyString = (val) => val === "" || val === "./";
    var micromatch = (list, patterns, options) => {
      patterns = [].concat(patterns);
      list = [].concat(list);
      let omit = /* @__PURE__ */ new Set();
      let keep = /* @__PURE__ */ new Set();
      let items = /* @__PURE__ */ new Set();
      let negatives = 0;
      let onResult = (state) => {
        items.add(state.output);
        if (options && options.onResult) {
          options.onResult(state);
        }
      };
      for (let i = 0; i < patterns.length; i++) {
        let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
        let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
        if (negated) negatives++;
        for (let item of list) {
          let matched = isMatch(item, true);
          let match = negated ? !matched.isMatch : matched.isMatch;
          if (!match) continue;
          if (negated) {
            omit.add(matched.output);
          } else {
            omit.delete(matched.output);
            keep.add(matched.output);
          }
        }
      }
      let result = negatives === patterns.length ? [...items] : [...keep];
      let matches = result.filter((item) => !omit.has(item));
      if (options && matches.length === 0) {
        if (options.failglob === true) {
          throw new Error(`No matches found for "${patterns.join(", ")}"`);
        }
        if (options.nonull === true || options.nullglob === true) {
          return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
        }
      }
      return matches;
    };
    micromatch.match = micromatch;
    micromatch.matcher = (pattern, options) => picomatch(pattern, options);
    micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    micromatch.any = micromatch.isMatch;
    micromatch.not = (list, patterns, options = {}) => {
      patterns = [].concat(patterns).map(String);
      let result = /* @__PURE__ */ new Set();
      let items = [];
      let onResult = (state) => {
        if (options.onResult) options.onResult(state);
        items.push(state.output);
      };
      let matches = new Set(micromatch(list, patterns, { ...options, onResult }));
      for (let item of items) {
        if (!matches.has(item)) {
          result.add(item);
        }
      }
      return [...result];
    };
    micromatch.contains = (str, pattern, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
      }
      if (Array.isArray(pattern)) {
        return pattern.some((p) => micromatch.contains(str, p, options));
      }
      if (typeof pattern === "string") {
        if (isEmptyString(str) || isEmptyString(pattern)) {
          return false;
        }
        if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
          return true;
        }
      }
      return micromatch.isMatch(str, pattern, { ...options, contains: true });
    };
    micromatch.matchKeys = (obj, patterns, options) => {
      if (!utils.isObject(obj)) {
        throw new TypeError("Expected the first argument to be an object");
      }
      let keys = micromatch(Object.keys(obj), patterns, options);
      let res = {};
      for (let key of keys) res[key] = obj[key];
      return res;
    };
    micromatch.some = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (items.some((item) => isMatch(item))) {
          return true;
        }
      }
      return false;
    };
    micromatch.every = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (!items.every((item) => isMatch(item))) {
          return false;
        }
      }
      return true;
    };
    micromatch.all = (str, patterns, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
      }
      return [].concat(patterns).every((p) => picomatch(p, options)(str));
    };
    micromatch.capture = (glob, input, options) => {
      let posix = utils.isWindows(options);
      let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
      let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
      if (match) {
        return match.slice(1).map((v) => v === void 0 ? "" : v);
      }
    };
    micromatch.makeRe = (...args) => picomatch.makeRe(...args);
    micromatch.scan = (...args) => picomatch.scan(...args);
    micromatch.parse = (patterns, options) => {
      let res = [];
      for (let pattern of [].concat(patterns || [])) {
        for (let str of braces(String(pattern), options)) {
          res.push(picomatch.parse(str, options));
        }
      }
      return res;
    };
    micromatch.braces = (pattern, options) => {
      if (typeof pattern !== "string") throw new TypeError("Expected a string");
      if (options && options.nobrace === true || !/\{.*\}/.test(pattern)) {
        return [pattern];
      }
      return braces(pattern, options);
    };
    micromatch.braceExpand = (pattern, options) => {
      if (typeof pattern !== "string") throw new TypeError("Expected a string");
      return micromatch.braces(pattern, { ...options, expand: true });
    };
    module2.exports = micromatch;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/pattern.js
var require_pattern = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/pattern.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.removeDuplicateSlashes = exports2.matchAny = exports2.convertPatternsToRe = exports2.makeRe = exports2.getPatternParts = exports2.expandBraceExpansion = exports2.expandPatternsWithBraceExpansion = exports2.isAffectDepthOfReadingPattern = exports2.endsWithSlashGlobStar = exports2.hasGlobStar = exports2.getBaseDirectory = exports2.isPatternRelatedToParentDirectory = exports2.getPatternsOutsideCurrentDirectory = exports2.getPatternsInsideCurrentDirectory = exports2.getPositivePatterns = exports2.getNegativePatterns = exports2.isPositivePattern = exports2.isNegativePattern = exports2.convertToNegativePattern = exports2.convertToPositivePattern = exports2.isDynamicPattern = exports2.isStaticPattern = void 0;
    var path3 = require("path");
    var globParent = require_glob_parent();
    var micromatch = require_micromatch();
    var GLOBSTAR = "**";
    var ESCAPE_SYMBOL = "\\";
    var COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
    var REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
    var REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
    var GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
    var BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
    var DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
    function isStaticPattern(pattern, options = {}) {
      return !isDynamicPattern(pattern, options);
    }
    exports2.isStaticPattern = isStaticPattern;
    function isDynamicPattern(pattern, options = {}) {
      if (pattern === "") {
        return false;
      }
      if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
        return true;
      }
      if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
        return true;
      }
      if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
        return true;
      }
      if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
        return true;
      }
      return false;
    }
    exports2.isDynamicPattern = isDynamicPattern;
    function hasBraceExpansion(pattern) {
      const openingBraceIndex = pattern.indexOf("{");
      if (openingBraceIndex === -1) {
        return false;
      }
      const closingBraceIndex = pattern.indexOf("}", openingBraceIndex + 1);
      if (closingBraceIndex === -1) {
        return false;
      }
      const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
      return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
    }
    function convertToPositivePattern(pattern) {
      return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
    }
    exports2.convertToPositivePattern = convertToPositivePattern;
    function convertToNegativePattern(pattern) {
      return "!" + pattern;
    }
    exports2.convertToNegativePattern = convertToNegativePattern;
    function isNegativePattern(pattern) {
      return pattern.startsWith("!") && pattern[1] !== "(";
    }
    exports2.isNegativePattern = isNegativePattern;
    function isPositivePattern(pattern) {
      return !isNegativePattern(pattern);
    }
    exports2.isPositivePattern = isPositivePattern;
    function getNegativePatterns(patterns) {
      return patterns.filter(isNegativePattern);
    }
    exports2.getNegativePatterns = getNegativePatterns;
    function getPositivePatterns(patterns) {
      return patterns.filter(isPositivePattern);
    }
    exports2.getPositivePatterns = getPositivePatterns;
    function getPatternsInsideCurrentDirectory(patterns) {
      return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
    }
    exports2.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
    function getPatternsOutsideCurrentDirectory(patterns) {
      return patterns.filter(isPatternRelatedToParentDirectory);
    }
    exports2.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
    function isPatternRelatedToParentDirectory(pattern) {
      return pattern.startsWith("..") || pattern.startsWith("./..");
    }
    exports2.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
    function getBaseDirectory(pattern) {
      return globParent(pattern, { flipBackslashes: false });
    }
    exports2.getBaseDirectory = getBaseDirectory;
    function hasGlobStar(pattern) {
      return pattern.includes(GLOBSTAR);
    }
    exports2.hasGlobStar = hasGlobStar;
    function endsWithSlashGlobStar(pattern) {
      return pattern.endsWith("/" + GLOBSTAR);
    }
    exports2.endsWithSlashGlobStar = endsWithSlashGlobStar;
    function isAffectDepthOfReadingPattern(pattern) {
      const basename = path3.basename(pattern);
      return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
    }
    exports2.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
    function expandPatternsWithBraceExpansion(patterns) {
      return patterns.reduce((collection, pattern) => {
        return collection.concat(expandBraceExpansion(pattern));
      }, []);
    }
    exports2.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
    function expandBraceExpansion(pattern) {
      const patterns = micromatch.braces(pattern, { expand: true, nodupes: true, keepEscaping: true });
      patterns.sort((a, b) => a.length - b.length);
      return patterns.filter((pattern2) => pattern2 !== "");
    }
    exports2.expandBraceExpansion = expandBraceExpansion;
    function getPatternParts(pattern, options) {
      let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));
      if (parts.length === 0) {
        parts = [pattern];
      }
      if (parts[0].startsWith("/")) {
        parts[0] = parts[0].slice(1);
        parts.unshift("");
      }
      return parts;
    }
    exports2.getPatternParts = getPatternParts;
    function makeRe(pattern, options) {
      return micromatch.makeRe(pattern, options);
    }
    exports2.makeRe = makeRe;
    function convertPatternsToRe(patterns, options) {
      return patterns.map((pattern) => makeRe(pattern, options));
    }
    exports2.convertPatternsToRe = convertPatternsToRe;
    function matchAny(entry, patternsRe) {
      return patternsRe.some((patternRe) => patternRe.test(entry));
    }
    exports2.matchAny = matchAny;
    function removeDuplicateSlashes(pattern) {
      return pattern.replace(DOUBLE_SLASH_RE, "/");
    }
    exports2.removeDuplicateSlashes = removeDuplicateSlashes;
  }
});

// ../../../node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js
var require_merge2 = __commonJS({
  "../../../node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js"(exports2, module2) {
    "use strict";
    var Stream = require("stream");
    var PassThrough = Stream.PassThrough;
    var slice = Array.prototype.slice;
    module2.exports = merge2;
    function merge2() {
      const streamsQueue = [];
      const args = slice.call(arguments);
      let merging = false;
      let options = args[args.length - 1];
      if (options && !Array.isArray(options) && options.pipe == null) {
        args.pop();
      } else {
        options = {};
      }
      const doEnd = options.end !== false;
      const doPipeError = options.pipeError === true;
      if (options.objectMode == null) {
        options.objectMode = true;
      }
      if (options.highWaterMark == null) {
        options.highWaterMark = 64 * 1024;
      }
      const mergedStream = PassThrough(options);
      function addStream() {
        for (let i = 0, len = arguments.length; i < len; i++) {
          streamsQueue.push(pauseStreams(arguments[i], options));
        }
        mergeStream2();
        return this;
      }
      function mergeStream2() {
        if (merging) {
          return;
        }
        merging = true;
        let streams = streamsQueue.shift();
        if (!streams) {
          process.nextTick(endStream);
          return;
        }
        if (!Array.isArray(streams)) {
          streams = [streams];
        }
        let pipesCount = streams.length + 1;
        function next() {
          if (--pipesCount > 0) {
            return;
          }
          merging = false;
          mergeStream2();
        }
        function pipe(stream) {
          function onend() {
            stream.removeListener("merge2UnpipeEnd", onend);
            stream.removeListener("end", onend);
            if (doPipeError) {
              stream.removeListener("error", onerror);
            }
            next();
          }
          function onerror(err) {
            mergedStream.emit("error", err);
          }
          if (stream._readableState.endEmitted) {
            return next();
          }
          stream.on("merge2UnpipeEnd", onend);
          stream.on("end", onend);
          if (doPipeError) {
            stream.on("error", onerror);
          }
          stream.pipe(mergedStream, { end: false });
          stream.resume();
        }
        for (let i = 0; i < streams.length; i++) {
          pipe(streams[i]);
        }
        next();
      }
      function endStream() {
        merging = false;
        mergedStream.emit("queueDrain");
        if (doEnd) {
          mergedStream.end();
        }
      }
      mergedStream.setMaxListeners(0);
      mergedStream.add = addStream;
      mergedStream.on("unpipe", function(stream) {
        stream.emit("merge2UnpipeEnd");
      });
      if (args.length) {
        addStream.apply(null, args);
      }
      return mergedStream;
    }
    function pauseStreams(streams, options) {
      if (!Array.isArray(streams)) {
        if (!streams._readableState && streams.pipe) {
          streams = streams.pipe(PassThrough(options));
        }
        if (!streams._readableState || !streams.pause || !streams.pipe) {
          throw new Error("Only readable stream can be merged.");
        }
        streams.pause();
      } else {
        for (let i = 0, len = streams.length; i < len; i++) {
          streams[i] = pauseStreams(streams[i], options);
        }
      }
      return streams;
    }
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/stream.js
var require_stream = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.merge = void 0;
    var merge2 = require_merge2();
    function merge(streams) {
      const mergedStream = merge2(streams);
      streams.forEach((stream) => {
        stream.once("error", (error) => mergedStream.emit("error", error));
      });
      mergedStream.once("close", () => propagateCloseEventToSources(streams));
      mergedStream.once("end", () => propagateCloseEventToSources(streams));
      return mergedStream;
    }
    exports2.merge = merge;
    function propagateCloseEventToSources(streams) {
      streams.forEach((stream) => stream.emit("close"));
    }
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/string.js
var require_string = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/string.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEmpty = exports2.isString = void 0;
    function isString(input) {
      return typeof input === "string";
    }
    exports2.isString = isString;
    function isEmpty(input) {
      return input === "";
    }
    exports2.isEmpty = isEmpty;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/index.js
var require_utils3 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.string = exports2.stream = exports2.pattern = exports2.path = exports2.fs = exports2.errno = exports2.array = void 0;
    var array = require_array();
    exports2.array = array;
    var errno = require_errno();
    exports2.errno = errno;
    var fs = require_fs();
    exports2.fs = fs;
    var path3 = require_path();
    exports2.path = path3;
    var pattern = require_pattern();
    exports2.pattern = pattern;
    var stream = require_stream();
    exports2.stream = stream;
    var string = require_string();
    exports2.string = string;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/managers/tasks.js
var require_tasks = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/managers/tasks.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertPatternGroupToTask = exports2.convertPatternGroupsToTasks = exports2.groupPatternsByBaseDirectory = exports2.getNegativePatternsAsPositive = exports2.getPositivePatterns = exports2.convertPatternsToTasks = exports2.generate = void 0;
    var utils = require_utils3();
    function generate(input, settings) {
      const patterns = processPatterns(input, settings);
      const ignore = processPatterns(settings.ignore, settings);
      const positivePatterns = getPositivePatterns(patterns);
      const negativePatterns = getNegativePatternsAsPositive(patterns, ignore);
      const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
      const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
      const staticTasks = convertPatternsToTasks(
        staticPatterns,
        negativePatterns,
        /* dynamic */
        false
      );
      const dynamicTasks = convertPatternsToTasks(
        dynamicPatterns,
        negativePatterns,
        /* dynamic */
        true
      );
      return staticTasks.concat(dynamicTasks);
    }
    exports2.generate = generate;
    function processPatterns(input, settings) {
      let patterns = input;
      if (settings.braceExpansion) {
        patterns = utils.pattern.expandPatternsWithBraceExpansion(patterns);
      }
      if (settings.baseNameMatch) {
        patterns = patterns.map((pattern) => pattern.includes("/") ? pattern : `**/${pattern}`);
      }
      return patterns.map((pattern) => utils.pattern.removeDuplicateSlashes(pattern));
    }
    function convertPatternsToTasks(positive, negative, dynamic) {
      const tasks = [];
      const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
      const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
      const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
      const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
      tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
      if ("." in insideCurrentDirectoryGroup) {
        tasks.push(convertPatternGroupToTask(".", patternsInsideCurrentDirectory, negative, dynamic));
      } else {
        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
      }
      return tasks;
    }
    exports2.convertPatternsToTasks = convertPatternsToTasks;
    function getPositivePatterns(patterns) {
      return utils.pattern.getPositivePatterns(patterns);
    }
    exports2.getPositivePatterns = getPositivePatterns;
    function getNegativePatternsAsPositive(patterns, ignore) {
      const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
      const positive = negative.map(utils.pattern.convertToPositivePattern);
      return positive;
    }
    exports2.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
    function groupPatternsByBaseDirectory(patterns) {
      const group = {};
      return patterns.reduce((collection, pattern) => {
        const base = utils.pattern.getBaseDirectory(pattern);
        if (base in collection) {
          collection[base].push(pattern);
        } else {
          collection[base] = [pattern];
        }
        return collection;
      }, group);
    }
    exports2.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
    function convertPatternGroupsToTasks(positive, negative, dynamic) {
      return Object.keys(positive).map((base) => {
        return convertPatternGroupToTask(base, positive[base], negative, dynamic);
      });
    }
    exports2.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
    function convertPatternGroupToTask(base, positive, negative, dynamic) {
      return {
        dynamic,
        positive,
        negative,
        base,
        patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
      };
    }
    exports2.convertPatternGroupToTask = convertPatternGroupToTask;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js
var require_async = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.read = void 0;
    function read(path3, settings, callback) {
      settings.fs.lstat(path3, (lstatError, lstat) => {
        if (lstatError !== null) {
          callFailureCallback(callback, lstatError);
          return;
        }
        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
          callSuccessCallback(callback, lstat);
          return;
        }
        settings.fs.stat(path3, (statError, stat) => {
          if (statError !== null) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              callFailureCallback(callback, statError);
              return;
            }
            callSuccessCallback(callback, lstat);
            return;
          }
          if (settings.markSymbolicLink) {
            stat.isSymbolicLink = () => true;
          }
          callSuccessCallback(callback, stat);
        });
      });
    }
    exports2.read = read;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, result) {
      callback(null, result);
    }
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js
var require_sync = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.read = void 0;
    function read(path3, settings) {
      const lstat = settings.fs.lstatSync(path3);
      if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
        return lstat;
      }
      try {
        const stat = settings.fs.statSync(path3);
        if (settings.markSymbolicLink) {
          stat.isSymbolicLink = () => true;
        }
        return stat;
      } catch (error) {
        if (!settings.throwErrorOnBrokenSymbolicLink) {
          return lstat;
        }
        throw error;
      }
    }
    exports2.read = read;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js
var require_fs2 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createFileSystemAdapter = exports2.FILE_SYSTEM_ADAPTER = void 0;
    var fs = require("fs");
    exports2.FILE_SYSTEM_ADAPTER = {
      lstat: fs.lstat,
      stat: fs.stat,
      lstatSync: fs.lstatSync,
      statSync: fs.statSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports2.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports2.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports2.createFileSystemAdapter = createFileSystemAdapter;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js
var require_settings = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fs = require_fs2();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
        this.fs = fs.createFileSystemAdapter(this._options.fs);
        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
      }
      _getValue(option, value2) {
        return option !== null && option !== void 0 ? option : value2;
      }
    };
    exports2.default = Settings;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js
var require_out = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.statSync = exports2.stat = exports2.Settings = void 0;
    var async = require_async();
    var sync = require_sync();
    var settings_1 = require_settings();
    exports2.Settings = settings_1.default;
    function stat(path3, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        async.read(path3, getSettings(), optionsOrSettingsOrCallback);
        return;
      }
      async.read(path3, getSettings(optionsOrSettingsOrCallback), callback);
    }
    exports2.stat = stat;
    function statSync(path3, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      return sync.read(path3, settings);
    }
    exports2.statSync = statSync;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// ../../../node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js
var require_queue_microtask = __commonJS({
  "../../../node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js"(exports2, module2) {
    var promise;
    module2.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
      throw err;
    }, 0));
  }
});

// ../../../node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js
var require_run_parallel = __commonJS({
  "../../../node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js"(exports2, module2) {
    module2.exports = runParallel;
    var queueMicrotask2 = require_queue_microtask();
    function runParallel(tasks, cb) {
      let results, pending, keys;
      let isSync = true;
      if (Array.isArray(tasks)) {
        results = [];
        pending = tasks.length;
      } else {
        keys = Object.keys(tasks);
        results = {};
        pending = keys.length;
      }
      function done(err) {
        function end() {
          if (cb) cb(err, results);
          cb = null;
        }
        if (isSync) queueMicrotask2(end);
        else end();
      }
      function each(i, err, result) {
        results[i] = result;
        if (--pending === 0 || err) {
          done(err);
        }
      }
      if (!pending) {
        done(null);
      } else if (keys) {
        keys.forEach(function(key) {
          tasks[key](function(err, result) {
            each(key, err, result);
          });
        });
      } else {
        tasks.forEach(function(task, i) {
          task(function(err, result) {
            each(i, err, result);
          });
        });
      }
      isSync = false;
    }
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js
var require_constants3 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
    var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
    if (NODE_PROCESS_VERSION_PARTS[0] === void 0 || NODE_PROCESS_VERSION_PARTS[1] === void 0) {
      throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
    }
    var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
    var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
    var SUPPORTED_MAJOR_VERSION = 10;
    var SUPPORTED_MINOR_VERSION = 10;
    var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
    var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
    exports2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js
var require_fs3 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createDirentFromStats = void 0;
    var DirentFromStats = class {
      constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
      }
    };
    function createDirentFromStats(name, stats) {
      return new DirentFromStats(name, stats);
    }
    exports2.createDirentFromStats = createDirentFromStats;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js
var require_utils4 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fs = void 0;
    var fs = require_fs3();
    exports2.fs = fs;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js
var require_common = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.joinPathSegments = void 0;
    function joinPathSegments(a, b, separator) {
      if (a.endsWith(separator)) {
        return a + b;
      }
      return a + separator + b;
    }
    exports2.joinPathSegments = joinPathSegments;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js
var require_async2 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readdir = exports2.readdirWithFileTypes = exports2.read = void 0;
    var fsStat = require_out();
    var rpl = require_run_parallel();
    var constants_1 = require_constants3();
    var utils = require_utils4();
    var common = require_common();
    function read(directory, settings, callback) {
      if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        readdirWithFileTypes(directory, settings, callback);
        return;
      }
      readdir(directory, settings, callback);
    }
    exports2.read = read;
    function readdirWithFileTypes(directory, settings, callback) {
      settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
        if (readdirError !== null) {
          callFailureCallback(callback, readdirError);
          return;
        }
        const entries = dirents.map((dirent) => ({
          dirent,
          name: dirent.name,
          path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        }));
        if (!settings.followSymbolicLinks) {
          callSuccessCallback(callback, entries);
          return;
        }
        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
        rpl(tasks, (rplError, rplEntries) => {
          if (rplError !== null) {
            callFailureCallback(callback, rplError);
            return;
          }
          callSuccessCallback(callback, rplEntries);
        });
      });
    }
    exports2.readdirWithFileTypes = readdirWithFileTypes;
    function makeRplTaskEntry(entry, settings) {
      return (done) => {
        if (!entry.dirent.isSymbolicLink()) {
          done(null, entry);
          return;
        }
        settings.fs.stat(entry.path, (statError, stats) => {
          if (statError !== null) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              done(statError);
              return;
            }
            done(null, entry);
            return;
          }
          entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
          done(null, entry);
        });
      };
    }
    function readdir(directory, settings, callback) {
      settings.fs.readdir(directory, (readdirError, names) => {
        if (readdirError !== null) {
          callFailureCallback(callback, readdirError);
          return;
        }
        const tasks = names.map((name) => {
          const path3 = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
          return (done) => {
            fsStat.stat(path3, settings.fsStatSettings, (error, stats) => {
              if (error !== null) {
                done(error);
                return;
              }
              const entry = {
                name,
                path: path3,
                dirent: utils.fs.createDirentFromStats(name, stats)
              };
              if (settings.stats) {
                entry.stats = stats;
              }
              done(null, entry);
            });
          };
        });
        rpl(tasks, (rplError, entries) => {
          if (rplError !== null) {
            callFailureCallback(callback, rplError);
            return;
          }
          callSuccessCallback(callback, entries);
        });
      });
    }
    exports2.readdir = readdir;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, result) {
      callback(null, result);
    }
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js
var require_sync2 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readdir = exports2.readdirWithFileTypes = exports2.read = void 0;
    var fsStat = require_out();
    var constants_1 = require_constants3();
    var utils = require_utils4();
    var common = require_common();
    function read(directory, settings) {
      if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        return readdirWithFileTypes(directory, settings);
      }
      return readdir(directory, settings);
    }
    exports2.read = read;
    function readdirWithFileTypes(directory, settings) {
      const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
      return dirents.map((dirent) => {
        const entry = {
          dirent,
          name: dirent.name,
          path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        };
        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
          try {
            const stats = settings.fs.statSync(entry.path);
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
          } catch (error) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              throw error;
            }
          }
        }
        return entry;
      });
    }
    exports2.readdirWithFileTypes = readdirWithFileTypes;
    function readdir(directory, settings) {
      const names = settings.fs.readdirSync(directory);
      return names.map((name) => {
        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
        const entry = {
          name,
          path: entryPath,
          dirent: utils.fs.createDirentFromStats(name, stats)
        };
        if (settings.stats) {
          entry.stats = stats;
        }
        return entry;
      });
    }
    exports2.readdir = readdir;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js
var require_fs4 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createFileSystemAdapter = exports2.FILE_SYSTEM_ADAPTER = void 0;
    var fs = require("fs");
    exports2.FILE_SYSTEM_ADAPTER = {
      lstat: fs.lstat,
      stat: fs.stat,
      lstatSync: fs.lstatSync,
      statSync: fs.statSync,
      readdir: fs.readdir,
      readdirSync: fs.readdirSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports2.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports2.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports2.createFileSystemAdapter = createFileSystemAdapter;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js
var require_settings2 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var path3 = require("path");
    var fsStat = require_out();
    var fs = require_fs4();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
        this.fs = fs.createFileSystemAdapter(this._options.fs);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path3.sep);
        this.stats = this._getValue(this._options.stats, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        this.fsStatSettings = new fsStat.Settings({
          followSymbolicLink: this.followSymbolicLinks,
          fs: this.fs,
          throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
        });
      }
      _getValue(option, value2) {
        return option !== null && option !== void 0 ? option : value2;
      }
    };
    exports2.default = Settings;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js
var require_out2 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Settings = exports2.scandirSync = exports2.scandir = void 0;
    var async = require_async2();
    var sync = require_sync2();
    var settings_1 = require_settings2();
    exports2.Settings = settings_1.default;
    function scandir(path3, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        async.read(path3, getSettings(), optionsOrSettingsOrCallback);
        return;
      }
      async.read(path3, getSettings(optionsOrSettingsOrCallback), callback);
    }
    exports2.scandir = scandir;
    function scandirSync(path3, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      return sync.read(path3, settings);
    }
    exports2.scandirSync = scandirSync;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// ../../../node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js
var require_reusify = __commonJS({
  "../../../node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js"(exports2, module2) {
    "use strict";
    function reusify(Constructor) {
      var head2 = new Constructor();
      var tail = head2;
      function get() {
        var current = head2;
        if (current.next) {
          head2 = current.next;
        } else {
          head2 = new Constructor();
          tail = head2;
        }
        current.next = null;
        return current;
      }
      function release(obj) {
        tail.next = obj;
        tail = obj;
      }
      return {
        get,
        release
      };
    }
    module2.exports = reusify;
  }
});

// ../../../node_modules/.pnpm/fastq@1.15.0/node_modules/fastq/queue.js
var require_queue = __commonJS({
  "../../../node_modules/.pnpm/fastq@1.15.0/node_modules/fastq/queue.js"(exports2, module2) {
    "use strict";
    var reusify = require_reusify();
    function fastqueue(context, worker, concurrency) {
      if (typeof context === "function") {
        concurrency = worker;
        worker = context;
        context = null;
      }
      if (concurrency < 1) {
        throw new Error("fastqueue concurrency must be greater than 1");
      }
      var cache = reusify(Task);
      var queueHead = null;
      var queueTail = null;
      var _running = 0;
      var errorHandler = null;
      var self2 = {
        push,
        drain: noop2,
        saturated: noop2,
        pause,
        paused: false,
        concurrency,
        running,
        resume,
        idle,
        length,
        getQueue,
        unshift,
        empty: noop2,
        kill,
        killAndDrain,
        error
      };
      return self2;
      function running() {
        return _running;
      }
      function pause() {
        self2.paused = true;
      }
      function length() {
        var current = queueHead;
        var counter = 0;
        while (current) {
          current = current.next;
          counter++;
        }
        return counter;
      }
      function getQueue() {
        var current = queueHead;
        var tasks = [];
        while (current) {
          tasks.push(current.value);
          current = current.next;
        }
        return tasks;
      }
      function resume() {
        if (!self2.paused) return;
        self2.paused = false;
        for (var i = 0; i < self2.concurrency; i++) {
          _running++;
          release();
        }
      }
      function idle() {
        return _running === 0 && self2.length() === 0;
      }
      function push(value2, done) {
        var current = cache.get();
        current.context = context;
        current.release = release;
        current.value = value2;
        current.callback = done || noop2;
        current.errorHandler = errorHandler;
        if (_running === self2.concurrency || self2.paused) {
          if (queueTail) {
            queueTail.next = current;
            queueTail = current;
          } else {
            queueHead = current;
            queueTail = current;
            self2.saturated();
          }
        } else {
          _running++;
          worker.call(context, current.value, current.worked);
        }
      }
      function unshift(value2, done) {
        var current = cache.get();
        current.context = context;
        current.release = release;
        current.value = value2;
        current.callback = done || noop2;
        if (_running === self2.concurrency || self2.paused) {
          if (queueHead) {
            current.next = queueHead;
            queueHead = current;
          } else {
            queueHead = current;
            queueTail = current;
            self2.saturated();
          }
        } else {
          _running++;
          worker.call(context, current.value, current.worked);
        }
      }
      function release(holder) {
        if (holder) {
          cache.release(holder);
        }
        var next = queueHead;
        if (next) {
          if (!self2.paused) {
            if (queueTail === queueHead) {
              queueTail = null;
            }
            queueHead = next.next;
            next.next = null;
            worker.call(context, next.value, next.worked);
            if (queueTail === null) {
              self2.empty();
            }
          } else {
            _running--;
          }
        } else if (--_running === 0) {
          self2.drain();
        }
      }
      function kill() {
        queueHead = null;
        queueTail = null;
        self2.drain = noop2;
      }
      function killAndDrain() {
        queueHead = null;
        queueTail = null;
        self2.drain();
        self2.drain = noop2;
      }
      function error(handler) {
        errorHandler = handler;
      }
    }
    function noop2() {
    }
    function Task() {
      this.value = null;
      this.callback = noop2;
      this.next = null;
      this.release = noop2;
      this.context = null;
      this.errorHandler = null;
      var self2 = this;
      this.worked = function worked(err, result) {
        var callback = self2.callback;
        var errorHandler = self2.errorHandler;
        var val = self2.value;
        self2.value = null;
        self2.callback = noop2;
        if (self2.errorHandler) {
          errorHandler(err, val);
        }
        callback.call(self2.context, err, result);
        self2.release(self2);
      };
    }
    function queueAsPromised(context, worker, concurrency) {
      if (typeof context === "function") {
        concurrency = worker;
        worker = context;
        context = null;
      }
      function asyncWrapper(arg, cb) {
        worker.call(this, arg).then(function(res) {
          cb(null, res);
        }, cb);
      }
      var queue = fastqueue(context, asyncWrapper, concurrency);
      var pushCb = queue.push;
      var unshiftCb = queue.unshift;
      queue.push = push;
      queue.unshift = unshift;
      queue.drained = drained;
      return queue;
      function push(value2) {
        var p = new Promise(function(resolve, reject) {
          pushCb(value2, function(err, result) {
            if (err) {
              reject(err);
              return;
            }
            resolve(result);
          });
        });
        p.catch(noop2);
        return p;
      }
      function unshift(value2) {
        var p = new Promise(function(resolve, reject) {
          unshiftCb(value2, function(err, result) {
            if (err) {
              reject(err);
              return;
            }
            resolve(result);
          });
        });
        p.catch(noop2);
        return p;
      }
      function drained() {
        if (queue.idle()) {
          return new Promise(function(resolve) {
            resolve();
          });
        }
        var previousDrain = queue.drain;
        var p = new Promise(function(resolve) {
          queue.drain = function() {
            previousDrain();
            resolve();
          };
        });
        return p;
      }
    }
    module2.exports = fastqueue;
    module2.exports.promise = queueAsPromised;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js
var require_common2 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.joinPathSegments = exports2.replacePathSegmentSeparator = exports2.isAppliedFilter = exports2.isFatalError = void 0;
    function isFatalError(settings, error) {
      if (settings.errorFilter === null) {
        return true;
      }
      return !settings.errorFilter(error);
    }
    exports2.isFatalError = isFatalError;
    function isAppliedFilter(filter, value2) {
      return filter === null || filter(value2);
    }
    exports2.isAppliedFilter = isAppliedFilter;
    function replacePathSegmentSeparator(filepath, separator) {
      return filepath.split(/[/\\]/).join(separator);
    }
    exports2.replacePathSegmentSeparator = replacePathSegmentSeparator;
    function joinPathSegments(a, b, separator) {
      if (a === "") {
        return b;
      }
      if (a.endsWith(separator)) {
        return a + b;
      }
      return a + separator + b;
    }
    exports2.joinPathSegments = joinPathSegments;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js
var require_reader = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var common = require_common2();
    var Reader = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
      }
    };
    exports2.default = Reader;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js
var require_async3 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var events_1 = require("events");
    var fsScandir = require_out2();
    var fastq = require_queue();
    var common = require_common2();
    var reader_1 = require_reader();
    var AsyncReader = class extends reader_1.default {
      constructor(_root, _settings) {
        super(_root, _settings);
        this._settings = _settings;
        this._scandir = fsScandir.scandir;
        this._emitter = new events_1.EventEmitter();
        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
        this._isFatalError = false;
        this._isDestroyed = false;
        this._queue.drain = () => {
          if (!this._isFatalError) {
            this._emitter.emit("end");
          }
        };
      }
      read() {
        this._isFatalError = false;
        this._isDestroyed = false;
        setImmediate(() => {
          this._pushToQueue(this._root, this._settings.basePath);
        });
        return this._emitter;
      }
      get isDestroyed() {
        return this._isDestroyed;
      }
      destroy() {
        if (this._isDestroyed) {
          throw new Error("The reader is already destroyed");
        }
        this._isDestroyed = true;
        this._queue.killAndDrain();
      }
      onEntry(callback) {
        this._emitter.on("entry", callback);
      }
      onError(callback) {
        this._emitter.once("error", callback);
      }
      onEnd(callback) {
        this._emitter.once("end", callback);
      }
      _pushToQueue(directory, base) {
        const queueItem = { directory, base };
        this._queue.push(queueItem, (error) => {
          if (error !== null) {
            this._handleError(error);
          }
        });
      }
      _worker(item, done) {
        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
          if (error !== null) {
            done(error, void 0);
            return;
          }
          for (const entry of entries) {
            this._handleEntry(entry, item.base);
          }
          done(null, void 0);
        });
      }
      _handleError(error) {
        if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
          return;
        }
        this._isFatalError = true;
        this._isDestroyed = true;
        this._emitter.emit("error", error);
      }
      _handleEntry(entry, base) {
        if (this._isDestroyed || this._isFatalError) {
          return;
        }
        const fullpath = entry.path;
        if (base !== void 0) {
          entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
          this._emitEntry(entry);
        }
        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
          this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
        }
      }
      _emitEntry(entry) {
        this._emitter.emit("entry", entry);
      }
    };
    exports2.default = AsyncReader;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js
var require_async4 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var async_1 = require_async3();
    var AsyncProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._storage = [];
      }
      read(callback) {
        this._reader.onError((error) => {
          callFailureCallback(callback, error);
        });
        this._reader.onEntry((entry) => {
          this._storage.push(entry);
        });
        this._reader.onEnd(() => {
          callSuccessCallback(callback, this._storage);
        });
        this._reader.read();
      }
    };
    exports2.default = AsyncProvider;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, entries) {
      callback(null, entries);
    }
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js
var require_stream2 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var stream_1 = require("stream");
    var async_1 = require_async3();
    var StreamProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._stream = new stream_1.Readable({
          objectMode: true,
          read: () => {
          },
          destroy: () => {
            if (!this._reader.isDestroyed) {
              this._reader.destroy();
            }
          }
        });
      }
      read() {
        this._reader.onError((error) => {
          this._stream.emit("error", error);
        });
        this._reader.onEntry((entry) => {
          this._stream.push(entry);
        });
        this._reader.onEnd(() => {
          this._stream.push(null);
        });
        this._reader.read();
        return this._stream;
      }
    };
    exports2.default = StreamProvider;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js
var require_sync3 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fsScandir = require_out2();
    var common = require_common2();
    var reader_1 = require_reader();
    var SyncReader = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._scandir = fsScandir.scandirSync;
        this._storage = [];
        this._queue = /* @__PURE__ */ new Set();
      }
      read() {
        this._pushToQueue(this._root, this._settings.basePath);
        this._handleQueue();
        return this._storage;
      }
      _pushToQueue(directory, base) {
        this._queue.add({ directory, base });
      }
      _handleQueue() {
        for (const item of this._queue.values()) {
          this._handleDirectory(item.directory, item.base);
        }
      }
      _handleDirectory(directory, base) {
        try {
          const entries = this._scandir(directory, this._settings.fsScandirSettings);
          for (const entry of entries) {
            this._handleEntry(entry, base);
          }
        } catch (error) {
          this._handleError(error);
        }
      }
      _handleError(error) {
        if (!common.isFatalError(this._settings, error)) {
          return;
        }
        throw error;
      }
      _handleEntry(entry, base) {
        const fullpath = entry.path;
        if (base !== void 0) {
          entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
          this._pushToStorage(entry);
        }
        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
          this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
        }
      }
      _pushToStorage(entry) {
        this._storage.push(entry);
      }
    };
    exports2.default = SyncReader;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js
var require_sync4 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var sync_1 = require_sync3();
    var SyncProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new sync_1.default(this._root, this._settings);
      }
      read() {
        return this._reader.read();
      }
    };
    exports2.default = SyncProvider;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js
var require_settings3 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var path3 = require("path");
    var fsScandir = require_out2();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.basePath = this._getValue(this._options.basePath, void 0);
        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
        this.deepFilter = this._getValue(this._options.deepFilter, null);
        this.entryFilter = this._getValue(this._options.entryFilter, null);
        this.errorFilter = this._getValue(this._options.errorFilter, null);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path3.sep);
        this.fsScandirSettings = new fsScandir.Settings({
          followSymbolicLinks: this._options.followSymbolicLinks,
          fs: this._options.fs,
          pathSegmentSeparator: this._options.pathSegmentSeparator,
          stats: this._options.stats,
          throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
        });
      }
      _getValue(option, value2) {
        return option !== null && option !== void 0 ? option : value2;
      }
    };
    exports2.default = Settings;
  }
});

// ../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js
var require_out3 = __commonJS({
  "../../../node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Settings = exports2.walkStream = exports2.walkSync = exports2.walk = void 0;
    var async_1 = require_async4();
    var stream_1 = require_stream2();
    var sync_1 = require_sync4();
    var settings_1 = require_settings3();
    exports2.Settings = settings_1.default;
    function walk(directory, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
        return;
      }
      new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
    }
    exports2.walk = walk;
    function walkSync(directory, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      const provider = new sync_1.default(directory, settings);
      return provider.read();
    }
    exports2.walkSync = walkSync;
    function walkStream(directory, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      const provider = new stream_1.default(directory, settings);
      return provider.read();
    }
    exports2.walkStream = walkStream;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/reader.js
var require_reader2 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/reader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var path3 = require("path");
    var fsStat = require_out();
    var utils = require_utils3();
    var Reader = class {
      constructor(_settings) {
        this._settings = _settings;
        this._fsStatSettings = new fsStat.Settings({
          followSymbolicLink: this._settings.followSymbolicLinks,
          fs: this._settings.fs,
          throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
        });
      }
      _getFullEntryPath(filepath) {
        return path3.resolve(this._settings.cwd, filepath);
      }
      _makeEntry(stats, pattern) {
        const entry = {
          name: pattern,
          path: pattern,
          dirent: utils.fs.createDirentFromStats(pattern, stats)
        };
        if (this._settings.stats) {
          entry.stats = stats;
        }
        return entry;
      }
      _isFatalError(error) {
        return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
      }
    };
    exports2.default = Reader;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/stream.js
var require_stream3 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var stream_1 = require("stream");
    var fsStat = require_out();
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var ReaderStream = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkStream = fsWalk.walkStream;
        this._stat = fsStat.stat;
      }
      dynamic(root, options) {
        return this._walkStream(root, options);
      }
      static(patterns, options) {
        const filepaths = patterns.map(this._getFullEntryPath, this);
        const stream = new stream_1.PassThrough({ objectMode: true });
        stream._write = (index, _enc, done) => {
          return this._getEntry(filepaths[index], patterns[index], options).then((entry) => {
            if (entry !== null && options.entryFilter(entry)) {
              stream.push(entry);
            }
            if (index === filepaths.length - 1) {
              stream.end();
            }
            done();
          }).catch(done);
        };
        for (let i = 0; i < filepaths.length; i++) {
          stream.write(i);
        }
        return stream;
      }
      _getEntry(filepath, pattern, options) {
        return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern)).catch((error) => {
          if (options.errorFilter(error)) {
            return null;
          }
          throw error;
        });
      }
      _getStat(filepath) {
        return new Promise((resolve, reject) => {
          this._stat(filepath, this._fsStatSettings, (error, stats) => {
            return error === null ? resolve(stats) : reject(error);
          });
        });
      }
    };
    exports2.default = ReaderStream;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/async.js
var require_async5 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var stream_1 = require_stream3();
    var ReaderAsync = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkAsync = fsWalk.walk;
        this._readerStream = new stream_1.default(this._settings);
      }
      dynamic(root, options) {
        return new Promise((resolve, reject) => {
          this._walkAsync(root, options, (error, entries) => {
            if (error === null) {
              resolve(entries);
            } else {
              reject(error);
            }
          });
        });
      }
      async static(patterns, options) {
        const entries = [];
        const stream = this._readerStream.static(patterns, options);
        return new Promise((resolve, reject) => {
          stream.once("error", reject);
          stream.on("data", (entry) => entries.push(entry));
          stream.once("end", () => resolve(entries));
        });
      }
    };
    exports2.default = ReaderAsync;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/matcher.js
var require_matcher = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/matcher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils = require_utils3();
    var Matcher = class {
      constructor(_patterns, _settings, _micromatchOptions) {
        this._patterns = _patterns;
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this._storage = [];
        this._fillStorage();
      }
      _fillStorage() {
        for (const pattern of this._patterns) {
          const segments = this._getPatternSegments(pattern);
          const sections = this._splitSegmentsIntoSections(segments);
          this._storage.push({
            complete: sections.length <= 1,
            pattern,
            segments,
            sections
          });
        }
      }
      _getPatternSegments(pattern) {
        const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
        return parts.map((part) => {
          const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
          if (!dynamic) {
            return {
              dynamic: false,
              pattern: part
            };
          }
          return {
            dynamic: true,
            pattern: part,
            patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
          };
        });
      }
      _splitSegmentsIntoSections(segments) {
        return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
      }
    };
    exports2.default = Matcher;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/partial.js
var require_partial = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/partial.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var matcher_1 = require_matcher();
    var PartialMatcher = class extends matcher_1.default {
      match(filepath) {
        const parts = filepath.split("/");
        const levels = parts.length;
        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
        for (const pattern of patterns) {
          const section = pattern.sections[0];
          if (!pattern.complete && levels > section.length) {
            return true;
          }
          const match = parts.every((part, index) => {
            const segment = pattern.segments[index];
            if (segment.dynamic && segment.patternRe.test(part)) {
              return true;
            }
            if (!segment.dynamic && segment.pattern === part) {
              return true;
            }
            return false;
          });
          if (match) {
            return true;
          }
        }
        return false;
      }
    };
    exports2.default = PartialMatcher;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/deep.js
var require_deep = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/deep.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils = require_utils3();
    var partial_1 = require_partial();
    var DeepFilter = class {
      constructor(_settings, _micromatchOptions) {
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
      }
      getFilter(basePath, positive, negative) {
        const matcher = this._getMatcher(positive);
        const negativeRe = this._getNegativePatternsRe(negative);
        return (entry) => this._filter(basePath, entry, matcher, negativeRe);
      }
      _getMatcher(patterns) {
        return new partial_1.default(patterns, this._settings, this._micromatchOptions);
      }
      _getNegativePatternsRe(patterns) {
        const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
        return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
      }
      _filter(basePath, entry, matcher, negativeRe) {
        if (this._isSkippedByDeep(basePath, entry.path)) {
          return false;
        }
        if (this._isSkippedSymbolicLink(entry)) {
          return false;
        }
        const filepath = utils.path.removeLeadingDotSegment(entry.path);
        if (this._isSkippedByPositivePatterns(filepath, matcher)) {
          return false;
        }
        return this._isSkippedByNegativePatterns(filepath, negativeRe);
      }
      _isSkippedByDeep(basePath, entryPath) {
        if (this._settings.deep === Infinity) {
          return false;
        }
        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
      }
      _getEntryLevel(basePath, entryPath) {
        const entryPathDepth = entryPath.split("/").length;
        if (basePath === "") {
          return entryPathDepth;
        }
        const basePathDepth = basePath.split("/").length;
        return entryPathDepth - basePathDepth;
      }
      _isSkippedSymbolicLink(entry) {
        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
      }
      _isSkippedByPositivePatterns(entryPath, matcher) {
        return !this._settings.baseNameMatch && !matcher.match(entryPath);
      }
      _isSkippedByNegativePatterns(entryPath, patternsRe) {
        return !utils.pattern.matchAny(entryPath, patternsRe);
      }
    };
    exports2.default = DeepFilter;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/entry.js
var require_entry = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/entry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils = require_utils3();
    var EntryFilter = class {
      constructor(_settings, _micromatchOptions) {
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this.index = /* @__PURE__ */ new Map();
      }
      getFilter(positive, negative) {
        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);
        const negativeRe = utils.pattern.convertPatternsToRe(negative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true }));
        return (entry) => this._filter(entry, positiveRe, negativeRe);
      }
      _filter(entry, positiveRe, negativeRe) {
        const filepath = utils.path.removeLeadingDotSegment(entry.path);
        if (this._settings.unique && this._isDuplicateEntry(filepath)) {
          return false;
        }
        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
          return false;
        }
        if (this._isSkippedByAbsoluteNegativePatterns(filepath, negativeRe)) {
          return false;
        }
        const isDirectory = entry.dirent.isDirectory();
        const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory) && !this._isMatchToPatterns(filepath, negativeRe, isDirectory);
        if (this._settings.unique && isMatched) {
          this._createIndexRecord(filepath);
        }
        return isMatched;
      }
      _isDuplicateEntry(filepath) {
        return this.index.has(filepath);
      }
      _createIndexRecord(filepath) {
        this.index.set(filepath, void 0);
      }
      _onlyFileFilter(entry) {
        return this._settings.onlyFiles && !entry.dirent.isFile();
      }
      _onlyDirectoryFilter(entry) {
        return this._settings.onlyDirectories && !entry.dirent.isDirectory();
      }
      _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
        if (!this._settings.absolute) {
          return false;
        }
        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);
        return utils.pattern.matchAny(fullpath, patternsRe);
      }
      _isMatchToPatterns(filepath, patternsRe, isDirectory) {
        const isMatched = utils.pattern.matchAny(filepath, patternsRe);
        if (!isMatched && isDirectory) {
          return utils.pattern.matchAny(filepath + "/", patternsRe);
        }
        return isMatched;
      }
    };
    exports2.default = EntryFilter;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/error.js
var require_error = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils = require_utils3();
    var ErrorFilter = class {
      constructor(_settings) {
        this._settings = _settings;
      }
      getFilter() {
        return (error) => this._isNonFatalError(error);
      }
      _isNonFatalError(error) {
        return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
      }
    };
    exports2.default = ErrorFilter;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/transformers/entry.js
var require_entry2 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/transformers/entry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var utils = require_utils3();
    var EntryTransformer = class {
      constructor(_settings) {
        this._settings = _settings;
      }
      getTransformer() {
        return (entry) => this._transform(entry);
      }
      _transform(entry) {
        let filepath = entry.path;
        if (this._settings.absolute) {
          filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
          filepath = utils.path.unixify(filepath);
        }
        if (this._settings.markDirectories && entry.dirent.isDirectory()) {
          filepath += "/";
        }
        if (!this._settings.objectMode) {
          return filepath;
        }
        return Object.assign(Object.assign({}, entry), { path: filepath });
      }
    };
    exports2.default = EntryTransformer;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/provider.js
var require_provider = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var path3 = require("path");
    var deep_1 = require_deep();
    var entry_1 = require_entry();
    var error_1 = require_error();
    var entry_2 = require_entry2();
    var Provider = class {
      constructor(_settings) {
        this._settings = _settings;
        this.errorFilter = new error_1.default(this._settings);
        this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
        this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
        this.entryTransformer = new entry_2.default(this._settings);
      }
      _getRootDirectory(task) {
        return path3.resolve(this._settings.cwd, task.base);
      }
      _getReaderOptions(task) {
        const basePath = task.base === "." ? "" : task.base;
        return {
          basePath,
          pathSegmentSeparator: "/",
          concurrency: this._settings.concurrency,
          deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
          entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
          errorFilter: this.errorFilter.getFilter(),
          followSymbolicLinks: this._settings.followSymbolicLinks,
          fs: this._settings.fs,
          stats: this._settings.stats,
          throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
          transform: this.entryTransformer.getTransformer()
        };
      }
      _getMicromatchOptions() {
        return {
          dot: this._settings.dot,
          matchBase: this._settings.baseNameMatch,
          nobrace: !this._settings.braceExpansion,
          nocase: !this._settings.caseSensitiveMatch,
          noext: !this._settings.extglob,
          noglobstar: !this._settings.globstar,
          posix: true,
          strictSlashes: false
        };
      }
    };
    exports2.default = Provider;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/async.js
var require_async6 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/async.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var async_1 = require_async5();
    var provider_1 = require_provider();
    var ProviderAsync = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new async_1.default(this._settings);
      }
      async read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const entries = await this.api(root, task, options);
        return entries.map((entry) => options.transform(entry));
      }
      api(root, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports2.default = ProviderAsync;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/stream.js
var require_stream4 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var stream_1 = require("stream");
    var stream_2 = require_stream3();
    var provider_1 = require_provider();
    var ProviderStream = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new stream_2.default(this._settings);
      }
      read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const source = this.api(root, task, options);
        const destination = new stream_1.Readable({ objectMode: true, read: () => {
        } });
        source.once("error", (error) => destination.emit("error", error)).on("data", (entry) => destination.emit("data", options.transform(entry))).once("end", () => destination.emit("end"));
        destination.once("close", () => source.destroy());
        return destination;
      }
      api(root, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports2.default = ProviderStream;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/sync.js
var require_sync5 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var fsStat = require_out();
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var ReaderSync = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkSync = fsWalk.walkSync;
        this._statSync = fsStat.statSync;
      }
      dynamic(root, options) {
        return this._walkSync(root, options);
      }
      static(patterns, options) {
        const entries = [];
        for (const pattern of patterns) {
          const filepath = this._getFullEntryPath(pattern);
          const entry = this._getEntry(filepath, pattern, options);
          if (entry === null || !options.entryFilter(entry)) {
            continue;
          }
          entries.push(entry);
        }
        return entries;
      }
      _getEntry(filepath, pattern, options) {
        try {
          const stats = this._getStat(filepath);
          return this._makeEntry(stats, pattern);
        } catch (error) {
          if (options.errorFilter(error)) {
            return null;
          }
          throw error;
        }
      }
      _getStat(filepath) {
        return this._statSync(filepath, this._fsStatSettings);
      }
    };
    exports2.default = ReaderSync;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/sync.js
var require_sync6 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/sync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var sync_1 = require_sync5();
    var provider_1 = require_provider();
    var ProviderSync = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new sync_1.default(this._settings);
      }
      read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const entries = this.api(root, task, options);
        return entries.map(options.transform);
      }
      api(root, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports2.default = ProviderSync;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/settings.js
var require_settings4 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
    var fs = require("fs");
    var os2 = require("os");
    var CPU_COUNT = Math.max(os2.cpus().length, 1);
    exports2.DEFAULT_FILE_SYSTEM_ADAPTER = {
      lstat: fs.lstat,
      lstatSync: fs.lstatSync,
      stat: fs.stat,
      statSync: fs.statSync,
      readdir: fs.readdir,
      readdirSync: fs.readdirSync
    };
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.absolute = this._getValue(this._options.absolute, false);
        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
        this.braceExpansion = this._getValue(this._options.braceExpansion, true);
        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
        this.cwd = this._getValue(this._options.cwd, process.cwd());
        this.deep = this._getValue(this._options.deep, Infinity);
        this.dot = this._getValue(this._options.dot, false);
        this.extglob = this._getValue(this._options.extglob, true);
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
        this.fs = this._getFileSystemMethods(this._options.fs);
        this.globstar = this._getValue(this._options.globstar, true);
        this.ignore = this._getValue(this._options.ignore, []);
        this.markDirectories = this._getValue(this._options.markDirectories, false);
        this.objectMode = this._getValue(this._options.objectMode, false);
        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
        this.onlyFiles = this._getValue(this._options.onlyFiles, true);
        this.stats = this._getValue(this._options.stats, false);
        this.suppressErrors = this._getValue(this._options.suppressErrors, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
        this.unique = this._getValue(this._options.unique, true);
        if (this.onlyDirectories) {
          this.onlyFiles = false;
        }
        if (this.stats) {
          this.objectMode = true;
        }
        this.ignore = [].concat(this.ignore);
      }
      _getValue(option, value2) {
        return option === void 0 ? value2 : option;
      }
      _getFileSystemMethods(methods = {}) {
        return Object.assign(Object.assign({}, exports2.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
      }
    };
    exports2.default = Settings;
  }
});

// ../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/index.js
var require_out4 = __commonJS({
  "../../../node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/index.js"(exports2, module2) {
    "use strict";
    var taskManager = require_tasks();
    var async_1 = require_async6();
    var stream_1 = require_stream4();
    var sync_1 = require_sync6();
    var settings_1 = require_settings4();
    var utils = require_utils3();
    async function FastGlob(source, options) {
      assertPatternsInput(source);
      const works = getWorks(source, async_1.default, options);
      const result = await Promise.all(works);
      return utils.array.flatten(result);
    }
    (function(FastGlob2) {
      FastGlob2.glob = FastGlob2;
      FastGlob2.globSync = sync;
      FastGlob2.globStream = stream;
      FastGlob2.async = FastGlob2;
      function sync(source, options) {
        assertPatternsInput(source);
        const works = getWorks(source, sync_1.default, options);
        return utils.array.flatten(works);
      }
      FastGlob2.sync = sync;
      function stream(source, options) {
        assertPatternsInput(source);
        const works = getWorks(source, stream_1.default, options);
        return utils.stream.merge(works);
      }
      FastGlob2.stream = stream;
      function generateTasks(source, options) {
        assertPatternsInput(source);
        const patterns = [].concat(source);
        const settings = new settings_1.default(options);
        return taskManager.generate(patterns, settings);
      }
      FastGlob2.generateTasks = generateTasks;
      function isDynamicPattern(source, options) {
        assertPatternsInput(source);
        const settings = new settings_1.default(options);
        return utils.pattern.isDynamicPattern(source, settings);
      }
      FastGlob2.isDynamicPattern = isDynamicPattern;
      function escapePath(source) {
        assertPatternsInput(source);
        return utils.path.escape(source);
      }
      FastGlob2.escapePath = escapePath;
      function convertPathToPattern(source) {
        assertPatternsInput(source);
        return utils.path.convertPathToPattern(source);
      }
      FastGlob2.convertPathToPattern = convertPathToPattern;
      let posix;
      (function(posix2) {
        function escapePath2(source) {
          assertPatternsInput(source);
          return utils.path.escapePosixPath(source);
        }
        posix2.escapePath = escapePath2;
        function convertPathToPattern2(source) {
          assertPatternsInput(source);
          return utils.path.convertPosixPathToPattern(source);
        }
        posix2.convertPathToPattern = convertPathToPattern2;
      })(posix = FastGlob2.posix || (FastGlob2.posix = {}));
      let win32;
      (function(win322) {
        function escapePath2(source) {
          assertPatternsInput(source);
          return utils.path.escapeWindowsPath(source);
        }
        win322.escapePath = escapePath2;
        function convertPathToPattern2(source) {
          assertPatternsInput(source);
          return utils.path.convertWindowsPathToPattern(source);
        }
        win322.convertPathToPattern = convertPathToPattern2;
      })(win32 = FastGlob2.win32 || (FastGlob2.win32 = {}));
    })(FastGlob || (FastGlob = {}));
    function getWorks(source, _Provider, options) {
      const patterns = [].concat(source);
      const settings = new settings_1.default(options);
      const tasks = taskManager.generate(patterns, settings);
      const provider = new _Provider(settings);
      return tasks.map(provider.read, provider);
    }
    function assertPatternsInput(input) {
      const source = [].concat(input);
      const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
      if (!isValidSource) {
        throw new TypeError("Patterns must be a string (non empty) or an array of strings");
      }
    }
    module2.exports = FastGlob;
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  defaultConfig: () => defaultConfig,
  getEnvConfig: () => getEnvConfig,
  loadConfig: () => loadConfig,
  readFile: () => readFile,
  readSnapshotFiles: () => readSnapshotFiles
});
module.exports = __toCommonJS(src_exports);

// ../cli-devices/dist/index.js
var import_playwright_core = require("playwright-core");
var icons = {
  chromium: "chrome",
  firefox: "firefox",
  webkit: "safari"
};
var getDeviceIcon = (device) => {
  if (["Desktop Edge", "Desktop Edge HiDPI"].includes(device.name)) {
    return "edge";
  }
  const icon = icons[device.defaultBrowserType];
  return icon;
};
var devices = Object.keys(
  import_playwright_core.devices
).reduce(
  (acc, name) => {
    acc[name] = {
      ...import_playwright_core.devices[name],
      name
    };
    const icon = getDeviceIcon(acc[name]);
    acc[name].icon = icon;
    return acc;
  },
  {}
);

// src/defaults.ts
var defaultConfig = {
  boothPort: "3003",
  devices: [
    devices["Desktop Chrome"],
    devices["Desktop Firefox"],
    devices["Desktop Safari"],
    devices["Desktop Edge"]
  ],
  endpoint: "https://api.pixeleye.io",
  storybookOptions: {
    variants: []
  },
  boothConcurrency: 4,
  maskColor: "#FF00FF",
  css: void 0,
  waitForStatus: false
};

// ../../../node_modules/.pnpm/path-key@4.0.0/node_modules/path-key/index.js
function pathKey(options = {}) {
  const {
    env = process.env,
    platform = process.platform
  } = options;
  if (platform !== "win32") {
    return "PATH";
  }
  return Object.keys(env).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
}

// ../../../node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/signals.js
var signals = [];
signals.push("SIGHUP", "SIGINT", "SIGTERM");
if (process.platform !== "win32") {
  signals.push(
    "SIGALRM",
    "SIGABRT",
    "SIGVTALRM",
    "SIGXCPU",
    "SIGXFSZ",
    "SIGUSR2",
    "SIGTRAP",
    "SIGSYS",
    "SIGQUIT",
    "SIGIOT"
    // should detect profiler and enable/disable accordingly.
    // see #21
    // 'SIGPROF'
  );
}
if (process.platform === "linux") {
  signals.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT");
}

// ../../../node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/index.js
var processOk = (process7) => !!process7 && typeof process7 === "object" && typeof process7.removeListener === "function" && typeof process7.emit === "function" && typeof process7.reallyExit === "function" && typeof process7.listeners === "function" && typeof process7.kill === "function" && typeof process7.pid === "number" && typeof process7.on === "function";
var kExitEmitter = Symbol.for("signal-exit emitter");
var global2 = globalThis;
var ObjectDefineProperty = Object.defineProperty.bind(Object);
var Emitter = class {
  emitted = {
    afterExit: false,
    exit: false
  };
  listeners = {
    afterExit: [],
    exit: []
  };
  count = 0;
  id = Math.random();
  constructor() {
    if (global2[kExitEmitter]) {
      return global2[kExitEmitter];
    }
    ObjectDefineProperty(global2, kExitEmitter, {
      value: this,
      writable: false,
      enumerable: false,
      configurable: false
    });
  }
  on(ev, fn) {
    this.listeners[ev].push(fn);
  }
  removeListener(ev, fn) {
    const list = this.listeners[ev];
    const i = list.indexOf(fn);
    if (i === -1) {
      return;
    }
    if (i === 0 && list.length === 1) {
      list.length = 0;
    } else {
      list.splice(i, 1);
    }
  }
  emit(ev, code, signal) {
    if (this.emitted[ev]) {
      return false;
    }
    this.emitted[ev] = true;
    let ret = false;
    for (const fn of this.listeners[ev]) {
      ret = fn(code, signal) === true || ret;
    }
    if (ev === "exit") {
      ret = this.emit("afterExit", code, signal) || ret;
    }
    return ret;
  }
};
var SignalExitBase = class {
};
var signalExitWrap = (handler) => {
  return {
    onExit(cb, opts) {
      return handler.onExit(cb, opts);
    },
    load() {
      return handler.load();
    },
    unload() {
      return handler.unload();
    }
  };
};
var SignalExitFallback = class extends SignalExitBase {
  onExit() {
    return () => {
    };
  }
  load() {
  }
  unload() {
  }
};
var SignalExit = class extends SignalExitBase {
  // "SIGHUP" throws an `ENOSYS` error on Windows,
  // so use a supported signal instead
  /* c8 ignore start */
  #hupSig = process2.platform === "win32" ? "SIGINT" : "SIGHUP";
  /* c8 ignore stop */
  #emitter = new Emitter();
  #process;
  #originalProcessEmit;
  #originalProcessReallyExit;
  #sigListeners = {};
  #loaded = false;
  constructor(process7) {
    super();
    this.#process = process7;
    this.#sigListeners = {};
    for (const sig of signals) {
      this.#sigListeners[sig] = () => {
        const listeners = this.#process.listeners(sig);
        let { count } = this.#emitter;
        const p = process7;
        if (typeof p.__signal_exit_emitter__ === "object" && typeof p.__signal_exit_emitter__.count === "number") {
          count += p.__signal_exit_emitter__.count;
        }
        if (listeners.length === count) {
          this.unload();
          const ret = this.#emitter.emit("exit", null, sig);
          const s = sig === "SIGHUP" ? this.#hupSig : sig;
          if (!ret)
            process7.kill(process7.pid, s);
        }
      };
    }
    this.#originalProcessReallyExit = process7.reallyExit;
    this.#originalProcessEmit = process7.emit;
  }
  onExit(cb, opts) {
    if (!processOk(this.#process)) {
      return () => {
      };
    }
    if (this.#loaded === false) {
      this.load();
    }
    const ev = opts?.alwaysLast ? "afterExit" : "exit";
    this.#emitter.on(ev, cb);
    return () => {
      this.#emitter.removeListener(ev, cb);
      if (this.#emitter.listeners["exit"].length === 0 && this.#emitter.listeners["afterExit"].length === 0) {
        this.unload();
      }
    };
  }
  load() {
    if (this.#loaded) {
      return;
    }
    this.#loaded = true;
    this.#emitter.count += 1;
    for (const sig of signals) {
      try {
        const fn = this.#sigListeners[sig];
        if (fn)
          this.#process.on(sig, fn);
      } catch (_) {
      }
    }
    this.#process.emit = (ev, ...a) => {
      return this.#processEmit(ev, ...a);
    };
    this.#process.reallyExit = (code) => {
      return this.#processReallyExit(code);
    };
  }
  unload() {
    if (!this.#loaded) {
      return;
    }
    this.#loaded = false;
    signals.forEach((sig) => {
      const listener = this.#sigListeners[sig];
      if (!listener) {
        throw new Error("Listener not defined for signal: " + sig);
      }
      try {
        this.#process.removeListener(sig, listener);
      } catch (_) {
      }
    });
    this.#process.emit = this.#originalProcessEmit;
    this.#process.reallyExit = this.#originalProcessReallyExit;
    this.#emitter.count -= 1;
  }
  #processReallyExit(code) {
    if (!processOk(this.#process)) {
      return 0;
    }
    this.#process.exitCode = code || 0;
    this.#emitter.emit("exit", this.#process.exitCode, null);
    return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);
  }
  #processEmit(ev, ...args) {
    const og = this.#originalProcessEmit;
    if (ev === "exit" && processOk(this.#process)) {
      if (typeof args[0] === "number") {
        this.#process.exitCode = args[0];
      }
      const ret = og.call(this.#process, ev, ...args);
      this.#emitter.emit("exit", this.#process.exitCode, null);
      return ret;
    } else {
      return og.call(this.#process, ev, ...args);
    }
  }
};
var process2 = globalThis.process;
var {
  /**
   * Called when the process is exiting, whether via signal, explicit
   * exit, or running out of stuff to do.
   *
   * If the global process object is not suitable for instrumentation,
   * then this will be a no-op.
   *
   * Returns a function that may be used to unload signal-exit.
   */
  onExit,
  /**
   * Load the listeners.  Likely you never need to call this, unless
   * doing a rather deep integration with signal-exit functionality.
   * Mostly exposed for the benefit of testing.
   *
   * @internal
   */
  load,
  /**
   * Unload the listeners.  Likely you never need to call this, unless
   * doing a rather deep integration with signal-exit functionality.
   * Mostly exposed for the benefit of testing.
   *
   * @internal
   */
  unload
} = signalExitWrap(processOk(process2) ? new SignalExit(process2) : new SignalExitFallback());

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/index.js
var import_node_buffer2 = require("node:buffer");
var import_node_path2 = __toESM(require("node:path"), 1);
var import_node_child_process3 = __toESM(require("node:child_process"), 1);
var import_node_process4 = __toESM(require("node:process"), 1);
var import_cross_spawn = __toESM(require_cross_spawn(), 1);

// ../../../node_modules/.pnpm/strip-final-newline@3.0.0/node_modules/strip-final-newline/index.js
function stripFinalNewline(input) {
  const LF = typeof input === "string" ? "\n" : "\n".charCodeAt();
  const CR = typeof input === "string" ? "\r" : "\r".charCodeAt();
  if (input[input.length - 1] === LF) {
    input = input.slice(0, -1);
  }
  if (input[input.length - 1] === CR) {
    input = input.slice(0, -1);
  }
  return input;
}

// ../../../node_modules/.pnpm/npm-run-path@5.1.0/node_modules/npm-run-path/index.js
var import_node_process = __toESM(require("node:process"), 1);
var import_node_path = __toESM(require("node:path"), 1);
var import_node_url = __toESM(require("node:url"), 1);
function npmRunPath(options = {}) {
  const {
    cwd = import_node_process.default.cwd(),
    path: path_ = import_node_process.default.env[pathKey()],
    execPath = import_node_process.default.execPath
  } = options;
  let previous;
  const cwdString = cwd instanceof URL ? import_node_url.default.fileURLToPath(cwd) : cwd;
  let cwdPath = import_node_path.default.resolve(cwdString);
  const result = [];
  while (previous !== cwdPath) {
    result.push(import_node_path.default.join(cwdPath, "node_modules/.bin"));
    previous = cwdPath;
    cwdPath = import_node_path.default.resolve(cwdPath, "..");
  }
  result.push(import_node_path.default.resolve(cwdString, execPath, ".."));
  return [...result, path_].join(import_node_path.default.delimiter);
}
function npmRunPathEnv({ env = import_node_process.default.env, ...options } = {}) {
  env = { ...env };
  const path3 = pathKey({ env });
  options.path = env[path3];
  env[path3] = npmRunPath(options);
  return env;
}

// ../../../node_modules/.pnpm/mimic-fn@4.0.0/node_modules/mimic-fn/index.js
var copyProperty = (to, from, property, ignoreNonConfigurable) => {
  if (property === "length" || property === "prototype") {
    return;
  }
  if (property === "arguments" || property === "caller") {
    return;
  }
  const toDescriptor = Object.getOwnPropertyDescriptor(to, property);
  const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);
  if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) {
    return;
  }
  Object.defineProperty(to, property, fromDescriptor);
};
var canCopyProperty = function(toDescriptor, fromDescriptor) {
  return toDescriptor === void 0 || toDescriptor.configurable || toDescriptor.writable === fromDescriptor.writable && toDescriptor.enumerable === fromDescriptor.enumerable && toDescriptor.configurable === fromDescriptor.configurable && (toDescriptor.writable || toDescriptor.value === fromDescriptor.value);
};
var changePrototype = (to, from) => {
  const fromPrototype = Object.getPrototypeOf(from);
  if (fromPrototype === Object.getPrototypeOf(to)) {
    return;
  }
  Object.setPrototypeOf(to, fromPrototype);
};
var wrappedToString = (withName, fromBody) => `/* Wrapped ${withName}*/
${fromBody}`;
var toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, "toString");
var toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, "name");
var changeToString = (to, from, name) => {
  const withName = name === "" ? "" : `with ${name.trim()}() `;
  const newToString = wrappedToString.bind(null, withName, from.toString());
  Object.defineProperty(newToString, "name", toStringName);
  Object.defineProperty(to, "toString", { ...toStringDescriptor, value: newToString });
};
function mimicFunction(to, from, { ignoreNonConfigurable = false } = {}) {
  const { name } = to;
  for (const property of Reflect.ownKeys(from)) {
    copyProperty(to, from, property, ignoreNonConfigurable);
  }
  changePrototype(to, from);
  changeToString(to, from, name);
  return to;
}

// ../../../node_modules/.pnpm/onetime@6.0.0/node_modules/onetime/index.js
var calledFunctions = /* @__PURE__ */ new WeakMap();
var onetime = (function_, options = {}) => {
  if (typeof function_ !== "function") {
    throw new TypeError("Expected a function");
  }
  let returnValue;
  let callCount = 0;
  const functionName = function_.displayName || function_.name || "<anonymous>";
  const onetime2 = function(...arguments_) {
    calledFunctions.set(onetime2, ++callCount);
    if (callCount === 1) {
      returnValue = function_.apply(this, arguments_);
      function_ = null;
    } else if (options.throw === true) {
      throw new Error(`Function \`${functionName}\` can only be called once`);
    }
    return returnValue;
  };
  mimicFunction(onetime2, function_);
  calledFunctions.set(onetime2, callCount);
  return onetime2;
};
onetime.callCount = (function_) => {
  if (!calledFunctions.has(function_)) {
    throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
  }
  return calledFunctions.get(function_);
};
var onetime_default = onetime;

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/error.js
var import_node_process2 = __toESM(require("node:process"), 1);

// ../../../node_modules/.pnpm/human-signals@5.0.0/node_modules/human-signals/build/src/main.js
var import_node_os2 = require("node:os");

// ../../../node_modules/.pnpm/human-signals@5.0.0/node_modules/human-signals/build/src/realtime.js
var getRealtimeSignals = () => {
  const length = SIGRTMAX - SIGRTMIN + 1;
  return Array.from({ length }, getRealtimeSignal);
};
var getRealtimeSignal = (value2, index) => ({
  name: `SIGRT${index + 1}`,
  number: SIGRTMIN + index,
  action: "terminate",
  description: "Application-specific signal (realtime)",
  standard: "posix"
});
var SIGRTMIN = 34;
var SIGRTMAX = 64;

// ../../../node_modules/.pnpm/human-signals@5.0.0/node_modules/human-signals/build/src/signals.js
var import_node_os = require("node:os");

// ../../../node_modules/.pnpm/human-signals@5.0.0/node_modules/human-signals/build/src/core.js
var SIGNALS = [
  {
    name: "SIGHUP",
    number: 1,
    action: "terminate",
    description: "Terminal closed",
    standard: "posix"
  },
  {
    name: "SIGINT",
    number: 2,
    action: "terminate",
    description: "User interruption with CTRL-C",
    standard: "ansi"
  },
  {
    name: "SIGQUIT",
    number: 3,
    action: "core",
    description: "User interruption with CTRL-\\",
    standard: "posix"
  },
  {
    name: "SIGILL",
    number: 4,
    action: "core",
    description: "Invalid machine instruction",
    standard: "ansi"
  },
  {
    name: "SIGTRAP",
    number: 5,
    action: "core",
    description: "Debugger breakpoint",
    standard: "posix"
  },
  {
    name: "SIGABRT",
    number: 6,
    action: "core",
    description: "Aborted",
    standard: "ansi"
  },
  {
    name: "SIGIOT",
    number: 6,
    action: "core",
    description: "Aborted",
    standard: "bsd"
  },
  {
    name: "SIGBUS",
    number: 7,
    action: "core",
    description: "Bus error due to misaligned, non-existing address or paging error",
    standard: "bsd"
  },
  {
    name: "SIGEMT",
    number: 7,
    action: "terminate",
    description: "Command should be emulated but is not implemented",
    standard: "other"
  },
  {
    name: "SIGFPE",
    number: 8,
    action: "core",
    description: "Floating point arithmetic error",
    standard: "ansi"
  },
  {
    name: "SIGKILL",
    number: 9,
    action: "terminate",
    description: "Forced termination",
    standard: "posix",
    forced: true
  },
  {
    name: "SIGUSR1",
    number: 10,
    action: "terminate",
    description: "Application-specific signal",
    standard: "posix"
  },
  {
    name: "SIGSEGV",
    number: 11,
    action: "core",
    description: "Segmentation fault",
    standard: "ansi"
  },
  {
    name: "SIGUSR2",
    number: 12,
    action: "terminate",
    description: "Application-specific signal",
    standard: "posix"
  },
  {
    name: "SIGPIPE",
    number: 13,
    action: "terminate",
    description: "Broken pipe or socket",
    standard: "posix"
  },
  {
    name: "SIGALRM",
    number: 14,
    action: "terminate",
    description: "Timeout or timer",
    standard: "posix"
  },
  {
    name: "SIGTERM",
    number: 15,
    action: "terminate",
    description: "Termination",
    standard: "ansi"
  },
  {
    name: "SIGSTKFLT",
    number: 16,
    action: "terminate",
    description: "Stack is empty or overflowed",
    standard: "other"
  },
  {
    name: "SIGCHLD",
    number: 17,
    action: "ignore",
    description: "Child process terminated, paused or unpaused",
    standard: "posix"
  },
  {
    name: "SIGCLD",
    number: 17,
    action: "ignore",
    description: "Child process terminated, paused or unpaused",
    standard: "other"
  },
  {
    name: "SIGCONT",
    number: 18,
    action: "unpause",
    description: "Unpaused",
    standard: "posix",
    forced: true
  },
  {
    name: "SIGSTOP",
    number: 19,
    action: "pause",
    description: "Paused",
    standard: "posix",
    forced: true
  },
  {
    name: "SIGTSTP",
    number: 20,
    action: "pause",
    description: 'Paused using CTRL-Z or "suspend"',
    standard: "posix"
  },
  {
    name: "SIGTTIN",
    number: 21,
    action: "pause",
    description: "Background process cannot read terminal input",
    standard: "posix"
  },
  {
    name: "SIGBREAK",
    number: 21,
    action: "terminate",
    description: "User interruption with CTRL-BREAK",
    standard: "other"
  },
  {
    name: "SIGTTOU",
    number: 22,
    action: "pause",
    description: "Background process cannot write to terminal output",
    standard: "posix"
  },
  {
    name: "SIGURG",
    number: 23,
    action: "ignore",
    description: "Socket received out-of-band data",
    standard: "bsd"
  },
  {
    name: "SIGXCPU",
    number: 24,
    action: "core",
    description: "Process timed out",
    standard: "bsd"
  },
  {
    name: "SIGXFSZ",
    number: 25,
    action: "core",
    description: "File too big",
    standard: "bsd"
  },
  {
    name: "SIGVTALRM",
    number: 26,
    action: "terminate",
    description: "Timeout or timer",
    standard: "bsd"
  },
  {
    name: "SIGPROF",
    number: 27,
    action: "terminate",
    description: "Timeout or timer",
    standard: "bsd"
  },
  {
    name: "SIGWINCH",
    number: 28,
    action: "ignore",
    description: "Terminal window size changed",
    standard: "bsd"
  },
  {
    name: "SIGIO",
    number: 29,
    action: "terminate",
    description: "I/O is available",
    standard: "other"
  },
  {
    name: "SIGPOLL",
    number: 29,
    action: "terminate",
    description: "Watched event",
    standard: "other"
  },
  {
    name: "SIGINFO",
    number: 29,
    action: "ignore",
    description: "Request for process information",
    standard: "other"
  },
  {
    name: "SIGPWR",
    number: 30,
    action: "terminate",
    description: "Device running out of power",
    standard: "systemv"
  },
  {
    name: "SIGSYS",
    number: 31,
    action: "core",
    description: "Invalid system call",
    standard: "other"
  },
  {
    name: "SIGUNUSED",
    number: 31,
    action: "terminate",
    description: "Invalid system call",
    standard: "other"
  }
];

// ../../../node_modules/.pnpm/human-signals@5.0.0/node_modules/human-signals/build/src/signals.js
var getSignals = () => {
  const realtimeSignals = getRealtimeSignals();
  const signals2 = [...SIGNALS, ...realtimeSignals].map(normalizeSignal);
  return signals2;
};
var normalizeSignal = ({
  name,
  number: defaultNumber,
  description,
  action,
  forced = false,
  standard
}) => {
  const {
    signals: { [name]: constantSignal }
  } = import_node_os.constants;
  const supported = constantSignal !== void 0;
  const number = supported ? constantSignal : defaultNumber;
  return { name, number, description, supported, action, forced, standard };
};

// ../../../node_modules/.pnpm/human-signals@5.0.0/node_modules/human-signals/build/src/main.js
var getSignalsByName = () => {
  const signals2 = getSignals();
  return Object.fromEntries(signals2.map(getSignalByName));
};
var getSignalByName = ({
  name,
  number,
  description,
  supported,
  action,
  forced,
  standard
}) => [name, { name, number, description, supported, action, forced, standard }];
var signalsByName = getSignalsByName();
var getSignalsByNumber = () => {
  const signals2 = getSignals();
  const length = SIGRTMAX + 1;
  const signalsA = Array.from(
    { length },
    (value2, number) => getSignalByNumber(number, signals2)
  );
  return Object.assign({}, ...signalsA);
};
var getSignalByNumber = (number, signals2) => {
  const signal = findSignalByNumber(number, signals2);
  if (signal === void 0) {
    return {};
  }
  const { name, description, supported, action, forced, standard } = signal;
  return {
    [number]: {
      name,
      number,
      description,
      supported,
      action,
      forced,
      standard
    }
  };
};
var findSignalByNumber = (number, signals2) => {
  const signal = signals2.find(({ name }) => import_node_os2.constants.signals[name] === number);
  if (signal !== void 0) {
    return signal;
  }
  return signals2.find((signalA) => signalA.number === number);
};
var signalsByNumber = getSignalsByNumber();

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/error.js
var getErrorPrefix = ({ timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled }) => {
  if (timedOut) {
    return `timed out after ${timeout} milliseconds`;
  }
  if (isCanceled) {
    return "was canceled";
  }
  if (errorCode !== void 0) {
    return `failed with ${errorCode}`;
  }
  if (signal !== void 0) {
    return `was killed with ${signal} (${signalDescription})`;
  }
  if (exitCode !== void 0) {
    return `failed with exit code ${exitCode}`;
  }
  return "failed";
};
var makeError = ({
  stdout,
  stderr,
  all,
  error,
  signal,
  exitCode,
  command,
  escapedCommand,
  timedOut,
  isCanceled,
  killed,
  parsed: { options: { timeout, cwd = import_node_process2.default.cwd() } }
}) => {
  exitCode = exitCode === null ? void 0 : exitCode;
  signal = signal === null ? void 0 : signal;
  const signalDescription = signal === void 0 ? void 0 : signalsByName[signal].description;
  const errorCode = error && error.code;
  const prefix = getErrorPrefix({ timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled });
  const execaMessage = `Command ${prefix}: ${command}`;
  const isError = Object.prototype.toString.call(error) === "[object Error]";
  const shortMessage = isError ? `${execaMessage}
${error.message}` : execaMessage;
  const message = [shortMessage, stderr, stdout].filter(Boolean).join("\n");
  if (isError) {
    error.originalMessage = error.message;
    error.message = message;
  } else {
    error = new Error(message);
  }
  error.shortMessage = shortMessage;
  error.command = command;
  error.escapedCommand = escapedCommand;
  error.exitCode = exitCode;
  error.signal = signal;
  error.signalDescription = signalDescription;
  error.stdout = stdout;
  error.stderr = stderr;
  error.cwd = cwd;
  if (all !== void 0) {
    error.all = all;
  }
  if ("bufferedData" in error) {
    delete error.bufferedData;
  }
  error.failed = true;
  error.timedOut = Boolean(timedOut);
  error.isCanceled = isCanceled;
  error.killed = killed && !timedOut;
  return error;
};

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/stdio.js
var aliases = ["stdin", "stdout", "stderr"];
var hasAlias = (options) => aliases.some((alias) => options[alias] !== void 0);
var normalizeStdio = (options) => {
  if (!options) {
    return;
  }
  const { stdio } = options;
  if (stdio === void 0) {
    return aliases.map((alias) => options[alias]);
  }
  if (hasAlias(options)) {
    throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${aliases.map((alias) => `\`${alias}\``).join(", ")}`);
  }
  if (typeof stdio === "string") {
    return stdio;
  }
  if (!Array.isArray(stdio)) {
    throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
  }
  const length = Math.max(stdio.length, aliases.length);
  return Array.from({ length }, (value2, index) => stdio[index]);
};

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/kill.js
var import_node_os3 = __toESM(require("node:os"), 1);
var DEFAULT_FORCE_KILL_TIMEOUT = 1e3 * 5;
var spawnedKill = (kill, signal = "SIGTERM", options = {}) => {
  const killResult = kill(signal);
  setKillTimeout(kill, signal, options, killResult);
  return killResult;
};
var setKillTimeout = (kill, signal, options, killResult) => {
  if (!shouldForceKill(signal, options, killResult)) {
    return;
  }
  const timeout = getForceKillAfterTimeout(options);
  const t = setTimeout(() => {
    kill("SIGKILL");
  }, timeout);
  if (t.unref) {
    t.unref();
  }
};
var shouldForceKill = (signal, { forceKillAfterTimeout }, killResult) => isSigterm(signal) && forceKillAfterTimeout !== false && killResult;
var isSigterm = (signal) => signal === import_node_os3.default.constants.signals.SIGTERM || typeof signal === "string" && signal.toUpperCase() === "SIGTERM";
var getForceKillAfterTimeout = ({ forceKillAfterTimeout = true }) => {
  if (forceKillAfterTimeout === true) {
    return DEFAULT_FORCE_KILL_TIMEOUT;
  }
  if (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
    throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${forceKillAfterTimeout}\` (${typeof forceKillAfterTimeout})`);
  }
  return forceKillAfterTimeout;
};
var spawnedCancel = (spawned, context) => {
  const killResult = spawned.kill();
  if (killResult) {
    context.isCanceled = true;
  }
};
var timeoutKill = (spawned, signal, reject) => {
  spawned.kill(signal);
  reject(Object.assign(new Error("Timed out"), { timedOut: true, signal }));
};
var setupTimeout = (spawned, { timeout, killSignal = "SIGTERM" }, spawnedPromise) => {
  if (timeout === 0 || timeout === void 0) {
    return spawnedPromise;
  }
  let timeoutId;
  const timeoutPromise = new Promise((resolve, reject) => {
    timeoutId = setTimeout(() => {
      timeoutKill(spawned, killSignal, reject);
    }, timeout);
  });
  const safeSpawnedPromise = spawnedPromise.finally(() => {
    clearTimeout(timeoutId);
  });
  return Promise.race([timeoutPromise, safeSpawnedPromise]);
};
var validateTimeout = ({ timeout }) => {
  if (timeout !== void 0 && (!Number.isFinite(timeout) || timeout < 0)) {
    throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
  }
};
var setExitHandler = async (spawned, { cleanup, detached }, timedPromise) => {
  if (!cleanup || detached) {
    return timedPromise;
  }
  const removeExitHandler = onExit(() => {
    spawned.kill();
  });
  return timedPromise.finally(() => {
    removeExitHandler();
  });
};

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/pipe.js
var import_node_fs = require("node:fs");
var import_node_child_process = require("node:child_process");

// ../../../node_modules/.pnpm/is-stream@3.0.0/node_modules/is-stream/index.js
function isStream(stream) {
  return stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
}
function isWritableStream(stream) {
  return isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
}

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/pipe.js
var isExecaChildProcess = (target) => target instanceof import_node_child_process.ChildProcess && typeof target.then === "function";
var pipeToTarget = (spawned, streamName, target) => {
  if (typeof target === "string") {
    spawned[streamName].pipe((0, import_node_fs.createWriteStream)(target));
    return spawned;
  }
  if (isWritableStream(target)) {
    spawned[streamName].pipe(target);
    return spawned;
  }
  if (!isExecaChildProcess(target)) {
    throw new TypeError("The second argument must be a string, a stream or an Execa child process.");
  }
  if (!isWritableStream(target.stdin)) {
    throw new TypeError("The target child process's stdin must be available.");
  }
  spawned[streamName].pipe(target.stdin);
  return target;
};
var addPipeMethods = (spawned) => {
  if (spawned.stdout !== null) {
    spawned.pipeStdout = pipeToTarget.bind(void 0, spawned, "stdout");
  }
  if (spawned.stderr !== null) {
    spawned.pipeStderr = pipeToTarget.bind(void 0, spawned, "stderr");
  }
  if (spawned.all !== void 0) {
    spawned.pipeAll = pipeToTarget.bind(void 0, spawned, "all");
  }
};

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/stream.js
var import_node_fs2 = require("node:fs");
var import_promises = require("node:timers/promises");

// ../../../node_modules/.pnpm/get-stream@8.0.1/node_modules/get-stream/source/contents.js
var getStreamContents = async (stream, { init, convertChunk, getSize, truncateChunk, addChunk, getFinalChunk, finalize }, { maxBuffer = Number.POSITIVE_INFINITY } = {}) => {
  if (!isAsyncIterable(stream)) {
    throw new Error("The first argument must be a Readable, a ReadableStream, or an async iterable.");
  }
  const state = init();
  state.length = 0;
  try {
    for await (const chunk of stream) {
      const chunkType = getChunkType(chunk);
      const convertedChunk = convertChunk[chunkType](chunk, state);
      appendChunk({ convertedChunk, state, getSize, truncateChunk, addChunk, maxBuffer });
    }
    appendFinalChunk({ state, convertChunk, getSize, truncateChunk, addChunk, getFinalChunk, maxBuffer });
    return finalize(state);
  } catch (error) {
    error.bufferedData = finalize(state);
    throw error;
  }
};
var appendFinalChunk = ({ state, getSize, truncateChunk, addChunk, getFinalChunk, maxBuffer }) => {
  const convertedChunk = getFinalChunk(state);
  if (convertedChunk !== void 0) {
    appendChunk({ convertedChunk, state, getSize, truncateChunk, addChunk, maxBuffer });
  }
};
var appendChunk = ({ convertedChunk, state, getSize, truncateChunk, addChunk, maxBuffer }) => {
  const chunkSize = getSize(convertedChunk);
  const newLength = state.length + chunkSize;
  if (newLength <= maxBuffer) {
    addNewChunk(convertedChunk, state, addChunk, newLength);
    return;
  }
  const truncatedChunk = truncateChunk(convertedChunk, maxBuffer - state.length);
  if (truncatedChunk !== void 0) {
    addNewChunk(truncatedChunk, state, addChunk, maxBuffer);
  }
  throw new MaxBufferError();
};
var addNewChunk = (convertedChunk, state, addChunk, newLength) => {
  state.contents = addChunk(convertedChunk, state, newLength);
  state.length = newLength;
};
var isAsyncIterable = (stream) => typeof stream === "object" && stream !== null && typeof stream[Symbol.asyncIterator] === "function";
var getChunkType = (chunk) => {
  const typeOfChunk = typeof chunk;
  if (typeOfChunk === "string") {
    return "string";
  }
  if (typeOfChunk !== "object" || chunk === null) {
    return "others";
  }
  if (globalThis.Buffer?.isBuffer(chunk)) {
    return "buffer";
  }
  const prototypeName = objectToString.call(chunk);
  if (prototypeName === "[object ArrayBuffer]") {
    return "arrayBuffer";
  }
  if (prototypeName === "[object DataView]") {
    return "dataView";
  }
  if (Number.isInteger(chunk.byteLength) && Number.isInteger(chunk.byteOffset) && objectToString.call(chunk.buffer) === "[object ArrayBuffer]") {
    return "typedArray";
  }
  return "others";
};
var { toString: objectToString } = Object.prototype;
var MaxBufferError = class extends Error {
  name = "MaxBufferError";
  constructor() {
    super("maxBuffer exceeded");
  }
};

// ../../../node_modules/.pnpm/get-stream@8.0.1/node_modules/get-stream/source/utils.js
var identity = (value2) => value2;
var noop = () => void 0;
var getContentsProp = ({ contents }) => contents;
var throwObjectStream = (chunk) => {
  throw new Error(`Streams in object mode are not supported: ${String(chunk)}`);
};
var getLengthProp = (convertedChunk) => convertedChunk.length;

// ../../../node_modules/.pnpm/get-stream@8.0.1/node_modules/get-stream/source/array-buffer.js
async function getStreamAsArrayBuffer(stream, options) {
  return getStreamContents(stream, arrayBufferMethods, options);
}
var initArrayBuffer = () => ({ contents: new ArrayBuffer(0) });
var useTextEncoder = (chunk) => textEncoder.encode(chunk);
var textEncoder = new TextEncoder();
var useUint8Array = (chunk) => new Uint8Array(chunk);
var useUint8ArrayWithOffset = (chunk) => new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);
var truncateArrayBufferChunk = (convertedChunk, chunkSize) => convertedChunk.slice(0, chunkSize);
var addArrayBufferChunk = (convertedChunk, { contents, length: previousLength }, length) => {
  const newContents = hasArrayBufferResize() ? resizeArrayBuffer(contents, length) : resizeArrayBufferSlow(contents, length);
  new Uint8Array(newContents).set(convertedChunk, previousLength);
  return newContents;
};
var resizeArrayBufferSlow = (contents, length) => {
  if (length <= contents.byteLength) {
    return contents;
  }
  const arrayBuffer = new ArrayBuffer(getNewContentsLength(length));
  new Uint8Array(arrayBuffer).set(new Uint8Array(contents), 0);
  return arrayBuffer;
};
var resizeArrayBuffer = (contents, length) => {
  if (length <= contents.maxByteLength) {
    contents.resize(length);
    return contents;
  }
  const arrayBuffer = new ArrayBuffer(length, { maxByteLength: getNewContentsLength(length) });
  new Uint8Array(arrayBuffer).set(new Uint8Array(contents), 0);
  return arrayBuffer;
};
var getNewContentsLength = (length) => SCALE_FACTOR ** Math.ceil(Math.log(length) / Math.log(SCALE_FACTOR));
var SCALE_FACTOR = 2;
var finalizeArrayBuffer = ({ contents, length }) => hasArrayBufferResize() ? contents : contents.slice(0, length);
var hasArrayBufferResize = () => "resize" in ArrayBuffer.prototype;
var arrayBufferMethods = {
  init: initArrayBuffer,
  convertChunk: {
    string: useTextEncoder,
    buffer: useUint8Array,
    arrayBuffer: useUint8Array,
    dataView: useUint8ArrayWithOffset,
    typedArray: useUint8ArrayWithOffset,
    others: throwObjectStream
  },
  getSize: getLengthProp,
  truncateChunk: truncateArrayBufferChunk,
  addChunk: addArrayBufferChunk,
  getFinalChunk: noop,
  finalize: finalizeArrayBuffer
};

// ../../../node_modules/.pnpm/get-stream@8.0.1/node_modules/get-stream/source/buffer.js
async function getStreamAsBuffer(stream, options) {
  if (!("Buffer" in globalThis)) {
    throw new Error("getStreamAsBuffer() is only supported in Node.js");
  }
  try {
    return arrayBufferToNodeBuffer(await getStreamAsArrayBuffer(stream, options));
  } catch (error) {
    if (error.bufferedData !== void 0) {
      error.bufferedData = arrayBufferToNodeBuffer(error.bufferedData);
    }
    throw error;
  }
}
var arrayBufferToNodeBuffer = (arrayBuffer) => globalThis.Buffer.from(arrayBuffer);

// ../../../node_modules/.pnpm/get-stream@8.0.1/node_modules/get-stream/source/string.js
async function getStreamAsString(stream, options) {
  return getStreamContents(stream, stringMethods, options);
}
var initString = () => ({ contents: "", textDecoder: new TextDecoder() });
var useTextDecoder = (chunk, { textDecoder }) => textDecoder.decode(chunk, { stream: true });
var addStringChunk = (convertedChunk, { contents }) => contents + convertedChunk;
var truncateStringChunk = (convertedChunk, chunkSize) => convertedChunk.slice(0, chunkSize);
var getFinalStringChunk = ({ textDecoder }) => {
  const finalChunk = textDecoder.decode();
  return finalChunk === "" ? void 0 : finalChunk;
};
var stringMethods = {
  init: initString,
  convertChunk: {
    string: identity,
    buffer: useTextDecoder,
    arrayBuffer: useTextDecoder,
    dataView: useTextDecoder,
    typedArray: useTextDecoder,
    others: throwObjectStream
  },
  getSize: getLengthProp,
  truncateChunk: truncateStringChunk,
  addChunk: addStringChunk,
  getFinalChunk: getFinalStringChunk,
  finalize: getContentsProp
};

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/stream.js
var import_merge_stream = __toESM(require_merge_stream(), 1);
var validateInputOptions = (input) => {
  if (input !== void 0) {
    throw new TypeError("The `input` and `inputFile` options cannot be both set.");
  }
};
var getInputSync = ({ input, inputFile }) => {
  if (typeof inputFile !== "string") {
    return input;
  }
  validateInputOptions(input);
  return (0, import_node_fs2.readFileSync)(inputFile);
};
var handleInputSync = (options) => {
  const input = getInputSync(options);
  if (isStream(input)) {
    throw new TypeError("The `input` option cannot be a stream in sync mode");
  }
  return input;
};
var getInput = ({ input, inputFile }) => {
  if (typeof inputFile !== "string") {
    return input;
  }
  validateInputOptions(input);
  return (0, import_node_fs2.createReadStream)(inputFile);
};
var handleInput = (spawned, options) => {
  const input = getInput(options);
  if (input === void 0) {
    return;
  }
  if (isStream(input)) {
    input.pipe(spawned.stdin);
  } else {
    spawned.stdin.end(input);
  }
};
var makeAllStream = (spawned, { all }) => {
  if (!all || !spawned.stdout && !spawned.stderr) {
    return;
  }
  const mixed = (0, import_merge_stream.default)();
  if (spawned.stdout) {
    mixed.add(spawned.stdout);
  }
  if (spawned.stderr) {
    mixed.add(spawned.stderr);
  }
  return mixed;
};
var getBufferedData = async (stream, streamPromise) => {
  if (!stream || streamPromise === void 0) {
    return;
  }
  await (0, import_promises.setTimeout)(0);
  stream.destroy();
  try {
    return await streamPromise;
  } catch (error) {
    return error.bufferedData;
  }
};
var getStreamPromise = (stream, { encoding, buffer, maxBuffer }) => {
  if (!stream || !buffer) {
    return;
  }
  if (encoding === "utf8" || encoding === "utf-8") {
    return getStreamAsString(stream, { maxBuffer });
  }
  if (encoding === null || encoding === "buffer") {
    return getStreamAsBuffer(stream, { maxBuffer });
  }
  return applyEncoding(stream, maxBuffer, encoding);
};
var applyEncoding = async (stream, maxBuffer, encoding) => {
  const buffer = await getStreamAsBuffer(stream, { maxBuffer });
  return buffer.toString(encoding);
};
var getSpawnedResult = async ({ stdout, stderr, all }, { encoding, buffer, maxBuffer }, processDone) => {
  const stdoutPromise = getStreamPromise(stdout, { encoding, buffer, maxBuffer });
  const stderrPromise = getStreamPromise(stderr, { encoding, buffer, maxBuffer });
  const allPromise = getStreamPromise(all, { encoding, buffer, maxBuffer: maxBuffer * 2 });
  try {
    return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);
  } catch (error) {
    return Promise.all([
      { error, signal: error.signal, timedOut: error.timedOut },
      getBufferedData(stdout, stdoutPromise),
      getBufferedData(stderr, stderrPromise),
      getBufferedData(all, allPromise)
    ]);
  }
};

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/promise.js
var nativePromisePrototype = (async () => {
})().constructor.prototype;
var descriptors = ["then", "catch", "finally"].map((property) => [
  property,
  Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property)
]);
var mergePromise = (spawned, promise) => {
  for (const [property, descriptor] of descriptors) {
    const value2 = typeof promise === "function" ? (...args) => Reflect.apply(descriptor.value, promise(), args) : descriptor.value.bind(promise);
    Reflect.defineProperty(spawned, property, { ...descriptor, value: value2 });
  }
};
var getSpawnedPromise = (spawned) => new Promise((resolve, reject) => {
  spawned.on("exit", (exitCode, signal) => {
    resolve({ exitCode, signal });
  });
  spawned.on("error", (error) => {
    reject(error);
  });
  if (spawned.stdin) {
    spawned.stdin.on("error", (error) => {
      reject(error);
    });
  }
});

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/command.js
var import_node_buffer = require("node:buffer");
var import_node_child_process2 = require("node:child_process");
var normalizeArgs = (file, args = []) => {
  if (!Array.isArray(args)) {
    return [file];
  }
  return [file, ...args];
};
var NO_ESCAPE_REGEXP = /^[\w.-]+$/;
var escapeArg = (arg) => {
  if (typeof arg !== "string" || NO_ESCAPE_REGEXP.test(arg)) {
    return arg;
  }
  return `"${arg.replaceAll('"', '\\"')}"`;
};
var joinCommand = (file, args) => normalizeArgs(file, args).join(" ");
var getEscapedCommand = (file, args) => normalizeArgs(file, args).map((arg) => escapeArg(arg)).join(" ");
var SPACES_REGEXP = / +/g;
var parseExpression = (expression) => {
  const typeOfExpression = typeof expression;
  if (typeOfExpression === "string") {
    return expression;
  }
  if (typeOfExpression === "number") {
    return String(expression);
  }
  if (typeOfExpression === "object" && expression !== null && !(expression instanceof import_node_child_process2.ChildProcess) && "stdout" in expression) {
    const typeOfStdout = typeof expression.stdout;
    if (typeOfStdout === "string") {
      return expression.stdout;
    }
    if (import_node_buffer.Buffer.isBuffer(expression.stdout)) {
      return expression.stdout.toString();
    }
    throw new TypeError(`Unexpected "${typeOfStdout}" stdout in template expression`);
  }
  throw new TypeError(`Unexpected "${typeOfExpression}" in template expression`);
};
var concatTokens = (tokens, nextTokens, isNew) => isNew || tokens.length === 0 || nextTokens.length === 0 ? [...tokens, ...nextTokens] : [
  ...tokens.slice(0, -1),
  `${tokens.at(-1)}${nextTokens[0]}`,
  ...nextTokens.slice(1)
];
var parseTemplate = ({ templates, expressions, tokens, index, template }) => {
  const templateString = template ?? templates.raw[index];
  const templateTokens = templateString.split(SPACES_REGEXP).filter(Boolean);
  const newTokens = concatTokens(
    tokens,
    templateTokens,
    templateString.startsWith(" ")
  );
  if (index === expressions.length) {
    return newTokens;
  }
  const expression = expressions[index];
  const expressionTokens = Array.isArray(expression) ? expression.map((expression2) => parseExpression(expression2)) : [parseExpression(expression)];
  return concatTokens(
    newTokens,
    expressionTokens,
    templateString.endsWith(" ")
  );
};
var parseTemplates = (templates, expressions) => {
  let tokens = [];
  for (const [index, template] of templates.entries()) {
    tokens = parseTemplate({ templates, expressions, tokens, index, template });
  }
  return tokens;
};

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/lib/verbose.js
var import_node_util = require("node:util");
var import_node_process3 = __toESM(require("node:process"), 1);
var verboseDefault = (0, import_node_util.debuglog)("execa").enabled;
var padField = (field, padding) => String(field).padStart(padding, "0");
var getTimestamp = () => {
  const date = /* @__PURE__ */ new Date();
  return `${padField(date.getHours(), 2)}:${padField(date.getMinutes(), 2)}:${padField(date.getSeconds(), 2)}.${padField(date.getMilliseconds(), 3)}`;
};
var logCommand = (escapedCommand, { verbose }) => {
  if (!verbose) {
    return;
  }
  import_node_process3.default.stderr.write(`[${getTimestamp()}] ${escapedCommand}
`);
};

// ../../../node_modules/.pnpm/execa@8.0.1/node_modules/execa/index.js
var DEFAULT_MAX_BUFFER = 1e3 * 1e3 * 100;
var getEnv = ({ env: envOption, extendEnv, preferLocal, localDir, execPath }) => {
  const env = extendEnv ? { ...import_node_process4.default.env, ...envOption } : envOption;
  if (preferLocal) {
    return npmRunPathEnv({ env, cwd: localDir, execPath });
  }
  return env;
};
var handleArguments = (file, args, options = {}) => {
  const parsed = import_cross_spawn.default._parse(file, args, options);
  file = parsed.command;
  args = parsed.args;
  options = parsed.options;
  options = {
    maxBuffer: DEFAULT_MAX_BUFFER,
    buffer: true,
    stripFinalNewline: true,
    extendEnv: true,
    preferLocal: false,
    localDir: options.cwd || import_node_process4.default.cwd(),
    execPath: import_node_process4.default.execPath,
    encoding: "utf8",
    reject: true,
    cleanup: true,
    all: false,
    windowsHide: true,
    verbose: verboseDefault,
    ...options
  };
  options.env = getEnv(options);
  options.stdio = normalizeStdio(options);
  if (import_node_process4.default.platform === "win32" && import_node_path2.default.basename(file, ".exe") === "cmd") {
    args.unshift("/q");
  }
  return { file, args, options, parsed };
};
var handleOutput = (options, value2, error) => {
  if (typeof value2 !== "string" && !import_node_buffer2.Buffer.isBuffer(value2)) {
    return error === void 0 ? void 0 : "";
  }
  if (options.stripFinalNewline) {
    return stripFinalNewline(value2);
  }
  return value2;
};
function execa(file, args, options) {
  const parsed = handleArguments(file, args, options);
  const command = joinCommand(file, args);
  const escapedCommand = getEscapedCommand(file, args);
  logCommand(escapedCommand, parsed.options);
  validateTimeout(parsed.options);
  let spawned;
  try {
    spawned = import_node_child_process3.default.spawn(parsed.file, parsed.args, parsed.options);
  } catch (error) {
    const dummySpawned = new import_node_child_process3.default.ChildProcess();
    const errorPromise = Promise.reject(makeError({
      error,
      stdout: "",
      stderr: "",
      all: "",
      command,
      escapedCommand,
      parsed,
      timedOut: false,
      isCanceled: false,
      killed: false
    }));
    mergePromise(dummySpawned, errorPromise);
    return dummySpawned;
  }
  const spawnedPromise = getSpawnedPromise(spawned);
  const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
  const processDone = setExitHandler(spawned, parsed.options, timedPromise);
  const context = { isCanceled: false };
  spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
  spawned.cancel = spawnedCancel.bind(null, spawned, context);
  const handlePromise = async () => {
    const [{ error, exitCode, signal, timedOut }, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);
    const stdout = handleOutput(parsed.options, stdoutResult);
    const stderr = handleOutput(parsed.options, stderrResult);
    const all = handleOutput(parsed.options, allResult);
    if (error || exitCode !== 0 || signal !== null) {
      const returnedError = makeError({
        error,
        exitCode,
        signal,
        stdout,
        stderr,
        all,
        command,
        escapedCommand,
        parsed,
        timedOut,
        isCanceled: context.isCanceled || (parsed.options.signal ? parsed.options.signal.aborted : false),
        killed: spawned.killed
      });
      if (!parsed.options.reject) {
        return returnedError;
      }
      throw returnedError;
    }
    return {
      command,
      escapedCommand,
      exitCode: 0,
      stdout,
      stderr,
      all,
      failed: false,
      timedOut: false,
      isCanceled: false,
      killed: false
    };
  };
  const handlePromiseOnce = onetime_default(handlePromise);
  handleInput(spawned, parsed.options);
  spawned.all = makeAllStream(spawned, parsed.options);
  addPipeMethods(spawned);
  mergePromise(spawned, handlePromiseOnce);
  return spawned;
}
function execaSync(file, args, options) {
  const parsed = handleArguments(file, args, options);
  const command = joinCommand(file, args);
  const escapedCommand = getEscapedCommand(file, args);
  logCommand(escapedCommand, parsed.options);
  const input = handleInputSync(parsed.options);
  let result;
  try {
    result = import_node_child_process3.default.spawnSync(parsed.file, parsed.args, { ...parsed.options, input });
  } catch (error) {
    throw makeError({
      error,
      stdout: "",
      stderr: "",
      all: "",
      command,
      escapedCommand,
      parsed,
      timedOut: false,
      isCanceled: false,
      killed: false
    });
  }
  const stdout = handleOutput(parsed.options, result.stdout, result.error);
  const stderr = handleOutput(parsed.options, result.stderr, result.error);
  if (result.error || result.status !== 0 || result.signal !== null) {
    const error = makeError({
      stdout,
      stderr,
      error: result.error,
      signal: result.signal,
      exitCode: result.status,
      command,
      escapedCommand,
      parsed,
      timedOut: result.error && result.error.code === "ETIMEDOUT",
      isCanceled: false,
      killed: result.signal !== null
    });
    if (!parsed.options.reject) {
      return error;
    }
    throw error;
  }
  return {
    command,
    escapedCommand,
    exitCode: 0,
    stdout,
    stderr,
    failed: false,
    timedOut: false,
    isCanceled: false,
    killed: false
  };
}
var normalizeScriptStdin = ({ input, inputFile, stdio }) => input === void 0 && inputFile === void 0 && stdio === void 0 ? { stdin: "inherit" } : {};
var normalizeScriptOptions = (options = {}) => ({
  preferLocal: true,
  ...normalizeScriptStdin(options),
  ...options
});
function create$(options) {
  function $2(templatesOrOptions, ...expressions) {
    if (!Array.isArray(templatesOrOptions)) {
      return create$({ ...options, ...templatesOrOptions });
    }
    const [file, ...args] = parseTemplates(templatesOrOptions, expressions);
    return execa(file, args, normalizeScriptOptions(options));
  }
  $2.sync = (templates, ...expressions) => {
    if (!Array.isArray(templates)) {
      throw new TypeError("Please use $(options).sync`command` instead of $.sync(options)`command`.");
    }
    const [file, ...args] = parseTemplates(templates, expressions);
    return execaSync(file, args, normalizeScriptOptions(options));
  };
  return $2;
}
var $ = create$();

// ../cli-env/dist/index.js
function setEnv(name, value2) {
  process.env[name] = value2;
  process.env[`CYPRESS_${name}`] = value2;
}

// src/loadConfig.ts
var import_jiti = __toESM(require_lib(), 1);
var import_sucrase = __toESM(require_dist2(), 1);
var import_node_path3 = require("node:path");
var import_node_fs3 = require("node:fs");
var import_node_url2 = require("node:url");
var import_fast_glob = __toESM(require_out4(), 1);
var import_meta = {};
var _filename = typeof __filename !== "undefined" ? __filename : (0, import_node_url2.fileURLToPath)(import_meta.url);
var jiti = null;
function isObject(item) {
  return Boolean(item) && typeof item === "object" && !Array.isArray(item);
}
function mergeObjects(defaultConfig2, userConfig) {
  const mergedConfig = {
    ...defaultConfig2,
    ...userConfig
  };
  for (const key of Object.keys(mergedConfig)) {
    if (isObject(defaultConfig2[key]) && isObject(userConfig[key])) {
      mergedConfig[key] = mergeObjects(
        defaultConfig2[key],
        userConfig[key]
      );
    }
  }
  return mergedConfig;
}
function lazyJiti() {
  return jiti ?? (jiti = (0, import_jiti.default)(_filename, {
    interopDefault: true,
    transform: (opts) => {
      return (0, import_sucrase.transform)(opts.source, {
        transforms: ["typescript", "imports"]
      });
    }
  }));
}
function readFile(path3) {
  let config = function() {
    try {
      return path3 ? require(path3) : {};
    } catch {
      return lazyJiti()(path3);
    }
  }();
  return config.default ?? config;
}
var toUpperCamelCase = (str) => str.replace(/[A-Z]/g, (letter) => `_${letter}`).toUpperCase();
async function loadConfig(path3) {
  if (!path3) {
    const endings = ["ts", "js", "cjs", "mjs"];
    const fileName = "pixeleye.config";
    for (const ending of endings) {
      if ((0, import_node_fs3.existsSync)((0, import_node_path3.join)(process.cwd(), `${fileName}.${ending}`))) {
        path3 = `${fileName}.${ending}`;
        break;
      }
    }
  }
  if (!path3) {
    console.warn("No config file found.");
    return defaultConfig;
  }
  const relativePath = (0, import_node_path3.join)(process.cwd(), path3 ?? "");
  let userConfig = readFile(relativePath);
  if (typeof userConfig === "function") {
    userConfig = await userConfig().catch((err) => {
      throw new Error(`Failed to load config file: ${err.message}`);
    });
  }
  if (typeof userConfig !== "object") {
    throw new Error(
      `Config file must export an object or a function that returns an object.`
    );
  }
  if (Object.keys(userConfig).length === 0) {
    console.log("Config is empty.");
  }
  const merged = mergeObjects(defaultConfig, userConfig);
  if (typeof merged.snapshotFiles === "function") {
    const { snapshotFiles: _, ...rest } = merged;
    merged.snapshotFiles = await merged.snapshotFiles(rest);
  }
  for (const key of Object.keys(merged)) {
    if (typeof merged[key] === "string") {
      setEnv(`PIXELEYE_${toUpperCamelCase(key)}`, merged[key]);
    } else {
      setEnv(`PIXELEYE_${toUpperCamelCase(key)}`, JSON.stringify(merged[key]));
    }
  }
  return merged;
}
async function readSnapshotFiles(files) {
  const fileNames = await (0, import_fast_glob.default)(files, {
    absolute: true
  });
  return Promise.all(
    fileNames.map(async (fileName) => {
      const content = readFile(fileName);
      return typeof content === "function" ? content() : content;
    })
  ).then((results) => results.flat());
}

// src/getConfig.ts
function getEnvConfig(envFn) {
  if (!envFn) {
    envFn = (name) => process.env[name];
  }
  return {
    token: envFn("PIXELEYE_TOKEN") || "",
    boothPort: envFn("PIXELEYE_BOOTH_PORT"),
    endpoint: envFn("PIXELEYE_ENDPOINT"),
    css: envFn("PIXELEYE_CSS"),
    devices: JSON.parse(envFn("PIXELEYE_DEVICES") || "{}"),
    maskColor: envFn("PIXELEYE_MASK_COLOR"),
    boothConcurrency: Number(envFn("PIXELEYE_BOOTH_CONCURRENCY") || "4") || 4,
    storybookOptions: JSON.parse(
      envFn("PIXELEYE_STORYBOOK_OPTIONS") || "{}"
    )
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  defaultConfig,
  getEnvConfig,
  loadConfig,
  readFile,
  readSnapshotFiles
});
/*! Bundled license information:

is-extglob/index.js:
  (*!
   * is-extglob <https://github.com/jonschlinkert/is-extglob>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

is-glob/index.js:
  (*!
   * is-glob <https://github.com/jonschlinkert/is-glob>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-number/index.js:
  (*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

to-regex-range/index.js:
  (*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

fill-range/index.js:
  (*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

queue-microtask/index.js:
  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

run-parallel/index.js:
  (*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/

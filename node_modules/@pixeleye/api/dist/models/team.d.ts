import { z } from "zod";
export declare const TeamZod: z.ZodObject<{
    id: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    type: z.ZodEnum<["github", "gitlab", "bitbucket", "user"]>;
    referrals: z.ZodOptional<z.ZodNumber>;
    name: z.ZodString;
    url: z.ZodOptional<z.ZodString>;
    avatarURL: z.ZodOptional<z.ZodString>;
    customerID: z.ZodOptional<z.ZodString>;
    planID: z.ZodOptional<z.ZodString>;
    snapshotLimit: z.ZodOptional<z.ZodNumber>;
    billingStatus: z.ZodDefault<z.ZodEnum<["active", "incomplete", "incomplete_expired", "past_due", "canceled", "unpaid", "not_created"]>>;
    billingAccountID: z.ZodOptional<z.ZodString>;
    hasInstall: z.ZodOptional<z.ZodBoolean>;
    role: z.ZodOptional<z.ZodEnum<["admin", "member", "accountant", "owner"]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    updatedAt: string;
    type: "github" | "gitlab" | "bitbucket" | "user";
    name: string;
    billingStatus: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created";
    referrals?: number | undefined;
    url?: string | undefined;
    avatarURL?: string | undefined;
    customerID?: string | undefined;
    planID?: string | undefined;
    snapshotLimit?: number | undefined;
    billingAccountID?: string | undefined;
    hasInstall?: boolean | undefined;
    role?: "admin" | "member" | "accountant" | "owner" | undefined;
}, {
    id: string;
    createdAt: string;
    updatedAt: string;
    type: "github" | "gitlab" | "bitbucket" | "user";
    name: string;
    referrals?: number | undefined;
    url?: string | undefined;
    avatarURL?: string | undefined;
    customerID?: string | undefined;
    planID?: string | undefined;
    snapshotLimit?: number | undefined;
    billingStatus?: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created" | undefined;
    billingAccountID?: string | undefined;
    hasInstall?: boolean | undefined;
    role?: "admin" | "member" | "accountant" | "owner" | undefined;
}>;
export declare const TeamPlanZod: z.ZodObject<{
    name: z.ZodString;
    priceID: z.ZodString;
    productID: z.ZodString;
    default: z.ZodBoolean;
    pricing: z.ZodOptional<z.ZodArray<z.ZodObject<{
        price: z.ZodNumber;
        from: z.ZodNumber;
        to: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        price: number;
        from: number;
        to?: number | undefined;
    }, {
        price: number;
        from: number;
        to?: number | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    priceID: string;
    productID: string;
    default: boolean;
    pricing?: {
        price: number;
        from: number;
        to?: number | undefined;
    }[] | undefined;
}, {
    name: string;
    priceID: string;
    productID: string;
    default: boolean;
    pricing?: {
        price: number;
        from: number;
        to?: number | undefined;
    }[] | undefined;
}>;
export declare const UserOnTeamZod: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodString;
    name: z.ZodString;
    avatar: z.ZodString;
    githubId: z.ZodString;
    role: z.ZodEnum<["admin", "member", "accountant", "owner"]>;
    roleSync: z.ZodBoolean;
    type: z.ZodEnum<["invited", "git"]>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "invited" | "git";
    email: string;
    name: string;
    avatar: string;
    githubId: string;
    role: "admin" | "member" | "accountant" | "owner";
    roleSync: boolean;
}, {
    id: string;
    type: "invited" | "git";
    email: string;
    name: string;
    avatar: string;
    githubId: string;
    role: "admin" | "member" | "accountant" | "owner";
    roleSync: boolean;
}>;
export declare const Subscription: z.ZodObject<{
    id: z.ZodString;
    status: z.ZodEnum<["incomplete", "incomplete_expired", "active", "past_due", "canceled", "unpaid"]>;
    cancelAt: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    id: string;
    status: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid";
    cancelAt?: number | undefined;
}, {
    id: string;
    status: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid";
    cancelAt?: number | undefined;
}>;
export type UserOnTeamRole = z.infer<typeof UserOnTeamZod>["role"];
export type Subscription = z.infer<typeof Subscription>;
export type Team = z.infer<typeof TeamZod>;
export type UserOnTeam = z.infer<typeof UserOnTeamZod>;
export type TeamPlan = z.infer<typeof TeamPlanZod>;
//# sourceMappingURL=team.d.ts.map
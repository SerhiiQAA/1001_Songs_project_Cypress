import { z } from "zod";
export declare const BuildZod: z.ZodObject<{
    id: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    projectID: z.ZodString;
    buildNumber: z.ZodNumber;
    parentIDs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    targetBuildIDs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    prID: z.ZodOptional<z.ZodString>;
    targetBranch: z.ZodOptional<z.ZodString>;
    isLatest: z.ZodOptional<z.ZodBoolean>;
    sha: z.ZodString;
    branch: z.ZodString;
    message: z.ZodOptional<z.ZodString>;
    title: z.ZodOptional<z.ZodString>;
    status: z.ZodEnum<["uploading", "processing", "failed", "orphaned", "aborted", "approved", "rejected", "unreviewed", "unchanged", "queued-processing", "queued-uploading"]>;
    errors: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    updatedAt: string;
    projectID: string;
    buildNumber: number;
    status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
    sha: string;
    branch: string;
    errors: string[];
    parentIDs?: string[] | undefined;
    targetBuildIDs?: string[] | undefined;
    prID?: string | undefined;
    targetBranch?: string | undefined;
    isLatest?: boolean | undefined;
    message?: string | undefined;
    title?: string | undefined;
}, {
    id: string;
    createdAt: string;
    updatedAt: string;
    projectID: string;
    buildNumber: number;
    status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
    sha: string;
    branch: string;
    errors: string[];
    parentIDs?: string[] | undefined;
    targetBuildIDs?: string[] | undefined;
    prID?: string | undefined;
    targetBranch?: string | undefined;
    isLatest?: boolean | undefined;
    message?: string | undefined;
    title?: string | undefined;
}>;
export type Build = z.infer<typeof BuildZod>;
//# sourceMappingURL=build.d.ts.map
import { z } from "zod";
export declare const UserOnProjectRoleZod: z.ZodEnum<["admin", "reviewer", "viewer"]>;
export declare const ProjectZod: z.ZodObject<{
    id: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    teamID: z.ZodString;
    name: z.ZodString;
    url: z.ZodOptional<z.ZodString>;
    source: z.ZodEnum<["github", "gitlab", "bitbucket", "custom"]>;
    sourceID: z.ZodOptional<z.ZodString>;
    token: z.ZodOptional<z.ZodString>;
    snapshotThreshold: z.ZodOptional<z.ZodNumber>;
    snapshotBlur: z.ZodOptional<z.ZodBoolean>;
    lastActivity: z.ZodOptional<z.ZodString>;
    autoApprove: z.ZodOptional<z.ZodString>;
    role: z.ZodOptional<z.ZodEnum<["admin", "reviewer", "viewer"]>>;
    teamRole: z.ZodOptional<z.ZodEnum<["admin", "member", "accountant", "owner"]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: string;
    updatedAt: string;
    name: string;
    teamID: string;
    source: "custom" | "github" | "gitlab" | "bitbucket";
    url?: string | undefined;
    sourceID?: string | undefined;
    token?: string | undefined;
    snapshotThreshold?: number | undefined;
    snapshotBlur?: boolean | undefined;
    lastActivity?: string | undefined;
    autoApprove?: string | undefined;
    role?: "admin" | "reviewer" | "viewer" | undefined;
    teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
}, {
    id: string;
    createdAt: string;
    updatedAt: string;
    name: string;
    teamID: string;
    source: "custom" | "github" | "gitlab" | "bitbucket";
    url?: string | undefined;
    sourceID?: string | undefined;
    token?: string | undefined;
    snapshotThreshold?: number | undefined;
    snapshotBlur?: boolean | undefined;
    lastActivity?: string | undefined;
    autoApprove?: string | undefined;
    role?: "admin" | "reviewer" | "viewer" | undefined;
    teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
}>;
export declare const UserOnProjectZod: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodString;
    name: z.ZodString;
    avatar: z.ZodString;
    githubId: z.ZodString;
    role: z.ZodEnum<["admin", "reviewer", "viewer"]>;
    roleSync: z.ZodBoolean;
    type: z.ZodEnum<["invited", "git"]>;
    teamRole: z.ZodOptional<z.ZodEnum<["admin", "member", "accountant", "owner"]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "invited" | "git";
    email: string;
    name: string;
    avatar: string;
    githubId: string;
    role: "admin" | "reviewer" | "viewer";
    roleSync: boolean;
    teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
}, {
    id: string;
    type: "invited" | "git";
    email: string;
    name: string;
    avatar: string;
    githubId: string;
    role: "admin" | "reviewer" | "viewer";
    roleSync: boolean;
    teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
}>;
export type Project = z.infer<typeof ProjectZod>;
export type UserOnProject = z.infer<typeof UserOnProjectZod>;
export type UserOnProjectRole = z.infer<typeof UserOnProjectRoleZod>;
//# sourceMappingURL=project.d.ts.map
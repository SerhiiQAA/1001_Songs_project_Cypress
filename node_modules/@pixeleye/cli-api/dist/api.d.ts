import { HeadersInit, Response, RequestInfo, RequestInit } from "undici";
export declare const fetchRetry: (url: RequestInfo, init?: RequestInit, retries?: number, retryWait?: number) => Promise<Response>;
interface APIOptions {
    headers?: HeadersInit;
    retries?: number;
    retryWait?: number;
}
declare function createAPI(endpoint: string, headers?: HeadersInit): {
    get: <U extends "/v1/ping" | "/v1/user/me" | "/v1/user/teams" | "/v1/builds/{id}" | "/v1/builds/{id}/snapshots" | "/v1/projects/{id}" | "/v1/projects/{id}/users" | "/v1/teams/{teamID}/projects" | "/v1/projects/{id}/builds" | "/v1/teams/{teamID}/repos" | "/v1/teams/{teamID}/installations" | "/v1/teams/{teamID}/users" | "/v1/teams/{teamID}/usage/snapshots" | "/v1/teams/{teamID}/usage/builds" | "/v1/teams/{teamID}/billing/portal" | "/v1/teams/{teamID}/billing/subscription" | "/v1/invites/{id}">(url: U, options: import("api-typify").tsAPIOptions<{
        "/v1/ping": {
            res: {
                message: "pong";
            };
            req: undefined;
        };
    } & {
        "/v1/user/me": {
            res: {
                id: string;
                email: string;
                name: string;
                avatar: string;
                githubId: string;
            };
            req: undefined;
        };
        "/v1/user/teams": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                type: "github" | "gitlab" | "bitbucket" | "user";
                name: string;
                billingStatus: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created";
                url?: string | undefined;
                role?: "admin" | "member" | "accountant" | "owner" | undefined;
                referrals?: number | undefined;
                avatarURL?: string | undefined;
                customerID?: string | undefined;
                planID?: string | undefined;
                snapshotLimit?: number | undefined;
                billingAccountID?: string | undefined;
                hasInstall?: boolean | undefined;
            }[];
            req: undefined;
        };
    } & {
        "/v1/builds/{id}": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/snapshots": {
            res: ({
                id: string;
                createdAt: string;
                updatedAt: string;
                status: "aborted" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "missing_baseline";
                name: string;
                buildID: string;
                snapID: string;
                variant?: string | undefined;
                target?: string | undefined;
                targetIcon?: string | undefined;
                viewport?: string | undefined;
                error?: string | undefined;
                baselineID?: string | undefined;
                reviewerID?: string | undefined;
                reviewAt?: string | undefined;
            } & {
                snapHash?: string | undefined;
                baselineHash?: string | undefined;
                diffHash?: string | undefined;
            })[];
        };
    } & {
        "/v1/projects/{id}": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
        };
        "/v1/projects/{id}/users": {
            res: {
                id: string;
                type: "invited" | "git";
                email: string;
                name: string;
                avatar: string;
                githubId: string;
                role: "admin" | "reviewer" | "viewer";
                roleSync: boolean;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            }[];
        };
        "/v1/teams/{teamID}/projects": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            }[];
        };
        "/v1/projects/{id}/builds": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            queries?: {
                branch?: string | undefined;
                limit?: number | undefined;
                offset?: number | undefined;
            } | undefined;
        };
    } & {
        "/v1/invites/{id}": {
            res: {
                id: string;
                createdAt: string;
                projectID: string;
                email: string;
                expiresAt: string;
                inviterEmail: string;
                inviterName: string;
                inviterAvatarURL: string;
                projectName: string;
                teamAvatarURL: string;
                teamName: string;
            };
        };
    } & {
        "/v1/teams/{teamID}/repos": {
            res: {
                id: string;
                name: string;
                private: boolean;
                url?: string | undefined;
                description?: string | undefined;
                lastUpdated?: string | undefined;
                defaultBranch?: string | undefined;
            }[];
        };
        "/v1/teams/{teamID}/installations": {
            res: {
                id: string;
                type: "github" | "gitlab" | "bitbucket";
            }[];
        };
        "/v1/teams/{teamID}/users": {
            res: {
                id: string;
                type: "invited" | "git";
                email: string;
                name: string;
                avatar: string;
                githubId: string;
                role: "admin" | "member" | "accountant" | "owner";
                roleSync: boolean;
            }[];
        };
        "/v1/teams/{teamID}/usage/snapshots": {
            res: {
                snapshotCount: number;
                prevSnapshotCount: number;
            };
            queries: {
                from?: string | undefined;
                to?: string | undefined;
            };
        };
        "/v1/teams/{teamID}/usage/builds": {
            res: {
                buildCount: number;
                prevBuildCount: number;
            };
            queries: {
                from?: string | undefined;
                to?: string | undefined;
            };
        };
        "/v1/teams/{teamID}/billing/portal": {
            res: {
                billingPortalURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/subscription": {
            res?: {
                id: string;
                status: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid";
                cancelAt?: number | undefined;
            } | undefined;
        };
    }, U, Omit<APIOptions, "params" | "body" | "queries">>) => Promise<({
        "/v1/ping": {
            res: {
                message: "pong";
            };
            req: undefined;
        };
    } & {
        "/v1/user/me": {
            res: {
                id: string;
                email: string;
                name: string;
                avatar: string;
                githubId: string;
            };
            req: undefined;
        };
        "/v1/user/teams": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                type: "github" | "gitlab" | "bitbucket" | "user";
                name: string;
                billingStatus: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created";
                url?: string | undefined;
                role?: "admin" | "member" | "accountant" | "owner" | undefined;
                referrals?: number | undefined;
                avatarURL?: string | undefined;
                customerID?: string | undefined;
                planID?: string | undefined;
                snapshotLimit?: number | undefined;
                billingAccountID?: string | undefined;
                hasInstall?: boolean | undefined;
            }[];
            req: undefined;
        };
    } & {
        "/v1/builds/{id}": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/snapshots": {
            res: ({
                id: string;
                createdAt: string;
                updatedAt: string;
                status: "aborted" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "missing_baseline";
                name: string;
                buildID: string;
                snapID: string;
                variant?: string | undefined;
                target?: string | undefined;
                targetIcon?: string | undefined;
                viewport?: string | undefined;
                error?: string | undefined;
                baselineID?: string | undefined;
                reviewerID?: string | undefined;
                reviewAt?: string | undefined;
            } & {
                snapHash?: string | undefined;
                baselineHash?: string | undefined;
                diffHash?: string | undefined;
            })[];
        };
    } & {
        "/v1/projects/{id}": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
        };
        "/v1/projects/{id}/users": {
            res: {
                id: string;
                type: "invited" | "git";
                email: string;
                name: string;
                avatar: string;
                githubId: string;
                role: "admin" | "reviewer" | "viewer";
                roleSync: boolean;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            }[];
        };
        "/v1/teams/{teamID}/projects": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            }[];
        };
        "/v1/projects/{id}/builds": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            queries?: {
                branch?: string | undefined;
                limit?: number | undefined;
                offset?: number | undefined;
            } | undefined;
        };
    } & {
        "/v1/invites/{id}": {
            res: {
                id: string;
                createdAt: string;
                projectID: string;
                email: string;
                expiresAt: string;
                inviterEmail: string;
                inviterName: string;
                inviterAvatarURL: string;
                projectName: string;
                teamAvatarURL: string;
                teamName: string;
            };
        };
    } & {
        "/v1/teams/{teamID}/repos": {
            res: {
                id: string;
                name: string;
                private: boolean;
                url?: string | undefined;
                description?: string | undefined;
                lastUpdated?: string | undefined;
                defaultBranch?: string | undefined;
            }[];
        };
        "/v1/teams/{teamID}/installations": {
            res: {
                id: string;
                type: "github" | "gitlab" | "bitbucket";
            }[];
        };
        "/v1/teams/{teamID}/users": {
            res: {
                id: string;
                type: "invited" | "git";
                email: string;
                name: string;
                avatar: string;
                githubId: string;
                role: "admin" | "member" | "accountant" | "owner";
                roleSync: boolean;
            }[];
        };
        "/v1/teams/{teamID}/usage/snapshots": {
            res: {
                snapshotCount: number;
                prevSnapshotCount: number;
            };
            queries: {
                from?: string | undefined;
                to?: string | undefined;
            };
        };
        "/v1/teams/{teamID}/usage/builds": {
            res: {
                buildCount: number;
                prevBuildCount: number;
            };
            queries: {
                from?: string | undefined;
                to?: string | undefined;
            };
        };
        "/v1/teams/{teamID}/billing/portal": {
            res: {
                billingPortalURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/subscription": {
            res?: {
                id: string;
                status: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid";
                cancelAt?: number | undefined;
            } | undefined;
        };
    })[U] extends import("api-typify").EndpointTypes ? ({
        "/v1/ping": {
            res: {
                message: "pong";
            };
            req: undefined;
        };
    } & {
        "/v1/user/me": {
            res: {
                id: string;
                email: string;
                name: string;
                avatar: string;
                githubId: string;
            };
            req: undefined;
        };
        "/v1/user/teams": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                type: "github" | "gitlab" | "bitbucket" | "user";
                name: string;
                billingStatus: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created";
                url?: string | undefined;
                role?: "admin" | "member" | "accountant" | "owner" | undefined;
                referrals?: number | undefined;
                avatarURL?: string | undefined;
                customerID?: string | undefined;
                planID?: string | undefined;
                snapshotLimit?: number | undefined;
                billingAccountID?: string | undefined;
                hasInstall?: boolean | undefined;
            }[];
            req: undefined;
        };
    } & {
        "/v1/builds/{id}": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/snapshots": {
            res: ({
                id: string;
                createdAt: string;
                updatedAt: string;
                status: "aborted" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "missing_baseline";
                name: string;
                buildID: string;
                snapID: string;
                variant?: string | undefined;
                target?: string | undefined;
                targetIcon?: string | undefined;
                viewport?: string | undefined;
                error?: string | undefined;
                baselineID?: string | undefined;
                reviewerID?: string | undefined;
                reviewAt?: string | undefined;
            } & {
                snapHash?: string | undefined;
                baselineHash?: string | undefined;
                diffHash?: string | undefined;
            })[];
        };
    } & {
        "/v1/projects/{id}": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
        };
        "/v1/projects/{id}/users": {
            res: {
                id: string;
                type: "invited" | "git";
                email: string;
                name: string;
                avatar: string;
                githubId: string;
                role: "admin" | "reviewer" | "viewer";
                roleSync: boolean;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            }[];
        };
        "/v1/teams/{teamID}/projects": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            }[];
        };
        "/v1/projects/{id}/builds": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            queries?: {
                branch?: string | undefined;
                limit?: number | undefined;
                offset?: number | undefined;
            } | undefined;
        };
    } & {
        "/v1/invites/{id}": {
            res: {
                id: string;
                createdAt: string;
                projectID: string;
                email: string;
                expiresAt: string;
                inviterEmail: string;
                inviterName: string;
                inviterAvatarURL: string;
                projectName: string;
                teamAvatarURL: string;
                teamName: string;
            };
        };
    } & {
        "/v1/teams/{teamID}/repos": {
            res: {
                id: string;
                name: string;
                private: boolean;
                url?: string | undefined;
                description?: string | undefined;
                lastUpdated?: string | undefined;
                defaultBranch?: string | undefined;
            }[];
        };
        "/v1/teams/{teamID}/installations": {
            res: {
                id: string;
                type: "github" | "gitlab" | "bitbucket";
            }[];
        };
        "/v1/teams/{teamID}/users": {
            res: {
                id: string;
                type: "invited" | "git";
                email: string;
                name: string;
                avatar: string;
                githubId: string;
                role: "admin" | "member" | "accountant" | "owner";
                roleSync: boolean;
            }[];
        };
        "/v1/teams/{teamID}/usage/snapshots": {
            res: {
                snapshotCount: number;
                prevSnapshotCount: number;
            };
            queries: {
                from?: string | undefined;
                to?: string | undefined;
            };
        };
        "/v1/teams/{teamID}/usage/builds": {
            res: {
                buildCount: number;
                prevBuildCount: number;
            };
            queries: {
                from?: string | undefined;
                to?: string | undefined;
            };
        };
        "/v1/teams/{teamID}/billing/portal": {
            res: {
                billingPortalURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/subscription": {
            res?: {
                id: string;
                status: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid";
                cancelAt?: number | undefined;
            } | undefined;
        };
    })[U]["res"] : unknown>;
    post: <U_1 extends "/v1/user/teams/sync" | "/v1/user/refer" | "/v1/builds/{id}/review/abort" | "/v1/client/builds/create" | "/v1/client/builds/{id}/upload" | "/v1/client/builds/{id}/complete" | "/v1/client/builds" | "/v1/client/latestBuilds" | "/v1/client/builds/parents" | "/v1/client/builds/{id}/abort" | "/v1/builds/{id}/review/approve" | "/v1/builds/{id}/review/reject" | "/v1/builds/{id}/review/approve/all" | "/v1/builds/{id}/review/reject/all" | "/v1/builds/{id}/review/approve/remaining" | "/v1/builds/{id}/review/reject/remaining" | "/v1/teams/{teamID}/projects" | "/v1/projects/{id}/admin/new-token" | "/v1/projects/{id}/admin/users" | "/v1/client/snapshots/upload" | "/v1/git/github" | "/v1/teams/{teamID}/billing/account" | "/v1/teams/{teamID}/billing/account2" | "/v1/teams/{teamID}/billing/plan" | "/v1/teams/{teamID}/billing/subscribe" | "/v1/teams/{teamID}/billing/limit" | "/v1/invites/{id}/accept">(url: U_1, options: import("api-typify").tsAPIOptions<{
        "/v1/user/teams/sync": {
            res: undefined;
            req: undefined;
        };
        "/v1/user/refer": {
            res: undefined;
            req: {
                userID: string;
            };
        };
    } & {
        "/v1/builds/{id}/review/abort": {
            req: undefined;
        };
        "/v1/client/builds/create": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
            req: Omit<{
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }, "id" | "createdAt" | "updatedAt" | "projectID" | "buildNumber" | "status" | "errors">;
        };
        "/v1/client/builds/{id}/upload": {
            res: undefined;
            req: {
                snapshots: import("@pixeleye/api").PartialSnapshot[];
            };
        };
        "/v1/client/builds/{id}/complete": {
            res: undefined;
        };
        "/v1/client/builds": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            req?: {
                shas?: string[] | undefined;
            } | undefined;
            queries?: {
                branch?: string | undefined;
                limit?: number | undefined;
            } | undefined;
        };
        "/v1/client/latestBuilds": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            req: {
                shas: string[];
            };
        };
        "/v1/client/builds/parents": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            req?: {
                shas?: string[] | undefined;
                branch?: string | undefined;
            } | undefined;
        };
        "/v1/client/builds/{id}/abort": {
            res: undefined;
        };
        "/v1/builds/{id}/review/approve": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
            req: {
                snapshotIDs: string[];
            };
        };
        "/v1/builds/{id}/review/reject": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
            req: {
                snapshotIDs: string[];
            };
        };
        "/v1/builds/{id}/review/approve/all": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/review/reject/all": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/review/approve/remaining": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/review/reject/remaining": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
    } & {
        "/v1/teams/{teamID}/projects": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
            req: Omit<{
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            }, "id" | "createdAt" | "updatedAt" | "teamID" | "token">;
        };
        "/v1/projects/{id}/admin/new-token": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
            req: undefined;
        };
        "/v1/projects/{id}/admin/users": {
            res: {
                id: string;
                type: "invited" | "git";
                email: string;
                name: string;
                avatar: string;
                githubId: string;
                role: "admin" | "reviewer" | "viewer";
                roleSync: boolean;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
            req: {
                email: string;
                role: "admin" | "reviewer" | "viewer";
                disableEmail?: boolean | undefined;
            };
        };
    } & {
        "/v1/client/snapshots/upload": {
            res: Record<string, {
                id: string;
                createdAt: string;
                projectID: string;
                hash: string;
            } & Partial<import("@pixeleye/api").PresignedURL>>;
            req: {
                snapshots: {
                    height: number;
                    width: number;
                    format: string;
                    hash: string;
                }[];
            };
        };
    } & {
        "/v1/git/github": {
            res: {
                installation: {
                    id: string;
                    type: "github" | "gitlab" | "bitbucket";
                };
                team: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    type: "github" | "gitlab" | "bitbucket" | "user";
                    name: string;
                    billingStatus: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created";
                    url?: string | undefined;
                    role?: "admin" | "member" | "accountant" | "owner" | undefined;
                    referrals?: number | undefined;
                    avatarURL?: string | undefined;
                    customerID?: string | undefined;
                    planID?: string | undefined;
                    snapshotLimit?: number | undefined;
                    billingAccountID?: string | undefined;
                    hasInstall?: boolean | undefined;
                };
            };
            queries: {
                installation_id: string;
            };
        };
    } & {
        "/v1/invites/{id}/accept": {
            res: undefined;
        };
    } & {
        "/v1/teams/{teamID}/billing/account": {
            res: {
                billingPortalURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/account2": {
            res: {
                clientSecret: string;
            };
        };
        "/v1/teams/{teamID}/billing/plan": {
            res: {
                billingPortalURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/subscribe": {
            res: {
                checkoutURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/limit": {
            req: {
                limit: number;
            };
        };
    }, U_1, Omit<APIOptions, "params" | "body" | "queries">>) => Promise<({
        "/v1/user/teams/sync": {
            res: undefined;
            req: undefined;
        };
        "/v1/user/refer": {
            res: undefined;
            req: {
                userID: string;
            };
        };
    } & {
        "/v1/builds/{id}/review/abort": {
            req: undefined;
        };
        "/v1/client/builds/create": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
            req: Omit<{
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }, "id" | "createdAt" | "updatedAt" | "projectID" | "buildNumber" | "status" | "errors">;
        };
        "/v1/client/builds/{id}/upload": {
            res: undefined;
            req: {
                snapshots: import("@pixeleye/api").PartialSnapshot[];
            };
        };
        "/v1/client/builds/{id}/complete": {
            res: undefined;
        };
        "/v1/client/builds": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            req?: {
                shas?: string[] | undefined;
            } | undefined;
            queries?: {
                branch?: string | undefined;
                limit?: number | undefined;
            } | undefined;
        };
        "/v1/client/latestBuilds": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            req: {
                shas: string[];
            };
        };
        "/v1/client/builds/parents": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            req?: {
                shas?: string[] | undefined;
                branch?: string | undefined;
            } | undefined;
        };
        "/v1/client/builds/{id}/abort": {
            res: undefined;
        };
        "/v1/builds/{id}/review/approve": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
            req: {
                snapshotIDs: string[];
            };
        };
        "/v1/builds/{id}/review/reject": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
            req: {
                snapshotIDs: string[];
            };
        };
        "/v1/builds/{id}/review/approve/all": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/review/reject/all": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/review/approve/remaining": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/review/reject/remaining": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
    } & {
        "/v1/teams/{teamID}/projects": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
            req: Omit<{
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            }, "id" | "createdAt" | "updatedAt" | "teamID" | "token">;
        };
        "/v1/projects/{id}/admin/new-token": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
            req: undefined;
        };
        "/v1/projects/{id}/admin/users": {
            res: {
                id: string;
                type: "invited" | "git";
                email: string;
                name: string;
                avatar: string;
                githubId: string;
                role: "admin" | "reviewer" | "viewer";
                roleSync: boolean;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
            req: {
                email: string;
                role: "admin" | "reviewer" | "viewer";
                disableEmail?: boolean | undefined;
            };
        };
    } & {
        "/v1/client/snapshots/upload": {
            res: Record<string, {
                id: string;
                createdAt: string;
                projectID: string;
                hash: string;
            } & Partial<import("@pixeleye/api").PresignedURL>>;
            req: {
                snapshots: {
                    height: number;
                    width: number;
                    format: string;
                    hash: string;
                }[];
            };
        };
    } & {
        "/v1/git/github": {
            res: {
                installation: {
                    id: string;
                    type: "github" | "gitlab" | "bitbucket";
                };
                team: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    type: "github" | "gitlab" | "bitbucket" | "user";
                    name: string;
                    billingStatus: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created";
                    url?: string | undefined;
                    role?: "admin" | "member" | "accountant" | "owner" | undefined;
                    referrals?: number | undefined;
                    avatarURL?: string | undefined;
                    customerID?: string | undefined;
                    planID?: string | undefined;
                    snapshotLimit?: number | undefined;
                    billingAccountID?: string | undefined;
                    hasInstall?: boolean | undefined;
                };
            };
            queries: {
                installation_id: string;
            };
        };
    } & {
        "/v1/invites/{id}/accept": {
            res: undefined;
        };
    } & {
        "/v1/teams/{teamID}/billing/account": {
            res: {
                billingPortalURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/account2": {
            res: {
                clientSecret: string;
            };
        };
        "/v1/teams/{teamID}/billing/plan": {
            res: {
                billingPortalURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/subscribe": {
            res: {
                checkoutURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/limit": {
            req: {
                limit: number;
            };
        };
    })[U_1] extends import("api-typify").EndpointTypes ? ({
        "/v1/user/teams/sync": {
            res: undefined;
            req: undefined;
        };
        "/v1/user/refer": {
            res: undefined;
            req: {
                userID: string;
            };
        };
    } & {
        "/v1/builds/{id}/review/abort": {
            req: undefined;
        };
        "/v1/client/builds/create": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
            req: Omit<{
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }, "id" | "createdAt" | "updatedAt" | "projectID" | "buildNumber" | "status" | "errors">;
        };
        "/v1/client/builds/{id}/upload": {
            res: undefined;
            req: {
                snapshots: import("@pixeleye/api").PartialSnapshot[];
            };
        };
        "/v1/client/builds/{id}/complete": {
            res: undefined;
        };
        "/v1/client/builds": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            req?: {
                shas?: string[] | undefined;
            } | undefined;
            queries?: {
                branch?: string | undefined;
                limit?: number | undefined;
            } | undefined;
        };
        "/v1/client/latestBuilds": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            req: {
                shas: string[];
            };
        };
        "/v1/client/builds/parents": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            }[];
            req?: {
                shas?: string[] | undefined;
                branch?: string | undefined;
            } | undefined;
        };
        "/v1/client/builds/{id}/abort": {
            res: undefined;
        };
        "/v1/builds/{id}/review/approve": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
            req: {
                snapshotIDs: string[];
            };
        };
        "/v1/builds/{id}/review/reject": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
            req: {
                snapshotIDs: string[];
            };
        };
        "/v1/builds/{id}/review/approve/all": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/review/reject/all": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/review/approve/remaining": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
        "/v1/builds/{id}/review/reject/remaining": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                projectID: string;
                buildNumber: number;
                status: "aborted" | "uploading" | "processing" | "failed" | "orphaned" | "approved" | "rejected" | "unreviewed" | "unchanged" | "queued-processing" | "queued-uploading";
                sha: string;
                branch: string;
                message?: string | undefined;
                parentIDs?: string[] | undefined;
                targetBuildIDs?: string[] | undefined;
                prID?: string | undefined;
                targetBranch?: string | undefined;
                isLatest?: boolean | undefined;
                shardingCount?: number | undefined;
                shardingID?: string | undefined;
                shardsCompleted?: number | undefined;
                title?: string | undefined;
                errors?: string[] | undefined;
            };
        };
    } & {
        "/v1/teams/{teamID}/projects": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
            req: Omit<{
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            }, "id" | "createdAt" | "updatedAt" | "teamID" | "token">;
        };
        "/v1/projects/{id}/admin/new-token": {
            res: {
                id: string;
                createdAt: string;
                updatedAt: string;
                name: string;
                teamID: string;
                source: "custom" | "github" | "gitlab" | "bitbucket";
                url?: string | undefined;
                sourceID?: string | undefined;
                token?: string | undefined;
                snapshotThreshold?: number | undefined;
                snapshotBlur?: boolean | undefined;
                lastActivity?: string | undefined;
                autoApprove?: string | undefined;
                role?: "admin" | "reviewer" | "viewer" | undefined;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
            req: undefined;
        };
        "/v1/projects/{id}/admin/users": {
            res: {
                id: string;
                type: "invited" | "git";
                email: string;
                name: string;
                avatar: string;
                githubId: string;
                role: "admin" | "reviewer" | "viewer";
                roleSync: boolean;
                teamRole?: "admin" | "member" | "accountant" | "owner" | undefined;
            };
            req: {
                email: string;
                role: "admin" | "reviewer" | "viewer";
                disableEmail?: boolean | undefined;
            };
        };
    } & {
        "/v1/client/snapshots/upload": {
            res: Record<string, {
                id: string;
                createdAt: string;
                projectID: string;
                hash: string;
            } & Partial<import("@pixeleye/api").PresignedURL>>;
            req: {
                snapshots: {
                    height: number;
                    width: number;
                    format: string;
                    hash: string;
                }[];
            };
        };
    } & {
        "/v1/git/github": {
            res: {
                installation: {
                    id: string;
                    type: "github" | "gitlab" | "bitbucket";
                };
                team: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    type: "github" | "gitlab" | "bitbucket" | "user";
                    name: string;
                    billingStatus: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created";
                    url?: string | undefined;
                    role?: "admin" | "member" | "accountant" | "owner" | undefined;
                    referrals?: number | undefined;
                    avatarURL?: string | undefined;
                    customerID?: string | undefined;
                    planID?: string | undefined;
                    snapshotLimit?: number | undefined;
                    billingAccountID?: string | undefined;
                    hasInstall?: boolean | undefined;
                };
            };
            queries: {
                installation_id: string;
            };
        };
    } & {
        "/v1/invites/{id}/accept": {
            res: undefined;
        };
    } & {
        "/v1/teams/{teamID}/billing/account": {
            res: {
                billingPortalURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/account2": {
            res: {
                clientSecret: string;
            };
        };
        "/v1/teams/{teamID}/billing/plan": {
            res: {
                billingPortalURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/subscribe": {
            res: {
                checkoutURL: string;
            };
        };
        "/v1/teams/{teamID}/billing/limit": {
            req: {
                limit: number;
            };
        };
    })[U_1]["res"] : unknown>;
    delete: <U_2 extends "/v1/user/me" | "/v1/projects/{id}/admin" | "/v1/projects/{id}/admin/users/{userID}" | "/v1/teams/{teamID}/admin/users/{userID}">(url: U_2, options: import("api-typify").tsAPIOptions<{
        "/v1/user/me": {
            res: undefined;
            req: undefined;
        };
    } & {
        "/v1/projects/{id}/admin": {
            res: undefined;
            req: {
                name: string;
            };
        };
        "/v1/projects/{id}/admin/users/{userID}": {
            res: undefined;
            req: undefined;
        };
    } & {
        "/v1/teams/{teamID}/admin/users/{userID}": {
            res: undefined;
        };
    }, U_2, Omit<APIOptions, "params" | "body" | "queries">>) => Promise<({
        "/v1/user/me": {
            res: undefined;
            req: undefined;
        };
    } & {
        "/v1/projects/{id}/admin": {
            res: undefined;
            req: {
                name: string;
            };
        };
        "/v1/projects/{id}/admin/users/{userID}": {
            res: undefined;
            req: undefined;
        };
    } & {
        "/v1/teams/{teamID}/admin/users/{userID}": {
            res: undefined;
        };
    })[U_2] extends import("api-typify").EndpointTypes ? ({
        "/v1/user/me": {
            res: undefined;
            req: undefined;
        };
    } & {
        "/v1/projects/{id}/admin": {
            res: undefined;
            req: {
                name: string;
            };
        };
        "/v1/projects/{id}/admin/users/{userID}": {
            res: undefined;
            req: undefined;
        };
    } & {
        "/v1/teams/{teamID}/admin/users/{userID}": {
            res: undefined;
        };
    })[U_2]["res"] : unknown>;
    put: <U_3 extends string>(url: U_3, options: import("api-typify").tsAPIOptions<Record<string, import("api-typify").EndpointTypes>, U_3, Omit<APIOptions, "params" | "body" | "queries">>) => Promise<unknown>;
    patch: <U_4 extends "/v1/user/me" | "/v1/projects/{id}/admin" | "/v1/projects/{id}/admin/users/{userID}" | "/v1/teams/{teamID}/admin/users/{userID}" | "/v1/teams/{teamID}/admin">(url: U_4, options: import("api-typify").tsAPIOptions<{
        "/v1/user/me": {
            res: undefined;
            req: Partial<Pick<{
                id: string;
                email: string;
                name: string;
                avatar: string;
                githubId: string;
            }, "name" | "avatar">>;
        };
    } & {
        "/v1/projects/{id}/admin/users/{userID}": {
            res: undefined;
            req: {
                role?: "admin" | "reviewer" | "viewer" | undefined;
                sync?: boolean | undefined;
            };
        };
        "/v1/projects/{id}/admin": {
            res: undefined;
            req: {
                name?: string | undefined;
                snapshotThreshold?: number | undefined;
            };
        };
    } & {
        "/v1/teams/{teamID}/admin": {
            res: undefined;
            req: Pick<{
                id: string;
                createdAt: string;
                updatedAt: string;
                type: "github" | "gitlab" | "bitbucket" | "user";
                name: string;
                billingStatus: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created";
                url?: string | undefined;
                role?: "admin" | "member" | "accountant" | "owner" | undefined;
                referrals?: number | undefined;
                avatarURL?: string | undefined;
                customerID?: string | undefined;
                planID?: string | undefined;
                snapshotLimit?: number | undefined;
                billingAccountID?: string | undefined;
                hasInstall?: boolean | undefined;
            }, "name" | "url" | "avatarURL">;
        };
        "/v1/teams/{teamID}/admin/users/{userID}": {
            res: undefined;
            req: {
                role?: "admin" | "member" | "accountant" | "owner" | undefined;
                sync?: boolean | undefined;
            };
        };
    }, U_4, Omit<APIOptions, "params" | "body" | "queries">>) => Promise<({
        "/v1/user/me": {
            res: undefined;
            req: Partial<Pick<{
                id: string;
                email: string;
                name: string;
                avatar: string;
                githubId: string;
            }, "name" | "avatar">>;
        };
    } & {
        "/v1/projects/{id}/admin/users/{userID}": {
            res: undefined;
            req: {
                role?: "admin" | "reviewer" | "viewer" | undefined;
                sync?: boolean | undefined;
            };
        };
        "/v1/projects/{id}/admin": {
            res: undefined;
            req: {
                name?: string | undefined;
                snapshotThreshold?: number | undefined;
            };
        };
    } & {
        "/v1/teams/{teamID}/admin": {
            res: undefined;
            req: Pick<{
                id: string;
                createdAt: string;
                updatedAt: string;
                type: "github" | "gitlab" | "bitbucket" | "user";
                name: string;
                billingStatus: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created";
                url?: string | undefined;
                role?: "admin" | "member" | "accountant" | "owner" | undefined;
                referrals?: number | undefined;
                avatarURL?: string | undefined;
                customerID?: string | undefined;
                planID?: string | undefined;
                snapshotLimit?: number | undefined;
                billingAccountID?: string | undefined;
                hasInstall?: boolean | undefined;
            }, "name" | "url" | "avatarURL">;
        };
        "/v1/teams/{teamID}/admin/users/{userID}": {
            res: undefined;
            req: {
                role?: "admin" | "member" | "accountant" | "owner" | undefined;
                sync?: boolean | undefined;
            };
        };
    })[U_4] extends import("api-typify").EndpointTypes ? ({
        "/v1/user/me": {
            res: undefined;
            req: Partial<Pick<{
                id: string;
                email: string;
                name: string;
                avatar: string;
                githubId: string;
            }, "name" | "avatar">>;
        };
    } & {
        "/v1/projects/{id}/admin/users/{userID}": {
            res: undefined;
            req: {
                role?: "admin" | "reviewer" | "viewer" | undefined;
                sync?: boolean | undefined;
            };
        };
        "/v1/projects/{id}/admin": {
            res: undefined;
            req: {
                name?: string | undefined;
                snapshotThreshold?: number | undefined;
            };
        };
    } & {
        "/v1/teams/{teamID}/admin": {
            res: undefined;
            req: Pick<{
                id: string;
                createdAt: string;
                updatedAt: string;
                type: "github" | "gitlab" | "bitbucket" | "user";
                name: string;
                billingStatus: "active" | "incomplete" | "incomplete_expired" | "past_due" | "canceled" | "unpaid" | "not_created";
                url?: string | undefined;
                role?: "admin" | "member" | "accountant" | "owner" | undefined;
                referrals?: number | undefined;
                avatarURL?: string | undefined;
                customerID?: string | undefined;
                planID?: string | undefined;
                snapshotLimit?: number | undefined;
                billingAccountID?: string | undefined;
                hasInstall?: boolean | undefined;
            }, "name" | "url" | "avatarURL">;
        };
        "/v1/teams/{teamID}/admin/users/{userID}": {
            res: undefined;
            req: {
                role?: "admin" | "member" | "accountant" | "owner" | undefined;
                sync?: boolean | undefined;
            };
        };
    })[U_4]["res"] : unknown>;
};
export type APIType = ReturnType<typeof createAPI>;
export declare function API({ endpoint, token, }: {
    endpoint: string;
    token: string;
}): APIType;
export {};
//# sourceMappingURL=api.d.ts.map
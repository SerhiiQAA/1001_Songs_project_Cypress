var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// src/snapshot.ts
import { getEnvConfig } from "@pixeleye/cli-config";
import {
  snapshot
} from "@pixeleye/cli-booth";
import { createRequire } from "node:module";
var rrwebScript;
try {
  rrwebScript = __require.resolve("rrweb-snapshot/dist/rrweb-snapshot.min.js");
} catch {
  const require2 = createRequire(import.meta.url);
  rrwebScript = require2.resolve("rrweb-snapshot/dist/rrweb-snapshot.min.js");
}
async function pixeleyeSnapshot(page, options) {
  if (!page) {
    throw new Error("No playwright page object provided");
  }
  if (!options.name) {
    throw new Error("No name provided");
  }
  if (!process.env.PIXELEYE_RUNNING)
    return console.log("Skipping snapshot as Pixeleye exec is not running");
  const config = await getEnvConfig();
  const opts = {
    endpoint: `http://localhost:${// eslint-disable-next-line turbo/no-undeclared-env-vars
    process.env.PIXELEYE_BOOTH_PORT}`
  };
  const css = config.css || options.css ? `${config.css ?? ""}
${options.css ?? ""}` : void 0;
  await page.addScriptTag({
    path: rrwebScript
  });
  if (options.waitForSelector) {
    options.waitForSelectors = [
      options.waitForSelector,
      ...options.waitForSelectors ?? []
    ];
  }
  if (options.waitForSelectors) {
    for (const selector of options.waitForSelectors) {
      await page.waitForSelector(selector);
    }
  }
  const domSnapshot = await page.evaluate(() => {
    const r = window.rrwebSnapshot;
    return r.snapshot(document, {
      recordCanvas: true,
      inlineImages: true,
      inlineStylesheet: true
    });
  });
  if (!domSnapshot) {
    throw new Error("No DOM snapshot available");
  }
  const snap = {
    devices: options.devices ?? config.devices ?? [],
    name: options.name,
    variant: options.variant,
    serializedDom: domSnapshot,
    fullPage: options.fullPage,
    selector: options.selector,
    maskSelectors: options.maskSelectors,
    maskColor: options.maskColor,
    url: page.url(),
    wait: options.wait,
    waitForSelectors: options.waitForSelectors,
    scale: options.scale || config.scale,
    css
  };
  const res = await snapshot(opts, snap).catch((err) => {
    console.log("Error uploading snapshot", err);
    throw err;
  });
  if (res.status < 200 || res.status >= 300) {
    const data = await res.json();
    throw new Error("Error uploading snapshot, err: " + JSON.stringify(data));
  }
}
export {
  pixeleyeSnapshot
};
